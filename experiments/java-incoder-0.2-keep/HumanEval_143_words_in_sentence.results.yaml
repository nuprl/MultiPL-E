name: HumanEval_143_words_in_sentence
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else {\n                boolean isPrime = true;\n                for (int\
    \ i = 2; i <= Math.sqrt(length); i++) {\n                    if (length % i ==\
    \ 0) {\n                        isPrime = false;\n                        break;\n\
    \                    }\n                }\n                if (isPrime) {\n  \
    \                  result.add(word);\n                }\n            }\n     \
    \   }\n        return result.stream().collect(Collectors.joining(\" \"));\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2jfd6ruh.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzu8jxcgi.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) continue;\n            if (len == 2 && word.charAt(0)\
    \ == word.charAt(1)) {\n                result.add(word);\n                continue;\n\
    \            }\n            boolean isPrime = true;\n            for (int i =\
    \ 2; i <= Math.sqrt(len); i++) {\n                if (len % i == 0) {\n      \
    \              isPrime = false;\n                    break;\n                }\n\
    \            }\n            if (isPrime) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"e\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"e\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    e\") && word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    e\") && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 4 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"a\") && word.endsWith(\"e\") && word.startsWith(\"a\"\
    ) && word.endsWith(\"e\")) {\n                result.add(word);\n            }\
    \ else if (len == 4 && word.startsWith(\"a\") && word.endsWith(\"e\") && word.startsWith(\"\
    e\") && word.endsWith(\"a\") && word.endsWith(\"e\") && word.startsWith(\"a\"\
    ) && word.endsWith(\"e\")) {\n                result.add(word);\n            }\
    \ else if (len == 4 && word.startsWith(\"e\") && word.endsWith(\"e\") && word.startsWith(\"\
    a\") && word.endsWith(\"e\") && word.startsWith(\"e\") && word.endsWith(\"a\"\
    ) && word.endsWith(\"e\")) {\n                result.add(word);\n            }\
    \ else if (len == 4 && word.startsWith(\"e\") && word.endsWith(\"e\") && word.startsWith(\"\
    e\") && word.endsWith(\"e\") && word.startsWith(\"a\") && word.endsWith(\"e\"\
    ) && word.startsWith(\"a\") && \n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpszk4kh76.java:53: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpszk4kh76.java:54: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpszk4kh76.java:54: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpszk4kh76.java:54:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpszk4kh76.java:54: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpszk4kh76.java:54:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpszk4kh76.java:64: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4eu6lc65.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ewwnqps.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvlrgtis6.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.charAt(0) == 'a' && word.charAt(1) == 'm') continue;\n           \
    \ if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'i') continue;\n\
    \            if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'n') continue;\n\
    \            if (len == 2 && word.charAt(0) == 'e' && word.charAt(1) == 'i') continue;\n\
    \            if (len == 2 && word.charAt(0) == 'e' && word.charAt(1) == 'o') continue;\n\
    \            if (len == 2 && word.charAt(0) == 'i' && word.charAt(1) == 'n') continue;\n\
    \            if (len == 2 && word.charAt(0) == 'o' && word.charAt(1) == 't') continue;\n\
    \            if (len == 2 && word.charAt(0) == 'u' && word.charAt(1) == 't') continue;\n\
    \            if (len == 3 && word.charAt(0) == 'a' && word.charAt(1) == 'm' &&\
    \ word.charAt(2) == 'i') continue;\n            if (len == 3 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'i' && word.charAt(2) == 'n') continue;\n      \
    \      if (len == 3 && word.charAt(0) == 'a' && word.charAt(1) == 'n' && word.charAt(2)\
    \ == 'g') continue;\n            if (len == 3 && word.charAt(0) == 'e' && word.charAt(1)\
    \ == 'i' && word.charAt(2) == 'i') continue;\n            if (len == 3 && word.charAt(0)\
    \ == 'e' && word.charAt(1) == 'i' && word.charAt(2) == 'o') continue;\n      \
    \      if (len == 3 && word.charAt(0) == 'i' && word.charAt(1) == 'n' && word.charAt(2)\
    \ == 'm') continue;\n            if (len == 3 && word.charAt(0) == 'o' && word.charAt(1)\
    \ == 't' && word.charAt(2) == 'm') continue;\n            if (len == 3 && word.charAt(0)\
    \ == 'u' && word.charAt(1) == 't' && word.charAt(2) == 'm') continue;\n      \
    \      if (len == 4 && word.charAt(0) == 'a' && word.charAt(1) == 'm' && word.charAt(2)\
    \ == 'i' && word.charAt(3) == 'g') continue;\n            if (len == 4 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'i' && word.charAt(2) == 'n' && word.charAt(3) ==\
    \ 'g') continue;\n            if (len == 4 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'n' && word.charAt(2) == 'g' && word.charAt(3) == 'i') continue;\n      \
    \      if (len == 4 && word.charAt(0) == 'e' && word.charAt(1) == 'i' && word.charAt(2)\
    \ == 'i' && word.charAt(3) == 'g') continue;\n            if (len == 4 && word.charAt(0)\
    \ == 'e' && word.charAt(1) == 'i' && word.charAt(2) == '\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkpuditk4.java:49: error: illegal line end in character literal\n\
    \            if (len == 4 && word.charAt(0) == 'e' && word.charAt(1) == 'i' &&\
    \ word.charAt(2) == '\n                                                      \
    \                                          ^\n/tmp/tmpkpuditk4.java:50: error:\
    \ illegal start of statement\n    }\n    ^\n/tmp/tmpkpuditk4.java:51: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpkpuditk4.java:51:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpkpuditk4.java:51: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpkpuditk4.java:51: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpkpuditk4.java:51: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpkpuditk4.java:61: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else {\n                for (int\
    \ i = 2; i < length && word.charAt(i) == word.charAt(i - 1); i++) {\n        \
    \            result.add(word);\n                }\n            }\n        }\n\
    \        return result.stream().collect(Collectors.joining(\" \"));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp60w_8cub.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.charAt(0) == word.charAt(1)) {\n                result.add(word);\n\
    \                continue;\n            }\n            if (len == 2 && word.charAt(0)\
    \ == word.charAt(1)) {\n                result.add(word);\n                continue;\n\
    \            }\n            if (len == 3 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n   \
    \             continue;\n            }\n            if (len == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \                continue;\n            }\n            if (len == 4 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5))\
    \ {\n                result.add(word);\n                continue;\n          \
    \  }\n            if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \                continue;\n            }\n            if (len == 5 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7)) {\n                result.add(word);\n\
    \                continue;\n            }\n            if (len == 5 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7)) {\n                result.add(word);\n\
    \                continue;\n            }\n            if (len == 6 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)) {\n\
    \                result.add(word);\n                continue;\n            }\n\
    \            if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                result.add(word);\n\
    \                continue;\n            }\n            if (len == 7 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11)) {\n                result.add(word);\n                continue;\n\
    \            }\n            if (len == 7 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprrh3ijc9.java:74: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmprrh3ijc9.java:74: error: ')' expected\n    }\n     ^\n/tmp/tmprrh3ijc9.java:75:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmprrh3ijc9.java:75: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmprrh3ijc9.java:75: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmprrh3ijc9.java:75: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmprrh3ijc9.java:85: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzfe4j19d.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.equals(\"a\")) continue;\n            if (length == 2 && word.equals(\"\
    b\")) continue;\n            if (length == 2 && word.equals(\"c\")) continue;\n\
    \            if (length == 2 && word.equals(\"d\")) continue;\n            if\
    \ (length == 2 && word.equals(\"e\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"f\")) continue;\n            if (length == 2 && word.equals(\"\
    g\")) continue;\n            if (length == 2 && word.equals(\"h\")) continue;\n\
    \            if (length == 2 && word.equals(\"i\")) continue;\n            if\
    \ (length == 2 && word.equals(\"j\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"k\")) continue;\n            if (length == 2 && word.equals(\"\
    l\")) continue;\n            if (length == 2 && word.equals(\"m\")) continue;\n\
    \            if (length == 2 && word.equals(\"n\")) continue;\n            if\
    \ (length == 2 && word.equals(\"o\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"p\")) continue;\n            if (length == 2 && word.equals(\"\
    q\")) continue;\n            if (length == 2 && word.equals(\"r\")) continue;\n\
    \            if (length == 2 && word.equals(\"s\")) continue;\n            if\
    \ (length == 2 && word.equals(\"t\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"u\")) continue;\n            if (length == 2 && word.equals(\"\
    v\")) continue;\n            if (length == 2 && word.equals(\"w\")) continue;\n\
    \            if (length == 2 && word.equals(\"x\")) continue;\n            if\
    \ (length == 2 && word.equals(\"y\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"z\")) continue;\n            if (length == 3 && word.equals(\"\
    aa\")) continue;\n            if (length == 3 && word.equals(\"ab\")) continue;\n\
    \            if (length == 3 && word.equals(\"ac\")) continue;\n            if\
    \ (length == 3 && word.equals(\"ad\")) continue;\n            if (length == 3\
    \ && word.equals(\"ae\")) continue;\n            if (length == 3 && word.equals(\"\
    af\")) continue;\n            if (length == 3 && word.equals(\"ag\")) continue;\n\
    \            if (length == 3 && word.equals(\"ah\")) continue;\n            if\
    \ (length == 3 && word.equals(\"ai\")) continue;\n            if (length == 3\
    \ && word.equals(\"aj\")) continue;\n            if (length == 3 && word.equals(\"\
    ak\")) continue;\n            if (length == 3 && word.equals(\"al\")) continue;\n\
    \            if (length == 3 && word.equals(\"am\")) continue;\n            if\
    \ (length == 3 && word.equals(\"an\")) continue;\n            if (length\n   \
    \ }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp22kaowhr.java:69: error: ')' expected\n            if (length\n\
    \                      ^\n/tmp/tmp22kaowhr.java:70: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmp22kaowhr.java:71: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp22kaowhr.java:71:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp22kaowhr.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp22kaowhr.java:71: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp22kaowhr.java:71: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp22kaowhr.java:81: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.equals(\"a\")) continue;\n            if (length == 2 && word.equals(\"\
    e\")) continue;\n            if (length == 2 && word.equals(\"i\")) continue;\n\
    \            if (length == 2 && word.equals(\"o\")) continue;\n            if\
    \ (length == 2 && word.equals(\"u\")) continue;\n            if (length == 3 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 3 && word.equals(\"\
    e\")) continue;\n            if (length == 3 && word.equals(\"i\")) continue;\n\
    \            if (length == 3 && word.equals(\"o\")) continue;\n            if\
    \ (length == 3 && word.equals(\"u\")) continue;\n            if (length == 4 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 4 && word.equals(\"\
    e\")) continue;\n            if (length == 4 && word.equals(\"i\")) continue;\n\
    \            if (length == 4 && word.equals(\"o\")) continue;\n            if\
    \ (length == 4 && word.equals(\"u\")) continue;\n            if (length == 5 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 5 && word.equals(\"\
    e\")) continue;\n            if (length == 5 && word.equals(\"i\")) continue;\n\
    \            if (length == 5 && word.equals(\"o\")) continue;\n            if\
    \ (length == 5 && word.equals(\"u\")) continue;\n            if (length == 6 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 6 && word.equals(\"\
    e\")) continue;\n            if (length == 6 && word.equals(\"i\")) continue;\n\
    \            if (length == 6 && word.equals(\"o\")) continue;\n            if\
    \ (length == 6 && word.equals(\"u\")) continue;\n            if (length == 7 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 7 && word.equals(\"\
    e\")) continue;\n            if (length == 7 && word.equals(\"i\")) continue;\n\
    \            if (length == 7 && word.equals(\"o\")) continue;\n            if\
    \ (length == 7 && word.equals(\"u\")) continue;\n            if (length == 8 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 8 && word.equals(\"\
    e\")) continue;\n            if (length == 8 && word.equals(\"i\")) continue;\n\
    \            if (length == 8 && word.equals(\"o\")) continue;\n            if\
    \ (length == 8 && word.equals(\"u\")) continue;\n            if (length == 9 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 9 && word.equals(\"\
    e\")) continue;\n            if (length == 9 && word.equals(\"i\")) continue;\n\
    \            if (length == 9 && word.equals(\"o\")) continue;\n            if\
    \ (length == 9 && word.equals(\"u\")) continue;\n            if (length == 10\
    \ && \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqwlx8xr2.java:70: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpqwlx8xr2.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpqwlx8xr2.java:71: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpqwlx8xr2.java:71:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpqwlx8xr2.java:71: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpqwlx8xr2.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpqwlx8xr2.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp14dfx_13.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return String.join(\" \"\
    , result);\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdad7fs2q.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\n\
    \            else if (len == 2 && word.charAt(0) == word.charAt(1)) {\n      \
    \          result.add(word);\n            }\n            else if (len == 3 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n  \
    \              result.add(word);\n            }\n            else if (len == 4\
    \ && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5)) {\n                result.add(word);\n            }\n   \
    \         else if (len == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                result.add(word);\n            }\n            else if (len\
    \ == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9)) {\n                result.add(word);\n            }\n   \
    \         else if (len == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11)) {\n\
    \                result.add(word);\n            }\n            else if (len ==\
    \ 8 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13)) {\n                result.add(word);\n            }\n     \
    \       else if (len == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) {\n\
    \                result.add(word);\n            }\n            else if (len ==\
    \ 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp04hb_n3v.java:55: error: <identifier> expected\n            else\
    \ if (len == 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.\n           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                  ^\n/tmp/tmp04hb_n3v.java:57: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp04hb_n3v.java:57:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp04hb_n3v.java:57: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp04hb_n3v.java:57:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp04hb_n3v.java:57: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp04hb_n3v.java:67: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'a') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'i') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'u') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'e' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'e' && word.charAt(1)\
    \ == 'i') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'e' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'e' && word.charAt(1)\
    \ == 'u') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'i' && word.charAt(1) == 'i') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'i' && word.charAt(1)\
    \ == 'o') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'i' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'o' && word.charAt(1)\
    \ == 'o') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'o' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'u' && word.charAt(1)\
    \ == 'u') {\n                result.add(word);\n            } else if (length\
    \ == 3 && word.charAt(0) == 'a' && word.charAt(1) == 'a' && word.charAt(2) ==\
    \ 'a') {\n                result.add(word);\n            } else if (length ==\
    \ 3 && word.charAt(0) == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'e')\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'i') {\n\
    \                result.add(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'o') {\n              \
    \  result.add(word);\n            } else if (length == 3 && word.charAt(0) ==\
    \ 'a' && \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmu8gqsmh.java:69: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpmu8gqsmh.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpmu8gqsmh.java:70: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpmu8gqsmh.java:70:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpmu8gqsmh.java:70: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpmu8gqsmh.java:70:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpmu8gqsmh.java:80: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (isPrime(length)) {\n                result.add(word);\n     \
    \       }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps_pgvugz.java:28: error: cannot find symbol\n            if (isPrime(length))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len % 2 == 0) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().distinct().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnacmfa5f.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnvpwxysn.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkqods4ry.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp723zu0c2.java:49: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp723zu0c2.java:49: error: ')' expected\n    }\n     ^\n/tmp/tmp723zu0c2.java:50:\
    \ error: ')' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp723zu0c2.java:50: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp723zu0c2.java:50:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp723zu0c2.java:50: error: variable declaration not\
    \ allowed here\n    public static void main(String[] args) {\n               \
    \        ^\n/tmp/tmp723zu0c2.java:50: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp723zu0c2.java:60:\
    \ error: reached end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else {\n                for (int i = 2; i <= Math.sqrt(length); i++) {\n\
    \                    if (length % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqgzcvo8x.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwqn1wa89.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3xh_sj56.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.equals(\"a\") || word.equals(\"e\") || word.equals(\"\
    i\") || word.equals(\"o\") || word.equals(\"u\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.equals(\"a\") && word.equals(\"e\"\
    ) || word.equals(\"i\") && word.equals(\"o\") || word.equals(\"u\") && word.equals(\"\
    y\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.equals(\"a\") && word.equals(\"e\") && word.equals(\"i\") || word.equals(\"\
    o\") && word.equals(\"u\") && word.equals(\"y\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.equals(\"a\") && word.equals(\"e\"\
    ) && word.equals(\"i\") && word.equals(\"o\") || word.equals(\"u\") && word.equals(\"\
    y\") && word.equals(\"s\")) {\n                result.add(word);\n           \
    \ } else if (length == 5 && word.equals(\"a\") && word.equals(\"e\") && word.equals(\"\
    i\") && word.equals(\"o\") && word.equals(\"u\") && word.equals(\"y\") && word.equals(\"\
    s\")) {\n                result.add(word);\n            } else if (length == 7\
    \ && word.equals(\"a\") && word.equals(\"e\") && word.equals(\"i\") && word.equals(\"\
    o\") && word.equals(\"u\") && word.equals(\"y\") && word.equals(\"s\") && word.equals(\"\
    w\")) {\n                result.add(word);\n            } else if (length == 7\
    \ && word.equals(\"a\") && word.equals(\"e\") && word.equals(\"i\") && word.equals(\"\
    o\") && word.equals(\"u\") && word.equals(\"y\") && word.equals(\"s\") && word.equals(\"\
    w\") && word.equals(\"h\")) {\n                result.add(word);\n           \
    \ } else if (length == 7 && word.equals(\"a\") && word.equals(\"e\") && word.equals(\"\
    i\") && word.equals(\"o\") && word.equals(\"u\") && word.equals(\"y\") && word.equals(\"\
    s\") && word.equals(\"w\") && word.equals(\"h\") && word.equals(\"m\")) {\n  \
    \              result.add(word);\n            } else if (length == 7 && word.equals(\"\
    a\") && word.equals(\"e\") && word.equals(\"i\") && word.equals(\"o\") && word.equals(\"\
    u\") && word.equals(\"y\") && word.equals(\"s\") && word.equals(\"w\") \n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyow_qjxi.java:46: error: ')' expected\n            } else if (length\
    \ == 7 && word.equals(\"a\") && word.equals(\"e\") && word.equals(\"i\") && word.equals(\"\
    o\") && word.equals(\"u\") && word.equals(\"y\") && word.equals(\"s\") && word.equals(\"\
    w\") \n                                                                      \
    \                                                                            \
    \                                                ^\n/tmp/tmpyow_qjxi.java:47:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpyow_qjxi.java:48: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n/tmp/tmpyow_qjxi.java:48: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n           ^\n/tmp/tmpyow_qjxi.java:48: error:\
    \ ';' expected\n    public static void main(String[] args) {\n               \
    \  ^\n/tmp/tmpyow_qjxi.java:48: error: '.class' expected\n    public static void\
    \ main(String[] args) {\n                                     ^\n/tmp/tmpyow_qjxi.java:48:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpyow_qjxi.java:58: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            boolean\
    \ isPrime = true;\n            for (int i = 2; i <= Math.sqrt(length); i++) {\n\
    \                if (length % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                result.add(word);\n            }\n        }\n \
    \       return result.stream().collect(Collectors.joining(\" \"));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp36lr_1ps.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa3zab1bo.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph2cz5r9g.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpszvcmld3.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf06jcgku.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int length = word.length();\n            if (length == 1) {\n\
    \                sb.append(word);\n            } else {\n                for (int\
    \ i = 2; i <= Math.sqrt(length); i++) {\n                    if (length % i ==\
    \ 0) {\n                        sb.append(word);\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sb.toString();\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjd1djy39.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_tb2vmw2.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"e\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\")) {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.startsWith(\"e\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    e\")) {\n                result.add(word);\n            } else if (len == 4 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 4 && word.startsWith(\"e\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 4 &&\
    \ word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 5 && word.startsWith(\"a\") && word.endsWith(\"\
    e\")) {\n                result.add(word);\n            } else if (len == 5 &&\
    \ word.startsWith(\"e\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 5 && word.startsWith(\"e\") && word.endsWith(\"\
    e\")) {\n                result.add(word);\n            } else if (len == 6 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 6 && word.startsWith(\"e\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 6 &&\
    \ word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 7 && word.startsWith(\"a\") && word.endsWith(\"\
    e\")) {\n                result.add(word);\n            } else if (len == 7 &&\
    \ word.startsWith(\"e\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 7 && word.startsWith(\"e\") && word.endsWith(\"\
    e\")) {\n                result.add(word);\n            } else if (len == 8 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_mptsavf.java:68: error: unclosed string literal\n            }\
    \ else if (len == 8 && word.startsWith(\"a\") && word.endsWith(\"\n          \
    \                                                               ^\n/tmp/tmp_mptsavf.java:68:\
    \ error: ')' expected\n            } else if (len == 8 && word.startsWith(\"a\"\
    ) && word.endsWith(\"\n                                                      \
    \                    ^\n/tmp/tmp_mptsavf.java:70: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp_mptsavf.java:70:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp_mptsavf.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp_mptsavf.java:70:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp_mptsavf.java:70: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp_mptsavf.java:80: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.equals(\"a\")) continue;\n            if (length == 2 && word.equals(\"\
    b\")) continue;\n            if (length == 2 && word.equals(\"c\")) continue;\n\
    \            if (length == 2 && word.equals(\"d\")) continue;\n            if\
    \ (length == 2 && word.equals(\"e\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"f\")) continue;\n            if (length == 2 && word.equals(\"\
    g\")) continue;\n            if (length == 2 && word.equals(\"h\")) continue;\n\
    \            if (length == 2 && word.equals(\"i\")) continue;\n            if\
    \ (length == 2 && word.equals(\"j\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"k\")) continue;\n            if (length == 2 && word.equals(\"\
    l\")) continue;\n            if (length == 2 && word.equals(\"m\")) continue;\n\
    \            if (length == 2 && word.equals(\"n\")) continue;\n            if\
    \ (length == 2 && word.equals(\"o\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"p\")) continue;\n            if (length == 2 && word.equals(\"\
    q\")) continue;\n            if (length == 2 && word.equals(\"r\")) continue;\n\
    \            if (length == 2 && word.equals(\"s\")) continue;\n            if\
    \ (length == 2 && word.equals(\"t\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"u\")) continue;\n            if (length == 2 && word.equals(\"\
    v\")) continue;\n            if (length == 2 && word.equals(\"w\")) continue;\n\
    \            if (length == 2 && word.equals(\"x\")) continue;\n            if\
    \ (length == 2 && word.equals(\"y\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"z\")) continue;\n            if (length == 3 && word.equals(\"\
    aa\")) continue;\n            if (length == 3 && word.equals(\"ab\")) continue;\n\
    \            if (length == 3 && word.equals(\"ac\")) continue;\n            if\
    \ (length == 3 && word.equals(\"ad\")) continue;\n            if (length == 3\
    \ && word.equals(\"ae\")) continue;\n            if (length == 3 && word.equals(\"\
    af\")) continue;\n            if (length == 3 && word.equals(\"ag\")) continue;\n\
    \            if (length == 3 && word.equals(\"ah\")) continue;\n            if\
    \ (length == 3 && word.equals(\"ai\")) continue;\n            if (length == 3\
    \ && word.equals(\"aj\")) continue;\n            if (length == 3 && word.equals(\"\
    ak\")) continue;\n            if (length == 3 && word.equals(\"al\")) continue;\n\
    \            if (length == 3 && word.equals(\"am\")) continue;\n            if\
    \ (length == 3 && word.equals(\"an\")) continue;\n            if (length\n   \
    \ }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjkxyo_9e.java:69: error: ')' expected\n            if (length\n\
    \                      ^\n/tmp/tmpjkxyo_9e.java:70: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpjkxyo_9e.java:71: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpjkxyo_9e.java:71:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpjkxyo_9e.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpjkxyo_9e.java:71: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpjkxyo_9e.java:71: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpjkxyo_9e.java:81: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len > 1 && len % 2 == 0) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfbfo4k3s.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqj5u8aqh.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 3 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 5 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 6 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 8 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 9 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 11 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 12 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 14 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 15 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 17 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 18 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 20 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 21 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 23 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 24 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 25 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 26 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 27 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 28 && isPrime(length)) {\n                result.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5eh4nw6z.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp5eh4nw6z.java:84: error: ';' expected\n    }\n     ^\n/tmp/tmp5eh4nw6z.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp5eh4nw6z.java:85: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp5eh4nw6z.java:85: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp5eh4nw6z.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp5eh4nw6z.java:95: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmp5eh4nw6z.java:96: error: reached end of file while parsing\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 3 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 5 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 6 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 8 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 9 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 11 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 12 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 14 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 15 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 17 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 18 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 20 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 21 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 23 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 24 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 25 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 26 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 27 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 28 && isPrime(length)) {\n                result.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4eaxo63c.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp4eaxo63c.java:84: error: ';' expected\n    }\n     ^\n/tmp/tmp4eaxo63c.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp4eaxo63c.java:85: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp4eaxo63c.java:85: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp4eaxo63c.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp4eaxo63c.java:95: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmp4eaxo63c.java:96: error: reached end of file while parsing\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp538lmdk.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoojg9ymw.java:49: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpoojg9ymw.java:49: error: ')' expected\n    }\n     ^\n/tmp/tmpoojg9ymw.java:50:\
    \ error: ')' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpoojg9ymw.java:50: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpoojg9ymw.java:50:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpoojg9ymw.java:50: error: variable declaration not\
    \ allowed here\n    public static void main(String[] args) {\n               \
    \        ^\n/tmp/tmpoojg9ymw.java:50: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpoojg9ymw.java:60:\
    \ error: reached end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (isPrime(length)) {\n                result.add(word);\n     \
    \       }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp64m8osdv.java:28: error: cannot find symbol\n            if (isPrime(length))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 11 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))\
    \ && Character.isLetter(word.charAt(8)) && Character.isLetter(word.charAt(9))\
    \ && Character.isLetter(word.charAt(10))) {\n                result.add(word);\n\
    \            } else if (length == 13 && Character.isLetter(word.charAt(0)) &&\
    \ Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)) &&\
    \ Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)) &&\
    \ Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)) &&\
    \ Character.isLetter(word.charAt(7)) && Character.isLetter(word.charAt(8)) &&\
    \ Character.isLetter(word.charAt(9)) && Character.isLetter(word.charAt(10)) &&\
    \ Character.isLetter(word.charAt(11)) && Character.isLetter(word.charAt(12)))\
    \ {\n                result.add(word);\n            } else if (length == 17 &&\
    \ Character.isLetter(word.charAt(0)\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwtm8y4t5.java:44: error: ')' expected\n            } else if (length\
    \ == 17 && Character.isLetter(word.charAt(0)\n                               \
    \                                         ^\n/tmp/tmpwtm8y4t5.java:46: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n/tmp/tmpwtm8y4t5.java:46: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpwtm8y4t5.java:46: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpwtm8y4t5.java:46: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpwtm8y4t5.java:46:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpwtm8y4t5.java:56: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 3 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 5 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 6 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 8 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 9 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 11 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 12 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 14 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 15 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 17 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 18 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 20 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 21 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 23 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 24 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 25 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 26 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 27 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 28 && isPrime(length)) {\n                result.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8i4po_6c.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp8i4po_6c.java:84: error: ';' expected\n    }\n     ^\n/tmp/tmp8i4po_6c.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp8i4po_6c.java:85: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp8i4po_6c.java:85: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp8i4po_6c.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp8i4po_6c.java:95: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmp8i4po_6c.java:96: error: reached end of file while parsing\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len > 1 && len % 2 == 0) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj0fp196c.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplmsv4nd1.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptic7an1q.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return String.join(\" \"\
    , result);\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuwop5kqw.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqjezg8ee.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else {\n                boolean\
    \ isPrime = true;\n                for (int i = 2; i < length; i++) {\n      \
    \              if (length % i == 0) {\n                        isPrime = false;\n\
    \                        break;\n                    }\n                }\n  \
    \              if (isPrime) {\n                    result.add(word);\n       \
    \         }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt08a_4s7.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"A\") && word.endsWith(\"Z\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"aa\") && word.endsWith(\"\
    zz\")) {\n                result.add(word);\n            } else if (length ==\
    \ 3 && word.startsWith(\"AA\") && word.endsWith(\"ZZ\")) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.startsWith(\"aaa\") && word.endsWith(\"\
    zzz\")) {\n                result.add(word);\n            } else if (length ==\
    \ 4 && word.startsWith(\"AAA\") && word.endsWith(\"ZZZ\")) {\n               \
    \ result.add(word);\n            } else if (length == 5 && word.startsWith(\"\
    aaaa\") && word.endsWith(\"zzzz\")) {\n                result.add(word);\n   \
    \         } else if (length == 5 && word.startsWith(\"AAAA\") && word.endsWith(\"\
    ZZZZ\")) {\n                result.add(word);\n            } else if (length ==\
    \ 6 && word.startsWith(\"aaaaa\") && word.endsWith(\"zzzzz\")) {\n           \
    \     result.add(word);\n            } else if (length == 6 && word.startsWith(\"\
    AAAAA\") && word.endsWith(\"ZZZZZ\")) {\n                result.add(word);\n \
    \           } else if (length == 7 && word.startsWith(\"aaaaaa\") && word.endsWith(\"\
    zzzzzz\")) {\n                result.add(word);\n            } else if (length\
    \ == 7 && word.startsWith(\"AAAAAA\") && word.endsWith(\"ZZZZZZ\")) {\n      \
    \          result.add(word);\n            } else if (length == 8 && word.startsWith(\"\
    aaaaaaa\") && word.endsWith(\"zzzzzzz\")) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.startsWith(\"AAAAAAA\") && word.endsWith(\"\
    ZZZZZZZ\")) {\n                result.add(word);\n            } else if (length\
    \ == 9 && word.startsWith(\"aaaaaaa\") && word.endsWith(\"zzzzzzzz\")) {\n   \
    \             result.add(word);\n            } else if (length == 9 && word.startsWith(\"\
    AAAAAAA\") && word.endsWith(\"ZZZZZZZZ\")) {\n                result.add(word);\n\
    \            } else if (length == 10 && word.startsWith(\"aaaaaaaa\") && word.endsWith(\"\
    zzzzzzzzz\")) {\n                result.add(word);\n            } else if (length\
    \ == 10 && word.startsWith(\"AAAAAAAA\") && word.endsWith(\"ZZZZZZZZZ\")) {\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmgy5rm0m.java:66: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpmgy5rm0m.java:66: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpmgy5rm0m.java:66: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpmgy5rm0m.java:66: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpmgy5rm0m.java:66: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpmgy5rm0m.java:76:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppy8mebnc.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else {\n                for (int i = 2; i <= Math.sqrt(len); i++) {\n      \
    \              if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn90olp2a.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppby9qpvt.java:49: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmppby9qpvt.java:49: error: ')' expected\n    }\n     ^\n/tmp/tmppby9qpvt.java:50:\
    \ error: ')' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmppby9qpvt.java:50: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmppby9qpvt.java:50:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmppby9qpvt.java:50: error: variable declaration not\
    \ allowed here\n    public static void main(String[] args) {\n               \
    \        ^\n/tmp/tmppby9qpvt.java:50: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmppby9qpvt.java:60:\
    \ error: reached end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn_z66i13.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'm')\
    \ {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'n') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'o') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'i') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'i') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'u') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'i') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'u') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'i') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'u') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'i') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpat8nti33.java:70: error: <identifier> expected\n            } else\
    \ if (length == 2 && word.charAt(0) == 'a' && word.\n                        \
    \                                            ^\n/tmp/tmpat8nti33.java:72: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n/tmp/tmpat8nti33.java:72: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpat8nti33.java:72: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpat8nti33.java:72: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpat8nti33.java:72:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpat8nti33.java:82: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            boolean isPrime\
    \ = true;\n            for (int i = 2; i < len; i++) {\n                if (len\
    \ % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result.add(word);\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 3 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 4 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 5 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 5 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 6 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 7 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 8 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 10 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 11 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 11 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 12 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 12 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 13 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 13 &&\
    \ Character.isLetter(\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkbfa1gvy.java:77: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpkbfa1gvy.java:77: error: ')' expected\n    }\n     ^\n/tmp/tmpkbfa1gvy.java:78:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpkbfa1gvy.java:78: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpkbfa1gvy.java:78: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpkbfa1gvy.java:78: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpkbfa1gvy.java:88: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ continue;\n            if (length == 4 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n\
    \            if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ continue;\n            if (length == 6 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9)) continue;\n         \
    \   if (length == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11)) continue;\n       \
    \     if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2) ==\
    \ word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) continue;\n            if (length == 9 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(14) == word.charAt(15)) continue;\n            if (length ==\
    \ 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.charAt(16) ==\
    \ word.charAt(17)) continue;\n            if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5z20qaka.java:39: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp5z20qaka.java:39: error: ')' expected\n    }\n     ^\n/tmp/tmp5z20qaka.java:40:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp5z20qaka.java:40: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp5z20qaka.java:40: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp5z20qaka.java:40: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp5z20qaka.java:50: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 3 && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 4 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2))) {\n                result.add(word);\n \
    \           } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4))) {\n                result.add(word);\n \
    \           } else if (length == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 8 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (length == 10 &&\
    \ Character.isLetter(\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppohfiykh.java:51: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmppohfiykh.java:51: error: ')' expected\n    }\n     ^\n/tmp/tmppohfiykh.java:52:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmppohfiykh.java:52: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmppohfiykh.java:52: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmppohfiykh.java:52: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmppohfiykh.java:62: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptvxb_iay.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            int len = word.length();\n            if (len % 2 ==\
    \ 0) {\n                for (int i = 0; i < (len / 2); i++) {\n              \
    \      result.append(word.charAt(i));\n                }\n            } else {\n\
    \                for (int i = 0; i < (len / 2); i++) {\n                    result.append(word.charAt(i));\n\
    \                }\n                result.append(word.charAt(len / 2));\n   \
    \         }\n        }\n        return result.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpad4b_iz5.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (len == 3 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (len == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (len == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (len == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8wd31xdr.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp8wd31xdr.java:52: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmp8wd31xdr.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmp8wd31xdr.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmp8wd31xdr.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp8wd31xdr.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphj4_xpnm.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 3 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 5 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 6 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 8 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 9 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 11 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 12 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 14 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 15 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 17 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 18 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 20 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 21 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 23 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 24 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 25 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 26 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 27 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 28 && isPrime(length)) {\n                result.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt05am8eb.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpt05am8eb.java:84: error: ';' expected\n    }\n     ^\n/tmp/tmpt05am8eb.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpt05am8eb.java:85: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpt05am8eb.java:85: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpt05am8eb.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpt05am8eb.java:95: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmpt05am8eb.java:96: error: reached end of file while parsing\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (len == 3 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (len == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6))) {\n                result.add(word);\n\
    \            } else if (len == 8 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (len == 9 && Character.isLet\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpswmtnnwf.java:50: error: ')' expected\n            } else if (len\
    \ == 9 && Character.isLet\n                                                  ^\n\
    /tmp/tmpswmtnnwf.java:51: error: illegal start of statement\n    }\n    ^\n/tmp/tmpswmtnnwf.java:52:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpswmtnnwf.java:52: error: illegal start of expression\n   \
    \ public static void main(String[] args) {\n           ^\n/tmp/tmpswmtnnwf.java:52:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpswmtnnwf.java:52: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpswmtnnwf.java:52:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpswmtnnwf.java:62: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6tkar6ub.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp931xb5aa.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.equals(\"a\")) continue;\n            if (length == 2 && word.equals(\"\
    e\")) continue;\n            if (length == 2 && word.equals(\"i\")) continue;\n\
    \            if (length == 2 && word.equals(\"o\")) continue;\n            if\
    \ (length == 2 && word.equals(\"u\")) continue;\n            if (length == 3 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 3 && word.equals(\"\
    e\")) continue;\n            if (length == 3 && word.equals(\"i\")) continue;\n\
    \            if (length == 3 && word.equals(\"o\")) continue;\n            if\
    \ (length == 3 && word.equals(\"u\")) continue;\n            if (length == 4 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 4 && word.equals(\"\
    e\")) continue;\n            if (length == 4 && word.equals(\"i\")) continue;\n\
    \            if (length == 4 && word.equals(\"o\")) continue;\n            if\
    \ (length == 4 && word.equals(\"u\")) continue;\n            if (length == 5 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 5 && word.equals(\"\
    e\")) continue;\n            if (length == 5 && word.equals(\"i\")) continue;\n\
    \            if (length == 5 && word.equals(\"o\")) continue;\n            if\
    \ (length == 5 && word.equals(\"u\")) continue;\n            if (length == 6 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 6 && word.equals(\"\
    e\")) continue;\n            if (length == 6 && word.equals(\"i\")) continue;\n\
    \            if (length == 6 && word.equals(\"o\")) continue;\n            if\
    \ (length == 6 && word.equals(\"u\")) continue;\n            if (length == 7 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 7 && word.equals(\"\
    e\")) continue;\n            if (length == 7 && word.equals(\"i\")) continue;\n\
    \            if (length == 7 && word.equals(\"o\")) continue;\n            if\
    \ (length == 7 && word.equals(\"u\")) continue;\n            if (length == 8 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 8 && word.equals(\"\
    e\")) continue;\n            if (length == 8 && word.equals(\"i\")) continue;\n\
    \            if (length == 8 && word.equals(\"o\")) continue;\n            if\
    \ (length == 8 && word.equals(\"u\")) continue;\n            if (length == 9 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 9 && word.equals(\"\
    e\")) continue;\n            if (length == 9 && word.equals(\"i\")) continue;\n\
    \            if (length == 9 && word.equals(\"o\")) continue;\n            if\
    \ (length == 9 && word.equals(\"u\")) continue;\n            if (length == 10\
    \ && \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxcao9dw_.java:70: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpxcao9dw_.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpxcao9dw_.java:71: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpxcao9dw_.java:71:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpxcao9dw_.java:71: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpxcao9dw_.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpxcao9dw_.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5t6yu047.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ce86zow.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'm') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'n') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'i') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'u') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 't') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'e') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 's') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'w') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'r') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'm') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'n') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'i') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'u') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 't') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'e') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 's') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'w') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'r') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.\n    }\n  \
    \  public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmply0fkxu5.java:70: error: <identifier> expected\n            } else\
    \ if (len == 2 && word.charAt(0) == 'a' && word.\n                           \
    \                                      ^\n/tmp/tmply0fkxu5.java:72: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmply0fkxu5.java:72:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmply0fkxu5.java:72: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmply0fkxu5.java:72:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmply0fkxu5.java:72: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmply0fkxu5.java:82: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    String newWord = word.substring(0, i) + word.substring(i);\n\
    \                    if (!result.contains(newWord)) {\n                      \
    \  result.add(newWord);\n                    }\n                }\n          \
    \  }\n        }\n        return String.join(\" \", result);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdb4tcb8q.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (len == 2 &&\
    \ word.charAt(0) == word.charAt(2)) continue;\n            if (len == 3 && word.charAt(0)\
    \ == word.charAt(3) && word.charAt(1) == word.charAt(2)) continue;\n         \
    \   if (len == 3 && word.charAt(0) == word.charAt(3) && word.charAt(2) == word.charAt(3))\
    \ continue;\n            if (len == 4 && word.charAt(0) == word.charAt(4) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3)) continue;\n         \
    \   if (len == 5 && word.charAt(0) == word.charAt(4) && word.charAt(1) == word.charAt(2)\
    \ && word.charAt(3) == word.charAt(4)) continue;\n            if (len == 6 &&\
    \ word.charAt(0) == word.charAt(5) && word.charAt(1) == word.charAt(2) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(3) == word.charAt(4)) continue;\n         \
    \   if (len == 7 && word.charAt(0) == word.charAt(5) && word.charAt(1) == word.charAt(2)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4) && word.charAt(4)\
    \ == word.charAt(5)) continue;\n            if (len == 8 && word.charAt(0) ==\
    \ word.charAt(6) && word.charAt(1) == word.charAt(2) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(3) == word.charAt(4) && word.charAt(4) == word.charAt(5) && word.charAt(5)\
    \ == word.charAt(6)) continue;\n            if (len == 9 && word.charAt(0) ==\
    \ word.charAt(6) && word.charAt(1) == word.charAt(2) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(3) == word.charAt(4) && word.charAt(4) == word.charAt(5) && word.charAt(5)\
    \ == word.charAt(6) && word.charAt(6) == word.charAt(7)) continue;\n         \
    \   if (len == 10 && word.charAt(0) == word.charAt(7) && word.charAt(1) == word.charAt(2)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(5) == word.charAt(6) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(7) == word.charAt(8)) continue;\n            if (len == 11 &&\
    \ word.charAt(0) == word.charAt(7) && word.charAt(1) == word.charAt(2) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(3) == word.charAt(4) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(5) == word.charAt(6) && word.charAt(6) == word.charAt(7) && word.charAt(7)\
    \ == word.charAt(8) && word.charAt(8) == word.charAt(9)) continue;\n         \
    \   if (len == 12 && word.charAt(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpszkt0o25.java:42: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpszkt0o25.java:42: error: ')' expected\n    }\n     ^\n/tmp/tmpszkt0o25.java:43:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpszkt0o25.java:43: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpszkt0o25.java:43: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpszkt0o25.java:43: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpszkt0o25.java:53: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 3 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 5 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 6 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 8 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 9 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 11 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 12 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 14 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 15 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 17 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 18 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 20 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 21 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 23 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 24 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 25 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 26 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 27 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 28 && isPrime(length)) {\n                result.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn8uiijew.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpn8uiijew.java:84: error: ';' expected\n    }\n     ^\n/tmp/tmpn8uiijew.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpn8uiijew.java:85: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpn8uiijew.java:85: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpn8uiijew.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpn8uiijew.java:95: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmpn8uiijew.java:96: error: reached end of file while parsing\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"e\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"i\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    i\") && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    i\") && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"i\") && word.endsWith(\"\
    a\") && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"i\") && word.endsWith(\"\
    e\") && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"i\") && word.endsWith(\"\
    e\") && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"i\") && word.endsWith(\"i\") && word.startsWith(\"o\"\
    ) && word.endsWith(\"o\")) {\n                result.add(word);\n            }\
    \ else if (length == 4 && word.startsWith(\"e\") && word.endsWith(\"i\") && word.startsWith(\"\
    a\") && word.endsWith(\"a\") && word.startsWith(\"o\") && word.endsWith(\"o\"\
    )) {\n                result.add(word);\n            } else if (length == 4 &&\
    \ word.startsWith(\"e\") && word.endsWith(\"i\") && word.startsWith(\"e\") &&\
    \ word.endsWith(\"e\") && word.startsWith(\"o\") && word.endsWith(\"\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphegmvdoy.java:54: error: unclosed string literal\n            }\
    \ else if (length == 4 && word.startsWith(\"e\") && word.endsWith(\"i\") && word.startsWith(\"\
    e\") && word.endsWith(\"e\") && word.startsWith(\"o\") && word.endsWith(\"\n \
    \                                                                            \
    \                                                                            \
    \               ^\n/tmp/tmphegmvdoy.java:54: error: ')' expected\n           \
    \ } else if (length == 4 && word.startsWith(\"e\") && word.endsWith(\"i\") &&\
    \ word.startsWith(\"e\") && word.endsWith(\"e\") && word.startsWith(\"o\") &&\
    \ word.endsWith(\"\n                                                         \
    \                                                                            \
    \                                    ^\n/tmp/tmphegmvdoy.java:56: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmphegmvdoy.java:56:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmphegmvdoy.java:56: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmphegmvdoy.java:56:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmphegmvdoy.java:56: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmphegmvdoy.java:66: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkie0qfdi.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8kzji5hp.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_r3jz7gh.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return String.join(\" \", result);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp005ks6w6.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   }\n            else if (length == 2 && isPrime(length)) {\n              \
    \  result.add(word);\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe6yov8rg.java:31: error: cannot find symbol\n            else if\
    \ (length == 2 && isPrime(length)) {\n                                    ^\n\
    \  symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len > 1 && len % 2 == 0) {\n                for (int i = 1; i\
    \ <= len / 2; i++) {\n                    String newWord = word.substring(0, i)\
    \ + word.substring(i + 1);\n                    if (!words.contains(newWord))\
    \ {\n                        words.add(newWord);\n                    }\n    \
    \            }\n            }\n        }\n        return words.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg70xo6f1.java:25: error: variable words is already defined in method\
    \ wordsInSentence(String)\n        String[] words = sentence.split(\" \");\n \
    \                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 3 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            }\n            else if (length == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            }\n            else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 8 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6))) {\n                result.add(word);\n\
    \            }\n            else if (length == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \            }\n            else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && \n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp08dqwgf6.java:56: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp08dqwgf6.java:57: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp08dqwgf6.java:57: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp08dqwgf6.java:57:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp08dqwgf6.java:57: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp08dqwgf6.java:57:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp08dqwgf6.java:67: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppsxqkmka.java:49: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmppsxqkmka.java:49: error: ')' expected\n    }\n     ^\n/tmp/tmppsxqkmka.java:50:\
    \ error: ')' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmppsxqkmka.java:50: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmppsxqkmka.java:50:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmppsxqkmka.java:50: error: variable declaration not\
    \ allowed here\n    public static void main(String[] args) {\n               \
    \        ^\n/tmp/tmppsxqkmka.java:50: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmppsxqkmka.java:60:\
    \ error: reached end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1) {\n                for (int i = 2;\
    \ i <= Math.sqrt(len); i++) {\n                    if (len % i == 0) {\n     \
    \                   result.add(word);\n                        break;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ String.join(\" \", result);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw6nylkxh.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (!isPrime(i)) {\n                        continue;\n\
    \                    }\n                    String newWord = word.substring(0,\
    \ i) + word.substring(i);\n                    if (!result.contains(newWord))\
    \ {\n                        result.add(newWord);\n                    }\n   \
    \             }\n            }\n        }\n        return String.join(\" \", result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp60gp06um.java:32: error: cannot find symbol\n                 \
    \   if (!isPrime(i)) {\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"e\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.startsWith(\"e\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    e\")) {\n                result.add(word);\n            } else if (length == 4\
    \ && word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.startsWith(\"e\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (length == 4\
    \ && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.startsWith(\"a\") && word.endsWith(\"\
    e\")) {\n                result.add(word);\n            } else if (length == 5\
    \ && word.startsWith(\"e\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.startsWith(\"e\") && word.endsWith(\"\
    e\")) {\n                result.add(word);\n            } else if (length == 6\
    \ && word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 6 && word.startsWith(\"e\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (length == 6\
    \ && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 7 && word.startsWith(\"a\") && word.endsWith(\"\
    e\")) {\n                result.add(word);\n            } else if (length == 7\
    \ && word.startsWith(\"e\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (length == 7 && word.startsWith(\"e\") && word.endsWith(\"\
    e\")) {\n                result.add(word);\n            } else if (length == 8\
    \ && word.startsWith(\"a\") && word.endsWith(\"\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpppe2gcr_.java:68: error: unclosed string literal\n            }\
    \ else if (length == 8 && word.startsWith(\"a\") && word.endsWith(\"\n       \
    \                                                                     ^\n/tmp/tmpppe2gcr_.java:68:\
    \ error: ')' expected\n            } else if (length == 8 && word.startsWith(\"\
    a\") && word.endsWith(\"\n                                                   \
    \                          ^\n/tmp/tmpppe2gcr_.java:70: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpppe2gcr_.java:70:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpppe2gcr_.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpppe2gcr_.java:70:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpppe2gcr_.java:70: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpppe2gcr_.java:80: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpubz15n3s.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (len == 3 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (len == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (len == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (len == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_eop2we_.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp_eop2we_.java:52: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmp_eop2we_.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmp_eop2we_.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmp_eop2we_.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp_eop2we_.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4))) {\n                result.add(word);\n \
    \           } else if (length == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 8 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv9k9mzac.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpv9k9mzac.java:52: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpv9k9mzac.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpv9k9mzac.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpv9k9mzac.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpv9k9mzac.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqyt_o75v.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf023h_um.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 3 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 4 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 4 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 5 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 5 && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 6 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 7 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 7 && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 8 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 8 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 9 && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 10 &&\
    \ Character.isLetter(word.charAt(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj2x9yu1n.java:77: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpj2x9yu1n.java:77: error: ')' expected\n    }\n     ^\n/tmp/tmpj2x9yu1n.java:78:\
    \ error: ')' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpj2x9yu1n.java:78: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpj2x9yu1n.java:78:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpj2x9yu1n.java:78: error: variable declaration not\
    \ allowed here\n    public static void main(String[] args) {\n               \
    \        ^\n/tmp/tmpj2x9yu1n.java:78: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpj2x9yu1n.java:88:\
    \ error: reached end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphhqrop_s.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.contains(\"o\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.contains(\"\
    e\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.contains(\"n\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.contains(\"s\")) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.contains(\"m\")) {\n             \
    \   result.add(word);\n            } else if (length == 4 && word.contains(\"\
    t\")) {\n                result.add(word);\n            } else if (length == 5\
    \ && word.contains(\"g\")) {\n                result.add(word);\n            }\
    \ else if (length == 5 && word.contains(\"h\")) {\n                result.add(word);\n\
    \            } else if (length == 6 && word.contains(\"o\")) {\n             \
    \   result.add(word);\n            } else if (length == 6 && word.contains(\"\
    e\")) {\n                result.add(word);\n            } else if (length == 7\
    \ && word.contains(\"n\")) {\n                result.add(word);\n            }\
    \ else if (length == 7 && word.contains(\"s\")) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.contains(\"m\")) {\n             \
    \   result.add(word);\n            } else if (length == 8 && word.contains(\"\
    t\")) {\n                result.add(word);\n            } else if (length == 9\
    \ && word.contains(\"g\")) {\n                result.add(word);\n            }\
    \ else if (length == 9 && word.contains(\"h\")) {\n                result.add(word);\n\
    \            } else if (length == 10 && word.contains(\"o\")) {\n            \
    \    result.add(word);\n            } else if (length == 10 && word.contains(\"\
    e\")) {\n                result.add(word);\n            } else if (length == 11\
    \ && word.contains(\"n\")) {\n                result.add(word);\n            }\
    \ else if (length == 11 && word.contains(\"s\")) {\n                result.add(word);\n\
    \            } else if (length == 12 && word.contains(\"m\")) {\n            \
    \    result.add(word);\n            } else if (length == 12 && word.contains(\"\
    t\")) {\n                result.add(word);\n            } else if (length == 13\
    \ && word.contains(\"g\")) {\n                result.add(word);\n            }\
    \ else if (length == 13 && word.contains(\"h\")) {\n                result.add(word);\n\
    \            } else if (length == 14 && word.contains(\"o\")) {\n            \
    \    result.add(word);\n            } else if (length == 14 && word.contains(\"\
    e\")) {\n                result.add(word);\n            } else if (length == 15\
    \ && word.contains(\"n\")) {\n                result.add(word);\n            }\
    \ else if (length == 15 && word.contains(\"s\")) {\n                result.add(word);\n\
    \            } else if (length == 16 && word.contains(\"m\")) {\n            \
    \    result.add(word);\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpir8lqnsc.java:90: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpir8lqnsc.java:90: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpir8lqnsc.java:90: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpir8lqnsc.java:90: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpir8lqnsc.java:90: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpir8lqnsc.java:100:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (length == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 8 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLet\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpko9kex_2.java:50: error: ')' expected\n            } else if (length\
    \ == 9 && Character.isLet\n                                                  \
    \   ^\n/tmp/tmpko9kex_2.java:51: error: illegal start of statement\n    }\n  \
    \  ^\n/tmp/tmpko9kex_2.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpko9kex_2.java:52: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpko9kex_2.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpko9kex_2.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpko9kex_2.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpko9kex_2.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else {\n                for (int i = 2; i <= Math.sqrt(len); i++) {\n      \
    \              if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_zb4mmg.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.equals(\"a\")) continue;\n            if (len == 2 && word.equals(\"\
    e\")) continue;\n            if (len == 2 && word.equals(\"i\")) continue;\n \
    \           if (len == 2 && word.equals(\"o\")) continue;\n            if (len\
    \ == 2 && word.equals(\"u\")) continue;\n            if (len == 3 && word.equals(\"\
    a\")) continue;\n            if (len == 3 && word.equals(\"e\")) continue;\n \
    \           if (len == 3 && word.equals(\"i\")) continue;\n            if (len\
    \ == 3 && word.equals(\"o\")) continue;\n            if (len == 3 && word.equals(\"\
    u\")) continue;\n            if (len == 4 && word.equals(\"a\")) continue;\n \
    \           if (len == 4 && word.equals(\"e\")) continue;\n            if (len\
    \ == 4 && word.equals(\"i\")) continue;\n            if (len == 4 && word.equals(\"\
    o\")) continue;\n            if (len == 4 && word.equals(\"u\")) continue;\n \
    \           if (len == 5 && word.equals(\"a\")) continue;\n            if (len\
    \ == 5 && word.equals(\"e\")) continue;\n            if (len == 5 && word.equals(\"\
    i\")) continue;\n            if (len == 5 && word.equals(\"o\")) continue;\n \
    \           if (len == 5 && word.equals(\"u\")) continue;\n            if (len\
    \ == 6 && word.equals(\"a\")) continue;\n            if (len == 6 && word.equals(\"\
    e\")) continue;\n            if (len == 6 && word.equals(\"i\")) continue;\n \
    \           if (len == 6 && word.equals(\"o\")) continue;\n            if (len\
    \ == 6 && word.equals(\"u\")) continue;\n            if (len == 7 && word.equals(\"\
    a\")) continue;\n            if (len == 7 && word.equals(\"e\")) continue;\n \
    \           if (len == 7 && word.equals(\"i\")) continue;\n            if (len\
    \ == 7 && word.equals(\"o\")) continue;\n            if (len == 7 && word.equals(\"\
    u\")) continue;\n            if (len == 8 && word.equals(\"a\")) continue;\n \
    \           if (len == 8 && word.equals(\"e\")) continue;\n            if (len\
    \ == 8 && word.equals(\"i\")) continue;\n            if (len == 8 && word.equals(\"\
    o\")) continue;\n            if (len == 8 && word.equals(\"u\")) continue;\n \
    \           if (len == 9 && word.equals(\"a\")) continue;\n            if (len\
    \ == 9 && word.equals(\"e\")) continue;\n            if (len == 9 && word.equals(\"\
    i\")) continue;\n            if (len == 9 && word.equals(\"o\")) continue;\n \
    \           if (len == 9 && word.equals(\"u\")) continue;\n            if (len\
    \ == 10 && \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplkb_kkmy.java:70: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmplkb_kkmy.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmplkb_kkmy.java:71: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmplkb_kkmy.java:71:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmplkb_kkmy.java:71: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmplkb_kkmy.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmplkb_kkmy.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp822hrsp8.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjseqwzlp.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) {\n                result.add(word);\n \
    \           } else if (length == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) {\n\
    \                result.add(word);\n            } else if (length == 10 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14)\
    \ == word.charAt(15) && word.charAt(16) == word.charAt(17)) {\n              \
    \  result.add(word);\n            } else if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2jwmiysg.java:48: error: <identifier> expected\n            } else\
    \ if (length == 11 && word.charAt(0) == word.charAt(1) && word.\n            \
    \                                                                    ^\n/tmp/tmp2jwmiysg.java:50:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp2jwmiysg.java:50: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp2jwmiysg.java:50: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp2jwmiysg.java:50: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp2jwmiysg.java:50:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp2jwmiysg.java:60: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp92j4_8vg.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else {\n                for (int i = 2; i <= Math.sqrt(length); i++) {\n\
    \                    if (length % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkxwf0y6u.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe_iusiue.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2))\
    \ continue;\n            if (length == 4 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(1) == word.charAt(2) && word.charAt(2) == word.charAt(3)) continue;\n\
    \            if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4))\
    \ continue;\n            if (length == 6 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(1) == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3)\
    \ == word.charAt(4) && word.charAt(4) == word.charAt(5)) continue;\n         \
    \   if (length == 7 && word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(5) == word.charAt(6)) continue;\n         \
    \   if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(5) == word.charAt(6) && word.charAt(6) == word.charAt(7))\
    \ continue;\n            if (length == 9 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(1) == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3)\
    \ == word.charAt(4) && word.charAt(4) == word.charAt(5) && word.charAt(5) == word.charAt(6)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(7) == word.charAt(8)) continue;\n\
    \            if (length == 10 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(5) == word.charAt(6) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(7) == word.charAt(8) && word.charAt(8) == word.charAt(9))\
    \ continue;\n            if (length == 11 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(1) == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3)\
    \ == word.charAt(4) && word.charAt(4) == word.charAt(5) && word.charAt(5) == word.charAt(6)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(7) == word.charAt(8) && word.charAt(8)\
    \ == \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpea71uv2b.java:39: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpea71uv2b.java:40: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpea71uv2b.java:40: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpea71uv2b.java:40:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpea71uv2b.java:40: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpea71uv2b.java:40:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpea71uv2b.java:50: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4))) {\n                result.add(word);\n \
    \           } else if (length == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 8 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdow2ywll.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpdow2ywll.java:52: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpdow2ywll.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpdow2ywll.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpdow2ywll.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpdow2ywll.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 3 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 5 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 6 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 8 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 9 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 11 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 12 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 14 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 15 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 17 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 18 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 20 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 21 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 23 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 24 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 25 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 26 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 27 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 28 && isPrime(length)) {\n                result.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj440m5lo.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpj440m5lo.java:84: error: ';' expected\n    }\n     ^\n/tmp/tmpj440m5lo.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpj440m5lo.java:85: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpj440m5lo.java:85: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpj440m5lo.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpj440m5lo.java:95: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmpj440m5lo.java:96: error: reached end of file while parsing\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (len == 3 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)) continue;\n\
    \            if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n         \
    \   if (len == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)) continue;\n\
    \            if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) continue;\n            if (len == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) continue;\n            if (len == 8 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13))\
    \ continue;\n            if (len == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) continue;\n\
    \            if (len == 10 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15) &&\
    \ word.charAt(16) == word.charAt(17)) continue;\n            if (len == 11 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7yn8ytxf.java:39: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp7yn8ytxf.java:39: error: ')' expected\n    }\n     ^\n/tmp/tmp7yn8ytxf.java:40:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp7yn8ytxf.java:40: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp7yn8ytxf.java:40: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp7yn8ytxf.java:40: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp7yn8ytxf.java:50: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int len = word.length();\n            if (len > 1) {\n      \
    \          for (int i = 2; i <= Math.sqrt(len); i++) {\n                    if\
    \ (len % i == 0) {\n                        sb.append(word);\n               \
    \         break;\n                    }\n                }\n            }\n  \
    \      }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0poywarh.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmcf39hz6.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpju12yr40.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 3 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 5 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 6 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 8 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 9 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 11 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 12 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 14 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 15 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 17 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 18 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 20 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 21 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 23 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 24 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 25 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 26 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 27 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 28 && isPrime(length)) {\n                result.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjahsol4f.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpjahsol4f.java:84: error: ';' expected\n    }\n     ^\n/tmp/tmpjahsol4f.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpjahsol4f.java:85: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpjahsol4f.java:85: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpjahsol4f.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpjahsol4f.java:95: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmpjahsol4f.java:96: error: reached end of file while parsing\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9u5zozs6.java:49: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp9u5zozs6.java:49: error: ')' expected\n    }\n     ^\n/tmp/tmp9u5zozs6.java:50:\
    \ error: ')' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp9u5zozs6.java:50: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp9u5zozs6.java:50:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp9u5zozs6.java:50: error: variable declaration not\
    \ allowed here\n    public static void main(String[] args) {\n               \
    \        ^\n/tmp/tmp9u5zozs6.java:50: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp9u5zozs6.java:60:\
    \ error: reached end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len > 1 && len % 2 == 0) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvikz5_po.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == word.charAt(1)) {\n    \
    \            result.add(word);\n            } else {\n                for (int\
    \ i = 2; i <= Math.sqrt(len); i++) {\n                    if (len % i == 0) {\n\
    \                        result.add(word);\n                        break;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5q3819nr.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.charAt(0) == 'a' && word.charAt(1) == 'e') continue;\n           \
    \ if (len == 2 && word.charAt(0) == 'e' && word.charAt(1) == 'a') continue;\n\
    \            if (len == 2 && word.charAt(0) == 'i' && word.charAt(1) == 'n') continue;\n\
    \            if (len == 2 && word.charAt(0) == 'o' && word.charAt(1) == 'u') continue;\n\
    \            if (len == 2 && word.charAt(0) == 'u' && word.charAt(1) == 'o') continue;\n\
    \            if (len == 3 && word.charAt(0) == 'a' && word.charAt(1) == 'e' &&\
    \ word.charAt(2) == 'i') continue;\n            if (len == 3 && word.charAt(0)\
    \ == 'e' && word.charAt(1) == 'a' && word.charAt(2) == 'i') continue;\n      \
    \      if (len == 3 && word.charAt(0) == 'i' && word.charAt(1) == 'n' && word.charAt(2)\
    \ == 'o') continue;\n            if (len == 3 && word.charAt(0) == 'o' && word.charAt(1)\
    \ == 'u' && word.charAt(2) == 'a') continue;\n            if (len == 3 && word.charAt(0)\
    \ == 'u' && word.charAt(1) == 'o' && word.charAt(2) == 'a') continue;\n      \
    \      if (len == 4 && word.charAt(0) == 'a' && word.charAt(1) == 'e' && word.charAt(2)\
    \ == 'i' && word.charAt(3) == 'n') continue;\n            if (len == 4 && word.charAt(0)\
    \ == 'e' && word.charAt(1) == 'a' && word.charAt(2) == 'i' && word.charAt(3) ==\
    \ 'n') continue;\n            if (len == 4 && word.charAt(0) == 'i' && word.charAt(1)\
    \ == 'n' && word.charAt(2) == 'o' && word.charAt(3) == 'u') continue;\n      \
    \      if (len == 4 && word.charAt(0) == 'o' && word.charAt(1) == 'u' && word.charAt(2)\
    \ == 'a' && word.charAt(3) == 'u') continue;\n            if (len == 5 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'e' && word.charAt(2) == 'i' && word.charAt(3) ==\
    \ 'n' && word.charAt(4) == 'g') continue;\n            if (len == 5 && word.charAt(0)\
    \ == 'e' && word.charAt(1) == 'a' && word.charAt(2) == 'i' && word.charAt(3) ==\
    \ 'n' && word.charAt(4) == 'g') continue;\n            if (len == 5 && word.charAt(0)\
    \ == 'i' && word.charAt(1) == 'n' && word.charAt(2) == 'o' && word.charAt(3) ==\
    \ 'u' && word.charAt(4) == 'm') continue;\n            if (len == 5 && word.charAt(0)\
    \ == 'o' && word.charAt(1) == 'u' && word.charAt(2) == 'a' && word.charAt(3) ==\
    \ 'u' && word.charAt(4) == 'm') continue;\n            if (len\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4dyfgev4.java:47: error: ')' expected\n            if (len\n  \
    \                 ^\n/tmp/tmp4dyfgev4.java:48: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmp4dyfgev4.java:49: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp4dyfgev4.java:49:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp4dyfgev4.java:49: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp4dyfgev4.java:49: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp4dyfgev4.java:49: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp4dyfgev4.java:59: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp01qe78ek.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxj706il.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 2 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 4 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 5 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 7 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 10 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 11 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 12 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 13 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 14 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 15 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 16 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 17 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 18 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 19 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 20 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 21 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 22 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 23 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 24 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 25 && Character.isLetter(word.\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqts3h7ie.java:74: error: <identifier> expected\n            } else\
    \ if (length == 25 && Character.isLetter(word.\n                             \
    \                                  ^\n/tmp/tmpqts3h7ie.java:75: error: ')' expected\n\
    \    }\n     ^\n/tmp/tmpqts3h7ie.java:76: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmpqts3h7ie.java:76:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpqts3h7ie.java:76: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpqts3h7ie.java:76:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpqts3h7ie.java:86: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    a\")\n                    || length == 2 && word.startsWith(\"b\") && word.endsWith(\"\
    b\")\n                    || length == 2 && word.startsWith(\"c\") && word.endsWith(\"\
    c\")\n                    || length == 2 && word.startsWith(\"d\") && word.endsWith(\"\
    d\")\n                    || length == 2 && word.startsWith(\"e\") && word.endsWith(\"\
    e\")\n                    || length == 2 && word.startsWith(\"f\") && word.endsWith(\"\
    f\")\n                    || length == 2 && word.startsWith(\"g\") && word.endsWith(\"\
    g\")\n                    || length == 2 && word.startsWith(\"h\") && word.endsWith(\"\
    h\")\n                    || length == 2 && word.startsWith(\"i\") && word.endsWith(\"\
    i\")\n                    || length == 2 && word.startsWith(\"j\") && word.endsWith(\"\
    j\")\n                    || length == 2 && word.startsWith(\"k\") && word.endsWith(\"\
    k\")\n                    || length == 2 && word.startsWith(\"l\") && word.endsWith(\"\
    l\")\n                    || length == 2 && word.startsWith(\"m\") && word.endsWith(\"\
    m\")\n                    || length == 2 && word.startsWith(\"n\") && word.endsWith(\"\
    n\")\n                    || length == 2 && word.startsWith(\"o\") && word.endsWith(\"\
    o\")\n                    || length == 2 && word.startsWith(\"p\") && word.endsWith(\"\
    p\")\n                    || length == 2 && word.startsWith(\"q\") && word.endsWith(\"\
    q\")\n                    || length == 2 && word.startsWith(\"r\") && word.endsWith(\"\
    r\")\n                    || length == 2 && word.startsWith(\"s\") && word.endsWith(\"\
    s\")\n                    || length == 2 && word.startsWith(\"t\") && word.endsWith(\"\
    t\")\n                    || length == 2 && word.startsWith(\"u\") && word.endsWith(\"\
    u\")\n                    || length == 2 && word.startsWith(\"v\") && word.endsWith(\"\
    v\")\n                    || length == 2 && word.startsWith(\"w\") && word.endsWith(\"\
    w\")\n                    || length == 2 && word.startsWith(\"x\") && word.endsWith(\"\
    x\")\n                    || length == 2 && word.startsWith(\"y\") && word.endsWith(\"\
    y\")\n                    || length == 2 && \n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgfsj845e.java:56: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpgfsj845e.java:57: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpgfsj845e.java:57: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpgfsj845e.java:57:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpgfsj845e.java:57: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpgfsj845e.java:57:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpgfsj845e.java:67: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && word.charAt(0) == word.charAt(1))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            }\n            else if (length == 5 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7)) {\n                result.add(word);\n            }\n   \
    \         else if (length == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                result.add(word);\n\
    \            }\n            else if (length == 7 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10) ==\
    \ word.charAt(11)) {\n                result.add(word);\n            }\n     \
    \       else if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) {\n                result.add(word);\n \
    \           }\n            else if (length == 9 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10) ==\
    \ word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14) ==\
    \ word.charAt(15)) {\n                result.add(word);\n            }\n     \
    \       else if (length == 10 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15) &&\
    \ word.\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0yacudzz.java:55: error: <identifier> expected\n            else\
    \ if (length == 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.\n           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     ^\n/tmp/tmp0yacudzz.java:57: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp0yacudzz.java:57:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp0yacudzz.java:57: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp0yacudzz.java:57:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp0yacudzz.java:57: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp0yacudzz.java:67: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == word.charAt(1)) {\n    \
    \            result.add(word);\n            } else if (len == 2 && word.charAt(0)\
    \ == word.charAt(2)) {\n                result.add(word);\n            } else\
    \ if (len == 2 && word.charAt(1) == word.charAt(2)) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2)) {\n                result.add(word);\n            } else\
    \ if (len == 3 && word.charAt(0) == word.charAt(2) && word.charAt(1) == word.charAt(3))\
    \ {\n                result.add(word);\n            } else if (len == 3 && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.charAt(2) == word.charAt(3)) {\n    \
    \            result.add(word);\n            } else if (len == 4 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(1) == word.charAt(2) && word.charAt(2) == word.charAt(3))\
    \ {\n                result.add(word);\n            } else if (len == 4 && word.charAt(0)\
    \ == word.charAt(2) && word.charAt(1) == word.charAt(3) && word.charAt(2) == word.charAt(4))\
    \ {\n                result.add(word);\n            } else if (len == 4 && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4))\
    \ {\n                result.add(word);\n            } else if (len == 5 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(1) == word.charAt(2) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(3) == word.charAt(4)) {\n                result.add(word);\n\
    \            } else if (len == 5 && word.charAt(0) == word.charAt(2) && word.charAt(1)\
    \ == word.charAt(3) && word.charAt(2) == word.charAt(4) && word.charAt(3) == word.charAt(5))\
    \ {\n                result.add(word);\n            } else if (len == 5 && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)\
    \ && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(5) == word.charAt(6)) {\n\
    \                result.add(word);\n            } else if (len == 6 && word.charAt(0)\
    \ == word.charAt(2) && word.charAt(1) == word.charAt(3) && word.charAt(2) == word.charAt(4)\
    \ && word.charAt(3) == word.charAt(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpakma5aa5.java:59: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpakma5aa5.java:59: error: ')' expected\n    }\n     ^\n/tmp/tmpakma5aa5.java:60:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpakma5aa5.java:60: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpakma5aa5.java:60: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpakma5aa5.java:60: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpakma5aa5.java:70: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n        \
    \        result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 11 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))\
    \ && Character.isLetter(word.charAt(8)) && Character.isLetter(word.charAt(9))\
    \ && Character.isLetter(word.charAt(10)) && Character.isLetter(word.charAt(11)))\
    \ {\n                result.add(word);\n            } else if (length == 13 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)) &&\
    \ Character.isLetter(word.charAt(8)) && Character.isLetter(word.charAt(9)) &&\
    \ Character.isLetter(word.charAt(10)) && Character.isLetter(word.charAt(11)) &&\
    \ Character.isLetter(word.charAt(12)) && Character.isLetter(word.charAt(13)))\
    \ {\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqsu8jydz.java:44: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpqsu8jydz.java:44: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpqsu8jydz.java:44: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpqsu8jydz.java:44: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpqsu8jydz.java:44: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpqsu8jydz.java:54:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return String.join(\" \", result);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptqjkdbm_.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoa2ok8r7.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            if (isPrime(word.length())) {\n                sb.append(word);\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwhroujx7.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr9k50te8.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8gpu5pcl.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp9m7swjz.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                boolean isPrime = true;\n             \
    \   for (int i = 2; i <= Math.sqrt(length); i++) {\n                    if (length\
    \ % i == 0) {\n                        isPrime = false;\n                    \
    \    break;\n                    }\n                }\n                if (isPrime)\
    \ {\n                    result.add(word);\n                }\n            }\n\
    \        }\n        return result.stream().collect(Collectors.joining(\" \"));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp35p6z9ha.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'm') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'n') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'o') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 't') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'e' && word.charAt(1) == 's') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'e' && word.charAt(1) ==\
    \ 't') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'i' && word.charAt(1) == 's') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'i' && word.charAt(1) ==\
    \ 't') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'l' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'l' && word.charAt(1) ==\
    \ 'l') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'o' && word.charAt(1) == 'w') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'o' && word.charAt(1) ==\
    \ 'r') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'o' && word.charAt(1) == 'm') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'o' && word.charAt(1) ==\
    \ 'e') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'u' && word.charAt(1) == 'r') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'u') {\n               \
    \ result.add(word);\n            } else if (len == 3 && word.charAt(0) == 'a'\
    \ && word.charAt(1) == 'm' && word.charAt(2) == 'e') {\n                result.add(word);\n\
    \            } else if (len == 3 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'n' && word.charAt(2) == 'g') {\n                result.add(word);\n       \
    \     } else if (len == 3 && word.charAt(0) == 'a' && word.charAt(1) == 'o' &&\
    \ word.charAt(2) == 'm') {\n                result.add(word);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp2r77fta.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpp2r77fta.java:71: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpp2r77fta.java:71: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpp2r77fta.java:71: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpp2r77fta.java:71: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpp2r77fta.java:81:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8nndhmfs.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 3 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 4 &&\
    \ Character.isLetter(word.charAt(1))) {\n                result.add(word);\n \
    \           } else if (length == 5 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 5 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 6 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 7 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(1))) {\n                result.add(word);\n \
    \           } else if (length == 8 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 10 &&\
    \ Character.isLetter(word.charAt(1))) {\n                result.add(word);\n \
    \           } else if (length == 11 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 11 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 12 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 12 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 13 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 13 &&\
    \ Character.isLetter(\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfin7vhkf.java:77: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpfin7vhkf.java:77: error: ')' expected\n    }\n     ^\n/tmp/tmpfin7vhkf.java:78:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpfin7vhkf.java:78: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpfin7vhkf.java:78: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpfin7vhkf.java:78: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpfin7vhkf.java:88: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else {\n                for (int i = 2; i <= Math.sqrt(length); i++) {\n\
    \                    if (length % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl3lzzcd3.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len > 1) {\n                for (int i = 2; i <= Math.sqrt(len);\
    \ i++) {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqn1u8ehv.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len % 2 == 0) {\n                result.add(word);\n        \
    \    }\n        }\n        return result.stream().distinct().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc8gvclhl.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"for\")) {\n                result.add(\"\
    for\");\n            } else if (len == 2 && word.equals(\"go\")) {\n         \
    \       result.add(\"go\");\n            } else if (len == 2 && word.equals(\"\
    swimming\")) {\n                result.add(\"swimming\");\n            } else\
    \ if (len == 3 && word.equals(\"for\") && word.equals(\"go\") && word.equals(\"\
    swimming\")) {\n                result.add(\"for\");\n                result.add(\"\
    go\");\n                result.add(\"swimming\");\n            } else if (len\
    \ == 3 && word.equals(\"for\") && word.equals(\"go\") && word.equals(\"swimming\"\
    )) {\n                result.add(\"for\");\n                result.add(\"go\"\
    );\n                result.add(\"swimming\");\n            } else if (len == 3\
    \ && word.equals(\"for\") && word.equals(\"go\") && word.equals(\"swimming\"))\
    \ {\n                result.add(\"for\");\n                result.add(\"go\");\n\
    \                result.add(\"swimming\");\n            } else if (len == 3 &&\
    \ word.equals(\"for\") && word.equals(\"go\") && word.equals(\"swimming\")) {\n\
    \                result.add(\"for\");\n                result.add(\"go\");\n \
    \               result.add(\"swimming\");\n            } else if (len == 3 &&\
    \ word.equals(\"for\") && word.equals(\"go\") && word.equals(\"swimming\")) {\n\
    \                result.add(\"for\");\n                result.add(\"go\");\n \
    \               result.add(\"swimming\");\n            } else if (len == 3 &&\
    \ word.equals(\"for\") && word.equals(\"go\") && word.equals(\"swimming\")) {\n\
    \                result.add(\"for\");\n                result.add(\"go\");\n \
    \               result.add(\"swimming\");\n            } else if (len == 3 &&\
    \ word.equals(\"for\") && word.equals(\"go\") && word.equals(\"swimming\")) {\n\
    \                result.add(\"for\");\n                result.add(\"go\");\n \
    \               result.add(\"swimming\");\n            } else if (len == 3 &&\
    \ word.equals(\"for\") && word.equals(\"go\") && word.equals(\"swimming\")) {\n\
    \                result.add(\"for\");\n                result.add(\"go\");\n \
    \               result.add(\"swimming\");\n            } else if (len == 3 &&\
    \ word.equals(\"for\") && word.equals(\"go\") && word.equals(\"swimming\")) {\n\
    \                result.add(\"for\");\n                result.add(\"go\");\n \
    \               result.\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphvguhje7.java:71: error: <identifier> expected\n              \
    \  result.\n                       ^\n/tmp/tmphvguhje7.java:71: error: not a statement\n\
    \                result.\n                      ^\n/tmp/tmphvguhje7.java:73: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n/tmp/tmphvguhje7.java:73: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmphvguhje7.java:73: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmphvguhje7.java:73: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmphvguhje7.java:73:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmphvguhje7.java:83: error: reached\
    \ end of file while parsing\n}\n ^\n/tmp/tmphvguhje7.java:84: error: reached end\
    \ of file while parsing\n9 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len %\
    \ 2 == 0) continue;\n            String newWord = word.substring(0, len / 2);\n\
    \            String newWord2 = word.substring(len / 2);\n            if (!newWord.equals(newWord2))\
    \ {\n                result.add(newWord);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplos37x62.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"e\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"i\") && word.endsWith(\"\
    i\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"i\") && word.endsWith(\"o\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"o\") && word.endsWith(\"\
    i\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"o\") && word.endsWith(\"o\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"u\") && word.endsWith(\"\
    u\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"u\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    u\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"e\") && word.endsWith(\"\
    e\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"i\") && word.endsWith(\"\
    i\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"i\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"i\") && word.endsWith(\"\
    o\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"o\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"o\") && word.endsWith(\"\
    o\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"u\") && word.endsWith(\"u\")) {\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeatpxalx.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpeatpxalx.java:71: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpeatpxalx.java:71: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpeatpxalx.java:71: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpeatpxalx.java:71: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpeatpxalx.java:81:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpium_hezx.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4))) {\n                result.add(word);\n \
    \           } else if (length == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 8 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (length == 10 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3kq36sw7.java:46: error: ')' expected\n            } else if (length\
    \ == 10 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4\n                                      \
    \                                                                            \
    \                                                                            \
    \                                 ^\n/tmp/tmp3kq36sw7.java:47: error: ')' expected\n\
    \    }\n     ^\n/tmp/tmp3kq36sw7.java:48: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmp3kq36sw7.java:48:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmp3kq36sw7.java:48: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmp3kq36sw7.java:48:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp3kq36sw7.java:58: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphet70t3q.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else {\n                for (int i = 2; i <= Math.sqrt(len); i++) {\n      \
    \              if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnhiab2ya.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4k2bxajy.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (len == 3 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (len == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (len == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (len == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpla2c1ffb.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpla2c1ffb.java:52: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpla2c1ffb.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpla2c1ffb.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpla2c1ffb.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpla2c1ffb.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            int length = word.length();\n            if (length\
    \ == 1) {\n                result.append(word);\n            } else {\n      \
    \          for (int i = 2; i <= Math.sqrt(length); i++) {\n                  \
    \  if (length % i == 0) {\n                        break;\n                  \
    \  }\n                }\n                if (i == Math.sqrt(length)) {\n     \
    \               result.append(word);\n                }\n            }\n     \
    \   }\n        return result.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn4vt27n8.java:37: error: cannot find symbol\n                if\
    \ (i == Math.sqrt(length)) {\n                    ^\n  symbol:   variable i\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 3 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 3 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.startsWith(\"a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphnpwr8z5.java:44: error: unclosed string literal\n            }\
    \ else if (length == 3 && word.startsWith(\"a\n                              \
    \                        ^\n/tmp/tmphnpwr8z5.java:44: error: ')' expected\n  \
    \          } else if (length == 3 && word.startsWith(\"a\n                   \
    \                                     ^\n/tmp/tmphnpwr8z5.java:46: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmphnpwr8z5.java:46:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmphnpwr8z5.java:46: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmphnpwr8z5.java:46:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmphnpwr8z5.java:46: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmphnpwr8z5.java:56: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5qmov_ho.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.equals(\"a\")) continue;\n            if (len == 2 && word.equals(\"\
    e\")) continue;\n            if (len == 2 && word.equals(\"i\")) continue;\n \
    \           if (len == 2 && word.equals(\"o\")) continue;\n            if (len\
    \ == 2 && word.equals(\"u\")) continue;\n            if (len == 3 && word.equals(\"\
    a\")) continue;\n            if (len == 3 && word.equals(\"e\")) continue;\n \
    \           if (len == 3 && word.equals(\"i\")) continue;\n            if (len\
    \ == 3 && word.equals(\"o\")) continue;\n            if (len == 3 && word.equals(\"\
    u\")) continue;\n            if (len == 4 && word.equals(\"a\")) continue;\n \
    \           if (len == 4 && word.equals(\"e\")) continue;\n            if (len\
    \ == 4 && word.equals(\"i\")) continue;\n            if (len == 4 && word.equals(\"\
    o\")) continue;\n            if (len == 4 && word.equals(\"u\")) continue;\n \
    \           if (len == 5 && word.equals(\"a\")) continue;\n            if (len\
    \ == 5 && word.equals(\"e\")) continue;\n            if (len == 5 && word.equals(\"\
    i\")) continue;\n            if (len == 5 && word.equals(\"o\")) continue;\n \
    \           if (len == 5 && word.equals(\"u\")) continue;\n            if (len\
    \ == 6 && word.equals(\"a\")) continue;\n            if (len == 6 && word.equals(\"\
    e\")) continue;\n            if (len == 6 && word.equals(\"i\")) continue;\n \
    \           if (len == 6 && word.equals(\"o\")) continue;\n            if (len\
    \ == 6 && word.equals(\"u\")) continue;\n            if (len == 7 && word.equals(\"\
    a\")) continue;\n            if (len == 7 && word.equals(\"e\")) continue;\n \
    \           if (len == 7 && word.equals(\"i\")) continue;\n            if (len\
    \ == 7 && word.equals(\"o\")) continue;\n            if (len == 7 && word.equals(\"\
    u\")) continue;\n            if (len == 8 && word.equals(\"a\")) continue;\n \
    \           if (len == 8 && word.equals(\"e\")) continue;\n            if (len\
    \ == 8 && word.equals(\"i\")) continue;\n            if (len == 8 && word.equals(\"\
    o\")) continue;\n            if (len == 8 && word.equals(\"u\")) continue;\n \
    \           if (len == 9 && word.equals(\"a\")) continue;\n            if (len\
    \ == 9 && word.equals(\"e\")) continue;\n            if (len == 9 && word.equals(\"\
    i\")) continue;\n            if (len == 9 && word.equals(\"o\")) continue;\n \
    \           if (len == 9 && word.equals(\"u\")) continue;\n            if (len\
    \ == 10 && \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwuj1yawu.java:70: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpwuj1yawu.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpwuj1yawu.java:71: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpwuj1yawu.java:71:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpwuj1yawu.java:71: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpwuj1yawu.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpwuj1yawu.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word + \" \" + i);\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprexsjoa.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp29eqwahc.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 3 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 4 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 5 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 6 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 7 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 8 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 9 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 10 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 11 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 12 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 13 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 14 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 15 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 16 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 17 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 18 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 19 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 20 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 21 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 22 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 23 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 24 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 25 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 26 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 27 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 28 && isPrime(len)) {\n                result.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqo51al2b.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpqo51al2b.java:84: error: ';' expected\n    }\n     ^\n/tmp/tmpqo51al2b.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpqo51al2b.java:85: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpqo51al2b.java:85: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpqo51al2b.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpqo51al2b.java:95: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmpqo51al2b.java:96: error: reached end of file while parsing\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.equals(\"a\") || word.equals(\"the\"\
    )) {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.equals(\"an\") || word.equals(\"the\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.equals(\"is\") || word.equals(\"was\"\
    ) || word.equals(\"are\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.equals(\"am\") || word.equals(\"is\") || word.equals(\"\
    was\") || word.equals(\"are\")) {\n                result.add(word);\n       \
    \     } else if (length == 5 && word.equals(\"for\") || word.equals(\"to\") ||\
    \ word.equals(\"in\") || word.equals(\"at\")) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.equals(\"in\") || word.equals(\"at\"\
    ) || word.equals(\"for\")) {\n                result.add(word);\n            }\
    \ else if (length == 7 && word.equals(\"swimming\") || word.equals(\"swim\") ||\
    \ word.equals(\"swiming\")) {\n                result.add(word);\n           \
    \ } else if (length == 7 && word.equals(\"swim\") || word.equals(\"swiming\"))\
    \ {\n                result.add(word);\n            } else if (length == 11 &&\
    \ word.equals(\"for\") || word.equals(\"to\") || word.equals(\"in\") || word.equals(\"\
    at\") || word.equals(\"swim\") || word.equals(\"swiming\")) {\n              \
    \  result.add(word);\n            } else if (length == 11 && word.equals(\"in\"\
    ) || word.equals(\"at\") || word.equals(\"for\") || word.equals(\"to\") || word.equals(\"\
    swim\") || word.equals(\"swiming\")) {\n                result.add(word);\n  \
    \          } else if (length == 13 && word.equals(\"swimming\") || word.equals(\"\
    swim\") || word.equals(\"swiming\") || word.equals(\"swim\")) {\n            \
    \    result.add(word);\n            } else if (length == 13 && word.equals(\"\
    swim\") || word.equals(\"swiming\") || word.equals(\"swim\")) {\n            \
    \    result.add(word);\n            } else if (length == 17 && word.equals(\"\
    swimming\") || word.equals(\"swim\") || word.equals(\"swiming\") || word.equals(\"\
    swim\") || word.equals(\"swiming\")) {\n                result.add(word);\n  \
    \          } else if (length == 17 && word.equals(\"swim\") || word.equals(\"\
    swiming\") || word.equals(\"sw\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpssk926qm.java:56: error: unclosed string literal\n            }\
    \ else if (length == 17 && word.equals(\"swim\") || word.equals(\"swiming\") ||\
    \ word.equals(\"sw\n                                                         \
    \                                           ^\n/tmp/tmpssk926qm.java:56: error:\
    \ ')' expected\n            } else if (length == 17 && word.equals(\"swim\") ||\
    \ word.equals(\"swiming\") || word.equals(\"sw\n                             \
    \                                                                          ^\n\
    /tmp/tmpssk926qm.java:58: error: illegal start of expression\n    public static\
    \ void main(String[] args) {\n    ^\n/tmp/tmpssk926qm.java:58: error: ';' expected\n\
    \    public static void main(String[] args) {\n          ^\n/tmp/tmpssk926qm.java:58:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpssk926qm.java:58: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpssk926qm.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpssk926qm.java:68: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && Character.isLetter(word.charAt(0)))\n                continue;\n      \
    \      if (len == 2 && Character.isLetter(word.charAt(1)))\n                continue;\n\
    \            if (len == 3 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)))\n                continue;\n        \
    \    if (len == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)))\n                continue;\n        \
    \    if (len == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\n\
    \                continue;\n            if (len == 7 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\n\
    \                continue;\n            if (len == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7)))\n                continue;\n        \
    \    if (len == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLet\n    }\n    public static void main(String[] args) {\n  \
    \  assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi36y57qu.java:47: error: ')' expected\n            if (len == 9\
    \ && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLet\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n/tmp/tmpi36y57qu.java:48:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpi36y57qu.java:49: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n/tmp/tmpi36y57qu.java:49: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n           ^\n/tmp/tmpi36y57qu.java:49: error:\
    \ ';' expected\n    public static void main(String[] args) {\n               \
    \  ^\n/tmp/tmpi36y57qu.java:49: error: '.class' expected\n    public static void\
    \ main(String[] args) {\n                                     ^\n/tmp/tmpi36y57qu.java:49:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpi36y57qu.java:59: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuf0igqrn.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnitz3ctc.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            if (isPrime(word.length())) {\n                sb.append(word);\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6h_yov4w.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else {\n                boolean\
    \ isPrime = true;\n                for (int i = 2; i <= Math.sqrt(length); i++)\
    \ {\n                    if (length % i == 0) {\n                        isPrime\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                if (isPrime) {\n                    result.add(word);\n\
    \                }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp57s2k4p7.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (len == 3 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (len == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (len == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (len == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr5b4x_y2.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpr5b4x_y2.java:52: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpr5b4x_y2.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpr5b4x_y2.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpr5b4x_y2.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpr5b4x_y2.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj7kd8oem.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjw1ce0mt.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len > 1) {\n                for (int i = 2; i <= Math.sqrt(len);\
    \ i++) {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqx4a71sy.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && isPrime(length)) {\n     \
    \           result.add(word);\n            }\n            else if (length == 3\
    \ && isPrime(length)) {\n                result.add(word);\n            }\n  \
    \          else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 5 && isPrime(length)) {\n     \
    \           result.add(word);\n            }\n            else if (length == 6\
    \ && isPrime(length)) {\n                result.add(word);\n            }\n  \
    \          else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 8 && isPrime(length)) {\n     \
    \           result.add(word);\n            }\n            else if (length == 9\
    \ && isPrime(length)) {\n                result.add(word);\n            }\n  \
    \          else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 11 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 12 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 14 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 15 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 17 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 18 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 20 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 21 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 23 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 24 && isPrime(length)) {\n                result.add(word);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ds4cu7e.java:101: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp_ds4cu7e.java:101: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmp_ds4cu7e.java:101: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp_ds4cu7e.java:101: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp_ds4cu7e.java:101: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp_ds4cu7e.java:111: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 3 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            }\n            else if (length == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            }\n            else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 8 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6))) {\n                result.add(word);\n\
    \            }\n            else if (length == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \            }\n            else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && \n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprrw63i1s.java:56: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmprrw63i1s.java:57: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmprrw63i1s.java:57: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmprrw63i1s.java:57:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmprrw63i1s.java:57: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmprrw63i1s.java:57:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmprrw63i1s.java:67: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 2 || length == 3) {\n          \
    \      result.add(word);\n            }\n        }\n        StringBuilder builder\
    \ = new StringBuilder();\n        for (String word : result) {\n            int\
    \ length = word.length();\n            if (length == 2 || length == 3) {\n   \
    \             builder.append(word);\n            }\n        }\n        return\
    \ builder.toString();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0g91kttw.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len % 2 == 0) {\n                result.add(word);\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (String word : result) {\n            int len = word.length();\n \
    \           if (len > 1) {\n                for (int i = 1; i < len; i++) {\n\
    \                    sb.append(word);\n                }\n            }\n    \
    \    }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplbqcf7kf.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'm') {\n   \
    \             result.add(word);\n            } else if (len == 2 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'n') {\n                result.add(word);\n    \
    \        } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'o')\
    \ {\n                result.add(word);\n            } else if (len == 2 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'u') {\n                result.add(word);\n    \
    \        } else if (len == 2 && word.charAt(0) == 'e' && word.charAt(1) == 'l')\
    \ {\n                result.add(word);\n            } else if (len == 2 && word.charAt(0)\
    \ == 'e' && word.charAt(1) == 's') {\n                result.add(word);\n    \
    \        } else if (len == 2 && word.charAt(0) == 'e' && word.charAt(1) == 't')\
    \ {\n                result.add(word);\n            } else if (len == 2 && word.charAt(0)\
    \ == 'i' && word.charAt(1) == 's') {\n                result.add(word);\n    \
    \        } else if (len == 2 && word.charAt(0) == 'i' && word.charAt(1) == 't')\
    \ {\n                result.add(word);\n            } else if (len == 2 && word.charAt(0)\
    \ == 'o' && word.charAt(1) == 'u') {\n                result.add(word);\n    \
    \        } else if (len == 2 && word.charAt(0) == 'o' && word.charAt(1) == 'v')\
    \ {\n                result.add(word);\n            } else if (len == 2 && word.charAt(0)\
    \ == 'o' && word.charAt(1) == 'w') {\n                result.add(word);\n    \
    \        } else if (len == 2 && word.charAt(0) == 'o' && word.charAt(1) == 'x')\
    \ {\n                result.add(word);\n            } else if (len == 2 && word.charAt(0)\
    \ == 'o' && word.charAt(1) == 'y') {\n                result.add(word);\n    \
    \        } else if (len == 2 && word.charAt(0) == 'u') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'y') {\n               \
    \ result.add(word);\n            } else if (len == 3 && word.charAt(0) == 'a'\
    \ && word.charAt(1) == 'm' && word.charAt(2) == 'e') {\n                result.add(word);\n\
    \            } else if (len == 3 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'n' && word.charAt(2) == 'e') {\n                result.add(word);\n       \
    \     } else if (len == 3 && word.charAt(0) == 'a' && word.charAt(1) == 'o' &&\
    \ word.charAt(2) == 'e') {\n                result.add(word);\n            } else\
    \ if (len == 3 && word.charAt(0) == 'a' && word.charAt(1) == 'u' && word.charAt(2)\
    \ == 'e') {\n                result.add(word);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7g6g7e4b.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp7g6g7e4b.java:71: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmp7g6g7e4b.java:71: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmp7g6g7e4b.java:71: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmp7g6g7e4b.java:71: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp7g6g7e4b.java:81:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"b\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"b\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"b\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"b\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"b\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"b\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"b\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"b\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"b\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"b\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"b\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvm600m5g.java:56: error: <identifier> expected\n            } else\
    \ if (len == 3 && word.\n                                        ^\n/tmp/tmpvm600m5g.java:58:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpvm600m5g.java:58: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpvm600m5g.java:58: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpvm600m5g.java:58: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpvm600m5g.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpvm600m5g.java:68: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb_tkem7r.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfy3murbf.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8r8znfbg.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 3 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 4 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 4 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 5 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 5 && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 6 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 7 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 7 && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 8 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 8 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 9 && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 10 &&\
    \ Character.isLetter(word.charAt(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu10f7bg0.java:77: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpu10f7bg0.java:77: error: ')' expected\n    }\n     ^\n/tmp/tmpu10f7bg0.java:78:\
    \ error: ')' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpu10f7bg0.java:78: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpu10f7bg0.java:78:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpu10f7bg0.java:78: error: variable declaration not\
    \ allowed here\n    public static void main(String[] args) {\n               \
    \        ^\n/tmp/tmpu10f7bg0.java:78: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpu10f7bg0.java:88:\
    \ error: reached end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 3 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 5 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 7 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 7 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 11 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 11 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 13 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 13 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 17 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 17 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 23 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 23 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 29 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 29 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 37 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 37 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (length == 43 &&\
    \ Character.isLetter(word.charAt(0))) {\n                result.add(word);\n \
    \           } else if (length == 43 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 49 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgppconnp.java:75: error: ')' expected\n                result.add(word\n\
    \                               ^\n/tmp/tmpgppconnp.java:77: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpgppconnp.java:77:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpgppconnp.java:77: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpgppconnp.java:77:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpgppconnp.java:77: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpgppconnp.java:87: error: reached end of file while parsing\n}\n ^\n\
    /tmp/tmpgppconnp.java:88: error: reached end of file while parsing\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi8yb53d2.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoinf_1of.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 5 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 7 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 9 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 11 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length13 && word.startsWith(\"a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps9t_jcme.java:44: error: unclosed string literal\n            }\
    \ else if (length13 && word.startsWith(\"a\n                                 \
    \                  ^\n/tmp/tmps9t_jcme.java:44: error: ')' expected\n        \
    \    } else if (length13 && word.startsWith(\"a\n                            \
    \                         ^\n/tmp/tmps9t_jcme.java:46: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmps9t_jcme.java:46:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmps9t_jcme.java:46: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmps9t_jcme.java:46:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmps9t_jcme.java:46: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmps9t_jcme.java:56: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word + \" \" + i);\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8jp1406l.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptlbj3bqk.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpop15havw.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else {\n                boolean\
    \ isPrime = true;\n                for (int i = 2; i <= Math.sqrt(length); i++)\
    \ {\n                    if (length % i == 0) {\n                        isPrime\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                if (isPrime) {\n                    result.add(word);\n\
    \                }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpid20zh1d.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            boolean isPrime\
    \ = true;\n            for (int i = 2; i <= Math.sqrt(len); i++) {\n         \
    \       if (len % i == 0) {\n                    isPrime = false;\n          \
    \          break;\n                }\n            }\n            if (isPrime)\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) {\n                result.add(word);\n \
    \           } else if (length == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) {\n\
    \                result.add(word);\n            } else if (length == 10 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14)\
    \ == word.charAt(15) && word.charAt(16) == word.charAt(17)) {\n              \
    \  result.add(word);\n            } else if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8o2md4jp.java:48: error: <identifier> expected\n            } else\
    \ if (length == 11 && word.charAt(0) == word.charAt(1) && word.\n            \
    \                                                                    ^\n/tmp/tmp8o2md4jp.java:50:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp8o2md4jp.java:50: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp8o2md4jp.java:50: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp8o2md4jp.java:50: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp8o2md4jp.java:50:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp8o2md4jp.java:60: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\")) {\n                result.add(word);\n            } else\
    \ if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (len == 3 && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (len == 3 && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"a\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnr2hfwjp.java:44: error: unclosed string literal\n            }\
    \ else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\n                                                                          \
    \                       ^\n/tmp/tmpnr2hfwjp.java:44: error: ')' expected\n   \
    \         } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\n                                                   \
    \                                                ^\n/tmp/tmpnr2hfwjp.java:46:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpnr2hfwjp.java:46: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpnr2hfwjp.java:46: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpnr2hfwjp.java:46: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpnr2hfwjp.java:46:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpnr2hfwjp.java:56: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7n6tobv3.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    a\")\n                    || len == 2 && word.startsWith(\"e\") && word.endsWith(\"\
    e\")\n                    || len == 2 && word.startsWith(\"i\") && word.endsWith(\"\
    i\")\n                    || len == 2 && word.startsWith(\"o\") && word.endsWith(\"\
    o\")\n                    || len == 2 && word.startsWith(\"u\") && word.endsWith(\"\
    u\")\n                    || len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\")\n                    || len == 3 && word.startsWith(\"i\") && word.endsWith(\"\
    o\")\n                    || len == 3 && word.startsWith(\"u\") && word.endsWith(\"\
    u\")\n                    || len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    o\")\n                    || len == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    i\")\n                    || len == 3 && word.startsWith(\"o\") && word.endsWith(\"\
    u\")\n                    || len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\")\n                    || len == 3 && word.startsWith(\"i\") && word.endsWith(\"\
    o\")\n                    || len == 3 && word.startsWith(\"u\") && word.endsWith(\"\
    u\")) {\n                result.add(word);\n            } else {\n           \
    \     result.add(word);\n            }\n        }\n        return result.stream().distinct().collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8lzgedol.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'm') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'n') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'o') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 't') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'e' && word.charAt(1) == 's') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'e' && word.charAt(1)\
    \ == 't') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'i' && word.charAt(1) == 's') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'i' && word.charAt(1)\
    \ == 't') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'l' && word.charAt(1) == 's') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'l' && word.charAt(1)\
    \ == 't') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'o' && word.charAt(1) == 'r') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'o' && word.charAt(1)\
    \ == 'v') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'o' && word.charAt(1) == 'w') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'o' && word.charAt(1)\
    \ == 'x') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'u' && word.charAt(1) == 's') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'u' && word.charAt(1)\
    \ == 't') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'y' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'y' && word.charAt(1)\
    \ == 't') {\n                result.add(word);\n            } else if (length\
    \ == 3 && word.charAt(0) == 'a' && word.charAt(1) == 'm' && word.charAt(2) ==\
    \ 's') {\n                result.add(word);\n            } else if (length ==\
    \ 3 && word.\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpybxoax_j.java:70: error: <identifier> expected\n            } else\
    \ if (length == 3 && word.\n                                           ^\n/tmp/tmpybxoax_j.java:72:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpybxoax_j.java:72: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpybxoax_j.java:72: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpybxoax_j.java:72: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpybxoax_j.java:72:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpybxoax_j.java:82: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'm') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'i') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'n') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 't') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'e' && word.charAt(1) ==\
    \ 's') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'e' && word.charAt(1) == 't') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'i' && word.charAt(1) ==\
    \ 's') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'i' && word.charAt(1) == 't') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'm' && word.charAt(1) ==\
    \ 'e') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'm' && word.charAt(1) == 'i') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'm' && word.charAt(1) ==\
    \ 'n') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'm' && word.charAt(1) == 't') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'n' && word.charAt(1) ==\
    \ 'g') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'n' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'n' && word.charAt(1) ==\
    \ 'w') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'n' && word.charAt(1) == 'm') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 't' && word.charAt(1) ==\
    \ 'o') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 't' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 't' && word.charAt(1) ==\
    \ 'e') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'w' && word.charAt(1) == 'i') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'w' && word.\n    }\n  \
    \  public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc9ltkwv9.java:70: error: <identifier> expected\n            } else\
    \ if (len == 2 && word.charAt(0) == 'w' && word.\n                           \
    \                                      ^\n/tmp/tmpc9ltkwv9.java:72: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpc9ltkwv9.java:72:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpc9ltkwv9.java:72: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpc9ltkwv9.java:72:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpc9ltkwv9.java:72: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpc9ltkwv9.java:82: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"e\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"i\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    i\") && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    i\") && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    i\") && word.startsWith(\"e\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    i\") && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    i\") && word.startsWith(\"e\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    i\") && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    i\") && word.startsWith(\"e\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    i\") && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    i\") && word.startsWith(\"e\") && word.endsWith(\"i\")) {\n                \n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_8azxpjk.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp_8azxpjk.java:59: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmp_8azxpjk.java:59: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmp_8azxpjk.java:59: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmp_8azxpjk.java:59: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp_8azxpjk.java:69:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && isPrime(length)) {\n     \
    \           result.add(word);\n            }\n            else if (length == 3\
    \ && isPrime(length)) {\n                result.add(word);\n            }\n  \
    \          else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 5 && isPrime(length)) {\n     \
    \           result.add(word);\n            }\n            else if (length == 6\
    \ && isPrime(length)) {\n                result.add(word);\n            }\n  \
    \          else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 8 && isPrime(length)) {\n     \
    \           result.add(word);\n            }\n            else if (length == 9\
    \ && isPrime(length)) {\n                result.add(word);\n            }\n  \
    \          else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 11 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 12 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 14 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 15 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 17 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 18 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 20 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 21 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 23 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 24 && isPrime(length)) {\n                result.add(word);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwssudm59.java:101: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpwssudm59.java:101: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpwssudm59.java:101: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpwssudm59.java:101: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpwssudm59.java:101: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpwssudm59.java:111: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\")) {\n                result.add(word);\n            } else\
    \ if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (len == 3 && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (len == 3 && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"a\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy5wrgg9d.java:44: error: unclosed string literal\n            }\
    \ else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\n                                                                          \
    \                       ^\n/tmp/tmpy5wrgg9d.java:44: error: ')' expected\n   \
    \         } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\n                                                   \
    \                                                ^\n/tmp/tmpy5wrgg9d.java:46:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpy5wrgg9d.java:46: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpy5wrgg9d.java:46: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpy5wrgg9d.java:46: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpy5wrgg9d.java:46:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpy5wrgg9d.java:56: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return String.join(\" \"\
    , result);\n\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprr8il7c3.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ov2zjmh.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprxiu_wm8.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 3 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 5 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 6 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 8 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 9 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 11 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 12 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 14 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 15 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 17 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 18 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 20 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 21 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 23 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 24 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 25 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 26 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 27 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 28 && isPrime(length)) {\n                result.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxwhb1gpq.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpxwhb1gpq.java:84: error: ';' expected\n    }\n     ^\n/tmp/tmpxwhb1gpq.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpxwhb1gpq.java:85: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpxwhb1gpq.java:85: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpxwhb1gpq.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpxwhb1gpq.java:95: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmpxwhb1gpq.java:96: error: reached end of file while parsing\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 2 && word.charAt(0)\
    \ == word.charAt(1)) {\n                result.add(word);\n            } else\
    \ if (length == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n  \
    \              result.add(word);\n            } else if (length == 4 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5))\
    \ {\n                result.add(word);\n            } else if (length == 4 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5)) {\n                result.add(word);\n            } else\
    \ if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)) {\n\
    \                result.add(word);\n            } else if (length == 5 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7)) {\n                result.add(word);\n\
    \            } else if (length == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                result.add(word);\n\
    \            } else if (length == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                result.add(word);\n\
    \            } else if (length == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11)) {\n\
    \                result.add(word);\n            } else if (length == 7 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11)) {\n                result.add(word);\n            } else\
    \ if (length == 8 && word.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpev4p0m1q.java:54: error: <identifier> expected\n            } else\
    \ if (length == 8 && word.\n                                           ^\n/tmp/tmpev4p0m1q.java:56:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpev4p0m1q.java:56: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpev4p0m1q.java:56: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpev4p0m1q.java:56: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpev4p0m1q.java:56:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpev4p0m1q.java:66: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj6oietii.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   }\n            if (length == 2 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            if (length == 3 && isPrime(length)) {\n          \
    \      result.add(word);\n            }\n            if (length == 4 && isPrime(length))\
    \ {\n                result.add(word);\n            }\n            if (length\
    \ == 5 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            if (length == 6 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            if (length == 7 && isPrime(length)) {\n          \
    \      result.add(word);\n            }\n            if (length == 8 && isPrime(length))\
    \ {\n                result.add(word);\n            }\n            if (length\
    \ == 9 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            if (length == 11 && isPrime(length)) {\n         \
    \       result.add(word);\n            }\n            if (length == 12 && isPrime(length))\
    \ {\n                result.add(word);\n            }\n            if (length\
    \ == 13 && isPrime(length)) {\n                result.add(word);\n           \
    \ }\n            if (length == 14 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            if (length == 15 && isPrime(length)) {\n         \
    \       result.add(word);\n            }\n            if (length == 16 && isPrime(length))\
    \ {\n                result.add(word);\n            }\n            if (length\
    \ == 17 && isPrime(length)) {\n                result.add(word);\n           \
    \ }\n            if (length == 18 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            if (length == 19 && isPrime(length)) {\n         \
    \       result.add(word);\n            }\n            if (length == 20 && isPrime(length))\
    \ {\n                result.add(word);\n            }\n            if (length\
    \ == 21 && isPrime(length)) {\n                result.add(word);\n           \
    \ }\n            if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            if (length == 23 && isPrime(length)) {\n         \
    \       result.add(word);\n            }\n            if (length == 24 && isPrime(length))\
    \ {\n                result.add(word);\n            }\n            if (length\
    \ == 25 && isPrime(length)) {\n                result.add(word);\n           \
    \ }\n            if (\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzye1fcg3.java:104: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmpzye1fcg3.java:105: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpzye1fcg3.java:105: error:\
    \ ';' expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpzye1fcg3.java:105:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpzye1fcg3.java:105: error: ';' expected\n   \
    \ public static void main(String[] args) {\n                           ^\n/tmp/tmpzye1fcg3.java:105:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpzye1fcg3.java:115: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx22rz8cx.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphjk58cn4.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
