name: HumanEval_128_prod_signs
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ sign = -1;\n        if (sum < 0) {\n            sign = 1;\n            sum *=\
    \ -1;\n        }\n        return Optional.of(sign * Math.signum(product) * sum);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6n6mb18s.java:32: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa4mk55i0.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        for (long i : arr) {\n            sum += i;\n  \
    \      }\n        if (arr.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        long product = 1;\n        for (long i : arr) {\n        \
    \    product *= i;\n        }\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            sign *= i;\n        }\n        return Optional.of(sign * Math.pow(sum,\
    \ product));\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpui5x4s6r.java:33: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(sum, product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Double\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sign = 1;\n        for (long i : arr) {\n\
    \            product *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n\
    \        return Optional.of(sign * product);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph6yo001g.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (product == 0) {\n            return Optional.empty();\n        }\n   \
    \     return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_qym2eg6.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvytlk474.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1, sign = 1;\n        for (long i : arr) {\n           \
    \ product *= i;\n            sign *= (i < 0) ? 1 : -1;\n        }\n        if\
    \ (product == 0) {\n            return Optional.empty();\n        }\n        return\
    \ Optional.of(sign * Math.signum(product));\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6abagyfu.java:26: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (Long\
    \ i : arr) {\n            product *= sign;\n            sign *= i;\n        }\n\
    \        return Optional.of(product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr9oogz7b.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long num : arr)\
    \ {\n            sum += Math.abs(num);\n            product *= num;\n        }\n\
    \        return Optional.ofNullable(sum * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqoxnzy8.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqi68nh50.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        if (product == 0) return Optional.empty();\n\
    \        long sign = 1;\n        for (long i : arr) {\n            sign *= i;\n\
    \        }\n        return Optional.of(sign * Math.signum(product) * sum);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_4nt4su8.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphzxflg0g.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = arr.get(0);\n\
    \        long sum = 0;\n        for (int i = 1; i < arr.size(); i++) {\n     \
    \       long magnitude = arr.get(i);\n            sum += magnitude * product;\n\
    \            product *= magnitude;\n        }\n        return Optional.of(sum);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwilxlmpb.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(product, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0v7s_kfw.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (sum\
    \ < 0) {\n            sum *= -1;\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk_ek_eyt.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sign = 1;\n        for (long i : arr) {\n            product *=\
    \ i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n        return Optional.of(sign\
    \ * Math.signum(product));\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp840od8st.java:25: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpngrw737t.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = Long.MIN_VALUE;\n        long sum = 0;\n        for (long\
    \ i : arr) {\n            sum += i;\n            product *= i;\n        }\n  \
    \      if (product == Long.MIN_VALUE) {\n            return Optional.empty();\n\
    \        }\n        long sign = 1;\n        for (long i : arr) {\n           \
    \ sign *= i;\n        }\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphdx9_zst.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (Long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (arr.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl8nf6q4j.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   return Optional.ofNullable(sum * product);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5kygknmk.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(sum, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbw6ma_1m.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(sum, arr.size()));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Double\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   return Optional.ofNullable(sum * product);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyxbbzutf.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (Long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (Long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph5q4t_tq.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            product *= arr.get(i);\n        }\n        long sign = 1;\n \
    \       for (int i = 0; i < arr.size(); i++) {\n            sign *= (arr.get(i)\
    \ < 0 ? -1 : 1);\n        }\n        return Optional.of(sign * product);\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0zqxb3i8.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.signum(i) * Math.signum(product);\n            product\
    \ *= i;\n        }\n        if (product == 0) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(sum);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2mvzwypv.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        for (long i : arr) {\n            product *= i;\n        }\n        long\
    \ sum = 0;\n        for (long i : arr) {\n            sum += Math.signum(i);\n\
    \        }\n        return Optional.of(product * sum);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0u_c3vd7.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4v38qxj8.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ sign = -1;\n        if (sum < 0) {\n            sign = 1;\n            sum *=\
    \ -1;\n        }\n        return Optional.of(sign * Math.pow(product, arr.size()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp14ezwxcz.java:32: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppyhpha3m.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(product * sum);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoph6lroc.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (Long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(product)\
    \ * Math.signum(sum));\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9iy8z2_9.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(product) *\
    \ Math.signum(sum));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Float\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjcder1gc.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ sign = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n\
    \        if (sign == 0) {\n            return Optional.empty();\n        }\n \
    \       return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprcp38okv.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgyoa4p8m.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (Long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9nrfp1da.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.signum(i) * Math.signum(product);\n            product\
    \ *= i;\n        }\n        return Optional.ofNullable(sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgshp7w7l.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= i;\n        }\n        long\
    \ magnitude = product;\n        if (product == 0) {\n            return Optional.empty();\n\
    \        }\n        long signMagnitude = sign * magnitude;\n        return Optional.of(signMagnitude);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5igt1toq.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(product, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps9yqia35.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= i;\n        }\n        if\
    \ (product == 0) {\n            return Optional.empty();\n        }\n        return\
    \ Optional.of(sign * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpby52652r.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppt7ca_3w.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ sign = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n\
    \        return Optional.of(sign * Math.pow(product, sum));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvpmkknzc.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ sum));\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Double\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n  \
    \      return Optional.of(Math.signum(sum) * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4cox952a.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        for (long i : arr) {\n            product *=\
    \ i;\n        }\n        long sign = 1;\n        for (long i : arr) {\n      \
    \      sign *= i;\n        }\n        return Optional.ofNullable(sign * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_yblwqqt.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sum = 0;\n        for (long\
    \ i : arr) {\n            sum += Math.signum(i) * Math.signum(product);\n    \
    \        product *= i;\n        }\n        return Optional.of(sum);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyqx1uqfc.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += Math.signum(i)\
    \ * i;\n            product *= i;\n        }\n        return Optional.of(sum *\
    \ product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4sueehko.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(product)\
    \ * Math.signum(sum));\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgf72eq9j.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(product) *\
    \ Math.signum(sum));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Float\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            product *= arr.get(i);\n        }\n        long sign = 1;\n \
    \       for (int i = 0; i < arr.size(); i++) {\n            sign *= arr.get(i);\n\
    \            if (sign < 0) {\n                sign = -sign;\n            }\n \
    \       }\n        return Optional.of(sign * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3wg6624r.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = arr.get(0) * arr.get(1);\n        long sum = 0;\n      \
    \  for (long i : arr) {\n            sum += Math.signum(i) * Math.signum(product);\n\
    \            product *= i;\n        }\n        return Optional.ofNullable(sum);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx42h15di.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0) * 1;\n        long sum = 0;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            long magnitude = arr.get(i) * 1;\n\
    \            sum += magnitude;\n            product *= magnitude;\n        }\n\
    \        return Optional.of(Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2thg31j_.java:28: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(product) *\
    \ sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk4syi1nt.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of(Math.signum(sum) * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_pv_9_qc.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long num : arr)\
    \ {\n            sum += Math.abs(num);\n            product *= num;\n        }\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps9k2qg_u.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n  \
    \      return Optional.of(Math.signum(sum) * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf3uq8z1m.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= (i < 0) ? -1 : 1;\n      \
    \  }\n        return Optional.of(sign * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg8gn077h.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1, sign = 1;\n        for (long i : arr) {\n           \
    \ product *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n        return\
    \ Optional.ofNullable(product).map(Math::abs).orElse(sign);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg1w1a75l.java:23: error: incompatible types: Long cannot be converted\
    \ to Optional<Long>\n        return Optional.ofNullable(product).map(Math::abs).orElse(sign);\n\
    \                                                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (sum\
    \ < 0) {\n            sum *= -1;\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptbu3c3b4.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(Long.valueOf(product));\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf6bvg9ll.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        if (product == 0) return Optional.empty();\n\
    \        if (product == 1) return Optional.of(sum);\n        long sign = 1;\n\
    \        for (long i : arr) {\n            sign *= i;\n        }\n        return\
    \ Optional.of(sign * sum);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppcomegx2.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptrcp14om.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2vjb9gg7.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (sum\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb34e5v46.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptcc4oxq4.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvrgqklhi.java:25: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (long\
    \ i : arr) {\n            product *= sign;\n            sign *= i;\n        }\n\
    \        return Optional.of(product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg6682xnf.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(sum, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3vlcu7iz.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(sum, arr.size()));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Double\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        for (long i : arr) {\n            product *= i;\n        }\n        long\
    \ sum = 0;\n        for (long i : arr) {\n            sum += Math.signum(i);\n\
    \        }\n        return Optional.of(product * sum);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe86m852b.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (long\
    \ i : arr) {\n            product *= i;\n            sign *= i;\n        }\n \
    \       return Optional.of(sign * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu10rx5t8.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        return Optional.of(Math.signum(product)\
    \ * Math.signum(sum));\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmperhw6tej.java:25: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(product) *\
    \ Math.signum(sum));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Float\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return None;\n        long sum = 0;\n        long product\
    \ = 1;\n        for (Long i : arr) {\n            sum += i;\n            product\
    \ *= i;\n        }\n        if (sum == 0) return None;\n        long sign = -1;\n\
    \        for (Long i : arr) {\n            sign *= i;\n        }\n        return\
    \ Optional.of(sign * Math.signum(product));\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9poxfl7i.java:18: error: cannot find symbol\n        if (arr.isEmpty())\
    \ return None;\n                                  ^\n  symbol:   variable None\n\
    \  location: class Problem\n/tmp/tmp9poxfl7i.java:25: error: cannot find symbol\n\
    \        if (sum == 0) return None;\n                             ^\n  symbol:\
    \   variable None\n  location: class Problem\n/tmp/tmp9poxfl7i.java:30: error:\
    \ incompatible types: inference variable T has incompatible bounds\n        return\
    \ Optional.of(sign * Math.signum(product));\n                          ^\n   \
    \ equality constraints: Long\n    lower bounds: Float\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>of(T)\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sign = 1;\n        for (long i : arr) {\n\
    \            product *= i;\n            sign *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(sign\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3lxullj.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (sum\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(product, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuopstgr8.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuo62xv2i.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return None;\n        long product = 1;\n        long\
    \ sum = 0;\n        for (long i : arr) {\n            sum += i;\n            product\
    \ *= i;\n        }\n        if (sum < 0) return None;\n        if (product ==\
    \ 0) return None;\n        return Optional.of(Math.signum(sum) * product);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqtar1b2i.java:18: error: cannot find symbol\n        if (arr.isEmpty())\
    \ return None;\n                                  ^\n  symbol:   variable None\n\
    \  location: class Problem\n/tmp/tmpqtar1b2i.java:25: error: cannot find symbol\n\
    \        if (sum < 0) return None;\n                            ^\n  symbol: \
    \  variable None\n  location: class Problem\n/tmp/tmpqtar1b2i.java:26: error:\
    \ cannot find symbol\n        if (product == 0) return None;\n               \
    \                  ^\n  symbol:   variable None\n  location: class Problem\n/tmp/tmpqtar1b2i.java:27:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \      return Optional.of(Math.signum(sum) * product);\n                     \
    \     ^\n    equality constraints: Long\n    lower bounds: Float\n  where T is\
    \ a type-variable:\n    T extends Object declared in method <T>of(T)\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= sign;\n            sign\
    \ *= arr.get(i);\n        }\n        return Optional.of(product);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdn0fmix9.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.signum(i) * Math.signum(i);\n            product *= i;\n\
    \        }\n        if (arr.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(sum * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphsn_gjff.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= arr.get(i);\n        \
    \    sign *= -1;\n        }\n        return Optional.of(sign * product);\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcq63ckd2.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        Optional<Long>\
    \ result = Optional.of(Math.signum(sum) * product);\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ror9p3a.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        Optional<Long> result = Optional.of(Math.signum(sum)\
    \ * product);\n                                           ^\n    equality constraints:\
    \ Long\n    lower bounds: Float\n  where T is a type-variable:\n    T extends\
    \ Object declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= (i < 0 ? -1 : 1);\n      \
    \  }\n        return Optional.of(sign * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnk0vo9xa.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += Math.signum(i);\n\
    \            product *= i;\n        }\n        return Optional.of(sum * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzglx9dp.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (Long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx5gqnjda.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of(Math.signum(sum) * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpss65f9ko.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (arr.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        long sign = -1;\n\
    \        for (long i : arr) {\n            sign *= i;\n        }\n        return\
    \ Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj6n9tke7.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1gwletsx.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += Math.signum(i)\
    \ * Math.signum(product);\n            product *= i;\n        }\n        return\
    \ Optional.of(sum);\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq5w9226y.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of(Math.signum(sum) * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpstox0nx9.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= i;\n        }\n        if\
    \ (product == 0) {\n            return Optional.empty();\n        }\n        return\
    \ Optional.of(sign * Math.pow(product, arr.size()));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3f3pc40n.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (product == 0) {\n            return Optional.empty();\n        }\n   \
    \     return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpao6cq5en.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        for (long i : arr) {\n            product *=\
    \ i;\n        }\n        long sum = 0;\n        for (long i : arr) {\n       \
    \     sum += Math.abs(i);\n        }\n        return Optional.ofNullable(product\
    \ * sum);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzqc17cyc.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = arr.get(0);\n        long sign = 1;\n        for (long i\
    \ : arr) {\n            product *= i;\n            sign *= i;\n        }\n   \
    \     if (product == 0) {\n            return Optional.empty();\n        }\n \
    \       return Optional.of(sign * Math.signum(product));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv7luz6fw.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sum = 0;\n        for (int i\
    \ = 1; i < arr.size(); i++) {\n            long magnitude = arr.get(i);\n    \
    \        sum += magnitude * product;\n            product *= magnitude;\n    \
    \    }\n        return Optional.of(sum);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4n4bero3.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= sign;\n            sign\
    \ *= arr.get(i);\n        }\n        return Optional.of(product);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_6c6namd.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        for (long i : arr) {\n            sum += i;\n  \
    \      }\n        if (sum == 0) {\n            return Optional.empty();\n    \
    \    }\n        long product = 1;\n        for (long i : arr) {\n            product\
    \ *= i;\n        }\n        long sign = 1;\n        for (long i : arr) {\n   \
    \         sign *= i;\n        }\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqatk_s_9.java:33: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (arr.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsntwt_0c.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (Long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (Long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy17dvvm4.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = Long.MIN_VALUE;\n        long sum = 0;\n        for (long\
    \ num : arr) {\n            sum += Math.abs(num);\n            product *= num;\n\
    \        }\n        if (product == Long.MIN_VALUE) return Optional.empty();\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvreg5l78.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long num : arr)\
    \ {\n            sum += Math.abs(num);\n            product *= num;\n        }\n\
    \        if (product == 0) {\n            return Optional.empty();\n        }\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm328pf4.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long num : arr)\
    \ {\n            sum += Math.abs(num);\n            product *= num;\n        }\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0u_9o7g6.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long num : arr)\
    \ {\n            sum += Math.abs(num);\n            product *= num;\n        }\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkma2344i.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = arr.get(0);\n\
    \        long sum = 0;\n        for (int i = 1; i < arr.size(); i++) {\n     \
    \       long magnitude = arr.get(i);\n            long sign = arr.get(i) < 0 ?\
    \ -1 : 1;\n            product *= sign;\n            sum += magnitude * product;\n\
    \        }\n        return Optional.of(sum);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkk2urig9.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        Optional<Long>\
    \ result = Optional.of(sum);\n        if (product != 0) {\n            result\
    \ = result.map(x -> x * product);\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpty9_293d.java:29: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n            result = result.map(x\
    \ -> x * product);\n                                         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6rphxz9j.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8umefh0c.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = arr.get(0)\
    \ * 1;\n        long sum = 0;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            long magnitude = arr.get(i) * 1;\n            sum += magnitude;\n\
    \            product *= magnitude;\n        }\n        if (sum == 0) return Optional.empty();\n\
    \        return Optional.of(Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo01bsbr8.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxsvqir6x.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for(long num : arr) {\n\
    \            sum += Math.abs(num);\n            product *= num;\n        }\n \
    \       if(sum == 0) return Optional.empty();\n        return Optional.of(product\
    \ * sum);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7reketjp.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(product, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp53r441dt.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n  \
    \      return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpva_tsy3k.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sign = 1;\n        for (long i : arr) {\n\
    \            product *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n\
    \        return Optional.of(sign * product);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7yk4h772.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        if (sum < 0) return Optional.empty();\n\
    \        if (product == 0) return Optional.empty();\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpufdnuwhw.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        if (product == 0) return Optional.empty();\n\
    \        long sign = 1;\n        for (long i : arr) {\n            sign *= i;\n\
    \        }\n        return Optional.of(sign * Math.pow(product, arr.size()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpucyqfdon.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb4wxlw4v.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(Long.valueOf(Math.signum(sum) * product));\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppjryo3yw.java:27: error: no suitable method found for valueOf(float)\n\
    \        return Optional.of(Long.valueOf(Math.signum(sum) * product));\n     \
    \                          ^\n    method Long.valueOf(String) is not applicable\n\
    \      (argument mismatch; float cannot be converted to String)\n    method Long.valueOf(long)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ float to long)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (sum\
    \ == 0 || product == 0) {\n            return Optional.empty();\n        }\n \
    \       return Optional.of(Math.signum(sum) * Math.signum(product));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp66n1t_jj.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = Long.MIN_VALUE;\n        long sum = 0;\n        for (long\
    \ i : arr) {\n            sum += i;\n            product *= i;\n        }\n  \
    \      if (product == 0) {\n            return Optional.empty();\n        }\n\
    \        long sign = 1;\n        for (long i : arr) {\n            sign *= i;\n\
    \        }\n        return Optional.of(sign * Math.signum(product) * sum);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_4aa049x.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(sum, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcofbm20l.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(sum, arr.size()));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Double\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        if (product == 0) return Optional.empty();\n\
    \        return Optional.of(Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfcj7jr3f.java:26: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.signum(i) * Math.signum(product);\n            product\
    \ *= i;\n        }\n        return Optional.ofNullable(sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ozhvn2a.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpemnol16y.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0) * 1;\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= arr.get(i);\n        \
    \    sign *= arr.get(i);\n        }\n        return Optional.of(sign * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpilal1ihv.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for(long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if(product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8qit5hoo.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (Long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of(Math.signum(sum) * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfdpda4hj.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpikb7rv91.java:25: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sign = 1;\n        for (long i : arr) {\n\
    \            product *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n\
    \        return Optional.of((long) Math.pow(product, sign));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx95dbwop.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(product)\
    \ * Math.signum(sum));\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphl3lll1_.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(product) *\
    \ Math.signum(sum));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Float\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgc2cn_xg.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sign = 1;\n        for (long i : arr) {\n\
    \            product *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n\
    \        if (product == 0) {\n            return Optional.empty();\n        }\n\
    \        return Optional.of(sign * Math.signum(product));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgh_3qr4v.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmbuhabjp.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkusrkc77.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ sign = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n\
    \        if (sign == 0) {\n            return Optional.empty();\n        }\n \
    \       return Optional.of(Math.signum(sum) * Math.signum(product));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnvevn79s.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        for (long i : arr) {\n            product *=\
    \ i;\n        }\n        long sum = 0;\n        for (long i : arr) {\n       \
    \     sum += Math.abs(i);\n        }\n        return Optional.ofNullable(sum *\
    \ product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpir0mawtw.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            product *= arr.get(i);\n        }\n        long sign = 1;\n \
    \       for (int i = 0; i < arr.size(); i++) {\n            sign *= arr.get(i);\n\
    \        }\n        return Optional.of(sign * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp46h6d53z.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= (i < 0) ? -1 : 1;\n      \
    \  }\n        return Optional.of(sign * Math.signum(product));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbdw2nin1.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= sign;\n            sign\
    \ *= arr.get(i);\n        }\n        return Optional.of(product);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ec9uye3.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        for (long i : arr) {\n          \
    \  product *= i;\n        }\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            sign *= i;\n        }\n        return Optional.of(sign * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz5h_pnzm.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = arr.get(0) * 1;\n        long sum = 0;\n        for (Long\
    \ i : arr) {\n            sum += i * product;\n            product *= i;\n   \
    \     }\n        return Optional.ofNullable(sum);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpid7d65sj.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp263u87kh.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8c8jlo1d.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1, sign = 1;\n        for (long i : arr) {\n           \
    \ product *= i;\n            sign *= (i < 0 ? -1 : 1);\n        }\n        return\
    \ Optional.ofNullable(product).map(Math::abs).orElse(sign);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmzjez7kn.java:23: error: incompatible types: Long cannot be converted\
    \ to Optional<Long>\n        return Optional.ofNullable(product).map(Math::abs).orElse(sign);\n\
    \                                                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (sum\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = -1;\n        if (product > 0) {\n            sign = 1;\n        } else if\
    \ (product < 0) {\n            sign = -1;\n        }\n        return Optional.of(sign\
    \ * Math.pow(sum, arr.size()));\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp774vs_77.java:33: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(sum, arr.size()));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Double\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (Long l : arr)\
    \ {\n            sum += Math.abs(l);\n            product *= l;\n        }\n \
    \       return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82hgltu9.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.signum(i) * Math.signum(product);\n            product\
    \ *= i;\n        }\n        if (product == 0) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(sum);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptv87v65g.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (Long l : arr)\
    \ {\n            product *= l;\n            sign *= (l < 0 ? -1 : 1);\n      \
    \  }\n        return Optional.of(sign * Math.pow(product, arr.size()));\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptdmqzf6n.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= (i < 0 ? -1 : 1);\n      \
    \  }\n        return Optional.of(sign * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp535k9b7u.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of(Math.signum(sum) * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgvlvy2h8.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnm74j2q0.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (Long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of((long) (Math.signum(sum) * product));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_uea6gzt.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = arr.get(0) * 1;\n        for (long i : arr) {\n        \
    \    product *= i;\n        }\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += Math.abs(i);\n        }\n        return Optional.ofNullable(sum\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgo_pqpu6.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzv40yxzn.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1, sign = 1;\n        for (long i : arr) {\n           \
    \ product *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n        if\
    \ (product == 0) return Optional.empty();\n        return Optional.of(sign * Math.signum(product));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7c7xyvdy.java:24: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr6yw2xee.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(product * sum);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt3z2gau5.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for(long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if(arr.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        long sign = -1;\n\
    \        for(long i : arr) {\n            sign *= i;\n        }\n        return\
    \ Optional.of(sign * Math.pow(product, arr.size()));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaimegdnk.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjbym3524.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptpwcu9g2.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxo8e8rie.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= i;\n        }\n        return\
    \ Optional.of(sign * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyff8uott.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(product)\
    \ * Math.signum(sum));\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmysfx9up.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(product) *\
    \ Math.signum(sum));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Float\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (product == 0) {\n            return Optional.empty();\n        }\n   \
    \     return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpko2i8eoe.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnrw5bqho.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0) * 1;\n        long sum = 0;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            long magnitude = arr.get(i) * 1;\n\
    \            sum += magnitude;\n            product *= magnitude;\n        }\n\
    \        if (product == 0) {\n            return Optional.empty();\n        }\n\
    \        return Optional.of(sum);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpriywxiqm.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdeih_96c.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.signum(i) * i;\n            product *= i;\n        }\n\
    \        if (product == 0) {\n            return Optional.empty();\n        }\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2mrkgne9.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (Long value : arr)\
    \ {\n            sum += Math.abs(value);\n            product *= value;\n    \
    \    }\n        return Optional.of(sum * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb5yzlbuk.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= sign;\n            sign\
    \ *= arr.get(i);\n        }\n        return Optional.of(product);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzjdo4zrg.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long num : arr)\
    \ {\n            sum += Math.abs(num);\n            product *= num;\n        }\n\
    \        if (product == 0) {\n            return Optional.empty();\n        }\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_uqysc6y.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= sign;\n            sign\
    \ *= arr.get(i);\n        }\n        return Optional.of(product);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfg0_spqf.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sign = 1;\n        for (long i : arr) {\n            product *=\
    \ i;\n            sign *= i;\n        }\n        return Optional.of(sign * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg42fc4tl.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (long\
    \ i : arr) {\n            product *= i;\n            sign *= i;\n        }\n \
    \       return Optional.of(sign * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpieq5b1ro.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ sign = -1;\n        if (sum < 0) {\n            sign = 1;\n            sum *=\
    \ -1;\n        }\n        return Optional.of(sign * Math.signum(sum) * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpembsrh0o.java:32: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5q_ohklf.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ magnitude = Long.MAX_VALUE;\n        for (long i : arr) {\n            magnitude\
    \ += Math.signum(i);\n        }\n        return Optional.of(magnitude * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn7dalljc.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0) * 1;\n        long sum = 0;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            long magnitude = arr.get(i) * 1;\n\
    \            sum += magnitude;\n            product *= magnitude;\n        }\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa_9d_tpq.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7eboxfpn.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (Long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (Long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(sum, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphq90dufe.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(sum, arr.size()));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Double\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5je84gaf.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcttlqvbg.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sum = 0;\n        for (int i\
    \ = 1; i < arr.size(); i++) {\n            product *= arr.get(i);\n          \
    \  sum += Math.abs(product);\n        }\n        return Optional.of(sum);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppr6xlihs.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (long\
    \ i : arr) {\n            product *= sign;\n            sign *= i;\n        }\n\
    \        return Optional.of(product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy2sxjxzp.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (long\
    \ i : arr) {\n            product *= sign;\n            sign *= i;\n        }\n\
    \        return Optional.of(product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcc3pk1jz.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1, sum = 0;\n        for (Long i : arr) {\n            sum\
    \ += i;\n            product *= i;\n        }\n        if (product == 0) {\n \
    \           return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp77sswbog.java:26: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ sign = product > 0 ? 1 : -1;\n        return Optional.of(sign * Math.signum(sum));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwseaphmg.java:28: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= sign;\n            sign\
    \ *= arr.get(i);\n        }\n        return Optional.of(product);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa05c4m7f.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of(Math.signum(sum) * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6_ftaz8f.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (long\
    \ i : arr) {\n            product *= sign;\n            sign *= i;\n        }\n\
    \        return Optional.of(product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm4qjq974.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = Long.MIN_VALUE;\n        long sum = 0;\n        for (long\
    \ i : arr) {\n            sum += i;\n            product *= i;\n        }\n  \
    \      if (product == Long.MIN_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(Math.signum(product) * Math.signum(sum));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbs_ootaz.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(product) *\
    \ Math.signum(sum));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Float\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return None;\n        long product = 1;\n        long\
    \ sum = 0;\n        for (Long i : arr) {\n            sum += i;\n            product\
    \ *= i;\n        }\n        if (sum == 0) return None;\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptir510ii.java:18: error: cannot find symbol\n        if (arr.isEmpty())\
    \ return None;\n                                  ^\n  symbol:   variable None\n\
    \  location: class Problem\n/tmp/tmptir510ii.java:25: error: cannot find symbol\n\
    \        if (sum == 0) return None;\n                             ^\n  symbol:\
    \   variable None\n  location: class Problem\n/tmp/tmptir510ii.java:26: error:\
    \ incompatible types: inference variable T has incompatible bounds\n        return\
    \ Optional.of(Math.signum(sum) * product);\n                          ^\n    equality\
    \ constraints: Long\n    lower bounds: Float\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>of(T)\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwxfcmezq.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        long sign = 1;\n    \
    \    for (long i : arr) {\n            sum += sign * i;\n            product *=\
    \ sign;\n            sign *= -1;\n        }\n        return Optional.ofNullable(sum);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo1tm_yf7.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfh_0g35l.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of((long) (Math.signum(sum) * product));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt7t7lfnv.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        for (long i : arr) {\n            product *=\
    \ i;\n        }\n        long sign = 1;\n        for (long i : arr) {\n      \
    \      sign *= i;\n        }\n        if (product == 0) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(sign * product);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp4ncbi39.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpie1p6h3r.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = Long.MIN_VALUE;\n        long sum = 0;\n        for (long\
    \ i : arr) {\n            sum += i;\n            product *= i;\n        }\n  \
    \      if (product == Long.MIN_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(Math.signum(sum) * product);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpukpzhp9r.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        if (product == 0) return Optional.empty();\n\
    \        long sign = 1;\n        for (long i : arr) {\n            sign *= i;\n\
    \        }\n        return Optional.of(sign * Math.signum(sum) * product);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxa5yf3td.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (Long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (product == 0) {\n            return Optional.empty();\n        }\n   \
    \     return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpebcx35ob.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.signum(i) * Math.signum(product);\n            product\
    \ *= i;\n        }\n        return Optional.ofNullable(sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzg4h0m_o.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sum = 0;\n        for (int i\
    \ = 1; i < arr.size(); i++) {\n            long magnitude = arr.get(i);\n    \
    \        long sign = arr.get(i) * product;\n            sum += sign * magnitude;\n\
    \            product *= sign;\n        }\n        return Optional.of(sum);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprev7rfl6.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= i;\n        }\n        if\
    \ (product == 0) {\n            return Optional.empty();\n        }\n        return\
    \ Optional.of(sign * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb528g06y.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf6vwxb8n.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (Long l : arr) {\n            sum += Math.abs(l);\n\
    \            product *= l;\n        }\n        return Optional.of(sum * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpikp2azqo.java:29)\n"
  exit_code: 1
  status: Exception
