name: HumanEval_6_parse_nested_parens
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack2 = new ArrayList<>();\n        ArrayList<Long> levels_stack3 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack6 = new ArrayList<>();\n        ArrayList<Long> levels_stack7 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack10 = new ArrayList<>();\n        ArrayList<Long> levels_stack11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack14 = new ArrayList<>();\n        ArrayList<Long> levels_stack15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack18 = new ArrayList<>();\n        ArrayList<Long> levels_stack19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack22 = new ArrayList<>();\n        ArrayList<Long> levels_stack23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack26 = new ArrayList<>();\n        ArrayList<Long> levels_stack27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack30 = new ArrayList<>();\n        ArrayList<Long> levels_stack31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack34 = new ArrayList<>();\n        ArrayList<Long> levels_stack35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack38 = new ArrayList<>();\n        ArrayList<Long> levels_stack39\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack40 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack41 = new ArrayList<>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6iu293he.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ohde66l.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<String> parens = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings = new ArrayList<>();\n        ArrayList<String> paren_strings_copy\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy2 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy3 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy4 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy5\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy6 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy7 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy8 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy9\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy10 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy11 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_copy12 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy13 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy14\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy15 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy16 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_copy17 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy18 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy19\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy20 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy21 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_copy22 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy23 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy24\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy25 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy26 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_copy27 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy28 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy29\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy30 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy31 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_copy32 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy33 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy34\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy35 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy36 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_copy37 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy38 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy39\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy40 = new \n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp97qvldoz.java:58: error: <identifier> expected\n        ArrayList<String>\
    \ paren_strings_copy40 = new \n                                              \
    \      ^\n/tmp/tmp97qvldoz.java:59: error: '(' or '[' expected\n    }\n    ^\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph4z5irb5.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmph4z5irb5.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmux9_rsa.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpmux9_rsa.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> level = new ArrayList<>();\n       \
    \ ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long> levels_stack\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy3 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy7 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy11 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy15 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy19 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy23 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy27 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy31 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy35 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36\
    \ = new ArrayList<>();\n        ArrayList<Long> level\n    }\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgxxse0jt.java:55: error: ';' expected\n        ArrayList<Long>\
    \ level\n                             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph_f3gswf.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm09j8rhw.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n      \
    \  ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0bpkgypn.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ivq4kjk.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp3ivq4kjk.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> level = new ArrayList<>();\n \
    \       ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long> levels_stack\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack2 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack3 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack4 = new ArrayList<>();\n        ArrayList<Long> levels_stack5 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack8 = new ArrayList<>();\n        ArrayList<Long> levels_stack9 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack12 = new ArrayList<>();\n        ArrayList<Long> levels_stack13\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack14 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack15 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack16 = new ArrayList<>();\n        ArrayList<Long> levels_stack17\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack20 = new ArrayList<>();\n        ArrayList<Long> levels_stack21\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack24 = new ArrayList<>();\n        ArrayList<Long> levels_stack25\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack26 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack27 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack28 = new ArrayList<>();\n        ArrayList<Long> levels_stack29\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack32 = new ArrayList<>();\n        ArrayList<Long> levels_stack33\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack36 = new ArrayList<>();\n        ArrayList<Long> levels_stack37\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack38 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack39 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack40 = new ArrayList<>();\n        ArrayList<Long\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8f4lfjoe.java:59: error: > expected\n    }\n    ^\n/tmp/tmp8f4lfjoe.java:58:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> stack = new ArrayList<>();\n       \
    \ ArrayList<Long> stack2 = new ArrayList<>();\n        ArrayList<Long> stack3\
    \ = new ArrayList<>();\n        ArrayList<Long> stack4 = new ArrayList<>();\n\
    \        ArrayList<Long> stack5 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack6 = new ArrayList<>();\n        ArrayList<Long> stack7 = new ArrayList<>();\n\
    \        ArrayList<Long> stack8 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack9 = new ArrayList<>();\n        ArrayList<Long> stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack12 = new ArrayList<>();\n        ArrayList<Long> stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack15 = new ArrayList<>();\n        ArrayList<Long> stack16 = new ArrayList<>();\n\
    \        ArrayList<Long> stack17 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack18 = new ArrayList<>();\n        ArrayList<Long> stack19 = new ArrayList<>();\n\
    \        ArrayList<Long> stack20 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack21 = new ArrayList<>();\n        ArrayList<Long> stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack24 = new ArrayList<>();\n        ArrayList<Long> stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack27 = new ArrayList<>();\n        ArrayList<Long> stack28 = new ArrayList<>();\n\
    \        ArrayList<Long> stack29 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack30 = new ArrayList<>();\n        ArrayList<Long> stack31 = new ArrayList<>();\n\
    \        ArrayList<Long> stack32 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack33 = new ArrayList<>();\n        ArrayList<Long> stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack36 = new ArrayList<>();\n        ArrayList<Long> stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack39 = new ArrayList<>();\n        ArrayList<Long> stack40 = new ArrayList<>();\n\
    \        ArrayList<Long> stack41 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack42 = new ArrayList<>();\n        ArrayList<Long> stack43 = new ArrayList<>();\n\
    \        ArrayList<Long> stack44 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack45 = new ArrayList<>();\n        ArrayList<Long> stack46 = new ArrayList<>();\n\
    \        ArrayList<Long> stack47 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack48 = new ArrayList<>();\n        ArrayList<Long> stack49 = new ArrayList<>();\n\
    \        ArrayList<Long> stack50 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7wzhjgtf.java:66: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> level = new ArrayList<>();\n \
    \       ArrayList<Long> level_count = new ArrayList<>();\n        ArrayList<Long>\
    \ level_count_2 = new ArrayList<>();\n        ArrayList<Long> level_count_3 =\
    \ new ArrayList<>();\n        ArrayList<Long> level_count_4 = new ArrayList<>();\n\
    \        ArrayList<Long> level_count_5 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_count_6 = new ArrayList<>();\n        ArrayList<Long> level_count_7 =\
    \ new ArrayList<>();\n        ArrayList<Long> level_count_8 = new ArrayList<>();\n\
    \        ArrayList<Long> level_count_9 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_count_10 = new ArrayList<>();\n        ArrayList<Long> level_count_11\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_12 = new ArrayList<>();\n\
    \        ArrayList<Long> level_count_13 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_count_14 = new ArrayList<>();\n        ArrayList<Long> level_count_15\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_16 = new ArrayList<>();\n\
    \        ArrayList<Long> level_count_17 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_count_18 = new ArrayList<>();\n        ArrayList<Long> level_count_19\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_20 = new ArrayList<>();\n\
    \        ArrayList<Long> level_count_21 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_count_22 = new ArrayList<>();\n        ArrayList<Long> level_count_23\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_24 = new ArrayList<>();\n\
    \        ArrayList<Long> level_count_25 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_count_26 = new ArrayList<>();\n        ArrayList<Long> level_count_27\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_28 = new ArrayList<>();\n\
    \        ArrayList<Long> level_count_29 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_count_30 = new ArrayList<>();\n        ArrayList<Long> level_count_31\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_32 = new ArrayList<>();\n\
    \        ArrayList<Long> level_count_33 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_count_34 = new ArrayList<>();\n        ArrayList<Long> level_count_35\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_36 = new ArrayList<>();\n\
    \        ArrayList<Long> level_count_37 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_count_38 = new ArrayList<>();\n        ArrayList<Long> level_count_39\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_40 = new ArrayList<>();\n\
    \        ArrayList<Long> level_count_41 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_count_42 = new ArrayList<>();\n        ArrayList<Long> level_count_43\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_44 = new ArrayList<>();\n\
    \        ArrayList<Long> level_\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcxx19z7y.java:61: error: ';' expected\n        ArrayList<Long>\
    \ level_\n                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpojc4uo90.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> current_level = new ArrayList<>();\n\
    \        ArrayList<Long> next_level = new ArrayList<>();\n        ArrayList<Long>\
    \ next_next_level = new ArrayList<>();\n        ArrayList<Long> next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_level = new\
    \ ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_level = new\
    \ ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<>();\n        ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpskxre63y.java:45: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> stack = new ArrayList<>();\n       \
    \ ArrayList<Long> stack2 = new ArrayList<>();\n        ArrayList<Long> stack3\
    \ = new ArrayList<>();\n        ArrayList<Long> stack4 = new ArrayList<>();\n\
    \        ArrayList<Long> stack5 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack6 = new ArrayList<>();\n        ArrayList<Long> stack7 = new ArrayList<>();\n\
    \        ArrayList<Long> stack8 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack9 = new ArrayList<>();\n        ArrayList<Long> stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack12 = new ArrayList<>();\n        ArrayList<Long> stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack15 = new ArrayList<>();\n        ArrayList<Long> stack16 = new ArrayList<>();\n\
    \        ArrayList<Long> stack17 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack18 = new ArrayList<>();\n        ArrayList<Long> stack19 = new ArrayList<>();\n\
    \        ArrayList<Long> stack20 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack21 = new ArrayList<>();\n        ArrayList<Long> stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack24 = new ArrayList<>();\n        ArrayList<Long> stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack27 = new ArrayList<>();\n        ArrayList<Long> stack28 = new ArrayList<>();\n\
    \        ArrayList<Long> stack29 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack30 = new ArrayList<>();\n        ArrayList<Long> stack31 = new ArrayList<>();\n\
    \        ArrayList<Long> stack32 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack33 = new ArrayList<>();\n        ArrayList<Long> stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack36 = new ArrayList<>();\n        ArrayList<Long> stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack39 = new ArrayList<>();\n        ArrayList<Long> stack40 = new ArrayList<>();\n\
    \        ArrayList<Long> stack41 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack42 = new ArrayList<>();\n        ArrayList<Long> stack43 = new ArrayList<>();\n\
    \        ArrayList<Long> stack44 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack45 = new ArrayList<>();\n        ArrayList<Long> stack46 = new ArrayList<>();\n\
    \        ArrayList<Long> stack47 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack48 = new ArrayList<>();\n        ArrayList<Long> stack49 = new ArrayList<>();\n\
    \        ArrayList<Long> stack50 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0em9sh99.java:66: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvysmsdbw.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpvysmsdbw.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n        for (String s : paren_strings) {\n            ArrayList<Long>\
    \ levels = parseNestedParens(s);\n            if (levels.size() > result.size())\
    \ {\n                result = levels;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyu0sqog_.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptf61m1nt.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmptf61m1nt.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> current_level = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_count = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_count_sum = new ArrayList<>();\n        ArrayList<Long> current_level_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum_sum_sum = new ArrayList<>();\n    \
    \    ArrayList<Long> current_level_sum_sum_sum_sum = new ArrayList<>();\n    \
    \    ArrayList<Long> current_level_sum_sum_sum_sum_sum = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum = new\
    \ ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = new ArrayList<>();\n        ArrayList<\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_7fbk1rm.java:44: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp_7fbk1rm.java:43: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1bvndr1g.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp1bvndr1g.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> level = new ArrayList<>();\n \
    \       ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long> levels_stack\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy3 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy7 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy11 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy15 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy19 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy23 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy27 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy31 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy35 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36\
    \ = new ArrayList<>();\n        ArrayList<Long> \n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_xerqi41.java:55: error: not a statement\n        ArrayList<Long>\
    \ \n                 ^\n/tmp/tmp_xerqi41.java:55: error: ';' expected\n      \
    \  ArrayList<Long> \n                       ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Stack<String> stack = new Stack<>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        long level = 0;\n        boolean in_paren\
    \ = false;\n        boolean in_bracket = false;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.push(c);\n      \
    \      } else if (c == ')') {\n                in_paren = false;\n           \
    \     String s = stack.pop();\n                sb.append(s);\n               \
    \ long l = sb.length();\n                if (l > level) {\n                  \
    \  level = l;\n                }\n            } else if (c == '[') {\n       \
    \         in_bracket = true;\n                stack.push(c);\n            } else\
    \ if (c == ']') {\n                in_bracket = false;\n                String\
    \ s = stack.pop();\n                sb.append(s);\n                long l = sb.length();\n\
    \                if (l > level) {\n                    level = l;\n          \
    \      }\n            } else if (c == ' ') {\n                if (in_paren) {\n\
    \                    result.add(level);\n                }\n                level\
    \ = 0;\n                sb.setLength(0);\n            } else if (c == '\\n') {\n\
    \                result.add(level);\n                level = 0;\n            \
    \    sb.setLength(0);\n            } else {\n                sb.append(c);\n \
    \           }\n        }\n        if (in_paren) {\n            result.add(level);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptoqdrrwn.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmptoqdrrwn.java:36:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    stack.push(c);\n                           ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvpz4fdcr.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index_max = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index2\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index3\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index4\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index5\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index6\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index7\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index8\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index9\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index10\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index11\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index12\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index13\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index14\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index15\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index16\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index17\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index18\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index19\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index20\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index21\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index22\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index23\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index24\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index25\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index26\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index27\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index28\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index29\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index30\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_max_index31\
    \ = new ArrayList<>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj_20rvaj.java:51: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long> levels_stack\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy3 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy7 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy11 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy15 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy19 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy23 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy27 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy31 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy35 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_\n    }\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ulhtqhc.java:55: error: ';' expected\n        ArrayList<Long>\
    \ levels_\n                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdxibglvj.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<Long> max_levels = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index = new ArrayList<>();\n        ArrayList<Long> max_levels_index_temp\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_temp2 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index_temp3 = new ArrayList<>();\n       \
    \ ArrayList<Long> max_levels_index_temp4 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index_temp5 = new ArrayList<>();\n        ArrayList<Long> max_levels_index_temp6\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_temp7 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index_temp8 = new ArrayList<>();\n       \
    \ ArrayList<Long> max_levels_index_temp9 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index_temp10 = new ArrayList<>();\n        ArrayList<Long> max_levels_index_temp11\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_temp12 = new\
    \ ArrayList<>();\n        ArrayList<Long> max_levels_index_temp13 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index_temp14 = new ArrayList<>();\n      \
    \  ArrayList<Long> max_levels_index_temp15 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index_temp16 = new ArrayList<>();\n        ArrayList<Long> max_levels_index_temp17\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_temp18 = new\
    \ ArrayList<>();\n        ArrayList<Long> max_levels_index_temp19 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index_temp20 = new ArrayList<>();\n      \
    \  ArrayList<Long> max_levels_index_temp21 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index_temp22 = new ArrayList<>();\n        ArrayList<Long> max_levels_index_temp23\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_temp24 = new\
    \ ArrayList<>();\n        ArrayList<Long> max_levels_index_temp25 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index_temp26 = new ArrayList<>();\n      \
    \  ArrayList<Long> max_levels_index_temp27 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index_temp28 = new ArrayList<>();\n        ArrayList<Long> max_levels_index_temp29\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_temp30 = new\
    \ ArrayList<>();\n        ArrayList<Long> max_levels_index_temp31 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index_temp32 = new ArrayList<>();\n      \
    \  ArrayList<Long> max_levels_index_temp33 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index_temp34\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd04y8w0m.java:52: error: ';' expected\n        ArrayList<Long>\
    \ max_levels_index_temp34\n                                               ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppofw4xo_.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmppofw4xo_.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> level = new ArrayList<>();\n \
    \       ArrayList<Long> level_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy = new ArrayList<>();\n        ArrayList<Long> level_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy37 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy38\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy39 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy40 = new ArrayList<>();\n        ArrayList<\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzkg6kz32.java:59: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpzkg6kz32.java:58: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n      \
    \  ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_m7x_0g8.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_7hug617.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp_7hug617.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfqbspvs7.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpfqbspvs7.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Stack<String> stack = new Stack<>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        long level = 0;\n        boolean is_open\
    \ = false;\n        boolean is_close = false;\n        boolean is_opening_paren\
    \ = false;\n        boolean is_closing_paren = false;\n        boolean is_opening_curly_bracket_or_paren\
    \ = false;\n        boolean is_closing_curly_bracket_or_paren = false;\n     \
    \   boolean is_opening_square_bracket_or_paren = false;\n        boolean is_closing_square_bracket_or_paren\
    \ = false;\n        boolean is_opening_curly_bracket_or_curly_bracket = false;\n\
    \        boolean is_closing_curly_bracket_or_curly_bracket = false;\n        boolean\
    \ is_opening_square_bracket_or_square_bracket = false;\n        boolean is_closing_square_bracket_or_square_bracket\
    \ = false;\n        boolean is_opening_curly_bracket_or_curly_bracket_or_paren\
    \ = false;\n        boolean is_closing_curly_bracket_or_curly_bracket_or_paren\
    \ = false;\n        boolean is_opening_square_bracket_or_square_bracket_or_paren\
    \ = false;\n        boolean is_closing_square_bracket_or_square_bracket_or_paren\
    \ = false;\n        boolean is_opening_curly_bracket_or_curly_bracket_or_curly_bracket\
    \ = false;\n        boolean is_closing_curly_bracket_or_curly_bracket_or_curly_bracket\
    \ = false;\n        boolean is_opening_square_bracket_or_square_bracket_or_curly_bracket_or_paren\
    \ = false;\n        boolean is_closing_square_bracket_or_square_bracket_or_curly_bracket_or_paren\
    \ = false;\n        boolean is_opening_curly_bracket_or_curly_bracket_or_curly_bracket_or_curly_bracket\
    \ = false;\n        boolean is_closing_curly_bracket_or_curly_bracket_or_curly_bracket_or_curly_bracket\
    \ = false;\n        boolean is_opening_square_bracket_or_square_bracket_or_curly_bracket_or_curly_bracket_or_paren\
    \ = false;\n        boolean is_closing_square_bracket_or_square_bracket_or_curly_bracket_or_curly_bracket_or_paren\
    \ = false;\n        boolean is_opening_curly_bracket_or_curly_bracket_or_curly_bracket_or_curly_bracket_or_paren\
    \ = false;\n        boolean is_closing_curly_bracket_or_curly_bracket_or_\n  \
    \  }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppyfqreme.java:44: error: ';' expected\n        boolean is_closing_curly_bracket_or_curly_bracket_or_\n\
    \                                                             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> paren_groups = paren_string.split(\"\
    \\\\s+\");\n        for (String paren_group : paren_groups) {\n            ArrayList<Long>\
    \ levels = parseNestedParens(paren_group);\n            result.addAll(levels);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiuifs6gk.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_groups = paren_string.split(\"\
    \\\\s+\");\n                                                           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpucj7jjdh.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpucj7jjdh.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb9dllc3x.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_jp969j1.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu6fqvk59.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n        for (String s : paren_strings) {\n            ArrayList<Long>\
    \ levels = parseNestedParens(s);\n            result.addAll(levels);\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjgv5e4mx.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> level = new ArrayList<>();\n \
    \       ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long> levels_stack\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy3 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy7 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy11 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy15 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy19 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy23 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy27 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy31 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy35 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36\
    \ = new ArrayList<>();\n        ArrayList<Long> \n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr0sgyjh6.java:55: error: not a statement\n        ArrayList<Long>\
    \ \n                 ^\n/tmp/tmpr0sgyjh6.java:55: error: ';' expected\n      \
    \  ArrayList<Long> \n                       ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n        for (String s : paren_strings) {\n            ArrayList<String>\
    \ nested_paren_strings = s.split(\"\\\\)\");\n            long max_level = 0;\n\
    \            for (String nested_s : nested_paren_strings) {\n                ArrayList<String>\
    \ nested_paren_strings_s = nested_s.split(\"\\\\(\");\n                long current_level\
    \ = nested_paren_strings_s.size();\n                if (current_level > max_level)\
    \ {\n                    max_level = current_level;\n                }\n     \
    \       }\n            result.add(max_level);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp0k60ngz.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n/tmp/tmpp0k60ngz.java:18:\
    \ error: incompatible types: String[] cannot be converted to ArrayList<String>\n\
    \            ArrayList<String> nested_paren_strings = s.split(\"\\\\)\");\n  \
    \                                                          ^\n/tmp/tmpp0k60ngz.java:21:\
    \ error: incompatible types: String[] cannot be converted to ArrayList<String>\n\
    \                ArrayList<String> nested_paren_strings_s = nested_s.split(\"\\\
    \\(\");\n                                                                    \
    \     ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm1hstk9s.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpm1hstk9s.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> stack = new ArrayList<>();\n       \
    \ ArrayList<Long> stack2 = new ArrayList<>();\n        ArrayList<Long> stack3\
    \ = new ArrayList<>();\n        ArrayList<Long> stack4 = new ArrayList<>();\n\
    \        ArrayList<Long> stack5 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack6 = new ArrayList<>();\n        ArrayList<Long> stack7 = new ArrayList<>();\n\
    \        ArrayList<Long> stack8 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack9 = new ArrayList<>();\n        ArrayList<Long> stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack12 = new ArrayList<>();\n        ArrayList<Long> stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack15 = new ArrayList<>();\n        ArrayList<Long> stack16 = new ArrayList<>();\n\
    \        ArrayList<Long> stack17 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack18 = new ArrayList<>();\n        ArrayList<Long> stack19 = new ArrayList<>();\n\
    \        ArrayList<Long> stack20 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack21 = new ArrayList<>();\n        ArrayList<Long> stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack24 = new ArrayList<>();\n        ArrayList<Long> stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack27 = new ArrayList<>();\n        ArrayList<Long> stack28 = new ArrayList<>();\n\
    \        ArrayList<Long> stack29 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack30 = new ArrayList<>();\n        ArrayList<Long> stack31 = new ArrayList<>();\n\
    \        ArrayList<Long> stack32 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack33 = new ArrayList<>();\n        ArrayList<Long> stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack36 = new ArrayList<>();\n        ArrayList<Long> stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack39 = new ArrayList<>();\n        ArrayList<Long> stack40 = new ArrayList<>();\n\
    \        ArrayList<Long> stack41 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack42 = new ArrayList<>();\n        ArrayList<Long> stack43 = new ArrayList<>();\n\
    \        ArrayList<Long> stack44 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack45 = new ArrayList<>();\n        ArrayList<Long> stack46 = new ArrayList<>();\n\
    \        ArrayList<Long> stack47 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack48 = new ArrayList<>();\n        ArrayList<Long> stack49 = new ArrayList<>();\n\
    \        ArrayList<Long> stack50 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa_xnq8mb.java:66: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp187_7xva.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp187_7xva.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpntqlga1s.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<Long> max_levels = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_in_group_in_group_in_group_in_group_in_group_in_group_in_group_in_group\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf83nkge0.java:39: error: ';' expected\n        ArrayList<Long>\
    \ max_levels_\n                                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjogywpib.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy11 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy12 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy14 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy17 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy18 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy19 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy22 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy24 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy25\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy27 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy29 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy30\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy32 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy34 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy35\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy37 = new ArrayList<Long\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvq5qttmv.java:55: error: > expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> stack = new ArrayList<>();\n       \
    \ ArrayList<Long> stack2 = new ArrayList<>();\n        ArrayList<Long> stack3\
    \ = new ArrayList<>();\n        ArrayList<Long> stack4 = new ArrayList<>();\n\
    \        ArrayList<Long> stack5 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack6 = new ArrayList<>();\n        ArrayList<Long> stack7 = new ArrayList<>();\n\
    \        ArrayList<Long> stack8 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack9 = new ArrayList<>();\n        ArrayList<Long> stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack12 = new ArrayList<>();\n        ArrayList<Long> stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack15 = new ArrayList<>();\n        ArrayList<Long> stack16 = new ArrayList<>();\n\
    \        ArrayList<Long> stack17 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack18 = new ArrayList<>();\n        ArrayList<Long> stack19 = new ArrayList<>();\n\
    \        ArrayList<Long> stack20 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack21 = new ArrayList<>();\n        ArrayList<Long> stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack24 = new ArrayList<>();\n        ArrayList<Long> stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack27 = new ArrayList<>();\n        ArrayList<Long> stack28 = new ArrayList<>();\n\
    \        ArrayList<Long> stack29 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack30 = new ArrayList<>();\n        ArrayList<Long> stack31 = new ArrayList<>();\n\
    \        ArrayList<Long> stack32 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack33 = new ArrayList<>();\n        ArrayList<Long> stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack36 = new ArrayList<>();\n        ArrayList<Long> stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack39 = new ArrayList<>();\n        ArrayList<Long> stack40 = new ArrayList<>();\n\
    \        ArrayList<Long> stack41 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack42 = new ArrayList<>();\n        ArrayList<Long> stack43 = new ArrayList<>();\n\
    \        ArrayList<Long> stack44 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack45 = new ArrayList<>();\n        ArrayList<Long> stack46 = new ArrayList<>();\n\
    \        ArrayList<Long> stack47 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack48 = new ArrayList<>();\n        ArrayList<Long> stack49 = new ArrayList<>();\n\
    \        ArrayList<Long> stack50 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvye6yvxi.java:66: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5sh0s1u9.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp5sh0s1u9.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkp7tmsk5.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpkp7tmsk5.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9cu662om.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp9cu662om.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2gv45l2s.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<String> group_contents = new ArrayList<>();\n        ArrayList<String>\
    \ group_contents_copy = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        ArrayList<String> group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ypf1_ok.java:31: error: variable group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ is already defined in method parseNestedParens(String)\n        ArrayList<String>\
    \ group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n                          ^\n/tmp/tmp3ypf1_ok.java:33:\
    \ error: variable group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ is already defined in method parseNestedParens(String)\n        ArrayList<String>\
    \ group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n                          ^\n/tmp/tmp3ypf1_ok.java:36:\
    \ error: variable group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ is already defined in method parseNestedParens(String)\n        ArrayList<String>\
    \ group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n                          ^\n/tmp/tmp3ypf1_ok.java:37:\
    \ error: variable group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ is already defined in method parseNestedParens(String)\n        ArrayList<String>\
    \ group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n                          ^\n/tmp/tmp3ypf1_ok.java:40:\
    \ error: variable group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ is already defined in method parseNestedParens(String)\n        ArrayList<String>\
    \ group_contents_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<>();\n                          ^\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpymlukd4z.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpymlukd4z.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsjat82s6.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8ojmyj5b.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp8ojmyj5b.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbkryi5zc.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwsccg14r.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpwsccg14r.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmsm4nec3.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpmsm4nec3.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n        ArrayList<\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph1r29ziz.java:56: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmph1r29ziz.java:55: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb04eht61.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n        for (String s : paren_strings) {\n            ArrayList<String>\
    \ nested_parens = parseNestedParens(s);\n            result.addAll(nested_parens);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph0z8bovb.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n/tmp/tmph0z8bovb.java:18:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to ArrayList<String>\n\
    \            ArrayList<String> nested_parens = parseNestedParens(s);\n       \
    \                                                        ^\n/tmp/tmph0z8bovb.java:19:\
    \ error: incompatible types: ArrayList<String> cannot be converted to Collection<?\
    \ extends Long>\n            result.addAll(nested_parens);\n                 \
    \         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2v13i4i8.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp2v13i4i8.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp8dc2sch.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> stack = new ArrayList<>();\n       \
    \ ArrayList<Long> stack2 = new ArrayList<>();\n        ArrayList<Long> stack3\
    \ = new ArrayList<>();\n        ArrayList<Long> stack4 = new ArrayList<>();\n\
    \        ArrayList<Long> stack5 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack6 = new ArrayList<>();\n        ArrayList<Long> stack7 = new ArrayList<>();\n\
    \        ArrayList<Long> stack8 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack9 = new ArrayList<>();\n        ArrayList<Long> stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack12 = new ArrayList<>();\n        ArrayList<Long> stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack15 = new ArrayList<>();\n        ArrayList<Long> stack16 = new ArrayList<>();\n\
    \        ArrayList<Long> stack17 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack18 = new ArrayList<>();\n        ArrayList<Long> stack19 = new ArrayList<>();\n\
    \        ArrayList<Long> stack20 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack21 = new ArrayList<>();\n        ArrayList<Long> stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack24 = new ArrayList<>();\n        ArrayList<Long> stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack27 = new ArrayList<>();\n        ArrayList<Long> stack28 = new ArrayList<>();\n\
    \        ArrayList<Long> stack29 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack30 = new ArrayList<>();\n        ArrayList<Long> stack31 = new ArrayList<>();\n\
    \        ArrayList<Long> stack32 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack33 = new ArrayList<>();\n        ArrayList<Long> stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack36 = new ArrayList<>();\n        ArrayList<Long> stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack39 = new ArrayList<>();\n        ArrayList<Long> stack40 = new ArrayList<>();\n\
    \        ArrayList<Long> stack41 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack42 = new ArrayList<>();\n        ArrayList<Long> stack43 = new ArrayList<>();\n\
    \        ArrayList<Long> stack44 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack45 = new ArrayList<>();\n        ArrayList<Long> stack46 = new ArrayList<>();\n\
    \        ArrayList<Long> stack47 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack48 = new ArrayList<>();\n        ArrayList<Long> stack49 = new ArrayList<>();\n\
    \        ArrayList<Long> stack50 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplo3h6pmp.java:66: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi6ja8233.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        long level\
    \ = 0;\n        long level2 = 0;\n        long level3 = 0;\n        long level4\
    \ = 0;\n        long level5 = 0;\n        long level6 = 0;\n        long level7\
    \ = 0;\n        long level8 = 0;\n        long level9 = 0;\n        long level10\
    \ = 0;\n        long level11 = 0;\n        long level12 = 0;\n        long level13\
    \ = 0;\n        long level14 = 0;\n        long level15 = 0;\n        long level16\
    \ = 0;\n        long level17 = 0;\n        long level18 = 0;\n        long level19\
    \ = 0;\n        long level20 = 0;\n        long level21 = 0;\n        long level22\
    \ = 0;\n        long level23 = 0;\n        long level24 = 0;\n        long level25\
    \ = 0;\n        long level26 = 0;\n        long level27 = 0;\n        long level28\
    \ = 0;\n        long level29 = 0;\n        long level30 = 0;\n        long level31\
    \ = 0;\n        long level32 = 0;\n        long level33 = 0;\n        long level34\
    \ = 0;\n        long level35 = 0;\n        long level36 = 0;\n        long level37\
    \ = 0;\n        long level38 = 0;\n        long level39 = 0;\n        long level40\
    \ = 0;\n        long level41 = 0;\n        long level42 = 0;\n        long level43\
    \ = 0;\n        long level44 = 0;\n        long level45 = 0;\n        long level46\
    \ = 0;\n        long level47 = 0;\n        long level48 = 0;\n        long level49\
    \ = 0;\n        long level50 = 0;\n        long level51 = 0;\n        long level52\
    \ = 0;\n        long level53 = 0;\n        long level54 = 0;\n        long level55\
    \ = 0;\n        long level56 = 0;\n        long level57 = 0;\n        long level58\
    \ = 0;\n        long level59 = 0;\n        long level60 = 0;\n        long level61\
    \ = 0;\n        long level62 = 0;\n        long level63 = 0;\n        long level64\
    \ = 0;\n        long level65 = 0;\n        long level66 = 0;\n        long level67\
    \ = 0;\n        long level68 = 0;\n        long level69 = 0;\n        long level70\
    \ = 0;\n        long level71 = 0;\n        long level72 = 0;\n        long level73\
    \ = 0;\n        long level74 = 0;\n        long level75 = 0;\n        long level76\
    \ = 0;\n        long level77 = 0;\n        long level78 = 0;\n        long level79\
    \ = 0;\n        long level80 = 0;\n        long level81 = 0;\n        long level82\
    \ = 0;\n        long level83 = 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppna2vesb.java:100: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpugh0qlq4.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> stack = new ArrayList<>();\n       \
    \ ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long> levels_stack\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack2 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack3 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack4 = new ArrayList<>();\n        ArrayList<Long> levels_stack5 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack8 = new ArrayList<>();\n        ArrayList<Long> levels_stack9 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack12 = new ArrayList<>();\n        ArrayList<Long> levels_stack13\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack14 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack15 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack16 = new ArrayList<>();\n        ArrayList<Long> levels_stack17\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack20 = new ArrayList<>();\n        ArrayList<Long> levels_stack21\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack24 = new ArrayList<>();\n        ArrayList<Long> levels_stack25\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack26 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack27 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack28 = new ArrayList<>();\n        ArrayList<Long> levels_stack29\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack32 = new ArrayList<>();\n        ArrayList<Long> levels_stack33\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack36 = new ArrayList<>();\n        ArrayList<Long> levels_stack37\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack38 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack39 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack40 = new ArrayList<>();\n        ArrayList<Long> \n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdzxmyq66.java:58: error: not a statement\n        ArrayList<Long>\
    \ \n                 ^\n/tmp/tmpdzxmyq66.java:58: error: ';' expected\n      \
    \  ArrayList<Long> \n                       ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr3gaiv17.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpr3gaiv17.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7cv27smo.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp7cv27smo.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppgk8yc5w.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmppgk8yc5w.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<String> group_strings = new ArrayList<>();\n        ArrayList<String>\
    \ group_levels = new ArrayList<>();\n        ArrayList<String> group_level_strs\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_strs_strs = new\
    \ ArrayList<>();\n        ArrayList<String> group_level_strs_strs_strs = new ArrayList<>();\n\
    \        ArrayList<String> group_level_strs_strs_strs_strs = new ArrayList<>();\n\
    \        ArrayList<String> group_level_strs_strs_strs_strs_strs = new ArrayList<>();\n\
    \        ArrayList<String> group_level_strs_strs_strs_strs_strs_strs = new ArrayList<>();\n\
    \        ArrayList<String> group_level_strs_strs_strs_strs_strs_strs_strs = new\
    \ ArrayList<>();\n        ArrayList<String> group_level_strs_strs_strs_strs_strs_strs_strs_strs\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_strs_strs_strs_strs_strs_strs_strs_strs_strs\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx_6va6cd.java:36: error: ';' expected\n        ArrayList<String>\
    \ group_level_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_\n\
    \                                                                            \
    \                                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \\\\s+\");\n        for (String s : paren_strings) {\n            ArrayList<Long>\
    \ level = new ArrayList<>();\n            ArrayList<String> paren_strings_s =\
    \ s.split(\"\\\\)\");\n            for (String s_s : paren_strings_s) {\n    \
    \            ArrayList<Long> level_s = new ArrayList<>();\n                ArrayList<String>\
    \ paren_strings_s_s = s_s.split(\"\\\\(\");\n                for (String s_s_s\
    \ : paren_strings_s_s) {\n                    level_s.add(Long.parseLong(s_s_s));\n\
    \                }\n                level.add(level_s.get(0));\n            }\n\
    \            levels.add(level.get(0));\n        }\n        return levels;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7dyqj2xv.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \\\\s+\");\n                                                            ^\n/tmp/tmp7dyqj2xv.java:19:\
    \ error: incompatible types: String[] cannot be converted to ArrayList<String>\n\
    \            ArrayList<String> paren_strings_s = s.split(\"\\\\)\");\n       \
    \                                                ^\n/tmp/tmp7dyqj2xv.java:22:\
    \ error: incompatible types: String[] cannot be converted to ArrayList<String>\n\
    \                ArrayList<String> paren_strings_s_s = s_s.split(\"\\\\(\");\n\
    \                                                               ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw7_54tgv.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpw7_54tgv.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack2 = new ArrayList<>();\n        ArrayList<Long> levels_stack3 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack6 = new ArrayList<>();\n        ArrayList<Long> levels_stack7 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack10 = new ArrayList<>();\n        ArrayList<Long> levels_stack11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack14 = new ArrayList<>();\n        ArrayList<Long> levels_stack15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack18 = new ArrayList<>();\n        ArrayList<Long> levels_stack19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack22 = new ArrayList<>();\n        ArrayList<Long> levels_stack23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack26 = new ArrayList<>();\n        ArrayList<Long> levels_stack27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack30 = new ArrayList<>();\n        ArrayList<Long> levels_stack31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack34 = new ArrayList<>();\n        ArrayList<Long> levels_stack35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack38 = new ArrayList<>();\n        ArrayList<Long> levels_stack39\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack40 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack41 = new ArrayList<>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz9t16mp_.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<String> parens = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings = new ArrayList<>();\n        ArrayList<String> paren_strings_temp\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_temp2 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_temp4 = new ArrayList<>();\n        ArrayList<String> paren_strings_temp5\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_temp6 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_temp7 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_temp8 = new ArrayList<>();\n        ArrayList<String> paren_strings_temp9\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_temp10 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_temp11 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_temp13 = new ArrayList<>();\n        ArrayList<String> paren_strings_temp14\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_temp15 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_temp16 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_temp18 = new ArrayList<>();\n        ArrayList<String> paren_strings_temp19\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_temp20 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_temp21 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_temp22 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_temp23 = new ArrayList<>();\n        ArrayList<String> paren_strings_temp24\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_temp25 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_temp26 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_temp28 = new ArrayList<>();\n        ArrayList<String> paren_strings_temp29\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_temp30 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_temp31 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_temp33 = new ArrayList<>();\n        ArrayList<String> paren_strings_temp34\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_temp35 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_temp36 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_temp37 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_temp38 = new ArrayList<>();\n        ArrayList<String> paren_strings_temp39\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_temp40 = new \n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw136sfzt.java:58: error: <identifier> expected\n        ArrayList<String>\
    \ paren_strings_temp40 = new \n                                              \
    \      ^\n/tmp/tmpw136sfzt.java:59: error: '(' or '[' expected\n    }\n    ^\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n        for (String s : paren_strings) {\n            ArrayList<String>\
    \ paren_strings_2 = s.split(\"\\\\(\");\n            ArrayList<String> paren_strings_3\
    \ = paren_strings_2.stream().map(s -> s.replace(\")\", \"\")).collect(Collectors.toList());\n\
    \            ArrayList<String> paren_strings_4 = paren_strings_3.stream().map(s\
    \ -> s.replace(\"(\", \"\")).collect(Collectors.toList());\n            ArrayList<String>\
    \ paren_strings_5 = paren_strings_4.stream().map(s -> s.replace(\")\", \"\")).collect(Collectors.toList());\n\
    \            ArrayList<String> paren_strings_6 = paren_strings_5.stream().map(s\
    \ -> s.replace(\"(\", \"\")).collect(Collectors.toList());\n            ArrayList<String>\
    \ paren_strings_7 = paren_strings_6.stream().map(s -> s.replace(\")\", \"\")).collect(Collectors.toList());\n\
    \            ArrayList<String> paren_strings_8 = paren_strings_7.stream().map(s\
    \ -> s.replace(\"(\", \"\")).collect(Collectors.toList());\n            ArrayList<String>\
    \ paren_strings_9 = paren_strings_8.stream().map(s -> s.replace(\")\", \"\")).collect(Collectors.toList());\n\
    \            ArrayList<String> paren_strings_10 = paren_strings_9.stream().map(s\
    \ -> s.replace(\"(\", \"\")).collect(Collectors.toList());\n            ArrayList<String>\
    \ paren_strings_11 = paren_strings_10.stream().map(s -> s.replace(\")\", \"\"\
    )).collect(Collectors.toList());\n            ArrayList<String> paren_strings_12\
    \ = paren_strings_11.stream().map(s -> s.replace(\"(\", \"\")).collect(Collectors.toList());\n\
    \            ArrayList<String> paren_strings_13 = paren_strings_12.stream().map(s\
    \ -> s.replace(\")\", \"\")).collect(Collectors.toList());\n            ArrayList<String>\
    \ paren_strings_14 = paren_strings_13.stream().map(s -> s.replace(\"(\", \"\"\
    )).collect(Collectors.toList());\n            ArrayList<String> paren_strings_15\
    \ = paren_strings_14.stream().map(s -> s.replace(\")\", \"\")).collect(Collectors.toList());\n\
    \            ArrayList<String> paren_strings_16 = paren_strings_15.stream().map(s\
    \ -> s.replace(\"(\", \"\")).collect(Collectors.toList());\n            ArrayList<String>\
    \ paren_strings_17 = paren_strings_16.stream().map(s -> s.replace(\")\", \"\"\
    )).collect(Collectors.toList());\n            ArrayList<String> paren_strings_18\
    \ = paren_strings_17.stream().map(s -> s.replace(\"(\", \"\")).\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7bibw_l3.java:34: error: <identifier> expected\n            ArrayList<String>\
    \ paren_strings_18 = paren_strings_17.stream().map(s -> s.replace(\"(\", \"\"\
    )).\n                                                                        \
    \                                ^\n/tmp/tmp7bibw_l3.java:36: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt4x9rua1.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpt4x9rua1.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<String> group_strings = new ArrayList<>();\n        ArrayList<String>\
    \ group_levels = new ArrayList<>();\n        ArrayList<Long> group_levels_index\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse = new\
    \ ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index = new\
    \ ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index2 =\
    \ new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index3\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index4\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index5\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index6\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index7\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index8\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index9\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index10\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index11\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index12\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index13\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index14\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index15\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index16\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index17\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index18\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index19\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index20\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index21\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index22\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index23\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index24\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index25\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index26\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index27\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index28\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index29\
    \ = new ArrayList<>();\n        ArrayList<Long> group_levels_index_reverse_index30\
    \ = new ArrayList<>();\n        ArrayList<\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg0t_rbnb.java:52: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpg0t_rbnb.java:51: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2tr0l4ao.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp2tr0l4ao.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> level = new ArrayList<>();\n \
    \       ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long> levels_stack\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack2 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack3 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack4 = new ArrayList<>();\n        ArrayList<Long> levels_stack5 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack8 = new ArrayList<>();\n        ArrayList<Long> levels_stack9 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack12 = new ArrayList<>();\n        ArrayList<Long> levels_stack13\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack14 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack15 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack16 = new ArrayList<>();\n        ArrayList<Long> levels_stack17\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack20 = new ArrayList<>();\n        ArrayList<Long> levels_stack21\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack24 = new ArrayList<>();\n        ArrayList<Long> levels_stack25\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack26 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack27 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack28 = new ArrayList<>();\n        ArrayList<Long> levels_stack29\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack32 = new ArrayList<>();\n        ArrayList<Long> levels_stack33\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack36 = new ArrayList<>();\n        ArrayList<Long> levels_stack37\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack38 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack39 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack40 = new ArrayList<>();\n        ArrayList<Long\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj_kpne38.java:59: error: > expected\n    }\n    ^\n/tmp/tmpj_kpne38.java:58:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2j41hdqn.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp2j41hdqn.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n      \
    \  ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8e65nrfo.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<String> group_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels = new ArrayList<>();\n        ArrayList<Long> max_levels_stack =\
    \ new ArrayList<>();\n        ArrayList<Long> max_levels_stack_index = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_stack_index2 = new ArrayList<>();\n      \
    \  ArrayList<Long> max_levels_stack_index3 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_stack_index4 = new ArrayList<>();\n        ArrayList<Long> max_levels_stack_index5\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_stack_index6 = new\
    \ ArrayList<>();\n        ArrayList<Long> max_levels_stack_index7 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_stack_index8 = new ArrayList<>();\n      \
    \  ArrayList<Long> max_levels_stack_index9 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_stack_index10 = new ArrayList<>();\n        ArrayList<Long> max_levels_stack_index11\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_stack_index12 = new\
    \ ArrayList<>();\n        ArrayList<Long> max_levels_stack_index13 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_stack_index14 = new ArrayList<>();\n     \
    \   ArrayList<Long> max_levels_stack_index15 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_stack_index16 = new ArrayList<>();\n        ArrayList<Long> max_levels_stack_index17\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_stack_index18 = new\
    \ ArrayList<>();\n        ArrayList<Long> max_levels_stack_index19 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_stack_index20 = new ArrayList<>();\n     \
    \   ArrayList<Long> max_levels_stack_index21 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_stack_index22 = new ArrayList<>();\n        ArrayList<Long> max_levels_stack_index23\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_stack_index24 = new\
    \ ArrayList<>();\n        ArrayList<Long> max_levels_stack_index25 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_stack_index26 = new ArrayList<>();\n     \
    \   ArrayList<Long> max_levels_stack_index27 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_stack_index28 = new ArrayList<>();\n        ArrayList<Long> max_levels_stack_index29\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_stack_index30 = new\
    \ ArrayList<>();\n        ArrayList<Long> max_levels_stack_index31 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_stack_index32 = new ArrayList<>();\n     \
    \   ArrayList<Long> max_levels_stack_index33 = new ArrayList<>();\n        \n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppuvtn9l9.java:54: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> current_level = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_parens = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_parens_levels = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbdiovtr_.java:36: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz8nso_7t.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpz8nso_7t.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiz0cdw4c.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpiz0cdw4c.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc94qbl8h.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpc94qbl8h.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<String> group_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy5\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy9\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy13\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy21\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy25\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy33\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long> levels_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplboa406w.java:55: error: ';' expected\n        ArrayList<Long>\
    \ levels_\n                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp24fl1kr3.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Stack<String> stack = new Stack<>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        long max_level = 0;\n        long level =\
    \ 0;\n        boolean in_paren = false;\n        boolean in_group = false;\n \
    \       boolean in_group2 = false;\n        boolean in_group3 = false;\n     \
    \   boolean in_group4 = false;\n        boolean in_group5 = false;\n        boolean\
    \ in_group6 = false;\n        boolean in_group7 = false;\n        boolean in_group8\
    \ = false;\n        boolean in_group9 = false;\n        boolean in_group10 = false;\n\
    \        boolean in_group11 = false;\n        boolean in_group12 = false;\n  \
    \      boolean in_group13 = false;\n        boolean in_group14 = false;\n    \
    \    boolean in_group15 = false;\n        boolean in_group16 = false;\n      \
    \  boolean in_group17 = false;\n        boolean in_group18 = false;\n        boolean\
    \ in_group19 = false;\n        boolean in_group20 = false;\n        boolean in_group21\
    \ = false;\n        boolean in_group22 = false;\n        boolean in_group23 =\
    \ false;\n        boolean in_group24 = false;\n        boolean in_group25 = false;\n\
    \        boolean in_group26 = false;\n        boolean in_group27 = false;\n  \
    \      boolean in_group28 = false;\n        boolean in_group29 = false;\n    \
    \    boolean in_group30 = false;\n        boolean in_group31 = false;\n      \
    \  boolean in_group32 = false;\n        boolean in_group33 = false;\n        boolean\
    \ in_group34 = false;\n        boolean in_group35 = false;\n        boolean in_group36\
    \ = false;\n        boolean in_group37 = false;\n        boolean in_group38 =\
    \ false;\n        boolean in_group39 = false;\n        boolean in_group40 = false;\n\
    \        boolean in_group41 = false;\n        boolean in_group42 = false;\n  \
    \      boolean in_group43 = false;\n        boolean in_group44 = false;\n    \
    \    boolean in_group45 = false;\n        boolean in_group46 = false;\n      \
    \  boolean in_group47 = false;\n        boolean in_group48 = false;\n        boolean\
    \ in_group49 = false;\n        boolean in_group50 = false;\n        boolean in_group51\
    \ = false;\n        boolean in_group52 = false;\n        boolean in_group53 =\
    \ false;\n        boolean in_group54 = false;\n        boolean in_group55 = false;\n\
    \        boolean in_group56 = false;\n        boolean in_group57 = false;\n  \
    \      boolean in_group58 = false;\n        boolean in_group59 = false;\n    \
    \    boolean in_group60 = false;\n        boolean in_group61 = false;\n      \
    \  boolean in_group62 = false;\n        boolean in_group63 = false;\n        boolean\
    \ in_group64 = false;\n        boolean in_group65 = false;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp808fajd4.java:87: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index_temp = new ArrayList<>();\n        ArrayList<Long> current_levels_index_temp2\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_temp3 = new\
    \ ArrayList<>();\n        ArrayList<Long> current_levels_index_temp4 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index_temp5 = new ArrayList<>();\n   \
    \     ArrayList<Long> current_levels_index_temp6 = new ArrayList<>();\n      \
    \  ArrayList<Long> current_levels_index_temp7 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index_temp8 = new ArrayList<>();\n        ArrayList<Long> current_levels_index_temp9\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_temp10 =\
    \ new ArrayList<>();\n        ArrayList<Long> current_levels_index_temp11 = new\
    \ ArrayList<>();\n        ArrayList<Long> current_levels_index_temp12 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index_temp13 = new ArrayList<>();\n  \
    \      ArrayList<Long> current_levels_index_temp14 = new ArrayList<>();\n    \
    \    ArrayList<Long> current_levels_index_temp15 = new ArrayList<>();\n      \
    \  ArrayList<Long> current_levels_index_temp16 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index_temp17 = new ArrayList<>();\n        ArrayList<Long> current_levels_index_temp18\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_temp19 =\
    \ new ArrayList<>();\n        ArrayList<Long> current_levels_index_temp20 = new\
    \ ArrayList<>();\n        ArrayList<Long> current_levels_index_temp21 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index_temp22 = new ArrayList<>();\n  \
    \      ArrayList<Long> current_levels_index_temp23 = new ArrayList<>();\n    \
    \    ArrayList<Long> current_levels_index_temp24 = new ArrayList<>();\n      \
    \  ArrayList<Long> current_levels_index_temp25 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index_temp26 = new ArrayList<>();\n        ArrayList<Long> current_levels_index_temp27\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index_temp28 =\
    \ new ArrayList<>();\n        ArrayList<Long> current_levels_index_temp29 = new\
    \ ArrayList<>();\n        ArrayList<Long> current_levels_index_temp30 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index_temp31 = new ArrayList<>();\n  \
    \      ArrayList<Long> current_levels_index_temp32 = new ArrayList<>();\n    \
    \    ArrayList<Long> current_levels_index_temp33 = new ArrayList<>();\n      \
    \  ArrayList<Long> current_levels_index_temp34 = new ArrayList<>();\n        ArrayList<Long\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppcnstqpr.java:53: error: > expected\n    }\n    ^\n/tmp/tmppcnstqpr.java:52:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> stack = new ArrayList<>();\n       \
    \ ArrayList<Long> stack2 = new ArrayList<>();\n        ArrayList<Long> stack3\
    \ = new ArrayList<>();\n        ArrayList<Long> stack4 = new ArrayList<>();\n\
    \        ArrayList<Long> stack5 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack6 = new ArrayList<>();\n        ArrayList<Long> stack7 = new ArrayList<>();\n\
    \        ArrayList<Long> stack8 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack9 = new ArrayList<>();\n        ArrayList<Long> stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack12 = new ArrayList<>();\n        ArrayList<Long> stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack15 = new ArrayList<>();\n        ArrayList<Long> stack16 = new ArrayList<>();\n\
    \        ArrayList<Long> stack17 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack18 = new ArrayList<>();\n        ArrayList<Long> stack19 = new ArrayList<>();\n\
    \        ArrayList<Long> stack20 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack21 = new ArrayList<>();\n        ArrayList<Long> stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack24 = new ArrayList<>();\n        ArrayList<Long> stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack27 = new ArrayList<>();\n        ArrayList<Long> stack28 = new ArrayList<>();\n\
    \        ArrayList<Long> stack29 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack30 = new ArrayList<>();\n        ArrayList<Long> stack31 = new ArrayList<>();\n\
    \        ArrayList<Long> stack32 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack33 = new ArrayList<>();\n        ArrayList<Long> stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack36 = new ArrayList<>();\n        ArrayList<Long> stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack39 = new ArrayList<>();\n        ArrayList<Long> stack40 = new ArrayList<>();\n\
    \        ArrayList<Long> stack41 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack42 = new ArrayList<>();\n        ArrayList<Long> stack43 = new ArrayList<>();\n\
    \        ArrayList<Long> stack44 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack45 = new ArrayList<>();\n        ArrayList<Long> stack46 = new ArrayList<>();\n\
    \        ArrayList<Long> stack47 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack48 = new ArrayList<>();\n        ArrayList<Long> stack49 = new ArrayList<>();\n\
    \        ArrayList<Long> stack50 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpol2e5kfe.java:66: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2jula9cq.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<Long> max_levels = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index =\
    \ new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_index\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_index_count\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_index_count_index\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index_count_index_count_index_count_index_count_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprsf3wa3w.java:40: error: ';' expected\n        ArrayList<Long>\
    \ max_levels_index_count_index_count_index_count_index_count_\n              \
    \                                                                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyfmzohbp.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpyfmzohbp.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6mm6881_.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp6mm6881_.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7p2uakx0.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp7p2uakx0.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> stack = new ArrayList<>();\n       \
    \ ArrayList<Long> stack2 = new ArrayList<>();\n        ArrayList<Long> stack3\
    \ = new ArrayList<>();\n        ArrayList<Long> stack4 = new ArrayList<>();\n\
    \        ArrayList<Long> stack5 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack6 = new ArrayList<>();\n        ArrayList<Long> stack7 = new ArrayList<>();\n\
    \        ArrayList<Long> stack8 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack9 = new ArrayList<>();\n        ArrayList<Long> stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack12 = new ArrayList<>();\n        ArrayList<Long> stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack15 = new ArrayList<>();\n        ArrayList<Long> stack16 = new ArrayList<>();\n\
    \        ArrayList<Long> stack17 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack18 = new ArrayList<>();\n        ArrayList<Long> stack19 = new ArrayList<>();\n\
    \        ArrayList<Long> stack20 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack21 = new ArrayList<>();\n        ArrayList<Long> stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack24 = new ArrayList<>();\n        ArrayList<Long> stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack27 = new ArrayList<>();\n        ArrayList<Long> stack28 = new ArrayList<>();\n\
    \        ArrayList<Long> stack29 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack30 = new ArrayList<>();\n        ArrayList<Long> stack31 = new ArrayList<>();\n\
    \        ArrayList<Long> stack32 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack33 = new ArrayList<>();\n        ArrayList<Long> stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack36 = new ArrayList<>();\n        ArrayList<Long> stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack39 = new ArrayList<>();\n        ArrayList<Long> stack40 = new ArrayList<>();\n\
    \        ArrayList<Long> stack41 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack42 = new ArrayList<>();\n        ArrayList<Long> stack43 = new ArrayList<>();\n\
    \        ArrayList<Long> stack44 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack45 = new ArrayList<>();\n        ArrayList<Long> stack46 = new ArrayList<>();\n\
    \        ArrayList<Long> stack47 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack48 = new ArrayList<>();\n        ArrayList<Long> stack49 = new ArrayList<>();\n\
    \        ArrayList<Long> stack50 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgu1jrogg.java:66: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_size = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index = new ArrayList<>();\n        ArrayList<Long> current_levels_index2\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index3 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index4 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index5 = new ArrayList<>();\n        ArrayList<Long> current_levels_index6\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index7 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index8 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index9 = new ArrayList<>();\n        ArrayList<Long> current_levels_index10\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index11 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index12 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_index13 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index14 = new ArrayList<>();\n        ArrayList<Long> current_levels_index15\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index16 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index17 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_index18 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index19 = new ArrayList<>();\n        ArrayList<Long> current_levels_index20\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index21 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index22 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_index23 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index24 = new ArrayList<>();\n        ArrayList<Long> current_levels_index25\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index26 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index27 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_index28 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index29 = new ArrayList<>();\n        ArrayList<Long> current_levels_index30\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index31 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index32 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_index33 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index34 = new ArrayList<>();\n        ArrayList<Long> current_levels_index35\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index36 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index37 = new ArrayList<\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyfuhp2hg.java:55: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<String> group_strings = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy = new ArrayList<>();\n        ArrayList<String> group_strings_copy2\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy3 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy4 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy5 = new ArrayList<>();\n        ArrayList<String> group_strings_copy6\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy7 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy8 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy9 = new ArrayList<>();\n        ArrayList<String> group_strings_copy10\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy11 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy12 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_copy13 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy14 = new ArrayList<>();\n        ArrayList<String> group_strings_copy15\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy16 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy17 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_copy18 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy19 = new ArrayList<>();\n        ArrayList<String> group_strings_copy20\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy21 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy22 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_copy23 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy24 = new ArrayList<>();\n        ArrayList<String> group_strings_copy25\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy26 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy27 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_copy28 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy29 = new ArrayList<>();\n        ArrayList<String> group_strings_copy30\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy31 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy32 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_copy33 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy34 = new ArrayList<>();\n        ArrayList<String> group_strings_copy35\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy36 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy37 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_copy38 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy39 = new ArrayList<>();\n        ArrayList<String> group_strings_copy40\
    \ = new ArrayList<>();\n        ArrayList<String> group_string\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbka1pj4c.java:58: error: ';' expected\n        ArrayList<String>\
    \ group_string\n                                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n        ArrayList<String> paren_strings_copy = new ArrayList<>(paren_strings);\n\
    \        ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy = new ArrayList<>(levels);\n        ArrayList<Long> levels_copy2\
    \ = new ArrayList<>(levels_copy);\n        ArrayList<Long> levels_copy3 = new\
    \ ArrayList<>(levels_copy);\n        ArrayList<Long> levels_copy4 = new ArrayList<>(levels_copy);\n\
    \        ArrayList<Long> levels_copy5 = new ArrayList<>(levels_copy);\n      \
    \  ArrayList<Long> levels_copy6 = new ArrayList<>(levels_copy);\n        ArrayList<Long>\
    \ levels_copy7 = new ArrayList<>(levels_copy);\n        ArrayList<Long> levels_copy8\
    \ = new ArrayList<>(levels_copy);\n        ArrayList<Long> levels_copy9 = new\
    \ ArrayList<>(levels_copy);\n        ArrayList<Long> levels_copy10 = new ArrayList<>(levels_copy);\n\
    \        ArrayList<Long> levels_copy11 = new ArrayList<>(levels_copy);\n     \
    \   ArrayList<Long> levels_copy12 = new ArrayList<>(levels_copy);\n        ArrayList<Long>\
    \ levels_copy13 = new ArrayList<>(levels_copy);\n        ArrayList<Long> levels_copy14\
    \ = new ArrayList<>(levels_copy);\n        ArrayList<Long> levels_copy15 = new\
    \ ArrayList<>(levels_copy);\n        ArrayList<Long> levels_copy16 = new ArrayList<>(levels_copy);\n\
    \        ArrayList<Long> levels_copy17 = new ArrayList<>(levels_copy);\n     \
    \   ArrayList<Long> levels_copy18 = new ArrayList<>(levels_copy);\n        ArrayList<Long>\
    \ levels_copy19 = new ArrayList<>(levels_copy);\n        ArrayList<Long> levels_copy20\
    \ = new ArrayList<>(levels_copy);\n        ArrayList<Long> levels_copy21 = new\
    \ ArrayList<>(levels_copy);\n        ArrayList<Long> levels_copy22 = new ArrayList<>(levels_copy);\n\
    \        ArrayList<Long> levels_copy23 = new ArrayList<>(levels_copy);\n     \
    \   ArrayList<Long> levels_copy24 = new ArrayList<>(levels_copy);\n        ArrayList<Long>\
    \ levels_copy25 = new ArrayList<>(levels_copy);\n        ArrayList<Long> levels_copy26\
    \ = new ArrayList<>(levels_copy);\n        ArrayList<Long> levels_copy27 = new\
    \ ArrayList<>(levels_copy);\n        ArrayList<Long> levels_copy28 = new ArrayList<>(levels_copy);\n\
    \        ArrayList<Long> levels_copy29 = new ArrayList<>(levels_copy);\n     \
    \   ArrayList<Long> level\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuazcrd3w.java:48: error: ';' expected\n        ArrayList<Long>\
    \ level\n                             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> current_level = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_parens = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_parens_index = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index2\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index3\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index4\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index5\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index6\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index7\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index8\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index9\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index10\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index11\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index12\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index13\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index14\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index15\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index16\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index17\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index18\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index19\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index20\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index21\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index22\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index23\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index24\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index25\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index26\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index27\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_index_count_index28\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_paren\n    }\n \
    \   public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb0pjeta2.java:48: error: ';' expected\n        ArrayList<Long>\
    \ current_level_paren\n                                           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9wtqef1u.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp9wtqef1u.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpodgfnh5_.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpodgfnh5_.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp931qdfbs.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp931qdfbs.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy5\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy9\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy13\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy21\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy25\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy33\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long\n    }\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyemlx60e.java:56: error: > expected\n    }\n    ^\n/tmp/tmpyemlx60e.java:55:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> stack = new ArrayList<>();\n       \
    \ ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long> levels_stack\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack2 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack3 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack4 = new ArrayList<>();\n        ArrayList<Long> levels_stack5 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack8 = new ArrayList<>();\n        ArrayList<Long> levels_stack9 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack12 = new ArrayList<>();\n        ArrayList<Long> levels_stack13\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack14 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack15 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack16 = new ArrayList<>();\n        ArrayList<Long> levels_stack17\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack20 = new ArrayList<>();\n        ArrayList<Long> levels_stack21\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack24 = new ArrayList<>();\n        ArrayList<Long> levels_stack25\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack26 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack27 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack28 = new ArrayList<>();\n        ArrayList<Long> levels_stack29\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack32 = new ArrayList<>();\n        ArrayList<Long> levels_stack33\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack36 = new ArrayList<>();\n        ArrayList<Long> levels_stack37\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack38 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack39 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack40 = new ArrayList<>();\n        ArrayList<Long> \n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6n6obf_8.java:58: error: not a statement\n        ArrayList<Long>\
    \ \n                 ^\n/tmp/tmp6n6obf_8.java:58: error: ';' expected\n      \
    \  ArrayList<Long> \n                       ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> stack = new ArrayList<>();\n       \
    \ ArrayList<Long> stack2 = new ArrayList<>();\n        ArrayList<Long> stack3\
    \ = new ArrayList<>();\n        ArrayList<Long> stack4 = new ArrayList<>();\n\
    \        ArrayList<Long> stack5 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack6 = new ArrayList<>();\n        ArrayList<Long> stack7 = new ArrayList<>();\n\
    \        ArrayList<Long> stack8 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack9 = new ArrayList<>();\n        ArrayList<Long> stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack12 = new ArrayList<>();\n        ArrayList<Long> stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack15 = new ArrayList<>();\n        ArrayList<Long> stack16 = new ArrayList<>();\n\
    \        ArrayList<Long> stack17 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack18 = new ArrayList<>();\n        ArrayList<Long> stack19 = new ArrayList<>();\n\
    \        ArrayList<Long> stack20 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack21 = new ArrayList<>();\n        ArrayList<Long> stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack24 = new ArrayList<>();\n        ArrayList<Long> stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack27 = new ArrayList<>();\n        ArrayList<Long> stack28 = new ArrayList<>();\n\
    \        ArrayList<Long> stack29 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack30 = new ArrayList<>();\n        ArrayList<Long> stack31 = new ArrayList<>();\n\
    \        ArrayList<Long> stack32 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack33 = new ArrayList<>();\n        ArrayList<Long> stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack36 = new ArrayList<>();\n        ArrayList<Long> stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack39 = new ArrayList<>();\n        ArrayList<Long> stack40 = new ArrayList<>();\n\
    \        ArrayList<Long> stack41 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack42 = new ArrayList<>();\n        ArrayList<Long> stack43 = new ArrayList<>();\n\
    \        ArrayList<Long> stack44 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack45 = new ArrayList<>();\n        ArrayList<Long> stack46 = new ArrayList<>();\n\
    \        ArrayList<Long> stack47 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack48 = new ArrayList<>();\n        ArrayList<Long> stack49 = new ArrayList<>();\n\
    \        ArrayList<Long> stack50 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp711z8tm0.java:66: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdo51642a.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3435s_vx.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp3435s_vx.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> level = new ArrayList<>();\n \
    \       ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long> levels_copy\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_copy2 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy3 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy4 = new ArrayList<>();\n        ArrayList<Long> levels_copy5 = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_copy6 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy7 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy8 = new ArrayList<>();\n        ArrayList<Long> levels_copy9 = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_copy10 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy11 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy12 = new ArrayList<>();\n        ArrayList<Long> levels_copy13 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_copy14 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy15 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy16 = new ArrayList<>();\n        ArrayList<Long> levels_copy17 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_copy18 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy19 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy20 = new ArrayList<>();\n        ArrayList<Long> levels_copy21 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_copy22 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy23 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy24 = new ArrayList<>();\n        ArrayList<Long> levels_copy25 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_copy26 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy27 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy28 = new ArrayList<>();\n        ArrayList<Long> levels_copy29 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_copy30 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy31 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy32 = new ArrayList<>();\n        ArrayList<Long> levels_copy33 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_copy34 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy35 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy36 = new ArrayList<>();\n        ArrayList<Long> levels_copy37 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_copy38 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy39 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy40 = new ArrayList<>();\n        ArrayList<Long\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5uhscwfr.java:59: error: > expected\n    }\n    ^\n/tmp/tmp5uhscwfr.java:58:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpontc2fog.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpontc2fog.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Stack<String> stack = new Stack<>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        long level = 0;\n        boolean inParen\
    \ = false;\n        for (char c : paren_string.toCharArray()) {\n            if\
    \ (c == '(') {\n                inParen = true;\n                stack.push(c);\n\
    \            } else if (c == ')') {\n                inParen = false;\n      \
    \          String s = stack.pop();\n                while (!s.equals(\"(\")) {\n\
    \                    sb.append(s);\n                    s = stack.pop();\n   \
    \             }\n                sb.append(c);\n                result.add(Long.parseLong(sb.toString()));\n\
    \                level--;\n            } else if (inParen) {\n               \
    \ sb.append(c);\n            }\n        }\n        return result;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp54bubu6d.java:23: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpopn2nasf.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n      \
    \  ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw40p490q.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj6l2nvfp.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpj6l2nvfp.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpseq_yfeh.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpseq_yfeh.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqdx8ixms.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpqdx8ixms.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> level = new ArrayList<>();\n \
    \       ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long> levels_stack\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy3 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy7 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy11 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy15 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy19 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy23 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy27 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy31 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy35 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36\
    \ = new ArrayList<>();\n        ArrayList<Long> \n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe1ireexk.java:55: error: not a statement\n        ArrayList<Long>\
    \ \n                 ^\n/tmp/tmpe1ireexk.java:55: error: ';' expected\n      \
    \  ArrayList<Long> \n                       ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> level = new ArrayList<>();\n \
    \       ArrayList<Long> level_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy = new ArrayList<>();\n        ArrayList<Long> level_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy37 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy38\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy39 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy40 = new ArrayList<>();\n        ArrayList<\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp97eqf3aq.java:59: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp97eqf3aq.java:58: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        long level\
    \ = 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c\
    \ == '(') {\n                stack.push(level);\n            } else if (c == ')')\
    \ {\n                level--;\n                if (level == 0) {\n           \
    \         result.add(stack.pop());\n                }\n            }\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3v44x1t0.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack4\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack17 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack29 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack33 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack37 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp65fvra20.java:54: error: ';' expected\n        ArrayList<Long>\
    \ levels_stack\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_d579lsw.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp_d579lsw.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2pzret5o.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp2pzret5o.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ug6jdsf.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq_f1n82e.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpq_f1n82e.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack4\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack17 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack29 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack33 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack37 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsl7rlevt.java:54: error: ';' expected\n        ArrayList<Long>\
    \ levels_stack\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf71c2pkn.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjjllx21u.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n        ArrayList<\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfi8_lszu.java:56: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpfi8_lszu.java:55: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp91mcwj49.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp91mcwj49.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy11 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy23 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsuyitg7v.java:53: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpsuyitg7v.java:52: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n        ArrayList<String> paren_strings_copy = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy2 = paren_strings.clone();\n    \
    \    ArrayList<String> paren_strings_copy3 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy4 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy5\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy6 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy7 = paren_strings.clone();\n    \
    \    ArrayList<String> paren_strings_copy8 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy9 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy10\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy11 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy12 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy13 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy14 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy15 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy16\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy17 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy18 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy19 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy20 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy21 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy22\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy23 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy24 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy25 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy26 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy27 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy28\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy29 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy30 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy31 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy32 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy33 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy34\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy35 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy36 = paren_strings.clone();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpywtx3oyg.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n/tmp/tmpywtx3oyg.java:17:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy = paren_strings.clone();\n     \
    \                                                             ^\n/tmp/tmpywtx3oyg.java:18:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy2 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpywtx3oyg.java:19:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy3 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpywtx3oyg.java:20:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy4 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpywtx3oyg.java:21:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy5 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpywtx3oyg.java:22:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy6 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpywtx3oyg.java:23:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy7 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpywtx3oyg.java:24:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy8 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpywtx3oyg.java:25:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy9 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpywtx3oyg.java:26:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy10 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:27:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy11 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:28:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy12 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:29:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy13 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:30:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy14 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:31:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy15 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:32:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy16 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:33:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy17 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:34:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy18 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:35:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy19 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:36:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy20 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:37:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy21 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:38:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy22 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:39:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy23 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:40:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy24 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:41:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy25 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:42:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy26 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:43:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy27 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:44:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy28 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:45:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy29 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:46:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy30 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:47:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy31 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:48:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy32 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:49:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy33 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:50:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy34 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:51:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy35 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpywtx3oyg.java:52:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy36 = paren_strings.clone();\n   \
    \                                                                 ^\n37 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Stack<String> stack = new Stack<>();\n        StringBuilder\
    \ buffer = new StringBuilder();\n        buffer.append(paren_string);\n      \
    \  while(!buffer.toString().equals(\"()\")){\n            String s = buffer.toString();\n\
    \            buffer.delete(0, buffer.length());\n            int index = s.indexOf('(');\n\
    \            while(index != -1){\n                stack.add(s.substring(0, index));\n\
    \                s = s.substring(index + 1);\n                index = s.indexOf('(');\n\
    \            }\n            stack.add(s);\n        }\n        while(!stack.isEmpty()){\n\
    \            String s = stack.pop();\n            int index = s.indexOf(')');\n\
    \            while(index != -1){\n                result.add(Long.parseLong(s.substring(0,\
    \ index)));\n                s = s.substring(index + 1);\n                index\
    \ = s.indexOf(')');\n            }\n            result.add(Long.parseLong(s));\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptet3rtln.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmptet3rtln.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> level = new ArrayList<>();\n \
    \       ArrayList<Long> level_count = new ArrayList<>();\n        ArrayList<Long>\
    \ level_count_total = new ArrayList<>();\n        ArrayList<Long> level_count_total_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<>();\n        ArrayList<Long> level_count_total_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmperrx_v84.java:41: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy7 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy10 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy12 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy14 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy20 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy22 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy24 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy26 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy29 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy32 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy34 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy35 = new ArrayList<Long>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3mkjuu3h.java:52: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb0jjgph3.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpb0jjgph3.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsajk0esy.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_pi7ho4m.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6u4tbrp5.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3lu1mxw2.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz72hm7u7.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpz72hm7u7.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxsdiyajs.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpxsdiyajs.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> level = new ArrayList<>();\n \
    \       ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long> levels_stack\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack2 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack3 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack4 = new ArrayList<>();\n        ArrayList<Long> levels_stack5 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack8 = new ArrayList<>();\n        ArrayList<Long> levels_stack9 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack12 = new ArrayList<>();\n        ArrayList<Long> levels_stack13\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack14 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack15 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack16 = new ArrayList<>();\n        ArrayList<Long> levels_stack17\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack20 = new ArrayList<>();\n        ArrayList<Long> levels_stack21\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack24 = new ArrayList<>();\n        ArrayList<Long> levels_stack25\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack26 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack27 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack28 = new ArrayList<>();\n        ArrayList<Long> levels_stack29\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack32 = new ArrayList<>();\n        ArrayList<Long> levels_stack33\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack36 = new ArrayList<>();\n        ArrayList<Long> levels_stack37\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack38 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack39 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack40 = new ArrayList<>();\n        ArrayList<Long\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphh1qvzzc.java:59: error: > expected\n    }\n    ^\n/tmp/tmphh1qvzzc.java:58:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsjbsx1aw.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpsjbsx1aw.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy11 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy12 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy14 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy17 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy18 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy19 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy22 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy24 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy25\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy27 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy29 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy30\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy32 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy34 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy35\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy37 = new ArrayList<Long\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw52iz283.java:55: error: > expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpswrmxyxo.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<String> group_strings = new ArrayList<>();\n        ArrayList<String>\
    \ group_levels = new ArrayList<>();\n        ArrayList<String> group_level_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_lengths = new ArrayList<>();\n\
    \        ArrayList<String> group_level_length_strings = new ArrayList<>();\n \
    \       ArrayList<String> group_level_lengths_strings = new ArrayList<>();\n \
    \       ArrayList<String> group_level_lengths_strings_strings = new ArrayList<>();\n\
    \        ArrayList<String> group_level_lengths_strings_strings_strings = new ArrayList<>();\n\
    \        ArrayList<String> group_level_lengths_strings_strings_strings_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz8qmosz4.java:38: error: ';' expected\n        ArrayList<String>\
    \ group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\n\
    \                                                                            \
    \                                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> stack = new ArrayList<>();\n       \
    \ ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long> levels_stack\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack2 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack3 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack4 = new ArrayList<>();\n        ArrayList<Long> levels_stack5 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack8 = new ArrayList<>();\n        ArrayList<Long> levels_stack9 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack12 = new ArrayList<>();\n        ArrayList<Long> levels_stack13\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack14 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack15 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack16 = new ArrayList<>();\n        ArrayList<Long> levels_stack17\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack20 = new ArrayList<>();\n        ArrayList<Long> levels_stack21\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack24 = new ArrayList<>();\n        ArrayList<Long> levels_stack25\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack26 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack27 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack28 = new ArrayList<>();\n        ArrayList<Long> levels_stack29\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack32 = new ArrayList<>();\n        ArrayList<Long> levels_stack33\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack36 = new ArrayList<>();\n        ArrayList<Long> levels_stack37\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack38 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack39 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack40 = new ArrayList<>();\n        ArrayList<Long> \n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5pzzzwxl.java:58: error: not a statement\n        ArrayList<Long>\
    \ \n                 ^\n/tmp/tmp5pzzzwxl.java:58: error: ';' expected\n      \
    \  ArrayList<Long> \n                       ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n        ArrayList<String> paren_strings_copy = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy2 = paren_strings.clone();\n    \
    \    ArrayList<String> paren_strings_copy3 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy4 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy5\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy6 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy7 = paren_strings.clone();\n    \
    \    ArrayList<String> paren_strings_copy8 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy9 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy10\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy11 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy12 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy13 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy14 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy15 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy16\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy17 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy18 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy19 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy20 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy21 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy22\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy23 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy24 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy25 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy26 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy27 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy28\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy29 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy30 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy31 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy32 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy33 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy34\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy35 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy36 = paren_strings.clone();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp951eqdp9.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n/tmp/tmp951eqdp9.java:17:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy = paren_strings.clone();\n     \
    \                                                             ^\n/tmp/tmp951eqdp9.java:18:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy2 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmp951eqdp9.java:19:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy3 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmp951eqdp9.java:20:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy4 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmp951eqdp9.java:21:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy5 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmp951eqdp9.java:22:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy6 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmp951eqdp9.java:23:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy7 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmp951eqdp9.java:24:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy8 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmp951eqdp9.java:25:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy9 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmp951eqdp9.java:26:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy10 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:27:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy11 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:28:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy12 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:29:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy13 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:30:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy14 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:31:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy15 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:32:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy16 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:33:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy17 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:34:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy18 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:35:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy19 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:36:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy20 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:37:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy21 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:38:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy22 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:39:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy23 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:40:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy24 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:41:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy25 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:42:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy26 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:43:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy27 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:44:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy28 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:45:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy29 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:46:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy30 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:47:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy31 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:48:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy32 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:49:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy33 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:50:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy34 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:51:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy35 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmp951eqdp9.java:52:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy36 = paren_strings.clone();\n   \
    \                                                                 ^\n37 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsd5eibv8.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxo92nf0j.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpxo92nf0j.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        StringTokenizer\
    \ st = new StringTokenizer(paren_string);\n        while (st.hasMoreTokens())\
    \ {\n            String token = st.nextToken();\n            if (token.equals(\"\
    (\")) {\n                stack.push(0);\n            } else if (token.equals(\"\
    )\")) {\n                long level = 0;\n                while (!stack.isEmpty())\
    \ {\n                    level++;\n                    stack.pop();\n        \
    \        }\n                result.add(level);\n            }\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb11u66mp.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj5roszbx.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpj5roszbx.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpka172lr3.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpka172lr3.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp875s0lco.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp875s0lco.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> paren_groups = paren_string.split(\"\
    \\\\s+\");\n        for (String group : paren_groups) {\n            ArrayList<Long>\
    \ current_level = new ArrayList<>();\n            ArrayList<Long> current_level_parens\
    \ = new ArrayList<>();\n            int paren_count = 0;\n            for (int\
    \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
    \ {\n                    current_level.add(paren_count);\n                   \
    \ current_level_parens.add(0);\n                    paren_count++;\n         \
    \       } else if (group.charAt(i) == ')') {\n                    current_level.add(paren_count);\n\
    \                    current_level_parens.add(0);\n                    paren_count--;\n\
    \                } else {\n                    current_level_parens.add((long)\
    \ group.charAt(i));\n                }\n            }\n            result.add(current_level.get(current_level.size()\
    \ - 1));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5m3ti0gf.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_groups = paren_string.split(\"\
    \\\\s+\");\n                                                           ^\n/tmp/tmp5m3ti0gf.java:23:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \     current_level.add(paren_count);\n                                      ^\n\
    /tmp/tmp5m3ti0gf.java:24: error: incompatible types: int cannot be converted to\
    \ Long\n                    current_level_parens.add(0);\n                   \
    \                          ^\n/tmp/tmp5m3ti0gf.java:27: error: incompatible types:\
    \ int cannot be converted to Long\n                    current_level.add(paren_count);\n\
    \                                      ^\n/tmp/tmp5m3ti0gf.java:28: error: incompatible\
    \ types: int cannot be converted to Long\n                    current_level_parens.add(0);\n\
    \                                             ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_size = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index = new ArrayList<>();\n        ArrayList<Long> current_levels_index2\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index3 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index4 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index5 = new ArrayList<>();\n        ArrayList<Long> current_levels_index6\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index7 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index8 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index9 = new ArrayList<>();\n        ArrayList<Long> current_levels_index10\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index11 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index12 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_index13 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index14 = new ArrayList<>();\n        ArrayList<Long> current_levels_index15\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index16 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index17 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_index18 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index19 = new ArrayList<>();\n        ArrayList<Long> current_levels_index20\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index21 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index22 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_index23 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index24 = new ArrayList<>();\n        ArrayList<Long> current_levels_index25\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index26 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index27 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_index28 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index29 = new ArrayList<>();\n        ArrayList<Long> current_levels_index30\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index31 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index32 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_index33 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_index34 = new ArrayList<>();\n        ArrayList<Long> current_levels_index35\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_index36 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_index37 = new ArrayList<\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0agthds3.java:55: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptd3blx4u.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_count = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_count_max = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index2\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index3\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index4\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index5\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index6\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index7\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index8\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index9\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index10\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index11\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index12\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index13\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index14\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index15\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index16\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index17\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index18\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index19\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index20\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index21\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index22\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index23\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index24\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index25\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index26\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index27\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index28\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index29\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index30\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index31\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index32\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_count_max_index33\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc_wrm580.java:52: error: ';' expected\n        ArrayList<Long>\
    \ current_level_\n                                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkxq08xaa.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpkxq08xaa.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqwx1dzyd.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> stack = new ArrayList<>();\n       \
    \ ArrayList<Long> stack2 = new ArrayList<>();\n        ArrayList<Long> stack3\
    \ = new ArrayList<>();\n        ArrayList<Long> stack4 = new ArrayList<>();\n\
    \        ArrayList<Long> stack5 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack6 = new ArrayList<>();\n        ArrayList<Long> stack7 = new ArrayList<>();\n\
    \        ArrayList<Long> stack8 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack9 = new ArrayList<>();\n        ArrayList<Long> stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack12 = new ArrayList<>();\n        ArrayList<Long> stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack15 = new ArrayList<>();\n        ArrayList<Long> stack16 = new ArrayList<>();\n\
    \        ArrayList<Long> stack17 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack18 = new ArrayList<>();\n        ArrayList<Long> stack19 = new ArrayList<>();\n\
    \        ArrayList<Long> stack20 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack21 = new ArrayList<>();\n        ArrayList<Long> stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack24 = new ArrayList<>();\n        ArrayList<Long> stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack27 = new ArrayList<>();\n        ArrayList<Long> stack28 = new ArrayList<>();\n\
    \        ArrayList<Long> stack29 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack30 = new ArrayList<>();\n        ArrayList<Long> stack31 = new ArrayList<>();\n\
    \        ArrayList<Long> stack32 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack33 = new ArrayList<>();\n        ArrayList<Long> stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack36 = new ArrayList<>();\n        ArrayList<Long> stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack39 = new ArrayList<>();\n        ArrayList<Long> stack40 = new ArrayList<>();\n\
    \        ArrayList<Long> stack41 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack42 = new ArrayList<>();\n        ArrayList<Long> stack43 = new ArrayList<>();\n\
    \        ArrayList<Long> stack44 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack45 = new ArrayList<>();\n        ArrayList<Long> stack46 = new ArrayList<>();\n\
    \        ArrayList<Long> stack47 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack48 = new ArrayList<>();\n        ArrayList<Long> stack49 = new ArrayList<>();\n\
    \        ArrayList<Long> stack50 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf2h3wzxr.java:66: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<Long> max_levels = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index = new ArrayList<>();\n        ArrayList<Long> max_levels_index2\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index3 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index4 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index5 = new ArrayList<>();\n        ArrayList<Long> max_levels_index6\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index7 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index8 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index9 = new ArrayList<>();\n        ArrayList<Long> max_levels_index10\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index11 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index12 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index13 = new ArrayList<>();\n        ArrayList<Long> max_levels_index14\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index15 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index16 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index17 = new ArrayList<>();\n        ArrayList<Long> max_levels_index18\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index19 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index20 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index21 = new ArrayList<>();\n        ArrayList<Long> max_levels_index22\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index23 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index24 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index25 = new ArrayList<>();\n        ArrayList<Long> max_levels_index26\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index27 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index28 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index29 = new ArrayList<>();\n        ArrayList<Long> max_levels_index30\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index31 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index32 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index33 = new ArrayList<>();\n        ArrayList<Long> max_levels_index34\
    \ = new ArrayList<>();\n        ArrayList<Long> max_levels_index35 = new ArrayList<>();\n\
    \        ArrayList<Long> max_levels_index36 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_levels_index37 = new ArrayList<>();\n        ArrayList<Long\n    }\n   \
    \ public static void main(String[] args) {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3n98azwb.java:56: error: > expected\n    }\n    ^\n/tmp/tmp3n98azwb.java:55:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8dm78fd1.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp8dm78fd1.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnbnfubgs.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<Long>();\n        ArrayList<String> groups = new ArrayList<String>();\n\
    \        ArrayList<String> group_strings = new ArrayList<String>();\n        ArrayList<String>\
    \ group_levels = new ArrayList<String>();\n        ArrayList<String> group_level_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_levels = new\
    \ ArrayList<String>();\n        ArrayList<String> group_level_level_strings =\
    \ new ArrayList<String>();\n        ArrayList<String> group_level_level_levels\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_levels\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_levels\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_levels\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_levels\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_levels\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_levels\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_levels\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_level_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_levels\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_level_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_levels\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_levels\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_level_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_levels\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_level_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_levels\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_level_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_level_level_level_level_level_level_levels\
    \ = new ArrayList<String>();\n        ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfv96rmoz.java:50: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpfv96rmoz.java:49: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwiqqssfp.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpwiqqssfp.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> current_level = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_size = new ArrayList<>();\n        ArrayList<Long> current_levels_sizes\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_sizes_sum = new\
    \ ArrayList<>();\n        ArrayList<Long> current_levels_sizes_sums = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_sizes_sums_sum = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_sizes_sums_sums = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_sizes_sums_sums_sum = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_sizes_sums_sums_sums = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_sizes_sums_sums_sums_sum = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_sizes_sums_sums_sums_sums = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_sizes_sums_sums_sums_sums_sum = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_sizes_sums_sums_sums_sums_sums = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_sizes_sums_sums_sums_sums_sums_sum = new\
    \ ArrayList<>();\n        ArrayList<Long> current_levels_sizes_sums_sums_sums_sums_sums_sums\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_sizes_sums_sums_sums_sums_sums_sums_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_sizes_sums_sums_sums_sums_sums_sums_sums\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sums\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sums_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptih64mbs.java:39: error: ';' expected\n        ArrayList<Long>\
    \ current_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_\n  \
    \                                                                            \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl3e4gh_5.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpl3e4gh_5.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Stack<String> stack = new Stack<>();\n        StringBuilder\
    \ buffer = new StringBuilder();\n        long max_level = 0;\n        long level\
    \ = 0;\n        boolean in_paren = false;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.push(c);\n      \
    \      } else if (c == ')') {\n                in_paren = false;\n           \
    \     String s = stack.pop();\n                buffer.append(s);\n           \
    \     level = buffer.length();\n                if (level > max_level) {\n   \
    \                 max_level = level;\n                }\n            } else if\
    \ (c == ' ') {\n                if (in_paren) {\n                    buffer.append(c);\n\
    \                }\n            } else {\n                buffer.append(c);\n\
    \            }\n        }\n        if (buffer.length() > 0) {\n            result.add(max_level);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbyj0mgxi.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgpejgony.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcvn8rxd0.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpcvn8rxd0.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnoj6ol20.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpnoj6ol20.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n        ArrayList<String> paren_strings_copy = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy2 = paren_strings.clone();\n    \
    \    ArrayList<String> paren_strings_copy3 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy4 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy5\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy6 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy7 = paren_strings.clone();\n    \
    \    ArrayList<String> paren_strings_copy8 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy9 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy10\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy11 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy12 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy13 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy14 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy15 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy16\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy17 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy18 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy19 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy20 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy21 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy22\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy23 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy24 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy25 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy26 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy27 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy28\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy29 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy30 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy31 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy32 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy33 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy34\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy35 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy36 = paren_strings.clone();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk9n7u0em.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n/tmp/tmpk9n7u0em.java:17:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy = paren_strings.clone();\n     \
    \                                                             ^\n/tmp/tmpk9n7u0em.java:18:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy2 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpk9n7u0em.java:19:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy3 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpk9n7u0em.java:20:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy4 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpk9n7u0em.java:21:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy5 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpk9n7u0em.java:22:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy6 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpk9n7u0em.java:23:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy7 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpk9n7u0em.java:24:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy8 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpk9n7u0em.java:25:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy9 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpk9n7u0em.java:26:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy10 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:27:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy11 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:28:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy12 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:29:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy13 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:30:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy14 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:31:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy15 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:32:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy16 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:33:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy17 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:34:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy18 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:35:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy19 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:36:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy20 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:37:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy21 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:38:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy22 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:39:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy23 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:40:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy24 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:41:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy25 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:42:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy26 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:43:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy27 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:44:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy28 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:45:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy29 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:46:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy30 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:47:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy31 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:48:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy32 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:49:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy33 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:50:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy34 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:51:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy35 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpk9n7u0em.java:52:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy36 = paren_strings.clone();\n   \
    \                                                                 ^\n37 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplaeb0ts_.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> level = new ArrayList<>();\n \
    \       ArrayList<Long> level_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy = new ArrayList<>();\n        ArrayList<Long> level_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy37 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy38\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy39 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy40 = new ArrayList<>();\n        ArrayList<\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxa8j1n4d.java:59: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpxa8j1n4d.java:58: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpomhie9xh.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        Long current_level\
    \ = 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c\
    \ == '(') {\n                stack.push(current_level);\n                current_level++;\n\
    \            } else if (c == ')') {\n                Long level = stack.pop();\n\
    \                if (level > current_level) {\n                    result.add(current_level);\n\
    \                }\n                current_level = level;\n            } else\
    \ {\n                current_level++;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgiy6is7s.java:17: error: incompatible types: int cannot be converted\
    \ to Long\n        Long current_level = 0;\n                             ^\n1\
    \ error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n        ArrayList<String> paren_strings_copy = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy2 = paren_strings.clone();\n    \
    \    ArrayList<String> paren_strings_copy3 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy4 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy5\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy6 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy7 = paren_strings.clone();\n    \
    \    ArrayList<String> paren_strings_copy8 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy9 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy10\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy11 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy12 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy13 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy14 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy15 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy16\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy17 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy18 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy19 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy20 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy21 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy22\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy23 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy24 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy25 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy26 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy27 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy28\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy29 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy30 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy31 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy32 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy33 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy34\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy35 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy36 = paren_strings.clone();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpepybar6h.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n/tmp/tmpepybar6h.java:17:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy = paren_strings.clone();\n     \
    \                                                             ^\n/tmp/tmpepybar6h.java:18:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy2 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpepybar6h.java:19:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy3 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpepybar6h.java:20:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy4 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpepybar6h.java:21:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy5 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpepybar6h.java:22:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy6 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpepybar6h.java:23:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy7 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpepybar6h.java:24:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy8 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpepybar6h.java:25:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy9 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpepybar6h.java:26:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy10 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:27:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy11 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:28:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy12 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:29:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy13 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:30:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy14 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:31:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy15 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:32:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy16 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:33:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy17 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:34:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy18 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:35:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy19 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:36:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy20 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:37:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy21 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:38:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy22 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:39:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy23 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:40:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy24 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:41:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy25 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:42:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy26 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:43:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy27 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:44:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy28 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:45:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy29 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:46:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy30 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:47:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy31 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:48:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy32 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:49:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy33 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:50:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy34 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:51:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy35 = paren_strings.clone();\n   \
    \                                                                 ^\n/tmp/tmpepybar6h.java:52:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy36 = paren_strings.clone();\n   \
    \                                                                 ^\n37 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt3v9smuc.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack = new ArrayList<>();\n        ArrayList<Long> level_stack_copy =\
    \ new ArrayList<>();\n        ArrayList<Long> level_stack_copy2 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy3 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy4 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy5\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy6 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy7 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy8 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy9\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy10 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy11 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy12 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy13\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy14 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy15 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy16 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy17\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy18 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy19 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy20 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy21\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy22 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy23 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy24 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy25\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy26 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy27 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy28 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy29\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy30 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy31 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy32 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy33\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy34 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy35 = new ArrayList<>();\n        ArrayList<Long>\
    \ level_stack_copy36 = new ArrayList<>();\n        ArrayList<Long> level_stack_copy37\
    \ = new ArrayList<>();\n        ArrayList<Long> level_stack_copy38 = new ArrayList<>();\n\
    \        ArrayList<Long> level_stack_copy39 = new ArrayList<>();\n        ArrayList<Long\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv9a5ctw1.java:59: error: > expected\n    }\n    ^\n/tmp/tmpv9a5ctw1.java:58:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_num = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_num2 = new ArrayList<>();\n        ArrayList<Long> current_level_num3\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_num4 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_num5 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_num6 = new ArrayList<>();\n        ArrayList<Long> current_level_num7\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_num8 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_num9 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_num10 = new ArrayList<>();\n        ArrayList<Long> current_level_num11\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_num12 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_num13 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_num14 = new ArrayList<>();\n        ArrayList<Long> current_level_num15\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_num16 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_num17 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_num18 = new ArrayList<>();\n        ArrayList<Long> current_level_num19\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_num20 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_num21 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_num22 = new ArrayList<>();\n        ArrayList<Long> current_level_num23\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_num24 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_num25 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_num26 = new ArrayList<>();\n        ArrayList<Long> current_level_num27\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_num28 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_num29 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_num30 = new ArrayList<>();\n        ArrayList<Long> current_level_num31\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_num32 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_num33 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_num34 = new ArrayList<>();\n        ArrayList<Long> current_level_num35\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_num36 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_num37 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_num38 = new ArrayList<>();\n        ArrayList<Long> current_level_num39\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_num40 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_num41 = new ArrayList<\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgpvozbk1.java:58: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_length = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_length2 = new ArrayList<>();\n        ArrayList<Long> current_level_length3\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_length4 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_length5 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_length6 = new ArrayList<>();\n        ArrayList<Long> current_level_length7\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_length8 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_length9 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_length10 = new ArrayList<>();\n        ArrayList<Long> current_level_length11\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_length12 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_length13 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_level_length14 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_length15 = new ArrayList<>();\n        ArrayList<Long> current_level_length16\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_length17 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_length18 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_level_length19 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_length20 = new ArrayList<>();\n        ArrayList<Long> current_level_length21\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_length22 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_length23 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_level_length24 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_length25 = new ArrayList<>();\n        ArrayList<Long> current_level_length26\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_length27 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_length28 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_level_length29 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_length30 = new ArrayList<>();\n        ArrayList<Long> current_level_length31\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_length32 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_length33 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_level_length34 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_length35 = new ArrayList<>();\n        ArrayList<Long> current_level_length36\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_length37 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_length38 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_level_length39 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_length40 = new ArrayList<>();\n        ArrayList<Long> current_level_length41\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph_vwvn0_.java:58: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<String> group_strings = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp = new ArrayList<>();\n        ArrayList<String> group_strings_temp2\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp3 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp4 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp5 = new ArrayList<>();\n        ArrayList<String> group_strings_temp6\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp7 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp9 = new ArrayList<>();\n        ArrayList<String> group_strings_temp10\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp11 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp12 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_temp13 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp14 = new ArrayList<>();\n        ArrayList<String> group_strings_temp15\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp16 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp17 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp19 = new ArrayList<>();\n        ArrayList<String> group_strings_temp20\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp21 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp22 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp24 = new ArrayList<>();\n        ArrayList<String> group_strings_temp25\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp26 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp27 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_temp28 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp29 = new ArrayList<>();\n        ArrayList<String> group_strings_temp30\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp31 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp32 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp34 = new ArrayList<>();\n        ArrayList<String> group_strings_temp35\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp36 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp37 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp39 = new ArrayList<>();\n        ArrayList<String> group_strings_temp40\
    \ = new ArrayList<>();\n        ArrayList<String> group_string\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppcdcpoap.java:58: error: ';' expected\n        ArrayList<String>\
    \ group_string\n                                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnpkbb3wr.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmpnpkbb3wr.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack41 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack42 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqupxtrc3.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> stack = new ArrayList<>();\n       \
    \ ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long> levels_stack\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack2 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack3 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack4 = new ArrayList<>();\n        ArrayList<Long> levels_stack5 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack8 = new ArrayList<>();\n        ArrayList<Long> levels_stack9 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack10 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack11 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack12 = new ArrayList<>();\n        ArrayList<Long> levels_stack13\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack14 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack15 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack16 = new ArrayList<>();\n        ArrayList<Long> levels_stack17\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack20 = new ArrayList<>();\n        ArrayList<Long> levels_stack21\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack22 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack23 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack24 = new ArrayList<>();\n        ArrayList<Long> levels_stack25\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack26 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack27 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack28 = new ArrayList<>();\n        ArrayList<Long> levels_stack29\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack32 = new ArrayList<>();\n        ArrayList<Long> levels_stack33\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack34 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack35 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack36 = new ArrayList<>();\n        ArrayList<Long> levels_stack37\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack38 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack39 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack40 = new ArrayList<>();\n        ArrayList<Long> \n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxz__wh00.java:58: error: not a statement\n        ArrayList<Long>\
    \ \n                 ^\n/tmp/tmpxz__wh00.java:58: error: ';' expected\n      \
    \  ArrayList<Long> \n                       ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Stack<String> stack = new Stack<>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        long level = 0;\n        for (char c : paren_string.toCharArray())\
    \ {\n            if (c == '(') {\n                stack.push(c);\n           \
    \     level++;\n            } else if (c == ')') {\n                String s =\
    \ stack.pop();\n                sb.append(s);\n                level--;\n    \
    \            if (level == 0) {\n                    result.add(Long.parseLong(sb.toString()));\n\
    \                    sb.setLength(0);\n                }\n            }\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr72qu3ca.java:21: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp47rk14op.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmp47rk14op.java:55: error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Stack<String> stack = new Stack<>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        long level = 0;\n        for (char c : paren_string.toCharArray())\
    \ {\n            if (c == '(') {\n                stack.push(c);\n           \
    \ } else if (c == ')') {\n                String s = stack.pop();\n          \
    \      if (s.equals(\"(\")) {\n                    level++;\n                }\
    \ else if (s.equals(\")\")) {\n                    level--;\n                }\n\
    \                result.add(level);\n            }\n            sb.append(c);\n\
    \        }\n        result.add(level);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpybjub6wq.java:21: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_level\
    \ = new ArrayList<>();\n        ArrayList<Long> level = new ArrayList<>();\n \
    \       ArrayList<Long> max_level2 = new ArrayList<>();\n        ArrayList<Long>\
    \ level2 = new ArrayList<>();\n        ArrayList<Long> max_level3 = new ArrayList<>();\n\
    \        ArrayList<Long> level3 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_level4 = new ArrayList<>();\n        ArrayList<Long> level4 = new ArrayList<>();\n\
    \        ArrayList<Long> max_level5 = new ArrayList<>();\n        ArrayList<Long>\
    \ level5 = new ArrayList<>();\n        ArrayList<Long> max_level6 = new ArrayList<>();\n\
    \        ArrayList<Long> level6 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_level7 = new ArrayList<>();\n        ArrayList<Long> level7 = new ArrayList<>();\n\
    \        ArrayList<Long> max_level8 = new ArrayList<>();\n        ArrayList<Long>\
    \ level8 = new ArrayList<>();\n        ArrayList<Long> max_level9 = new ArrayList<>();\n\
    \        ArrayList<Long> level9 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_level10 = new ArrayList<>();\n        ArrayList<Long> level10 = new ArrayList<>();\n\
    \        ArrayList<Long> max_level11 = new ArrayList<>();\n        ArrayList<Long>\
    \ level11 = new ArrayList<>();\n        ArrayList<Long> max_level12 = new ArrayList<>();\n\
    \        ArrayList<Long> level12 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_level13 = new ArrayList<>();\n        ArrayList<Long> level13 = new ArrayList<>();\n\
    \        ArrayList<Long> max_level14 = new ArrayList<>();\n        ArrayList<Long>\
    \ level14 = new ArrayList<>();\n        ArrayList<Long> max_level15 = new ArrayList<>();\n\
    \        ArrayList<Long> level15 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_level16 = new ArrayList<>();\n        ArrayList<Long> level16 = new ArrayList<>();\n\
    \        ArrayList<Long> max_level17 = new ArrayList<>();\n        ArrayList<Long>\
    \ level17 = new ArrayList<>();\n        ArrayList<Long> max_level18 = new ArrayList<>();\n\
    \        ArrayList<Long> level18 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_level19 = new ArrayList<>();\n        ArrayList<Long> level19 = new ArrayList<>();\n\
    \        ArrayList<Long> max_level20 = new ArrayList<>();\n        ArrayList<Long>\
    \ level20 = new ArrayList<>();\n        ArrayList<Long> max_level21 = new ArrayList<>();\n\
    \        ArrayList<Long> level21 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_level22 = new ArrayList<>();\n        ArrayList<Long> level22 = new ArrayList<>();\n\
    \        ArrayList<Long> max_level23 = new ArrayList<>();\n        ArrayList<Long>\
    \ level23 = new ArrayList<>();\n        ArrayList<Long> max_level24 = new ArrayList<>();\n\
    \        ArrayList<Long> level24 = new ArrayList<>();\n        ArrayList<Long>\
    \ max_level25 = new \n    }\n    public static void main(String[] args) {\n  \
    \  assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqw_ashon.java:63: error: <identifier> expected\n        ArrayList<Long>\
    \ max_level25 = new \n                                         ^\n/tmp/tmpqw_ashon.java:64:\
    \ error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<Long> current_level = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_copy = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_2\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_3 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_copy_4 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_copy_5 = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_6\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_7 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_copy_8 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_copy_9 = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_10\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_11 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_copy_12 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_copy_13 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_copy_14 = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_15\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_16 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_copy_17 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_copy_18 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_copy_19 = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_20\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_21 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_copy_22 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_copy_23 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_copy_24 = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_25\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_26 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_copy_27 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_copy_28 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_copy_29 = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_30\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_31 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_copy_32 = new ArrayList<>();\n       \
    \ ArrayList<Long> current_levels_copy_33 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_levels_copy_34 = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_35\
    \ = new ArrayList<>();\n        ArrayList<Long> current_levels_copy_36 = new ArrayList<>();\n\
    \        ArrayList<Long> current_levels_copy_37 = new ArrayList<>();\n       \
    \ \n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkloikpkn.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> levels = new\
    \ ArrayList<>();\n        ArrayList<String> groups = new ArrayList<>();\n    \
    \    ArrayList<String> group_strings = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp = new ArrayList<>();\n        ArrayList<String> group_strings_temp_2\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp_3 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp_4 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_temp_5 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp_6 = new ArrayList<>();\n        ArrayList<String> group_strings_temp_7\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp_8 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp_9 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_temp_10 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp_11 = new ArrayList<>();\n        ArrayList<String> group_strings_temp_12\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp_13 = new\
    \ ArrayList<>();\n        ArrayList<String> group_strings_temp_14 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp_15 = new ArrayList<>();\n      \
    \  ArrayList<String> group_strings_temp_16 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp_17 = new ArrayList<>();\n        ArrayList<String> group_strings_temp_18\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp_19 = new\
    \ ArrayList<>();\n        ArrayList<String> group_strings_temp_20 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp_21 = new ArrayList<>();\n      \
    \  ArrayList<String> group_strings_temp_22 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp_23 = new ArrayList<>();\n        ArrayList<String> group_strings_temp_24\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp_25 = new\
    \ ArrayList<>();\n        ArrayList<String> group_strings_temp_26 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp_27 = new ArrayList<>();\n      \
    \  ArrayList<String> group_strings_temp_28 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp_29 = new ArrayList<>();\n        ArrayList<String> group_strings_temp_30\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp_31 = new\
    \ ArrayList<>();\n        ArrayList<String> group_strings_temp_32 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp_33 = new ArrayList<>();\n      \
    \  ArrayList<String> group_strings_temp_34 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_temp_35 = new ArrayList<>();\n        ArrayList<String> group_strings_temp_36\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_temp_37 = new\
    \ ArrayList<>();\n        ArrayList<String> group_strings_temp_38 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_temp_39 = new ArrayList<>();\n      \
    \  ArrayList<String> group_strings_temp_40 = new ArrayList<>();\n        ArrayList<String>\
    \ group_string\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgmex0sds.java:58: error: ';' expected\n        ArrayList<String>\
    \ group_string\n                                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Long> max_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8xer351p.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
