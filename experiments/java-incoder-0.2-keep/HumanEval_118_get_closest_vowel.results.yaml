name: HumanEval_118_get_closest_vowel
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants3\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants4\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants5\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants6\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants7\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\n \
    \   }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8vykc08t.java:29: error: unclosed string literal\n        List<String>\
    \ vowelsAndConsonants8 = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"\n                                                         \
    \                                                                            \
    \                    ^\n/tmp/tmp8vykc08t.java:29: error: ';' expected\n      \
    \  List<String> vowelsAndConsonants8 = Arrays.asList(\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"\n                                           \
    \                                                                            \
    \                                   ^\n/tmp/tmp8vykc08t.java:31: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp8vykc08t.java:31:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp8vykc08t.java:31: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp8vykc08t.java:31:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp8vykc08t.java:31: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp8vykc08t.java:47: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<String>();\n        vowels.add(\"a\"\
    );\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp5yh0ry_.java:93: error: unclosed string literal\n        vowels.add(\"\
    a\n                   ^\n/tmp/tmpp5yh0ry_.java:93: error: ';' expected\n     \
    \   vowels.add(\"a\n                     ^\n/tmp/tmpp5yh0ry_.java:95: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpp5yh0ry_.java:95:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpp5yh0ry_.java:95: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpp5yh0ry_.java:95:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpp5yh0ry_.java:95: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpp5yh0ry_.java:111: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsBefore =\
    \ Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    );\n        List<String> vowelsAfter = Arrays.asList(\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\");\n        List<String> consonantsBefore = Arrays.asList(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String>\
    \ consonantsAfter = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"z\");\n        List<String> vowelsBeforeConsonants = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String>\
    \ vowelsAfterConsonants = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonantsBeforeConsonants = Arrays.asList(\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String>\
    \ consonantsAfterConsonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsBeforeConsonantsConsonants\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    );\n        List<String> vowelsAfterConsonantsConsonants = Arrays.asList(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n        List<String> consonantsBeforeConsonantsConsonants\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1a47c8mq.java:32: error: unclosed string literal\n        List<String>\
    \ consonantsBeforeConsonantsConsonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"\n                                                             \
    \                                      ^\n/tmp/tmp1a47c8mq.java:32: error: ';'\
    \ expected\n        List<String> consonantsBeforeConsonantsConsonants = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"\n                                        \
    \                                                            ^\n/tmp/tmp1a47c8mq.java:34:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp1a47c8mq.java:34: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp1a47c8mq.java:34: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp1a47c8mq.java:34: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp1a47c8mq.java:34:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp1a47c8mq.java:50: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfhax1e_t.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpfhax1e_t.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmpfhax1e_t.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpfhax1e_t.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpfhax1e_t.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpfhax1e_t.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpfhax1e_t.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_52xlfyw.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl9da2m57.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpl9da2m57.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppp3kg27y.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpakjke1wh.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpakjke1wh.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmpakjke1wh.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpakjke1wh.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpakjke1wh.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpakjke1wh.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpakjke1wh.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4hui5odv.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmp4hui5odv.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptdm3sdll.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9szkv0zt.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9h8crtsq.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<String>();\n        vowels.add(\"a\"\
    );\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppr5vlzj3.java:93: error: unclosed string literal\n        vowels.add(\"\
    a\n                   ^\n/tmp/tmppr5vlzj3.java:93: error: ';' expected\n     \
    \   vowels.add(\"a\n                     ^\n/tmp/tmppr5vlzj3.java:95: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmppr5vlzj3.java:95:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmppr5vlzj3.java:95: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmppr5vlzj3.java:95:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmppr5vlzj3.java:95: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmppr5vlzj3.java:111: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl3gcxfjg.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<String> vowels = new HashSet<String>();\n        vowels.add(\"a\");\n\
    \        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowel\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxsf29lsb.java:93: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpxsf29lsb.java:93: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfox8h3yu.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdvhsznmm.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxag_kmz_.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4367bdne.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_lmx1bvm.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsBefore =\
    \ Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> vowelsAfter\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> consonantsBefore\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\");\n        List<String> consonantsAfter = Arrays.asList(\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String>\
    \ vowelsBeforeAndAfter = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n \
    \       List<String> consonantsBeforeAndAfter = Arrays.asList(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> vowelsBefore\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7il3j9zg.java:33: error: ';' expected\n        List<String> vowelsBefore\n\
    \                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdni1ochp.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpdni1ochp.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqx4dgqfh.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2j8jzv5v.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpypjigqjb.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwh2tc79a.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiusbqzde.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1qf7ijhg.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants3\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants4\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants5\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants6\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants7\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1m3ltl7s.java:29: error: unclosed string literal\n        List<String>\
    \ vowelsAndConsonants8 = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\
    , \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"p\", \"q\", \"r\n                                                        \
    \                                                                            \
    \                     ^\n/tmp/tmp1m3ltl7s.java:29: error: ';' expected\n     \
    \   List<String> vowelsAndConsonants8 = Arrays.asList(\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"y\", \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\n                                       \
    \                                                                            \
    \                                        ^\n/tmp/tmp1m3ltl7s.java:31: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp1m3ltl7s.java:31:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp1m3ltl7s.java:31: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp1m3ltl7s.java:31:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp1m3ltl7s.java:31: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp1m3ltl7s.java:47: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsBefore =\
    \ Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> vowelsAfter\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> consonantsBefore\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\");\n        List<String> consonantsAfter = Arrays.asList(\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String>\
    \ vowelsBeforeConsonants = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> vowelsAfterConsonants = Arrays.asList(\"a\", \"e\", \"i\"\
    , \"o\", \"u\");\n        List<String> consonantsBeforeConsonants = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n       \
    \ List<String> consonantsAfterConsonants = Arrays.asList(\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsBeforeConsonantsConsonants\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> vowelsAfterConsonantsConsonants\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> consonantsBeforeConsonantsConsonants\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\");\n        List<String> consonantsAfterConsonantsConsonants = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"\n    }\n    public static void main(String[] args) {\n \
    \   assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1msxbyof.java:33: error: unclosed string literal\n        List<String>\
    \ consonantsAfterConsonantsConsonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\n\
    \                                                                            \
    \                                                                   ^\n/tmp/tmp1msxbyof.java:33:\
    \ error: ';' expected\n        List<String> consonantsAfterConsonantsConsonants\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"\n                                    \
    \                                                                            \
    \                                ^\n/tmp/tmp1msxbyof.java:35: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp1msxbyof.java:35:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp1msxbyof.java:35: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp1msxbyof.java:35:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp1msxbyof.java:35: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp1msxbyof.java:51: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptq96kxn8.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'};\n        char[] consonants2 = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n\
    \        char[] consonants3 = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] consonants4\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] consonants5 = {'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z'};\n        char[] consonants6 = {'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n   \
    \     char[] consonants7 = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] consonants8\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] consonants9 = {'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z'};\n        char[] consonants10 = {'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n   \
    \     char[] consonants11 = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] consonants12\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] consonants13 = {'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z'};\n        char[] conson\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2uxo5ns2.java:34: error: ';' expected\n        char[] conson\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsxhjik9o.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjvn1654s.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpko77kcul.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpko77kcul.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmpko77kcul.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpko77kcul.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpko77kcul.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpko77kcul.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpko77kcul.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm_o_x6l5.java:95: error: unclosed string literal\n        vowels.add(\"\
    \n                   ^\n/tmp/tmpm_o_x6l5.java:95: error: ';' expected\n      \
    \  vowels.add(\"\n                    ^\n/tmp/tmpm_o_x6l5.java:97: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpm_o_x6l5.java:97:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpm_o_x6l5.java:97: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpm_o_x6l5.java:97:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpm_o_x6l5.java:97: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpm_o_x6l5.java:113: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdqdyrmjo.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpdqdyrmjo.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmpdqdyrmjo.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpdqdyrmjo.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpdqdyrmjo.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpdqdyrmjo.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpdqdyrmjo.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa5qa9pqg.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n   \
    \     char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] vowelsBefore\
    \ = Arrays.copyOfRange(vowels, 0, word.length());\n        char[] vowelsAfter\
    \ = Arrays.copyOfRange(vowels, word.length(), vowels.length);\n        char[]\
    \ consonantsBefore = Arrays.copyOfRange(consonants, 0, word.length());\n     \
    \   char[] consonantsAfter = Arrays.copyOfRange(consonants, word.length(), consonants.length);\n\
    \        Arrays.sort(vowelsBefore);\n        Arrays.sort(vowelsAfter);\n     \
    \   Arrays.sort(consonantsBefore);\n        Arrays.sort(consonantsAfter);\n  \
    \      char[] vowelsBetween = new char[vowelsBefore.length + vowelsAfter.length];\n\
    \        System.arraycopy(vowelsBefore, 0, vowelsBetween, 0, vowelsBefore.length);\n\
    \        System.arraycopy(vowelsAfter, 0, vowelsBetween, vowelsBefore.length,\
    \ vowelsAfter.length);\n        Arrays.sort(vowelsBetween);\n        char[] consonantsBetween\
    \ = new char[consonantsBefore.length + consonantsAfter.length];\n        System.arraycopy(consonantsBefore,\
    \ 0, consonantsBetween, 0, consonantsBefore.length);\n        System.arraycopy(consonantsAfter,\
    \ 0, consonantsBetween, consonantsBefore.length, consonantsAfter.length);\n  \
    \      Arrays.sort(consonantsBetween);\n        int minDistance = vowelsBetween.length\
    \ - consonantsBetween.length;\n        int minIndex = 0;\n        for (int i =\
    \ 0; i < vowelsBetween.length; i++) {\n            if (vowelsBetween[i] == consonantsBetween[i])\
    \ {\n                continue;\n            }\n            int distance = vowelsBetween[i]\
    \ - consonantsBetween[i];\n            if (distance < minDistance) {\n       \
    \         minDistance = distance;\n                minIndex = i;\n           \
    \ }\n        }\n        return vowelsBetween[minIndex];\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5zbgjxc5.java:50: error: incompatible types: char cannot be converted\
    \ to String\n        return vowelsBetween[minIndex];\n                       \
    \     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4g1k9ybc.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmp4g1k9ybc.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx8jgun2w.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonantsReverse\
    \ = Arrays.asList(vowels.toArray(new String[vowels.size()]), consonants.toArray(new\
    \ String[consonants.size()]));\n        List<String> vowelsAndConsonantsReverse2\
    \ = Arrays.asList(vowels.toArray(new String[vowels.size()]), consonants.toArray(new\
    \ String[consonants.size()]));\n        List<String> vowelsAndConsonantsReverse3\
    \ = Arrays.asList(vowels.toArray(new String[vowels.size()]), consonants.toArray(new\
    \ String[consonants.size()]));\n        List<String> vowelsAndConsonantsReverse4\
    \ = Arrays.asList(vowels.toArray(new String[vowels.size()]), consonants.toArray(new\
    \ String[consonants.size()]));\n        List<String> vowelsAndConsonantsReverse5\
    \ = Arrays.asList(vowels.toArray(new String[vowels.size()]), consonants.toArray(new\
    \ String[consonants.size()]));\n        List<String> vowelsAndConsonantsReverse6\
    \ = Arrays.asList(vowels.toArray(new String[vowels.size()]), consonants.toArray(new\
    \ String[consonants.size()]));\n        List<String> vowelsAndConsonantsReverse7\
    \ = Arrays.asList(vowels.toArray(new String[vowels.size()]), consonants.toArray(new\
    \ String[consonants.size()]));\n        List<String> vowelsAndConsonantsReverse8\
    \ = Arrays.asList(vowels.toArray(new String[vowels.size()]), consonants.toArray(new\
    \ String[consonants.size()]));\n        List<String> vowelsAndConsonantsReverse9\
    \ = Arrays.asList(vowels.toArray(new String[vowels.size()]), consonants.toArray(new\
    \ String[consonants.size()]));\n        List<String> vowelsAndConsonantsReverse10\
    \ = Arrays.asList(vowels.toArray(new String[vowels.size()]), consonants.toArray(new\
    \ String[consonants.size()]));\n        List<String> vowelsAndConsonantsReverse11\
    \ = Arrays.asList(vowels.toArray(new String[vowels.size()]), consonants.toArray(new\
    \ String[conson\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg_ssxf4n.java:33: error: ']' expected\n        List<String> vowelsAndConsonantsReverse11\
    \ = Arrays.asList(vowels.toArray(new String[vowels.size()]), consonants.toArray(new\
    \ String[conson\n                                                            \
    \                                                                            \
    \         ^\n/tmp/tmpg_ssxf4n.java:34: error: ')' expected\n    }\n     ^\n/tmp/tmpg_ssxf4n.java:35:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpg_ssxf4n.java:35: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpg_ssxf4n.java:35:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpg_ssxf4n.java:35: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpg_ssxf4n.java:51: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5hepb_an.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp5hepb_an.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmp5hepb_an.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp5hepb_an.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp5hepb_an.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp5hepb_an.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp5hepb_an.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdvjxjw3p.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpdvjxjw3p.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa517s4a2.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpa517s4a2.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz2nv0h_d.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> consonantsAndVowels\
    \ = Arrays.asList(consonants, vowels);\n        List<String> vowelsAndConsonantsAndVowels\
    \ = Arrays.asList(vowelsAndConsonants, consonantsAndVowels);\n        List<String>\
    \ vowelsAndConsonantsAndVowelsAndConsonants = Arrays.asList(vowelsAndConsonantsAndVowels,\
    \ consonantsAndVowels);\n        List<String> vowelsAndConsonantsAndVowelsAndConsonantsAndVowels\
    \ = Arrays.asList(vowelsAndConsonantsAndVowelsAndConsonants, vowelsAndConsonantsAndVowels);\n\
    \        List<String> vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonants\
    \ = Arrays.asList(vowelsAndConsonantsAndVowelsAndConsonantsAndVowels, consonantsAndVowels);\n\
    \        List<String> vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\
    \ = Arrays.asList(vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonants,\
    \ vowelsAndConsonantsAndVowels);\n        List<String> vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonants\
    \ = Arrays.asList(vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels,\
    \ consonantsAndVowels);\n        List<String> vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\
    \ = Arrays.asList(vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonants,\
    \ vowelsAndConsonantsAndVowels);\n        List<String> vowelsAnd\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy_d8w7h3.java:31: error: ';' expected\n        List<String> vowelsAnd\n\
    \                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa3846iki.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n    \
    \    vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
    \      vowels.add('u');\n        vowels.add('y');\n        vowels.add('A');\n\
    \        vowels.add('E');\n        vowels.add('I');\n        vowels.add('O');\n\
    \        vowels.add('U');\n        vowels.add('Y');\n        vowels.add('1');\n\
    \        vowels.add('2');\n        vowels.add('3');\n        vowels.add('4');\n\
    \        vowels.add('5');\n        vowels.add('6');\n        vowels.add('7');\n\
    \        vowels.add('8');\n        vowels.add('9');\n        vowels.add('0');\n\
    \        vowels.add('q');\n        vowels.add('Q');\n        vowels.add('w');\n\
    \        vowels.add('W');\n        vowels.add('e');\n        vowels.add('E');\n\
    \        vowels.add('r');\n        vowels.add('R');\n        vowels.add('t');\n\
    \        vowels.add('T');\n        vowels.add('y');\n        vowels.add('Y');\n\
    \        vowels.add('u');\n        vowels.add('U');\n        vowels.add('o');\n\
    \        vowels.add('O');\n        vowels.add('p');\n        vowels.add('P');\n\
    \        vowels.add('h');\n        vowels.add('H');\n        vowels.add('l');\n\
    \        vowels.add('L');\n        vowels.add('s');\n        vowels.add('S');\n\
    \        vowels.add('d');\n        vowels.add('D');\n        vowels.add('f');\n\
    \        vowels.add('F');\n        vowels.add('v');\n        vowels.add('V');\n\
    \        vowels.add('b');\n        vowels.add('B');\n        vowels.add('j');\n\
    \        vowels.add('J');\n        vowels.add('x');\n        vowels.add('X');\n\
    \        vowels.add('z');\n        vowels.add('Z');\n        vowels.add('c');\n\
    \        vowels.add('C');\n        vowels.add('n');\n        vowels.add('N');\n\
    \        vowels.add('m');\n        vowels.add('M');\n        vowels.add('b');\n\
    \        vowels.add('B');\n        vowels.add('k');\n        vowels.add('K');\n\
    \        vowels.add('x');\n        vowels.add('X');\n        vowel\n    }\n  \
    \  public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp76k7v9jj.java:93: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmp76k7v9jj.java:93: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv5_j7l1s.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8w0b3h0r.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa5hh_rzv.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpa5hh_rzv.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'};\n        char[] vowelsConsonants = vowels.concat(consonants);\n\
    \        char[] vowelsConsonantsReverse = vowelsConsonants.clone();\n        Arrays.sort(vowelsConsonantsReverse);\n\
    \        char[] vowelsConsonantsReverse2 = vowelsConsonants.clone();\n       \
    \ Arrays.sort(vowelsConsonantsReverse2);\n        char[] vowelsConsonantsReverse3\
    \ = vowelsConsonants.clone();\n        Arrays.sort(vowelsConsonantsReverse3);\n\
    \        char[] vowelsConsonantsReverse4 = vowelsConsonants.clone();\n       \
    \ Arrays.sort(vowelsConsonantsReverse4);\n        char[] vowelsConsonantsReverse5\
    \ = vowelsConsonants.clone();\n        Arrays.sort(vowelsConsonantsReverse5);\n\
    \        char[] vowelsConsonantsReverse6 = vowelsConsonants.clone();\n       \
    \ Arrays.sort(vowelsConsonantsReverse6);\n        char[] vowelsConsonantsReverse7\
    \ = vowelsConsonants.clone();\n        Arrays.sort(vowelsConsonantsReverse7);\n\
    \        char[] vowelsConsonantsReverse8 = vowelsConsonants.clone();\n       \
    \ Arrays.sort(vowelsConsonantsReverse8);\n        char[] vowelsConsonantsReverse9\
    \ = vowelsConsonants.clone();\n        Arrays.sort(vowelsConsonantsReverse9);\n\
    \        char[] vowelsConsonantsReverse10 = vowelsConsonants.clone();\n      \
    \  Arrays.sort(vowelsConsonantsReverse10);\n        char[] vowelsConsonantsReverse11\
    \ = vowelsConsonants.clone();\n        Arrays.sort(vowelsConsonantsReverse11);\n\
    \        char[] vowelsConsonantsReverse12 = vowelsConsonants.clone();\n      \
    \  Arrays.sort(vowelsConsonantsReverse12);\n        char[] vowelsConsonantsReverse13\
    \ = vowelsConsonants.clone();\n        Arrays.sort(vowelsConsonantsReverse13);\n\
    \        char[] vowelsConsonantsReverse14 = vowelsConsonants.clone();\n      \
    \  Arrays.sort(vowelsConsonantsReverse14);\n        char[] vowelsConsonantsReverse15\
    \ = vowelsConsonants.clone();\n        Arrays.sort(vowelsConsonantsReverse15);\n\
    \        char[] vowelsCon\n    }\n    public static void main(String[] args) {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfduphukw.java:53: error: ';' expected\n        char[] vowelsCon\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppnf8q9sq.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmppnf8q9sq.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmppnf8q9sq.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmppnf8q9sq.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmppnf8q9sq.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmppnf8q9sq.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmppnf8q9sq.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe91zp_do.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonants =\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsEnd = { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] consonantsEnd = { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] vowelsBeginning = { 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ consonantsBeginning = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsBeginningEnd\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] consonantsBeginningEnd = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] vowelsEnd = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] consonantsEnd = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowelsBeginning = { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonantsBeginning\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsBeginningEnd = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] consonantsBeginningEnd = { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] vowelsBeginningEnd = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpls7ze6uo.java:34: error: unclosed character literal\n        char[]\
    \ vowelsBeginningEnd = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w\n                                         \
    \                                                                            \
    \      ^\n/tmp/tmpls7ze6uo.java:34: error: ';' expected\n        char[] vowelsBeginningEnd\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w\n                                                             \
    \                                                                ^\n/tmp/tmpls7ze6uo.java:36:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpls7ze6uo.java:36: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpls7ze6uo.java:36: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpls7ze6uo.java:36: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpls7ze6uo.java:36:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpls7ze6uo.java:52: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm0f8b7gl.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnztxzpu5.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpnztxzpu5.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkifaxhcr.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpkifaxhcr.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n   \
    \     char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] vowelsRight\
    \ = { 'A', 'E', 'I', 'O', 'U' };\n        char[] consonantsRight = { 'B', 'C',\
    \ 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W',\
    \ 'X', 'Y', 'Z' };\n        char[] vowelsBeginning = { 'a', 'e', 'i', 'o', 'u'\
    \ };\n        char[] consonantsBeginning = { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      char[] vowelsEnd = { 'A', 'E', 'I', 'O', 'U' };\n        char[] consonantsEnd\
    \ = { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S',\
    \ 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] vowelsBeginningEnd = { 'a',\
    \ 'e', 'i', 'o', 'u' };\n        char[] consonantsBeginningEnd = { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] vowelsBeginningEnd2 = { 'a', 'e', 'i', 'o', 'u'\
    \ };\n        char[] consonantsBeginningEnd2 = { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] vowelsBeginningEnd3 = { 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ consonantsBeginningEnd3 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsBeginningEnd4\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonantsBeginningEnd4 = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] vowelsBeginningEnd5 = { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        char[] \n    }\n    public static void main(String[] args)\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp647ph_5a.java:37: error: not a statement\n        char[] \n   \
    \         ^\n/tmp/tmp647ph_5a.java:37: error: ';' expected\n        char[] \n\
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy0ssara0.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpy0ssara0.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<String> vowels = new HashSet<>();\n        vowels.add(\"a\");\n     \
    \   vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n\
    \        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd5kyj8pg.java:95: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5n1rhl0z.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmp5n1rhl0z.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ix64oda.java:95: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsBefore =\
    \ Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    );\n        List<String> vowelsAfter = Arrays.asList(\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\");\n        List<String> consonantsBefore = Arrays.asList(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String>\
    \ consonantsAfter = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"z\");\n        List<String> vowelsBeforeAndAfter = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String>\
    \ consonantsBeforeAndAfter = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\",\
    \ \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsBeforeAndAfterAndConsonants\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    );\n        List<String> consonantsBeforeAndAfterAndConsonants = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String>\
    \ vowelsBeforeAndAfterAndConsonantsAndConsonantsBefore = Arrays.asList(\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String>\
    \ consonantsBeforeAndAfterAndConsonantsAndConsonantsBefore = Arrays.asList\n \
    \   }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfin9qevy.java:31: error: ';' expected\n        List<String> consonantsBeforeAndAfterAndConsonantsAndConsonantsBefore\
    \ = Arrays.asList\n                                                          \
    \                                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplsgmceil.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmplsgmceil.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcnffxh5w.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpcnffxh5w.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0riitvof.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_iq3b1dy.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp_iq3b1dy.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmp_iq3b1dy.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp_iq3b1dy.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp_iq3b1dy.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp_iq3b1dy.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp_iq3b1dy.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvo_izmbn.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbpevr4ot.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpbpevr4ot.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmpbpevr4ot.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpbpevr4ot.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpbpevr4ot.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpbpevr4ot.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpbpevr4ot.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6rvv1y77.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp6rvv1y77.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmp6rvv1y77.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp6rvv1y77.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp6rvv1y77.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp6rvv1y77.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp6rvv1y77.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzxidypi4.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc61oax2w.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4z9v8607.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmp4z9v8607.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplu8_4glr.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsBefore =\
    \ Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\");\n        List<String> vowelsAfter = Arrays.asList(\"a\", \"e\", \"i\"\
    , \"o\", \"u\");\n        List<String> consonantsBefore = Arrays.asList(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String>\
    \ consonantsAfter = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\");\n        List<String> vowelsBeforeConsonants = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n       \
    \ List<String> vowelsAfterConsonants = Arrays.asList(\"a\", \"e\", \"i\", \"o\"\
    , \"u\");\n        List<String> consonantsBeforeConsonants = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n       \
    \ List<String> consonantsAfterConsonants = Arrays.asList(\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsBeforeConsonantsAfter\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\");\n        List<String> vowelsAfterConsonantsAfter = Arrays.asList(\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> consonantsBeforeConsonantsAfter\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyg5r6n1i.java:32: error: unclosed string literal\n        List<String>\
    \ consonantsBeforeConsonantsAfter = Arrays.asList(\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"\n                                                         \
    \                                          ^\n/tmp/tmpyg5r6n1i.java:32: error:\
    \ ';' expected\n        List<String> consonantsBeforeConsonantsAfter = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\n                                 \
    \                                                                   ^\n/tmp/tmpyg5r6n1i.java:34:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpyg5r6n1i.java:34: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpyg5r6n1i.java:34: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpyg5r6n1i.java:34: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpyg5r6n1i.java:34:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpyg5r6n1i.java:50: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants3\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants4\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants5\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants6\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants7\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\n \
    \   }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppq8hvcr1.java:29: error: unclosed string literal\n        List<String>\
    \ vowelsAndConsonants8 = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"\n                                                         \
    \                                                                            \
    \                    ^\n/tmp/tmppq8hvcr1.java:29: error: ';' expected\n      \
    \  List<String> vowelsAndConsonants8 = Arrays.asList(\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"\n                                           \
    \                                                                            \
    \                                   ^\n/tmp/tmppq8hvcr1.java:31: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmppq8hvcr1.java:31:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmppq8hvcr1.java:31: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmppq8hvcr1.java:31:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmppq8hvcr1.java:31: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmppq8hvcr1.java:47: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphrbs2n0_.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<String> vowels = new HashSet<>();\n        vowels.add(\"a\");\n     \
    \   vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n\
    \        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4050uzh3.java:93: error: not a statement\n        vowels.add\n\
    \              ^\n/tmp/tmp4050uzh3.java:93: error: ';' expected\n        vowels.add\n\
    \                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n    \
    \    vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
    \      vowels.add('u');\n        vowels.add('y');\n        vowels.add('\xE6');\n\
    \        vowels.add('\xF8');\n        vowels.add('\xE5');\n        vowels.add('\xC6\
    ');\n        vowels.add('\xD8');\n        vowels.add('\xC5');\n        vowels.add('\xC7\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xE5');\n        vowels.add('\xC6\
    ');\n        vowels.add('\xD8');\n        vowels.add('\xC5');\n        vowels.add('\xC7\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xE5');\n        vowels.add('\xC6\
    ');\n        vowels.add('\xD8');\n        vowels.add('\xC5');\n        vowels.add('\xC7\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xE5');\n        vowels.add('\xC6\
    ');\n        vowels.add('\xD8');\n        vowels.add('\xC5');\n        vowels.add('\xC7\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xE5');\n        vowels.add('\xC6\
    ');\n        vowels.add('\xD8');\n        vowels.add('\xC5');\n        vowels.add('\xC7\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xE5');\n        vowels.add('\xC6\
    ');\n        vowels.add('\xD8');\n        vowels.add('\xC5');\n        vowels.add('\xC7\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xE5');\n        vowels.add('\xC6\
    ');\n        vowels.add\n    }\n    public static void main(String[] args) {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppj9na1at.java:85: error: not a statement\n        vowels.add\n\
    \              ^\n/tmp/tmppj9na1at.java:85: error: ';' expected\n        vowels.add\n\
    \                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6absv5tg.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9j8o1mt2.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp9j8o1mt2.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmp9j8o1mt2.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp9j8o1mt2.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp9j8o1mt2.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp9j8o1mt2.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp9j8o1mt2.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<String>();\n        vowels.add(\"a\"\
    );\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4pdop6q1.java:96: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc5q5cd3b.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppvj7tmml.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmppvj7tmml.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmppvj7tmml.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmppvj7tmml.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmppvj7tmml.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmppvj7tmml.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmppvj7tmml.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkd44hhgw.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpkd44hhgw.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n    \
    \    vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
    \      vowels.add('u');\n        vowels.add('y');\n        vowels.add('A');\n\
    \        vowels.add('E');\n        vowels.add('I');\n        vowels.add('O');\n\
    \        vowels.add('U');\n        vowels.add('Y');\n        vowels.add('1');\n\
    \        vowels.add('2');\n        vowels.add('3');\n        vowels.add('4');\n\
    \        vowels.add('5');\n        vowels.add('6');\n        vowels.add('7');\n\
    \        vowels.add('8');\n        vowels.add('9');\n        vowels.add('0');\n\
    \        vowels.add('q');\n        vowels.add('w');\n        vowels.add('z');\n\
    \        vowels.add('Q');\n        vowels.add('W');\n        vowels.add('Z');\n\
    \        vowels.add('s');\n        vowels.add('x');\n        vowels.add('c');\n\
    \        vowels.add('f');\n        vowels.add('v');\n        vowels.add('g');\n\
    \        vowels.add('p');\n        vowels.add('b');\n        vowels.add('j');\n\
    \        vowels.add('l');\n        vowels.add('m');\n        vowels.add('n');\n\
    \        vowels.add('r');\n        vowels.add('t');\n        vowels.add('q');\n\
    \        vowels.add('p');\n        vowels.add('l');\n        vowels.add('s');\n\
    \        vowels.add('x');\n        vowels.add('c');\n        vowels.add('f');\n\
    \        vowels.add('v');\n        vowels.add('g');\n        vowels.add('p');\n\
    \        vowels.add('b');\n        vowels.add('j');\n        vowels.add('l');\n\
    \        vowels.add('m');\n        vowels.add('n');\n        vowels.add('r');\n\
    \        vowels.add('t');\n        vowels.add('q');\n        vowels.add('p');\n\
    \        vowels.add('l');\n        vowels.add('s');\n        vowels.add('x');\n\
    \        vowels.add('c');\n        vowels.add('f');\n        vowels.add('v');\n\
    \        vowels.add('g');\n        vowels.add('p');\n        vowels.add('b');\n\
    \        vowels.add('j');\n        vowels.add('l');\n        vowels.add('m\n \
    \   }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp43n6_so0.java:93: error: unclosed character literal\n        vowels.add('m\n\
    \                   ^\n/tmp/tmp43n6_so0.java:93: error: ';' expected\n       \
    \ vowels.add('m\n                     ^\n/tmp/tmp43n6_so0.java:95: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp43n6_so0.java:95:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp43n6_so0.java:95: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp43n6_so0.java:95:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp43n6_so0.java:95: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp43n6_so0.java:111: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8ofgsuym.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp8ofgsuym.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmp8ofgsuym.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp8ofgsuym.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp8ofgsuym.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp8ofgsuym.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp8ofgsuym.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgdhs36k_.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<Character> vowels = new HashSet<Character>();\n        vowels.add('a');\n\
    \        vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n\
    \        vowels.add('u');\n        vowels.add('y');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyfmlfu4k.java:84: error: not a statement\n        vowels.add\n\
    \              ^\n/tmp/tmpyfmlfu4k.java:84: error: ';' expected\n        vowels.add\n\
    \                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwfq3wq_g.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'};\n        char[] vowelsEnd = {'A', 'E', 'I', 'O', 'U'};\n\
    \        char[] consonantsEnd = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L',\
    \ 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'};\n        char[]\
    \ vowelsStart = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonantsStart = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'};\n        char[] vowelsMiddle = {'A', 'E', 'I', 'O', 'U'};\n\
    \        char[] consonantsMiddle = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L',\
    \ 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'};\n        char[]\
    \ vowelsStart = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonantsStart = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'};\n        char[] vowelsEnd = {'A', 'E', 'I', 'O', 'U'};\n\
    \        char[] consonantsEnd = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L',\
    \ 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'};\n        char[]\
    \ vowelsMiddle = {'A', 'E', 'I', 'O', 'U'};\n        char[] consonantsMiddle =\
    \ {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S',\
    \ 'T', 'V', 'W', 'X', 'Y', 'Z'};\n        char[] vowelsStart = {'a', 'e', 'i',\
    \ 'o', 'u'};\n        char[] consonantsStart = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n\
    \        char[] vowelsEnd = {'A', 'E', 'I', 'O', 'U'};\n        char[] consonantsEnd\
    \ = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S',\
    \ 'T', '\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjcxjwdgz.java:37: error: illegal line end in character literal\n\
    \        char[] consonantsEnd = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L',\
    \ 'M', 'N', 'P', 'Q', 'R', 'S', 'T', '\n                                     \
    \                                                                           ^\n\
    /tmp/tmpjcxjwdgz.java:38: error: ';' expected\n    }\n^\n/tmp/tmpjcxjwdgz.java:39:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpjcxjwdgz.java:39: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpjcxjwdgz.java:39: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpjcxjwdgz.java:39: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpjcxjwdgz.java:39:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpjcxjwdgz.java:55: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n   \
    \     char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] vowelsBeforeConsonants\
    \ = new char[vowels.length];\n        char[] vowelsAfterConsonants = new char[vowels.length];\n\
    \        char[] consonantsBeforeVowels = new char[consonants.length];\n      \
    \  char[] consonantsAfterVowels = new char[consonants.length];\n        Arrays.fill(vowelsBeforeConsonants,\
    \ '\\0');\n        Arrays.fill(vowelsAfterConsonants, '\\0');\n        Arrays.fill(consonantsBeforeVowels,\
    \ '\\0');\n        Arrays.fill(consonantsAfterVowels, '\\0');\n        \n    \
    \    for(int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n\
    \            vowelsBeforeConsonants[c - 'a'] = vowelsBeforeConsonants[c - 'a']\
    \ + (c == 'a' ? 1 : 0);\n            vowelsAfterConsonants[c - 'a'] = vowelsAfterConsonants[c\
    \ - 'a'] + (c == 'a' ? 1 : 0);\n            consonantsBeforeVowels[c - 'a'] =\
    \ consonantsBeforeVowels[c - 'a'] + (c == 'a' ? 1 : 0);\n            consonantsAfterVowels[c\
    \ - 'a'] = consonantsAfterVowels[c - 'a'] + (c == 'a' ? 1 : 0);\n        }\n \
    \       \n        for(int i = 0; i < vowelsBeforeConsonants.length; i++) {\n \
    \           int minDistance = Integer.MAX_VALUE;\n            int minDistanceIndex\
    \ = 0;\n            for(int j = 0; j < consonants.length; j++) {\n           \
    \     int distance = Math.abs(vowelsBeforeConsonants[i] - consonants[j]);\n  \
    \              if(distance < minDistance) {\n                    minDistance =\
    \ distance;\n                    minDistanceIndex = j;\n                }\n  \
    \          }\n            vowelsBeforeConsonants[i] = consonants[minDistanceIndex];\n\
    \        }\n        \n        for(int i = 0; i < vowelsAfterConsonants.length;\
    \ i++) {\n            int minDistance = Integer.MAX_VALUE;\n            int minDistanceIndex\
    \ = 0;\n            for(int j = 0; j < consonants.length; j++) {\n           \
    \     int distance = Math.abs(vowelsAfterConsonants[i] - consonants[j]);\n   \
    \             if(distance < minDistance) {\n                    minDistance =\
    \ distance;\n                    minDistanceIndex = j;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjyj6mxjt.java:61: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpjyj6mxjt.java:61: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpjyj6mxjt.java:61: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpjyj6mxjt.java:61: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpjyj6mxjt.java:61: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpjyj6mxjt.java:77:\
    \ error: reached end of file while parsing\n}\n ^\n/tmp/tmpjyj6mxjt.java:78: error:\
    \ reached end of file while parsing\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3dbduiod.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppsx5awjo.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmxs070lt.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpmxs070lt.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmpmxs070lt.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpmxs070lt.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpmxs070lt.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpmxs070lt.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpmxs070lt.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph3is1hjv.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7jtmnj30.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmp7jtmnj30.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> consonantsAndVowels\
    \ = Arrays.asList(consonants, vowels);\n        List<String> vowelsAndConsonantsAndVowels\
    \ = Arrays.asList(vowelsAndConsonants, vowelsAndConsonants);\n        List<String>\
    \ vowelsAndConsonantsAndVowelsAndConsonants = Arrays.asList(vowelsAndConsonantsAndVowels,\
    \ consonantsAndVowels);\n        List<String> vowelsAndConsonantsAndVowelsAndConsonantsAndVowels\
    \ = Arrays.asList(vowelsAndConsonantsAndVowelsAndConsonants, vowelsAndConsonantsAndVowels);\n\
    \        List<String> vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonants\
    \ = Arrays.asList(vowelsAndConsonantsAndVowelsAndConsonantsAndVowels, consonantsAndVowels);\n\
    \        List<String> vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\
    \ = Arrays.asList(vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonants,\
    \ vowelsAndConsonantsAndVowelsAndConsonantsAndVowels);\n        List<String> vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonants\
    \ = Arrays.asList(vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonants,\
    \ consonantsAndVowels);\n        List<String> vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\
    \ = Arrays.asList(vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels,\
    \ vowelsAnd\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe24zlrf0.java:30: error: ')' expected\n        List<String> vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\
    \ = Arrays.asList(vowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels,\
    \ vowelsAnd\n                                                                \
    \                                                                            \
    \                                                                            \
    \                     ^\n/tmp/tmpe24zlrf0.java:32: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpe24zlrf0.java:32:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpe24zlrf0.java:32: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpe24zlrf0.java:32:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpe24zlrf0.java:32: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpe24zlrf0.java:48: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbt24qt9t.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmparwof4xs.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmparwof4xs.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmparwof4xs.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmparwof4xs.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmparwof4xs.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmparwof4xs.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmparwof4xs.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa5x3khrt.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<String>();\n        vowels.add(\"a\"\
    );\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp89sgv6c6.java:94: error: unclosed string literal\n        vowels.add(\"\
    o\n                   ^\n/tmp/tmp89sgv6c6.java:94: error: ';' expected\n     \
    \   vowels.add(\"o\n                     ^\n/tmp/tmp89sgv6c6.java:96: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp89sgv6c6.java:96:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp89sgv6c6.java:96: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp89sgv6c6.java:96:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp89sgv6c6.java:96: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp89sgv6c6.java:112: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph3gl5d5z.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<String> vowels = new HashSet<>();\n        vowels.add(\"a\");\n     \
    \   vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n\
    \        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzkxjnxgn.java:93: error: not a statement\n        vowels.add\n\
    \              ^\n/tmp/tmpzkxjnxgn.java:93: error: ';' expected\n        vowels.add\n\
    \                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp51s_x1x8.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmp51s_x1x8.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfym8kbb9.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, consonants);\n        List<String> vowelsAndConsonants3\
    \ = Arrays.asList(vowels, consonants, consonants, consonants);\n        List<String>\
    \ vowelsAndConsonants4 = Arrays.asList(vowels, consonants, consonants, consonants,\
    \ consonants);\n        List<String> vowelsAndConsonants5 = Arrays.asList(vowels,\
    \ consonants, consonants, consonants, consonants, consonants);\n        List<String>\
    \ vowelsAndConsonants6 = Arrays.asList(vowels, consonants, consonants, consonants,\
    \ consonants, consonants, consonants);\n        List<String> vowelsAndConsonants7\
    \ = Arrays.asList(vowels, consonants, consonants, consonants, consonants, consonants,\
    \ consonants, consonants, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, consonants, consonants, consonants, consonants,\
    \ consonants, consonants, consonants, consonants);\n        List<String> vowelsAndConsonants9\
    \ = Arrays.asList(vowels, consonants, consonants, consonants, consonants, consonants,\
    \ consonants, consonants, consonants, consonants, consonants);\n        List<String>\
    \ vowelsAndConsonants10 = Arrays.asList(vowels, consonants, consonants, consonants,\
    \ consonants, consonants, consonants, consonants, consonants, consonants, consonants,\
    \ consonants, consonants);\n        List<String> vowelsAndConsonants11 = Arrays.asList(vowels,\
    \ consonants, consonants, consonants, consonants, consonants, consonants, consonants,\
    \ con\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjmp8upoa.java:32: error: ')' expected\n        List<String> vowelsAndConsonants11\
    \ = Arrays.asList(vowels, consonants, consonants, consonants, consonants, consonants,\
    \ consonants, consonants, con\n                                              \
    \                                                                            \
    \                                ^\n/tmp/tmpjmp8upoa.java:34: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpjmp8upoa.java:34:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpjmp8upoa.java:34: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpjmp8upoa.java:34:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpjmp8upoa.java:34: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpjmp8upoa.java:50: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n    \
    \    vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
    \      vowels.add('u');\n        vowels.add('y');\n        vowels.add('\xE6');\n\
    \        vowels.add('\xF8');\n        vowels.add('\xE5');\n        vowels.add('\xC6\
    ');\n        vowels.add('\xD8');\n        vowels.add('\xC5');\n        vowels.add('\xC4\
    ');\n        vowels.add('\xDC');\n        vowels.add('\xD6');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xC4');\n        vowels.add('\xDC');\n        vowels.add('\xD6\
    ');\n        vowels.add('\xC5');\n        vowels.add('\xC4');\n        vowels.add('\xDC\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xC5');\n        vowels.add('\xC4\
    ');\n        vowels.add('\xDC');\n        vowels.add('\xD6');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xC4');\n        vowels.add('\xDC');\n        vowels.add('\xD6\
    ');\n        vowels.add('\xC5');\n        vowels.add('\xC4');\n        vowels.add('\xDC\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xC5');\n        vowels.add('\xC4\
    ');\n        vowels.add('\xDC');\n        vowels.add('\xD6');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xC4');\n        vowels.add('\xDC');\n        vowels.add('\xD6\
    ');\n        vowels.add('\xC5');\n        vowels.add('\xC4');\n        vowels.add('\xDC\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xC5');\n        vowels.add('\xC4\
    ');\n        vowels.add('\xDC');\n        vowels.add('\xD6');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xC4');\n        vowels.add('\xDC');\n        vowels.add('\xD6\
    ');\n        vowels.add('\xC5');\n        vowels.add('\xC4');\n        vowels.add('\xDC\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xC5');\n        vowels.add('\xC4\
    ');\n        vowels.add('\xDC');\n        vowels.add('\xD6');\n        vowels.add('\uFFFD\
    \n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphmq1nxdj.java:84: error: unclosed character literal\n        vowels.add('?\n\
    \                   ^\n/tmp/tmphmq1nxdj.java:84: error: ';' expected\n       \
    \ vowels.add('?\n                     ^\n/tmp/tmphmq1nxdj.java:86: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmphmq1nxdj.java:86:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmphmq1nxdj.java:86: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmphmq1nxdj.java:86:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmphmq1nxdj.java:86: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmphmq1nxdj.java:102: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfun3vboc.java:95: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n    \
    \    vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
    \      vowels.add('u');\n        vowels.add('y');\n        vowels.add('\xE6');\n\
    \        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2iadsy_9.java:84: error: illegal line end in character literal\n\
    \        vowels.add('\n                   ^\n/tmp/tmp2iadsy_9.java:85: error:\
    \ ';' expected\n    }\n^\n/tmp/tmp2iadsy_9.java:86: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp2iadsy_9.java:86:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp2iadsy_9.java:86: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp2iadsy_9.java:86:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp2iadsy_9.java:86: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp2iadsy_9.java:102: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonants =\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsEnd = { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        char[] consonantsEnd = { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] vowelsStart = { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonantsStart\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsBothEnd = { 'a', 'e',\
    \ 'i', 'o', 'u' };\n        char[] consonantsBothEnd = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowelsBothStart = { 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ consonantsBothStart = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsStart\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonantsStart = { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        char[] vowelsEnd = { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] consonantsEnd = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ vowelsBothEnd = { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonantsBothEnd\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsBothStart = { 'a', 'e',\
    \ 'i', 'o', 'u' };\n        char[] consonantsBothStart = { 'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z' };\n        char[] vowelsStart = { 'a', 'e', 'i\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1d73l315.java:38: error: unclosed character literal\n        char[]\
    \ vowelsStart = { 'a', 'e', 'i\n                                         ^\n/tmp/tmp1d73l315.java:38:\
    \ error: ';' expected\n        char[] vowelsStart = { 'a', 'e', 'i\n         \
    \                                  ^\n/tmp/tmp1d73l315.java:40: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp1d73l315.java:40:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp1d73l315.java:40: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp1d73l315.java:40:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp1d73l315.java:40: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp1d73l315.java:56: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpawsdnxq3.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpawsdnxq3.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvp1acq5k.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpvp1acq5k.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmpvp1acq5k.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpvp1acq5k.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpvp1acq5k.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpvp1acq5k.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpvp1acq5k.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, consonants, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, consonants, consonants,\
    \ consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, consonants, consonants, consonants, consonants);\n        List<String>\
    \ vowelsAndConsonants5 = Arrays.asList(vowels, consonants, consonants, consonants,\
    \ consonants, consonants, consonants);\n        List<String> vowelsAndConsonants6\
    \ = Arrays.asList(vowels, consonants, consonants, consonants, consonants, consonants,\
    \ consonants, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, consonants, consonants, consonants, consonants, consonants, consonants,\
    \ consonants);\n        List<String> vowelsAndConsonants8 = Arrays.asList(vowels,\
    \ consonants, consonants, consonants, consonants, consonants, consonants, consonants,\
    \ consonants, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, consonants, consonants, consonants, consonants, consonants, consonants,\
    \ consonants, consonants, consonants);\n        List<String> vowelsAndConsonants10\
    \ = Arrays.asList(vowels, consonants, consonants, consonants, consonants, consonants,\
    \ consonants, consonants, consonants, consonants, consonants, consonants);\n \
    \       List<String> vowelsAndConsonants11 = Arrays.asList(vowels, consonants,\
    \ consonants, consonants, conson\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkm_2qy5y.java:32: error: ')' expected\n        List<String> vowelsAndConsonants11\
    \ = Arrays.asList(vowels, consonants, consonants, consonants, conson\n       \
    \                                                                            \
    \                          ^\n/tmp/tmpkm_2qy5y.java:34: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpkm_2qy5y.java:34:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpkm_2qy5y.java:34: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpkm_2qy5y.java:34:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpkm_2qy5y.java:34: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpkm_2qy5y.java:50: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n   \
    \     char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] vowelsBeforeConsonants\
    \ = new char[vowels.length];\n        Arrays.fill(vowelsBeforeConsonants, '\\\
    0');\n        char[] vowelsAfterConsonants = new char[vowels.length];\n      \
    \  Arrays.fill(vowelsAfterConsonants, '\\0');\n        char[] consonantsBeforeVowels\
    \ = new char[consonants.length];\n        Arrays.fill(consonantsBeforeVowels,\
    \ '\\0');\n        char[] consonantsAfterVowels = new char[consonants.length];\n\
    \        Arrays.fill(consonantsAfterVowels, '\\0');\n        int i = 0;\n    \
    \    int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n\
    \        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n\
    \        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n\
    \        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n\
    \        int z = 0;\n        boolean flag = false;\n        boolean flag2 = false;\n\
    \        boolean flag3 = false;\n        boolean flag4 = false;\n        boolean\
    \ flag5 = false;\n        boolean flag6 = false;\n        boolean flag7 = false;\n\
    \        boolean flag8 = false;\n        boolean flag9 = false;\n        boolean\
    \ flag10 = false;\n        boolean flag11 = false;\n        boolean flag12 = false;\n\
    \        boolean flag13 = false;\n        boolean flag14 = false;\n        boolean\
    \ flag15 = false;\n        boolean flag16 = false;\n        boolean flag17 = false;\n\
    \        boolean flag18 = false;\n        boolean flag19 = false;\n        boolean\
    \ flag20 = false;\n        boolean flag21 = false;\n        boolean flag22 = false;\n\
    \        boolean flag23 = false;\n        boolean flag24 = false;\n        boolean\
    \ flag25 = false;\n        boolean flag26 = false;\n        boolean flag27 = false;\n\
    \        boolean flag28 = false;\n        boolean flag29 = false;\n        boolean\
    \ flag30 = false;\n        boolean flag31 = false;\n        boolean flag32 = false;\n\
    \        boolean flag33 = false;\n        boolean flag34 = false;\n        boolean\
    \ flag35 = false;\n        boolean flag36 = false;\n        boolean flag37 = false;\n\
    \        boolean flag38 = false;\n        boolean flag39 = false;\n        boolean\
    \ flag40 = false;\n        boolean flag41 = false;\n        boolean flag42 = false;\n\
    \        \n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3u_81lua.java:91: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpynu5rzsg.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpynu5rzsg.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmpynu5rzsg.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpynu5rzsg.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpynu5rzsg.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpynu5rzsg.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpynu5rzsg.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'};\n        char[] vowelsEnd = {'A', 'E', 'I', 'O', 'U'};\n\
    \        char[] consonantsEnd = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L',\
    \ 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'};\n        char[]\
    \ vowelsStart = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonantsStart = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'};\n        char[] vowelsEnd2 = {'A', 'E', 'I', 'O', 'U'};\n\
    \        char[] consonantsEnd2 = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L',\
    \ 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'};\n        char[]\
    \ vowelsStart2 = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonantsStart2 =\
    \ {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] vowelsEnd3 = {'A', 'E', 'I',\
    \ 'O', 'U'};\n        char[] consonantsEnd3 = {'B', 'C', 'D', 'F', 'G', 'H', 'J',\
    \ 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'};\n   \
    \     char[] vowelsStart3 = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonantsStart3\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] vowelsEnd4 = {'A', 'E', 'I',\
    \ 'O', 'U'};\n        char[] consonantsEnd4 = {'B', 'C', 'D', 'F', 'G', 'H', 'J',\
    \ 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'};\n   \
    \     char[] vowelsStart4 = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonantsStart4\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', '\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxe7p3mlp.java:37: error: illegal line end in character literal\n\
    \        char[] consonantsStart4 = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', '\n                                                              \
    \                            ^\n/tmp/tmpxe7p3mlp.java:38: error: ';' expected\n\
    \    }\n^\n/tmp/tmpxe7p3mlp.java:39: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpxe7p3mlp.java:39: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpxe7p3mlp.java:39:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpxe7p3mlp.java:39: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpxe7p3mlp.java:39:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpxe7p3mlp.java:55: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphj391s4j.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmphj391s4j.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<String>();\n        vowels.add(\"a\"\
    );\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplmxf6eug.java:93: error: unclosed string literal\n        vowels.add(\"\
    a\n                   ^\n/tmp/tmplmxf6eug.java:93: error: ';' expected\n     \
    \   vowels.add(\"a\n                     ^\n/tmp/tmplmxf6eug.java:95: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmplmxf6eug.java:95:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmplmxf6eug.java:95: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmplmxf6eug.java:95:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmplmxf6eug.java:95: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmplmxf6eug.java:111: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1a83917q.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7bq4s1jh.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<String>();\n        vowels.add(\"a\"\
    );\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn_f2n0wp.java:93: error: unclosed string literal\n        vowels.add(\"\
    a\n                   ^\n/tmp/tmpn_f2n0wp.java:93: error: ';' expected\n     \
    \   vowels.add(\"a\n                     ^\n/tmp/tmpn_f2n0wp.java:95: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpn_f2n0wp.java:95:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpn_f2n0wp.java:95: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpn_f2n0wp.java:95:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpn_f2n0wp.java:95: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpn_f2n0wp.java:111: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ap3tn83.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplb1_8l0k.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv2vhsqou.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp23thlwyk.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi6vuxm_4.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq98thnyg.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants3\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants4\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants5\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants6\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants7\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdl6h16ji.java:29: error: unclosed string literal\n        List<String>\
    \ vowelsAndConsonants8 = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\
    , \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"p\", \"q\", \"r\n                                                        \
    \                                                                            \
    \                     ^\n/tmp/tmpdl6h16ji.java:29: error: ';' expected\n     \
    \   List<String> vowelsAndConsonants8 = Arrays.asList(\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"y\", \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\n                                       \
    \                                                                            \
    \                                        ^\n/tmp/tmpdl6h16ji.java:31: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpdl6h16ji.java:31:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpdl6h16ji.java:31: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpdl6h16ji.java:31:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpdl6h16ji.java:31: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpdl6h16ji.java:47: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp02o80ygy.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkz9qarwm.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<String> vowels = new HashSet<>();\n        vowels.add(\"a\");\n     \
    \   vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n\
    \        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5h0ryx56.java:93: error: not a statement\n        vowels.add\n\
    \              ^\n/tmp/tmp5h0ryx56.java:93: error: ';' expected\n        vowels.add\n\
    \                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n    \
    \    vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
    \      vowels.add('u');\n        vowels.add('y');\n        vowels.add('A');\n\
    \        vowels.add('E');\n        vowels.add('I');\n        vowels.add('O');\n\
    \        vowels.add('U');\n        vowels.add('Y');\n        vowels.add('1');\n\
    \        vowels.add('2');\n        vowels.add('3');\n        vowels.add('4');\n\
    \        vowels.add('5');\n        vowels.add('6');\n        vowels.add('7');\n\
    \        vowels.add('8');\n        vowels.add('9');\n        vowels.add('0');\n\
    \        vowels.add('!');\n        vowels.add('?');\n        vowels.add('(');\n\
    \        vowels.add(')');\n        vowels.add(',');\n        vowels.add('.');\n\
    \        vowels.add(':');\n        vowels.add(';');\n        vowels.add('~');\n\
    \        vowels.add('!');\n        vowels.add('?');\n        vowels.add('(');\n\
    \        vowels.add(')');\n        vowels.add(',');\n        vowels.add('.');\n\
    \        vowels.add(':');\n        vowels.add(';');\n        vowels.add('~');\n\
    \        vowels.add('!');\n        vowels.add('?');\n        vowels.add('(');\n\
    \        vowels.add(')');\n        vowels.add(',');\n        vowels.add('.');\n\
    \        vowels.add(':');\n        vowels.add(';');\n        vowels.add('~');\n\
    \        vowels.add('!');\n        vowels.add('?');\n        vowels.add('(');\n\
    \        vowels.add(')');\n        vowels.add(',');\n        vowels.add('.');\n\
    \        vowels.add(':');\n        vowels.add(';');\n        vowels.add('~');\n\
    \        vowels.add('!');\n        vowels.add('?');\n        vowels.add('(');\n\
    \        vowels.add(')');\n        vowels.add(',');\n        vowels.add('.');\n\
    \        vowels.add(':');\n        vowels.add(';');\n        vowels.add('~');\n\
    \        vowels.add('!');\n        vowels.add('?');\n        vowels.add('(');\n\
    \        vowels.add(')');\n        vowels.add(',');\n        vowels.add('.');\n\
    \        vowel\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphefus2xf.java:94: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmphefus2xf.java:94: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9noee4_f.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp9noee4_f.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmp9noee4_f.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp9noee4_f.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp9noee4_f.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp9noee4_f.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp9noee4_f.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf2jn0n_7.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonants =\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsEnd = { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] consonantsEnd = { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] vowelsBegin = { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonantsBegin\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsBeginEnd = { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        char[] consonantsBeginEnd = { 'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z' };\n        char[] vowelsBeginBegin = { 'a', 'e', 'i', 'o', 'u' };\n   \
    \     char[] consonantsBeginBegin = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowelsBeginBeginEnd = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ consonantsBeginBeginEnd = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsBeginBeginBegin\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonantsBeginBeginBegin = {\
    \ 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't',\
    \ 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsBeginBeginBeginEnd = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] consonantsBeginBeginBeginEnd = \n    }\n\
    \    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsytrq4ih.java:36: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpsytrq4ih.java:37: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpsytrq4ih.java:37: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpsytrq4ih.java:37:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpsytrq4ih.java:37: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpsytrq4ih.java:37:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpsytrq4ih.java:53: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprasrf72b.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<String> vowels = new HashSet<>();\n        vowels.add(\"a\");\n     \
    \   vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n\
    \        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9sclirsw.java:93: error: not a statement\n        vowels.add\n\
    \              ^\n/tmp/tmp9sclirsw.java:93: error: ';' expected\n        vowels.add\n\
    \                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n    \
    \    vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
    \      vowels.add('u');\n        vowels.add('y');\n        vowels.add('\xE6');\n\
    \        vowels.add('\xF8');\n        vowels.add('\xE5');\n        vowels.add('\xC6\
    ');\n        vowels.add('\xD8');\n        vowels.add('\xC5');\n        vowels.add('\xC7\
    ');\n        vowels.add('\xC4');\n        vowels.add('\xD6');\n        vowels.add('\xDC\
    ');\n        vowels.add('\xDF');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\uFFFD\
    \n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqpbz7mbm.java:84: error: unclosed character literal\n        vowels.add('?\n\
    \                   ^\n/tmp/tmpqpbz7mbm.java:84: error: ';' expected\n       \
    \ vowels.add('?\n                     ^\n/tmp/tmpqpbz7mbm.java:86: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpqpbz7mbm.java:86:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpqpbz7mbm.java:86: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpqpbz7mbm.java:86:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpqpbz7mbm.java:86: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpqpbz7mbm.java:102: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants3\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants4\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants5\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants6\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants7\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\n \
    \   }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn2x80o42.java:29: error: unclosed string literal\n        List<String>\
    \ vowelsAndConsonants8 = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"\n                                                         \
    \                                                                            \
    \                    ^\n/tmp/tmpn2x80o42.java:29: error: ';' expected\n      \
    \  List<String> vowelsAndConsonants8 = Arrays.asList(\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"\n                                           \
    \                                                                            \
    \                                   ^\n/tmp/tmpn2x80o42.java:31: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpn2x80o42.java:31:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpn2x80o42.java:31: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpn2x80o42.java:31:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpn2x80o42.java:31: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpn2x80o42.java:47: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n    \
    \    vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
    \      vowels.add('u');\n        vowels.add('y');\n        vowels.add('\xE6');\n\
    \        vowels.add('\xF8');\n        vowels.add('\xE5');\n        vowels.add('\xC6\
    ');\n        vowels.add('\xD8');\n        vowels.add('\xC5');\n        vowels.add('\xDC\
    ');\n        vowels.add('\xC4');\n        vowels.add('\xD6');\n        vowels.add('\xDC\
    ');\n        vowels.add('\xDF');\n        vowels.add('\xC5');\n        vowels.add('\xC4\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xDC');\n        vowels.add('\xDF\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xE5\
    ');\n        vowels.add('\xC6');\n        vowels.add('\xD8');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xDC');\n        vowels.add('\xC4');\n        vowels.add('\xD6\
    ');\n        vowels.add('\xDC');\n        vowels.add('\xDF');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xC4');\n        vowels.add('\xD6');\n        vowels.add('\xDC\
    ');\n        vowels.add('\xDF');\n        vowels.add('\xC5');\n        vowels.add('\xC4\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xDC');\n        vowels.add('\xDF\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xE5\
    ');\n        vowels.add('\xC6');\n        vowels.add('\xD8');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xDC');\n        vowels.add('\xC4');\n        vowels.add('\xD6\
    ');\n        vowels.add('\xDC');\n        vowels.add('\xDF');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xC4');\n        vowels.add('\xD6');\n        vowels.add('\xDC\
    ');\n        vowels.add('\xDF');\n        vowels.add('\xC5');\n        vowels.add('\xC4\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xDC');\n        vowels.add('\xDF\
    ');\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwvgxwx9t.java:85: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n    \
    \    vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
    \      vowels.add('u');\n        vowels.add('y');\n        vowels.add('\xE6');\n\
    \        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzxow7li_.java:84: error: illegal line end in character literal\n\
    \        vowels.add('\n                   ^\n/tmp/tmpzxow7li_.java:85: error:\
    \ ';' expected\n    }\n^\n/tmp/tmpzxow7li_.java:86: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpzxow7li_.java:86:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpzxow7li_.java:86: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpzxow7li_.java:86:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpzxow7li_.java:86: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpzxow7li_.java:102: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2rztblr5.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<String> vowels = new HashSet<String>();\n        vowels.add(\"a\");\n\
    \        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowel\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxy7cbr_j.java:93: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpxy7cbr_j.java:93: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9jx_kfui.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp9jx_kfui.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmp9jx_kfui.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp9jx_kfui.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp9jx_kfui.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp9jx_kfui.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp9jx_kfui.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwh6ce1n6.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbfh9igzr.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppstv7xd1.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmppstv7xd1.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmppstv7xd1.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmppstv7xd1.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmppstv7xd1.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmppstv7xd1.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmppstv7xd1.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonantsReversed\
    \ = Arrays.asList(vowels.stream().reverse(), consonants.stream().reverse());\n\
    \        List<String> vowelsAndConsonantsReversedAndConsonants = Arrays.asList(vowelsAndConsonants,\
    \ consonants);\n        List<String> vowelsAndConsonantsReversedAndConsonantsReversed\
    \ = Arrays.asList(vowelsAndConsonants, vowelsAndConsonantsReversed);\n       \
    \ List<String> vowelsAndConsonantsReversedAndConsonantsReversedAndConsonants =\
    \ Arrays.asList(vowelsAndConsonantsReversed, consonants, vowelsAndConsonants);\n\
    \        List<String> vowelsAndConsonantsReversedAndConsonantsReversedAndConsonantsReversed\
    \ = Arrays.asList(vowelsAndConsonantsReversed, consonants, vowelsAndConsonantsReversed);\n\
    \        List<String> vowelsAndConsonantsReversedAndConsonantsReversedAndConsonantsReversedAndConsonants\
    \ = Arrays.asList(vowelsAndConsonantsReversed, consonants, vowelsAndConsonantsReversed,\
    \ consonants);\n        List<String> vowelsAndConsonantsReversedAndConsonantsReversedAndConsonantsReversedAndConsonantsReversed\
    \ = Arrays.asList(vowelsAndConsonantsReversed, consonants, vowelsAndConsonantsReversed,\
    \ consonants, vowelsAndConsonants);\n        List<String> vowelsAndConsonantsReversedAndConsonantsReversedAndConsonantsReversedAndConsonantsReversedAndConsonants\
    \ = Arrays.asList(vowelsAndConsonantsReversed, consonants, vowelsAndConsonantsReversed,\
    \ consonants, vowelsAndConsonants, consonants);\n        List<String> vowelsAndConsonantsReversedAndConsonantsReversedAndConsonantsReversedAndConsonantsReversedAndConsonantsReversed\
    \ = Arrays.asList(vowelsAndConsonantsReversed, consonants, vowelsAndConsonantsReversed,\
    \ conson\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6m4siee4.java:31: error: ')' expected\n        List<String> vowelsAndConsonantsReversedAndConsonantsReversedAndConsonantsReversedAndConsonantsReversedAndConsonantsReversed\
    \ = Arrays.asList(vowelsAndConsonantsReversed, consonants, vowelsAndConsonantsReversed,\
    \ conson\n                                                                   \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp6m4siee4.java:33: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp6m4siee4.java:33: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp6m4siee4.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp6m4siee4.java:33: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp6m4siee4.java:33:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp6m4siee4.java:49: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4r3b3pdt.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt0_32ker.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3xuy5nvd.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7igsqlzv.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp7igsqlzv.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmp7igsqlzv.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp7igsqlzv.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp7igsqlzv.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp7igsqlzv.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp7igsqlzv.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n    \
    \    vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
    \      vowels.add('u');\n        vowels.add('y');\n        vowels.add('\xE6');\n\
    \        vowels.add('\xF8');\n        vowels.add('\xE5');\n        vowels.add('\xC6\
    ');\n        vowels.add('\xD8');\n        vowels.add('\xC5');\n        vowels.add('\xC4\
    ');\n        vowels.add('\xDC');\n        vowels.add('\xD6');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xC5');\n        vowels.add('\xD6\
    ');\n        vowels.add('\xC5');\n        vowels.add('\xD6');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xC5');\n        vowels.add('\xD6\
    ');\n        vowels.add('\xC5');\n        vowels.add('\xD6');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xC5');\n        vowels.add('\xD6\
    ');\n        vowels.add('\xC5');\n        vowels.add('\xD6');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xC5');\n        vowels.add('\xD6\
    ');\n        vowels.add('\xC5');\n        vowels.add('\xD6');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xC5');\n        vowels.add('\xD6\
    ');\n        vowels.add('\xC5');\n        vowels.add('\xD6');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xC5');\n        vowels.add('\xD6\
    ');\n        vowels.add('\xC5');\n        vowels.add('\xD6');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xC5');\n        vowels.add('\xD6\
    ');\n        vowels.add('\xC5');\n        vowels.add('\xD6');\n        vowels.add('\xC5\
    ');\n        vowels.add('\xD6');\n        vowels.add('\xC5');\n        vowels.add('\xD6\
    ');\n        vowels.add('\xC5');\n        vowels.add('\xD6');\n        vowels.add('\uFFFD\
    \n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjk_e_wh1.java:84: error: unclosed character literal\n        vowels.add('?\n\
    \                   ^\n/tmp/tmpjk_e_wh1.java:84: error: ';' expected\n       \
    \ vowels.add('?\n                     ^\n/tmp/tmpjk_e_wh1.java:86: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpjk_e_wh1.java:86:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpjk_e_wh1.java:86: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpjk_e_wh1.java:86:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpjk_e_wh1.java:86: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpjk_e_wh1.java:102: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpymm5hay2.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpymm5hay2.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpocnen5eu.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<String>();\n        vowels.add(\"a\"\
    );\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpry7ikces.java:96: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7uc34x3w.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n   \
    \     char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] vowelsEnd\
    \ = {'A', 'E', 'I', 'O', 'U'};\n        char[] consonantsEnd = {'B', 'C', 'D',\
    \ 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X',\
    \ 'Y', 'Z'};\n        char[] vowelsStart = {'a', 'e', 'i', 'o', 'u'};\n      \
    \  char[] consonantsStart = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] vowelsMiddle\
    \ = {'A', 'E', 'I', 'O', 'U'};\n        char[] consonantsMiddle = {'B', 'C', 'D',\
    \ 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X',\
    \ 'Y', 'Z'};\n        char[] vowelsStart = {'a', 'e', 'i', 'o', 'u'};\n      \
    \  char[] consonantsStart = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] vowelsEnd\
    \ = {'A', 'E', 'I', 'O', 'U'};\n        char[] consonantsEnd = {'B', 'C', 'D',\
    \ 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X',\
    \ 'Y', 'Z'};\n        char[] vowelsMiddle = {'A', 'E', 'I', 'O', 'U'};\n     \
    \   char[] consonantsMiddle = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M',\
    \ 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'};\n        char[] vowelsStart\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonantsStart = {'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z'};\n        char[] vowelsEnd = {'A', 'E', 'I', 'O', 'U'};\n        char[]\
    \ consonantsEnd = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6vjw480a.java:37: error: unclosed character literal\n        char[]\
    \ consonantsEnd = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P\n\
    \                                                                            \
    \           ^\n/tmp/tmp6vjw480a.java:37: error: ';' expected\n        char[] consonantsEnd\
    \ = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P\n             \
    \                                                                            ^\n\
    /tmp/tmp6vjw480a.java:39: error: illegal start of expression\n    public static\
    \ void main(String[] args) {\n    ^\n/tmp/tmp6vjw480a.java:39: error: ';' expected\n\
    \    public static void main(String[] args) {\n          ^\n/tmp/tmp6vjw480a.java:39:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp6vjw480a.java:39: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp6vjw480a.java:39:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp6vjw480a.java:55: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqbw0i8mn.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9q3f4aei.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpojttix6o.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonantsWithVowels\
    \ = vowelsAndConsonants.stream().flatMap(List::stream).collect(Collectors.toList());\n\
    \        List<String> vowelsAndConsonantsWithVowelsReversed = vowelsAndConsonantsWithVowels.stream().flatMap(List::stream).collect(Collectors.toList());\n\
    \        List<String> vowelsAndConsonantsWithVowelsReversedAndConsonants = vowelsAndConsonantsWithVowelsReversed.stream().flatMap(List::stream).collect(Collectors.toList());\n\
    \        List<String> vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowels\
    \ = vowelsAndConsonantsWithVowelsReversedAndConsonants.stream().flatMap(List::stream).collect(Collectors.toList());\n\
    \        List<String> vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowelsReversed\
    \ = vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowels.stream().flatMap(List::stream).collect(Collectors.toList());\n\
    \        List<String> vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowelsReversedAndConsonants\
    \ = vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowelsReversed.stream().flatMap(List::stream).collect(Collectors.toList());\n\
    \        List<String> vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowelsReversedAndConsonantsWithVowels\
    \ = vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowelsReversedAndConsonants.stream().flatMap(List::stream).collect(Collectors.toList());\n\
    \        List<String> vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowelsReversedAndConsonantsWithV\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptfcue4pa.java:30: error: ';' expected\n        List<String> vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowelsReversedAndConsonantsWithV\n\
    \                                                                            \
    \                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpql0x6rb8.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpys4vn5lb.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpys4vn5lb.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n   \
    \     char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] vowelsConsonants\
    \ = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] consonantsVowels = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        char[] consonantsConsonants =\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z', 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U',\
    \ 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't',\
    \ 'v', 'w', 'x', 'y', 'z' };\n        char[] consonantsVowelsConsonants = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z', 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z', 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] consonantsVowelsConsonantsVowels = { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z', 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z', 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp823qtnq5.java:26: error: unclosed character literal\n        char[]\
    \ consonantsVowelsConsonantsVowels = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w\n                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                               ^\n/tmp/tmp823qtnq5.java:26: error: ';' expected\n\
    \        char[] consonantsVowelsConsonantsVowels = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\
    \ 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w\n                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                ^\n/tmp/tmp823qtnq5.java:28:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp823qtnq5.java:28: erro"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<String>();\n        vowels.add(\"a\"\
    );\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdkqf0_kq.java:96: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz2v0deqo.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonantsWithVowels\
    \ = vowelsAndConsonants.stream().flatMap(List::stream).collect(Collectors.toList());\n\
    \        List<String> vowelsAndConsonantsWithVowelsReversed = vowelsAndConsonantsWithVowels.stream().flatMap(List::stream).collect(Collectors.toList());\n\
    \        List<String> vowelsAndConsonantsWithVowelsReversedAndConsonants = vowelsAndConsonantsWithVowelsReversed.stream().flatMap(List::stream).collect(Collectors.toList());\n\
    \        List<String> vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowels\
    \ = vowelsAndConsonantsWithVowelsReversedAndConsonants.stream().flatMap(List::stream).collect(Collectors.toList());\n\
    \        List<String> vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowelsReversed\
    \ = vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowels.stream().flatMap(List::stream).collect(Collectors.toList());\n\
    \        List<String> vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowelsReversedAndConsonants\
    \ = vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowelsReversed.stream().flatMap(List::stream).collect(Collectors.toList());\n\
    \        List<String> vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowelsReversedAndConsonantsWithVowels\
    \ = vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowelsReversedAndConsonants.stream().flatMap(List::stream).collect(Collectors.toList());\n\
    \        List<String> vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowelsReversedAndConsonantsWithV\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphtcinz8f.java:30: error: ';' expected\n        List<String> vowelsAndConsonantsWithVowelsReversedAndConsonantsWithVowelsReversedAndConsonantsWithV\n\
    \                                                                            \
    \                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6vukqkqe.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphai8k1fp.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj02ipd89.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpj02ipd89.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<Character> vowels = new HashSet<Character>();\n        vowels.add('a');\n\
    \        vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n\
    \        vowels.add('u');\n        vowels.add('y');\n        vowels.add('o');\n\
    \        vowels.add('u');\n        vowels.add('r');\n        vowels.add('l');\n\
    \        vowels.add('s');\n        vowels.add('t');\n        vowels.add('h');\n\
    \        vowels.add('c');\n        vowels.add('k');\n        vowels.add('p');\n\
    \        vowels.add('d');\n        vowels.add('f');\n        vowels.add('v');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x');\n        vowels.add('q');\n\
    \        vowels.add('z');\n        vowels.add('x\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuvt2of87.java:92: error: unclosed character literal\n        vowels.add('x\n\
    \                   ^\n/tmp/tmpuvt2of87.java:92: error: ';' expected\n       \
    \ vowels.add('x\n                     ^\n/tmp/tmpuvt2of87.java:94: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpuvt2of87.java:94:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpuvt2of87.java:94: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpuvt2of87.java:94:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpuvt2of87.java:94: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpuvt2of87.java:110: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcizvghy8.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpcizvghy8.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdfovk6zv.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowel\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr2uorxsr.java:95: error: not a statement\n        vowel\n     \
    \   ^\n/tmp/tmpr2uorxsr.java:95: error: ';' expected\n        vowel\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo9a_t7q7.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n    \
    \    vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
    \      vowels.add('u');\n        vowels.add('y');\n        vowels.add('\xE6');\n\
    \        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDE');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDE');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDE\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbl6p8ulz.java:84: error: illegal line end in character literal\n\
    \        vowels.add('\n                   ^\n/tmp/tmpbl6p8ulz.java:85: error:\
    \ ';' expected\n    }\n^\n/tmp/tmpbl6p8ulz.java:86: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpbl6p8ulz.java:86:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpbl6p8ulz.java:86: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpbl6p8ulz.java:86:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpbl6p8ulz.java:86: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpbl6p8ulz.java:102: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi9bjtm11.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, consonants, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, consonants, consonants,\
    \ consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, consonants, consonants, consonants, consonants);\n        List<String>\
    \ vowelsAndConsonants5 = Arrays.asList(vowels, consonants, consonants, consonants,\
    \ consonants, consonants, consonants);\n        List<String> vowelsAndConsonants6\
    \ = Arrays.asList(vowels, consonants, consonants, consonants, consonants, consonants,\
    \ consonants, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, consonants, consonants, consonants, consonants, consonants, consonants,\
    \ consonants);\n        List<String> vowelsAndConsonants8 = Arrays.asList(vowels,\
    \ consonants, consonants, consonants, consonants, consonants, consonants, consonants,\
    \ consonants, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, consonants, consonants, consonants, consonants, consonants, consonants,\
    \ consonants, consonants, consonants);\n        List<String> vowelsAndConsonants10\
    \ = Arrays.asList(vowels, consonants, consonants, consonants, consonants, consonants,\
    \ consonants, consonants, consonants, consonants, consonants, consonants);\n \
    \       List<String> vowelsAndConsonants11 = Arrays.asList(vowels, consonants,\
    \ consonants, consonants, conson\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplmlne5ga.java:32: error: ')' expected\n        List<String> vowelsAndConsonants11\
    \ = Arrays.asList(vowels, consonants, consonants, consonants, conson\n       \
    \                                                                            \
    \                          ^\n/tmp/tmplmlne5ga.java:34: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmplmlne5ga.java:34:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmplmlne5ga.java:34: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmplmlne5ga.java:34:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmplmlne5ga.java:34: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmplmlne5ga.java:50: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1mrff1gx.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp1mrff1gx.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmp1mrff1gx.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp1mrff1gx.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp1mrff1gx.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp1mrff1gx.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp1mrff1gx.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxzvk9k9l.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqq9nux4t.java:95: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonants =\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsEnd = { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        char[] consonantsEnd = { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] vowelsStart = { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonantsStart\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsMiddle = { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        char[] consonantsMiddle = { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] vowelsBoth = { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonantsBoth\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsBothEnd = { 'a', 'e',\
    \ 'i', 'o', 'u' };\n        char[] consonantsBothEnd = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowelsBothStart = { 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ consonantsBothStart = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsBothMiddle\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonantsBothMiddle = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] vowelsBothBoth = { 'a', 'e', 'i', 'o',\
    \ 'u' };\n        char[] consonantsBothBoth = { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwzddb1nu.java:38: error: not a statement\n        char\n      \
    \  ^\n/tmp/tmpwzddb1nu.java:38: error: ';' expected\n        char\n          \
    \  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprld25egr.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmprld25egr.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmprld25egr.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmprld25egr.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmprld25egr.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmprld25egr.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmprld25egr.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> consonantsAndVowels\
    \ = Arrays.asList(consonants, vowels);\n        List<String> vowelsAndConsonantsAndVowels\
    \ = Arrays.asList(vowelsAndConsonants, consonantsAndVowels);\n        List<String>\
    \ vowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowels = Arrays.asList(vowelsAndConsonantsAndVowels,\
    \ vowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowels);\n        List<String>\
    \ vowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowels\
    \ = Arrays.asList(vowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowels,\
    \ vowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowels);\n\
    \        List<String> vowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowels\
    \ = Arrays.asList(vowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowels,\
    \ vowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowels);\n\
    \        List<String> vowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndV\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwl7vmrg4.java:28: error: ';' expected\n        List<String> vowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndVowelsOrVowelsAndConsonantsAndV\n\
    \                                                                            \
    \                                                                            \
    \            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9qdzpgmu.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqc2qvw7b.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzwl366am.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \        List<String> consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants\
    \ = Arrays.asList(vowels, consonants);\n        List<String> vowelsAndConsonants2\
    \ = Arrays.asList(vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants3 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants4 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n \
    \       List<String> vowelsAndConsonants5 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants6 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpijgforqb.java:32: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpijgforqb.java:32: error: ';' expected\n    }\n     ^\n/tmp/tmpijgforqb.java:33:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpijgforqb.java:33: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpijgforqb.java:33: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpijgforqb.java:33: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpijgforqb.java:49: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgg5yqb5o.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1p58t_hz.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n    \
    \    vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
    \      vowels.add('u');\n        vowels.add('y');\n        vowels.add('A');\n\
    \        vowels.add('E');\n        vowels.add('I');\n        vowels.add('O');\n\
    \        vowels.add('U');\n        vowels.add('Y');\n        vowels.add('1');\n\
    \        vowels.add('2');\n        vowels.add('3');\n        vowels.add('4');\n\
    \        vowels.add('5');\n        vowels.add('6');\n        vowels.add('7');\n\
    \        vowels.add('8');\n        vowels.add('9');\n        vowels.add('0');\n\
    \        vowels.add('q');\n        vowels.add('Q');\n        vowels.add('w');\n\
    \        vowels.add('W');\n        vowels.add('e');\n        vowels.add('E');\n\
    \        vowels.add('r');\n        vowels.add('R');\n        vowels.add('t');\n\
    \        vowels.add('T');\n        vowels.add('y');\n        vowels.add('Y');\n\
    \        vowels.add('u');\n        vowels.add('U');\n        vowels.add('l');\n\
    \        vowels.add('L');\n        vowels.add('s');\n        vowels.add('S');\n\
    \        vowels.add('p');\n        vowels.add('P');\n        vowels.add('f');\n\
    \        vowels.add('F');\n        vowels.add('b');\n        vowels.add('B');\n\
    \        vowels.add('d');\n        vowels.add('D');\n        vowels.add('g');\n\
    \        vowels.add('G');\n        vowels.add('c');\n        vowels.add('C');\n\
    \        vowels.add('v');\n        vowels.add('V');\n        vowels.add('j');\n\
    \        vowels.add('J');\n        vowels.add('z');\n        vowels.add('Z');\n\
    \        vowels.add('x');\n        vowels.add('X');\n        vowels.add('q');\n\
    \        vowels.add('Q');\n        vowels.add('w');\n        vowels.add('W');\n\
    \        vowels.add('e');\n        vowels.add('E');\n        vowels.add('r');\n\
    \        vowels.add('R');\n        vowels.add('t');\n        vowels.add('T');\n\
    \        vowels.add('y');\n        vowels.add('Y');\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd5nanizq.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2e9xw5ao.java:95: error: unclosed string literal\n        vowels.add(\"\
    \n                   ^\n/tmp/tmp2e9xw5ao.java:95: error: ';' expected\n      \
    \  vowels.add(\"\n                    ^\n/tmp/tmp2e9xw5ao.java:97: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp2e9xw5ao.java:97:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp2e9xw5ao.java:97: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp2e9xw5ao.java:97:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp2e9xw5ao.java:97: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp2e9xw5ao.java:113: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6tbfza9g.java:95: error: unclosed string literal\n        vowels.add(\"\
    \n                   ^\n/tmp/tmp6tbfza9g.java:95: error: ';' expected\n      \
    \  vowels.add(\"\n                    ^\n/tmp/tmp6tbfza9g.java:97: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp6tbfza9g.java:97:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp6tbfza9g.java:97: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp6tbfza9g.java:97:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp6tbfza9g.java:97: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp6tbfza9g.java:113: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5mx9x8dt.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    Set<String> vowels = new HashSet<>();\n        vowels.add(\"a\");\n     \
    \   vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n\
    \        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphzkhto3o.java:93: error: not a statement\n        vowels.add\n\
    \              ^\n/tmp/tmphzkhto3o.java:93: error: ';' expected\n        vowels.add\n\
    \                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n    \
    \    List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n  \
    \      vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
    );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
    a\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbpfb1z_r.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
