name: HumanEval_69_search
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if(freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = val;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbp3uwpbm.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                if (maxFreq < val) maxFreq =\
    \ val;\n                if (maxVal < val) maxVal = val;\n            }\n     \
    \   }\n        return maxVal;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpew__hz4j.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq++;\n            if (i > max) {\n                max = i;\n    \
    \            freq = freq - 1;\n            }\n        }\n        if (freq >= 0)\
    \ {\n            return max;\n        } else {\n            return -1;\n     \
    \   }\n\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcb5noqe7.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i && maxVal < i) {\n                maxVal = i;\n\
    \                maxFreq = i;\n            } else if (maxFreq == i && maxVal <\
    \ i) {\n                maxVal = i;\n                maxFreq = i;\n          \
    \  } else if (maxFreq > i && maxVal == i) {\n                maxFreq = i;\n  \
    \          }\n        }\n        return maxVal;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm7r2drxw.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i && maxVal < i) {\n                maxVal = i;\n\
    \                maxFreq = i;\n            } else if (maxFreq < i) {\n       \
    \         maxFreq = i;\n            }\n        }\n        return maxVal;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jz04uap.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for(long i : lst) {\n    \
    \        freq++;\n            if(freq > max) {\n                max = freq;\n\
    \            }\n            if(i == 0) {\n                freq--;\n          \
    \  }\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwq9_r667.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_e6f4dps.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if(freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = val;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvxlcgod.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         if (freq == 0 || freq > i) {\n                freq = i;\n          \
    \      max = i;\n            }\n        }\n        return max;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoxo4982p.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > maxVal) {\n                maxVal = val;\n        \
    \        maxFreq = lst.get(lst.indexOf(val));\n            } else if (val == maxVal)\
    \ {\n                if (val > maxFreq) {\n                    maxFreq = val;\n\
    \                }\n            }\n        }\n        return maxVal;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpovcz_mqg.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1r1v1tsg.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_97j7vp.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > maxVal) {\n                maxVal = val;\n        \
    \        maxFreq = lst.get(lst.indexOf(val));\n            }\n        }\n    \
    \    return maxFreq > maxVal ? maxVal : -1;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbs2gst0o.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i && maxVal < i) {\n                maxVal = i;\n\
    \                maxFreq = i;\n            }\n        }\n        return maxVal;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppimxgthk.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3bbdjo6.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long i : lst)\
    \ {\n            if(i == 0) {\n                continue;\n            }\n    \
    \        long freq = Collections.frequency(lst, i);\n            if(freq > maxFreq)\
    \ {\n                maxFreq = freq;\n                maxVal = i;\n          \
    \  }\n        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp86sohds3.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4pjnjq41.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ie2ce9u.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if(freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = val;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa4gqa3bm.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgh6vp_h0.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long i : lst)\
    \ {\n            long freq = Collections.frequency(lst, i);\n            if(freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = i;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf2g24ejx.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for(long i : lst) {\n    \
    \        freq++;\n            if(freq > i) {\n                max = i;\n     \
    \           freq = i;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp033m_tsw.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long freq = -1;\n        for (long i : lst) {\n \
    \           if (freq == -1 || freq > i) {\n                freq = i;\n       \
    \         max = i;\n            }\n        }\n        return max;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuzx1bx5_.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3toyfxpv.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long freq = 0;\n        for (long i : lst) {\n  \
    \          freq++;\n            if (freq > max) {\n                max = freq;\n\
    \            }\n            if (freq == i) {\n                freq++;\n      \
    \      }\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0kldgxyd.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq > maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = val;\n                }\n            }\n       \
    \ }\n        return maxVal;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplhhpaba7.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq++;\n            if (freq > i) {\n                max = i;\n   \
    \             freq = i;\n            }\n        }\n        return max;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7epjcj3h.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                if (maxFreq < val) maxFreq =\
    \ val;\n                if (maxVal < val) maxVal = val;\n            }\n     \
    \   }\n        return maxVal;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa37wsl_o.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxCount = 0;\n        for (long i : lst)\
    \ {\n            if (maxCount < i) {\n                maxCount = i;\n        \
    \        maxVal = i;\n            }\n        }\n        return maxVal;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqontv1za.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzkp8ox1.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq += i;\n            if (freq > max) {\n                max = freq;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl9d3uxb3.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxVal == -1 || maxFreq < i) {\n                maxVal =\
    \ i;\n                maxFreq = i;\n            } else if (maxFreq == i) {\n \
    \               maxFreq++;\n            }\n        }\n        return maxVal;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuxbw8go5.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp13h8mpnv.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxCount = 0;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long count = Collections.frequency(lst,\
    \ val);\n                if (count > maxCount) {\n                    maxCount\
    \ = count;\n                    maxVal = val;\n                }\n           \
    \ }\n        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp07ov754r.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm4tcdwpi.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if(freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = val;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe4ai4w3w.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoyx0vhuf.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long freq = 0;\n        for (long i : lst) {\n  \
    \          if (i > 0 && freq >= i) {\n                max = i;\n             \
    \   freq = i;\n            }\n        }\n        return max;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5e3gukou.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxVal == -1 || maxFreq < i) {\n                maxVal =\
    \ i;\n                maxFreq = i;\n            } else if (maxFreq == i) {\n \
    \               maxFreq++;\n            }\n        }\n        return maxVal;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqjze_ymh.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i && maxVal < i) {\n                maxVal = i;\n\
    \                maxFreq = i;\n            }\n        }\n        return maxVal;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ssjbs3y.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i && maxVal < i) {\n                maxVal = i;\n\
    \                maxFreq = i;\n            }\n            if (maxFreq == i &&\
    \ maxVal < i) {\n                maxVal = i;\n                maxFreq = i;\n \
    \           }\n        }\n        return maxVal;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe1xi1zun.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i && maxVal < i) {\n                maxVal = i;\n\
    \                maxFreq = i;\n            } else if (maxFreq == i && maxVal <\
    \ i) {\n                maxVal = i;\n                maxFreq = i;\n          \
    \  } else if (maxFreq > i && maxVal == i) {\n                maxFreq = i;\n  \
    \          }\n        }\n        return maxVal;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmotv_6qc.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for(long i : lst) {\n    \
    \        freq++;\n            if(freq > i) {\n                max = i;\n     \
    \           freq = i;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptdguydr8.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long i : lst)\
    \ {\n            if(i>0) {\n                long freq = Collections.frequency(lst,\
    \ i);\n                if(freq>maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = i;\n                }\n            }\n        }\n\
    \        return maxVal;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpffki12n7.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         if (freq < i) {\n                freq = i;\n                max = i;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk5dxte6u.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long maxFreq = -1;\n        for (long i : lst) {\n\
    \            long freq = Collections.frequency(lst, i);\n            if (freq\
    \ > maxFreq) {\n                max = i;\n                maxFreq = freq;\n  \
    \          }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbvmr5pqf.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i) {\n                maxFreq = i;\n          \
    \      maxVal = i;\n            } else if (maxFreq == i) {\n                maxVal\
    \ = Math.max(maxVal, i);\n            }\n        }\n        return maxVal;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps620xcex.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxCount = 0;\n        for (long i : lst)\
    \ {\n            if (maxCount < i) {\n                maxCount = i;\n        \
    \        maxVal = i;\n            }\n        }\n        return maxVal;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy2q06789.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq++;\n            if (freq > i) {\n                max = i;\n   \
    \             freq = i;\n            }\n        }\n        return max;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz69p5ktl.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6z9xh4co.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg5t6lnbp.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long maxFreq = -1;\n        for (long i : lst) {\n\
    \            if (maxFreq < i && max < i) {\n                max = i;\n       \
    \         maxFreq = i;\n            } else if (maxFreq == i) {\n             \
    \   maxFreq++;\n            }\n        }\n        return max;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1htkimgf.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq += i;\n            if (freq > max) {\n                max = freq;\n\
    \            }\n        }\n        return max > 0 ? max : -1;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk2olpzy4.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long i : lst)\
    \ {\n            if(i>0) {\n                long freq = Collections.frequency(lst,\
    \ i);\n                if(freq>maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = i;\n                }\n            }\n        }\n\
    \        return maxVal;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpesp4xrpx.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if(freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = val;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp40d9om5i.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxCount = 0;\n        for(long val : lst)\
    \ {\n            long count = Collections.frequency(lst, val);\n            if(count\
    \ > maxCount) {\n                maxCount = count;\n                maxVal = val;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf78_kjql.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > maxVal) {\n                maxVal = val;\n        \
    \        maxFreq = lst.get(lst.indexOf(val));\n            } else if (val == maxVal)\
    \ {\n                maxFreq++;\n            }\n        }\n        return maxVal;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe5q00ayy.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                if (maxVal < 0 || maxVal > val)\
    \ {\n                    maxVal = val;\n                    maxFreq = val;\n \
    \               }\n                else {\n                    maxFreq++;\n  \
    \              }\n            }\n        }\n        return maxFreq > maxVal ?\
    \ maxVal : -1;\n\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_sp4vuy.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe7von8rd.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdkbfm1hm.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         if (freq > i) {\n                max = i;\n                freq = i;\n\
    \            } else if (freq == i) {\n                freq++;\n            }\n\
    \        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc3me7nrx.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpca5snrwz.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi2n3fijc.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzpwdetel.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyt97t8g1.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long freq = -1;\n        for (long i : lst) {\n \
    \           if (freq == -1) {\n                freq = i;\n                max\
    \ = i;\n            } else if (freq > i) {\n                freq = i;\n      \
    \          max = i;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd1qn3684.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = lst.get(0);\n        long maxFreq = lst.get(0);\n        for\
    \ (long val : lst) {\n            if (val > maxVal) {\n                maxVal\
    \ = val;\n                maxFreq = val;\n            } else if (val == maxVal)\
    \ {\n                maxFreq++;\n            }\n        }\n        return maxFreq\
    \ > lst.size() ? -1 : maxVal;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpesh6qfsa.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if(freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = val;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmgn83v_u.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq > maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = val;\n                }\n            }\n       \
    \ }\n        return maxVal;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk178gxxd.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (maxVal == -1 || maxVal < val) {\n                maxVal =\
    \ val;\n                maxFreq = val;\n            } else if (maxFreq >= val)\
    \ {\n                maxFreq = val;\n            }\n        }\n        return\
    \ maxVal;\n\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzqyxphjw.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > maxVal) {\n                maxVal = val;\n        \
    \        maxFreq = val;\n            } else if (val == maxVal && val >= maxFreq)\
    \ {\n                maxFreq++;\n            }\n        }\n        return maxVal;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplk8_4vz1.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         if (freq == 0 || freq > i) {\n                max = i;\n           \
    \     freq = i;\n            }\n        }\n        return max;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx5ahwser.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = lst.get(0);\n        long maxFreq = lst.get(0);\n        for\
    \ (long val : lst) {\n            if (val > maxVal) {\n                maxVal\
    \ = val;\n                maxFreq = lst.get(0);\n            } else if (val ==\
    \ maxVal) {\n                maxFreq++;\n            }\n        }\n        return\
    \ maxVal;\n\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpojb9vmk4.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > 0) {\n                if(val > maxVal) {\n         \
    \           maxVal = val;\n                    maxFreq = lst.get(lst.indexOf(val));\n\
    \                }\n            }\n        }\n        return maxVal;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxylcopfv.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr_m3fxv_.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0riplbpn.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxVal == -1 || maxFreq < i) {\n                maxVal =\
    \ i;\n                maxFreq = i;\n            } else if (maxFreq == i) {\n \
    \               maxFreq++;\n            }\n        }\n        return maxVal;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjwocw5w1.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2wqtzht2.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq > maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = val;\n                }\n            }\n       \
    \ }\n        return maxVal;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp9vz_kb9.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwoq3n09n.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i) {\n                maxFreq = i;\n          \
    \      maxVal = i;\n            } else if (maxFreq == i) {\n                maxVal\
    \ = Math.max(maxVal, i);\n            }\n        }\n        return maxVal;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp46c12n9o.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = lst.get(0);\n        long maxFreq = lst.get(0);\n        for\
    \ (long val : lst) {\n            if (val > maxVal) {\n                maxVal\
    \ = val;\n                maxFreq = lst.get(0);\n            }\n            if\
    \ (val == maxVal) {\n                maxFreq++;\n            }\n        }\n  \
    \      return maxVal;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmuy8oyz9.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > maxVal) {\n                maxVal = val;\n         \
    \       maxFreq = lst.get(lst.indexOf(val));\n            }\n        }\n     \
    \   return maxFreq;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprerfppaz.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq += i;\n            if (freq > max) {\n                max = freq;\n\
    \            }\n        }\n        return max >= 0 ? max : -1;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3g2g3zkp.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long freq = 0;\n        for (long i : lst) {\n  \
    \          freq += i;\n            if (freq > max) {\n                max = freq;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp95d8gtef.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            long freq = Collections.frequency(lst, i);\n            if (freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = i;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkofkwidc.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq++;\n            if (i > max) {\n                max = i;\n    \
    \        }\n            if (freq > i) {\n                freq = i;\n         \
    \   }\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qtabho3.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i) {\n                maxFreq = i;\n          \
    \      maxVal = i;\n            } else if (maxFreq == i) {\n                maxVal\
    \ = i;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpar4_fktg.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > maxVal) {\n                maxVal = val;\n        \
    \        maxFreq = val;\n            } else if (val == maxVal) {\n           \
    \     maxFreq += val;\n            }\n        }\n        return maxFreq;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj4ry59ga.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long freq = 0;\n        for (long i : lst) {\n  \
    \          freq += i;\n            if (freq > max) {\n                max = freq;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp71rs9yl5.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            long freq = Collections.frequency(lst, i);\n            if (freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = i;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuwnty8dj.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = lst.get(0);\n        long maxFreq = lst.get(0);\n        for\
    \ (long i : lst) {\n            if (i > maxVal) {\n                maxVal = i;\n\
    \                maxFreq = lst.get(i);\n            }\n        }\n        return\
    \ maxVal;\n\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnmwtzj5a.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n                maxFreq = lst.get(i);\n                  \
    \                ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq++;\n            if (i > max) {\n                max = i;\n    \
    \        }\n            if (freq > i) {\n                freq = i;\n         \
    \   }\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxnlw9n_6.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu_9qy6s2.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long maxFreq = -1;\n        for(long i : lst) {\n\
    \            if(i>0) {\n                long freq = Collections.frequency(lst,\
    \ i);\n                if(freq>maxFreq) {\n                    max = i;\n    \
    \                maxFreq = freq;\n                }\n            }\n        }\n\
    \        return max;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6b2lwrlq.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq > maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = val;\n                }\n            }\n       \
    \ }\n        return maxVal;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw6nl96dn.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplyi4l_v3.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long maxFreq = -1;\n        for (long i : lst) {\n\
    \            if (maxFreq < i) {\n                max = i;\n                maxFreq\
    \ = i;\n            } else if (maxFreq == i) {\n                maxFreq++;\n \
    \           }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe5b5jssc.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_qzdkvqe.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq > maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = val;\n                }\n            }\n       \
    \ }\n        return maxVal;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn4vjey0l.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > maxVal) {\n                maxVal = val;\n        \
    \        maxFreq = lst.get(lst.indexOf(val));\n            }\n        }\n    \
    \    return maxFreq > maxVal ? maxFreq : -1;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdf6mdq3k.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i && maxVal < i) {\n                maxVal = i;\n\
    \                maxFreq = i;\n            } else if (maxFreq == i && maxVal <\
    \ i) {\n                maxVal = i;\n                maxFreq = i;\n          \
    \  } else if (maxFreq < i && maxVal == i) {\n                maxFreq = i;\n  \
    \          }\n        }\n        return maxVal;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy8sp9q71.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc_vzeqjv.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq++;\n            if (i > max) {\n                max = i;\n    \
    \        }\n            if (freq > i) {\n                freq = i;\n         \
    \   }\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5_1wg0a0.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if(freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = val;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxmv0le3m.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         if (freq < i) {\n                max = i;\n                freq = i;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsn1vsyra.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp17gfcyuf.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxCount = 0;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long count = lst.stream().filter(i\
    \ -> i == val).count();\n                if (count > maxCount) {\n           \
    \         maxCount = count;\n                    maxVal = val;\n             \
    \   }\n            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp34u2xklg.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptylm8oan.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq++;\n            if (i > max) {\n                max = i;\n    \
    \            freq = freq - 1;\n            }\n        }\n        if (freq >= 0)\
    \ {\n            return max;\n        }\n        return -1;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8p9ofg87.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if(freq\
    \ >= maxFreq) {\n                maxFreq = freq;\n                maxVal = val;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt24do5mu.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i && maxVal < i) {\n                maxVal = i;\n\
    \                maxFreq = i;\n            }\n            else if (maxFreq ==\
    \ i && maxVal < i) {\n                maxVal = i;\n                maxFreq = i;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp53idq969.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > maxVal) {\n                maxVal = val;\n         \
    \       maxFreq = lst.get(lst.indexOf(val));\n            }\n        }\n     \
    \   return maxVal;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf1f86m59.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplnmmjs9p.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbcd8mggd.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjt8tpfsj.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq++;\n            if (i > max) {\n                max = i;\n    \
    \        }\n            if (freq > i) {\n                freq = i;\n         \
    \   }\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgdrv4acp.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ggmgxmy.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        long currVal = lst.get(0);\n\
    \        long currFreq = lst.get(0);\n        for (long i : lst) {\n         \
    \   if (currVal != i) {\n                currVal = i;\n                currFreq\
    \ = lst.get(i);\n            }\n            currFreq++;\n            if (currFreq\
    \ > maxFreq) {\n                maxFreq = currFreq;\n                maxVal =\
    \ currVal;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf57cf8_q.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n                currFreq = lst.get(i);\n                 \
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for(long i : lst) {\n    \
    \        freq += i;\n            if(freq > max) {\n                max = freq;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq2bbvzn_.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for(long i : lst) {\n    \
    \        freq++;\n            if(freq > i) {\n                max = i;\n     \
    \           freq = i;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp054akeft.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > maxVal) {\n                maxVal = val;\n         \
    \       maxFreq = lst.get(lst.indexOf(val));\n            }\n        }\n     \
    \   return maxVal;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp979t7u_t.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxCount = 0;\n        for (long val : lst)\
    \ {\n            long count = Collections.frequency(lst, val);\n            if\
    \ (count > maxCount) {\n                maxCount = count;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7c8vy207.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq++;\n            if (i > max) {\n                max = i;\n    \
    \            freq = freq - 1;\n            }\n        }\n        if (freq >= 0)\
    \ {\n            return max;\n        }\n        return -1;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_f0q96fi.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if(freq\
    \ >= maxFreq) {\n                maxFreq = freq;\n                maxVal = val;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp4a39oxf.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi5u3insr.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            long freq = Collections.frequency(lst, i);\n            if (freq\
    \ >= maxFreq) {\n                maxFreq = freq;\n                maxVal = i;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0d3uqlff.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9y5i6pdn.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long i : lst)\
    \ {\n            if(i == 0) continue;\n            long freq = Collections.frequency(lst,\
    \ i);\n            if(freq > maxFreq) {\n                maxFreq = freq;\n   \
    \             maxVal = i;\n            }\n        }\n        return maxVal;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4a_3a_p9.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_2dqej8.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for(long i : lst) {\n    \
    \        freq++;\n            if(freq > i) {\n                max = i;\n     \
    \           freq = i;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgpe1nt9y.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         if (freq == i) {\n                freq++;\n            } else {\n  \
    \              freq = 1;\n            }\n            if (max < freq) {\n     \
    \           max = freq;\n            }\n        }\n        return max;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvm1mei73.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i) {\n                maxFreq = i;\n          \
    \      maxVal = i;\n            } else if (maxFreq == i) {\n                maxVal\
    \ = Math.max(maxVal, i);\n            }\n        }\n        return maxVal;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpklzus4el.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > maxVal) {\n                maxVal = val;\n        \
    \        maxFreq = lst.get(lst.indexOf(val));\n            }\n        }\n    \
    \    return maxFreq;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdkdc4nz1.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq++;\n            if (i > max) {\n                max = i;\n    \
    \            freq = freq - 1;\n            }\n        }\n        return freq >\
    \ 0 ? max : -1;\n\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvp5y6yco.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > maxVal) {\n                maxVal = val;\n         \
    \       maxFreq = lst.get(lst.indexOf(val));\n            }\n        }\n     \
    \   return maxFreq > maxVal ? maxFreq : -1;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qp14g0y.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i) {\n                maxFreq = i;\n          \
    \      maxVal = i;\n            } else if (maxFreq == i) {\n                maxVal\
    \ = Math.max(maxVal, i);\n            }\n        }\n        return maxVal;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthn5h8c7.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > maxVal) {\n                maxVal = val;\n        \
    \        maxFreq = lst.get(lst.indexOf(val));\n            }\n        }\n    \
    \    return maxVal;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9zjpukgd.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvugui0p6.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i) {\n                maxFreq = i;\n          \
    \      maxVal = i;\n            }\n        }\n        return maxVal;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpva5pnnlr.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long maxFreq = -1;\n        for (long i : lst) {\n\
    \            if (maxFreq < i && i > max) {\n                max = i;\n       \
    \         maxFreq = i;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv6rw0mcc.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         if (freq > i) {\n                max = i;\n                freq = i;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0us7vl7.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long freq = 0;\n        for (long i : lst) {\n  \
    \          freq++;\n            if (freq > max) {\n                max = freq;\n\
    \            }\n            if (i == 0) {\n                freq--;\n         \
    \   }\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_471_9zc.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxCount = 0;\n        for (long val : lst)\
    \ {\n            long count = Collections.frequency(lst, val);\n            if\
    \ (count > maxCount) {\n                maxCount = count;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwaw8q4i1.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq++;\n            if (freq > i) {\n                max = i;\n   \
    \             freq = i;\n            }\n        }\n        return max;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuk7xe6e7.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > maxVal) {\n                maxVal = val;\n         \
    \       maxFreq = lst.get(lst.indexOf(val));\n            }\n        }\n     \
    \   return maxFreq > maxVal ? maxFreq : -1;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7q_myf0q.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long freq = -1;\n        for(long i : lst) {\n  \
    \          freq = Collections.frequency(lst, i);\n            if(freq >= 0) {\n\
    \                if(freq > max) {\n                    max = freq;\n         \
    \       }\n            }\n        }\n        return max;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5scuzyom.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphd5_h9vm.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long i : lst)\
    \ {\n            if(i == 0) {\n                continue;\n            }\n    \
    \        long freq = Collections.frequency(lst, i);\n            if(freq >= maxFreq)\
    \ {\n                maxFreq = freq;\n                maxVal = i;\n          \
    \  }\n        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptz85lkh6.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long freq = -1;\n        for (long i : lst) {\n \
    \           if (freq == -1) {\n                freq = i;\n                max\
    \ = i;\n            } else if (freq > i) {\n                freq = i;\n      \
    \          max = i;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi6gdmr2d.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq++;\n            if (i > max) {\n                max = i;\n    \
    \        }\n            if (freq > i) {\n                freq = i;\n         \
    \   }\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzppe9te8.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx46fum89.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long maxFreq = -1;\n        for (long i : lst) {\n\
    \            if (i > max) {\n                max = i;\n                maxFreq\
    \ = i;\n            } else if (maxFreq == -1 || maxFreq > i) {\n             \
    \   maxFreq = i;\n            }\n        }\n        return max;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgo9al4aa.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq == -1 || maxFreq < i) {\n                maxFreq\
    \ = i;\n                maxVal = i;\n            } else if (maxFreq == i) {\n\
    \                maxFreq++;\n            }\n        }\n        return maxVal;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcy5hn8aw.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i) {\n                maxFreq = i;\n          \
    \      maxVal = i;\n            }\n        }\n        return maxVal;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm6kevztb.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         freq++;\n            if (freq > max) {\n                max = freq;\n\
    \            }\n            if (freq == i) {\n                freq++;\n      \
    \      }\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphdxsjlgw.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > maxVal) {\n                maxVal = val;\n        \
    \        maxFreq = val;\n            } else if (val == maxVal && val >= maxFreq)\
    \ {\n                maxFreq = val;\n            }\n        }\n        return\
    \ maxVal;\n\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiwq9dhx8.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for(long i : lst) {\n    \
    \        freq++;\n            if(freq > i) {\n                max = i;\n     \
    \           freq = i;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphtz1junl.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if(freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = val;\n\
    \            }\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa1cjx_5d.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (maxFreq < val) maxFreq = val;\n            if (maxVal < val)\
    \ maxVal = val;\n        }\n        return maxVal;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu7tcu55m.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = lst.get(0);\n        long maxFreq = lst.get(0);\n        for\
    \ (long val : lst) {\n            if (val > maxVal) {\n                maxVal\
    \ = val;\n                maxFreq = val;\n            } else if (val == maxVal)\
    \ {\n                maxFreq += val;\n            }\n        }\n        return\
    \ maxVal;\n\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo751sm1w.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > maxVal) {\n                maxVal = val;\n         \
    \       maxFreq = lst.get(lst.indexOf(val));\n            }\n        }\n     \
    \   return maxVal;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxp5ug8b8.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for(long i : lst) {\n    \
    \        freq++;\n            if(freq > i) {\n                max = i;\n     \
    \           freq = i;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiawca05d.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (Long i : lst) {\n   \
    \         freq += i;\n            if (freq > max) {\n                max = freq;\n\
    \            }\n        }\n        return max > 0 ? max : -1;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp1lkw272.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxCount = 0;\n        for (long val : lst)\
    \ {\n            long count = Collections.frequency(lst, val);\n            if\
    \ (count > maxCount) {\n                maxCount = count;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxkv_8t.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         if (freq > i) {\n                max = i;\n                freq = i;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphvlyk781.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         if (i > 0 && freq >= i) {\n                max = i;\n              \
    \  freq = i;\n            }\n        }\n        return max;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7xp_hukg.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsf30b1hv.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long i : lst)\
    \ {\n            if(i == 0) {\n                continue;\n            }\n    \
    \        long freq = Collections.frequency(lst, i);\n            if(freq > maxFreq)\
    \ {\n                maxFreq = freq;\n                maxVal = i;\n          \
    \  }\n        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj1dklxfl.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > maxVal) {\n                maxVal = val;\n         \
    \       maxFreq = lst.get(lst.indexOf(val));\n            }\n        }\n     \
    \   return maxFreq;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3m4denky.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (Long i : lst) {\n   \
    \         if (freq == 0 || freq > i) {\n                max = i;\n           \
    \     freq = i;\n            }\n        }\n        return max;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqsslr6ir.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcur3us3r.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long i : lst)\
    \ {\n            if(i == 0) {\n                continue;\n            }\n    \
    \        if(i == maxVal) {\n                continue;\n            }\n       \
    \     if(i == maxFreq) {\n                continue;\n            }\n         \
    \   if(i == lst.get(0) - 1) {\n                continue;\n            }\n    \
    \        if(i == lst.get(0) - 2) {\n                continue;\n            }\n\
    \            if(i == lst.get(0) - 3) {\n                continue;\n          \
    \  }\n            if(i == lst.get(0) - 4) {\n                continue;\n     \
    \       }\n            if(i == lst.get(0) - 5) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 6) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 7) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 8) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 9) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 10) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 11) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 12) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 13) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 14) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 15) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 16) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 17) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 18) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 19) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 20) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 21) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 22) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 23) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 24) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 25) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 26) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 27) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 28) {\n                continue;\n\
    \            }\n            if(i == lst.get(0) - 29\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4jw0al3a.java:114: error: ')' expected\n            if(i == lst.get(0)\
    \ - 29\n                                   ^\n/tmp/tmp4jw0al3a.java:115: error:\
    \ illegal start of statement\n    }\n    ^\n/tmp/tmp4jw0al3a.java:116: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for(long i : lst) {\n    \
    \        freq++;\n            if(freq > i) {\n                max = i;\n     \
    \           freq = i;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf97m1_zk.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i && maxVal < i) {\n                maxVal = i;\n\
    \                maxFreq = i;\n            } else if (maxFreq < i) {\n       \
    \         maxVal = i;\n                maxFreq = i;\n            } else if (maxFreq\
    \ == i) {\n                maxFreq++;\n            }\n        }\n        return\
    \ maxVal;\n\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp37b89cxa.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long freq = -1;\n        for (long i : lst) {\n \
    \           if (freq == -1) {\n                freq = i;\n                max\
    \ = i;\n            } else if (freq > i) {\n                freq = i;\n      \
    \          max = i;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1y_nfy0g.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long maxFreq = -1;\n        for(long i : lst) {\n\
    \            if(i>0) {\n                long freq = Collections.frequency(lst,\
    \ i);\n                if(freq>maxFreq) {\n                    max = i;\n    \
    \                maxFreq = freq;\n                }\n            }\n        }\n\
    \        return max;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu8euj6bs.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i) {\n                maxFreq = i;\n          \
    \      maxVal = i;\n            } else if (maxFreq == i) {\n                maxVal\
    \ = Math.max(maxVal, i);\n            }\n        }\n        return maxVal;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphtt0uct3.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxVal == -1 || maxVal < i) {\n                maxVal = i;\n\
    \                maxFreq = Collections.frequency(lst, i);\n            }\n   \
    \     }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk2tw71tp.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk3fy3f5c.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = -1;\n        long freq = 0;\n        for (Long i : lst) {\n  \
    \          freq += i;\n            if (freq > max) {\n                max = freq;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo8qvotf9.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n   \
    \         if (freq > i) {\n                max = i;\n                freq = i;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx9_0fv_g.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpttsp69t5.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxCount = 0;\n        for (long val : lst)\
    \ {\n            long count = Collections.frequency(lst, val);\n            if\
    \ (count > maxCount) {\n                maxCount = count;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1peymwd.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i) {\n                maxFreq = i;\n          \
    \      maxVal = i;\n            } else if (maxFreq == i) {\n                maxVal\
    \ = Math.max(maxVal, i);\n            }\n        }\n        return maxVal;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo4w0y3s6.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for(long i : lst) {\n    \
    \        freq++;\n            if(freq > i) {\n                max = i;\n     \
    \           freq = i;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyjsj_wam.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i) {\n                maxFreq = i;\n          \
    \      maxVal = i;\n            } else if (maxFreq == i) {\n                maxVal\
    \ = i;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8695mnao.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdiezs72t.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > maxVal) {\n                maxVal = val;\n        \
    \        maxFreq = lst.get(lst.indexOf(val));\n            } else if (val == maxVal\
    \ && val > maxFreq) {\n                maxFreq = val;\n            }\n       \
    \ }\n        return maxVal;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1g6gh1k.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = lst.get(0);\n        long maxFreq = lst.get(0);\n        for(long\
    \ i : lst) {\n            if(i == maxVal) {\n                maxFreq++;\n    \
    \        } else {\n                if(maxFreq >= i) {\n                    maxVal\
    \ = i;\n                    maxFreq = i;\n                }\n            }\n \
    \       }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9sh8go46.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgp0tqklm.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for(long i : lst) {\n    \
    \        freq++;\n            if(freq > i) {\n                max = i;\n     \
    \           freq = i;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_c6da6_.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxVal == -1 || maxFreq < i) {\n                maxVal =\
    \ i;\n                maxFreq = i;\n            } else if (maxFreq == i) {\n \
    \               maxFreq++;\n            }\n        }\n        return maxVal;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfhp9kgxr.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt_99whsb.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long i : lst)\
    \ {\n            if (maxFreq < i) {\n                maxFreq = i;\n          \
    \      maxVal = i;\n            } else if (maxFreq == i) {\n                maxVal\
    \ = Math.max(maxVal, i);\n            }\n        }\n        return maxVal;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphgqd8gbb.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4algar7h.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long max = 0;\n        long freq = 0;\n        for(long i : lst) {\n    \
    \        freq++;\n            if(freq > i) {\n                max = i;\n     \
    \           freq = i;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxvfl7u2.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1pahvxes.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq > maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = val;\n                }\n            }\n       \
    \ }\n        return maxVal;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwf2bxmx6.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1])\
    \ == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5,\
    \ 4, 4, 4]) == -1\n    public static long search(ArrayList<Long> lst) {\n    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmzj2w3kk.java:33)\n"
  exit_code: 1
  status: Exception
