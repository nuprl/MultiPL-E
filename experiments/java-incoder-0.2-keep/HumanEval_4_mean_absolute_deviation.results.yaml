name: HumanEval_4_mean_absolute_deviation
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzdafop3h.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpzdafop3h.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpzdafop3h.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).map(x\
    \ -> x - mean).sum();\n        return sumOfSquares / sumOfDifferences;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4j_5mjw_.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp4j_5mjw_.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp4j_5mjw_.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                             ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp4j_5mjw_.java:18: error: invalid\
    \ method reference\n        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                                         ^\n  non-static method\
    \ floatValue() cannot be referenced from a static context\n/tmp/tmp4j_5mjw_.java:19:\
    \ error: cannot find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).map(x\
    \ -> x - mean).sum();\n                                                 ^\n  symbol:\
    \   method mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n\
    /tmp/tmp4j_5mjw_.java:19: error: invalid method reference\n        float sumOfDifferences\
    \ = numbers.stream().mapToFloat(Float::floatValue).map(x -> x - mean).sum();\n\
    \                                                             ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (float number\
    \ : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n    \
    \    }\n        return sumOfSquares / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphuziwjy1.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf0da5n7p.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzsrrc119.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (Float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpprw1qhvg.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpprw1qhvg.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxejvnn6.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0.0f;\n        for (Float number : numbers)\
    \ {\n            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsr4tsxh9.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi9p9067k.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpi9p9067k.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpi9p9067k.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        float average = Math.abs(sumOfSquares / numbers.size());\n\
    \        return average;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp062a7szj.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp062a7szj.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp062a7szj.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptd2op8x0.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmptd2op8x0.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmptd2op8x0.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \        return sumOfDifferences / numbers.size() - mean;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp220_ze5_.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp220_ze5_.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp220_ze5_.java:18: error:\
    \ cannot find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                                 ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp220_ze5_.java:18: error: invalid\
    \ method reference\n        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                                             ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6k48g2im.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / (numbers.size() - 1);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppwq7occ2.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmppwq7occ2.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmppwq7occ2.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqkyvoh9w.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpqkyvoh9w.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp03hhrrgm.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp03hhrrgm.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0.0f;\n        for (Float number : numbers)\
    \ {\n            sum += Math.abs(number - mean);\n        }\n        return sum\
    \ / numbers.size();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6pwc21hh.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        for (Float number : numbers) {\n\
    \            mean += number;\n        }\n        mean /= numbers.size();\n   \
    \     float sum = 0;\n        for (Float number : numbers) {\n            sum\
    \ += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfm8fjcku.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmvsbfh4b.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpmvsbfh4b.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpmvsbfh4b.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79m8w6ex.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).map(x\
    \ -> x - mean).sum();\n        return sumOfSquares / sumOfDifferences;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7_nmfa_j.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp7_nmfa_j.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp7_nmfa_j.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                             ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp7_nmfa_j.java:18: error: invalid\
    \ method reference\n        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                                         ^\n  non-static method\
    \ floatValue() cannot be referenced from a static context\n/tmp/tmp7_nmfa_j.java:19:\
    \ error: cannot find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).map(x\
    \ -> x - mean).sum();\n                                                 ^\n  symbol:\
    \   method mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n\
    /tmp/tmp7_nmfa_j.java:19: error: invalid method reference\n        float sumOfDifferences\
    \ = numbers.stream().mapToFloat(Float::floatValue).map(x -> x - mean).sum();\n\
    \                                                             ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0.0f;\n        for (Float number : numbers)\
    \ {\n            sum += Math.abs(number);\n        }\n        float mean = sum\
    \ / numbers.size();\n        float sumOfSquare = 0.0f;\n        for (Float number\
    \ : numbers) {\n            sumOfSquare += Math.pow(number - mean, 2);\n     \
    \   }\n        return sumOfSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbsu2rxjz.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm3k9kqs7.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpm3k9kqs7.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpm3k9kqs7.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum();\n                                       \
    \      ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqyjsz0b5.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpqyjsz0b5.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpqyjsz0b5.java:18: error:\
    \ cannot find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x\
    \ - mean)).average().getAsFloat();\n                               ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]mean))\n  location: interface Stream<Float>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n        return sum / numbers.size();\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm_i9f7sq.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).sum() / numbers.size();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpm_i9f7sq.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n                                                 ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n/tmp/tmpm_i9f7sq.java:19:\
    \ error: cannot find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                        ^\n  symbol:   method\
    \ mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n/tmp/tmpm_i9f7sq.java:19:\
    \ error: invalid method reference\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                                    ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (Float number\
    \ : numbers) {\n            sumOfSquares += (number - mean) * (number - mean);\n\
    \        }\n        return Math.sqrt(sumOfSquares);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpormtbgck.java:27: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.sqrt(sumOfSquares);\n            \
    \            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc1es6uyz.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpc1es6uyz.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpc1es6uyz.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum();\n                                       \
    \      ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfm0kba9q.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpfm0kba9q.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpfm0kba9q.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n        for (float number : numbers) {\n            sum +=\
    \ Math.pow(number - mean, 2);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg8hk4b3f.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).sum() / numbers.size();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpg8hk4b3f.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n                                                 ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx4kfrzjj.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7oiqtjxa.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp7oiqtjxa.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiwvdvfx2.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        for (Float number : numbers) {\n\
    \            mean += number;\n        }\n        mean /= numbers.size();\n   \
    \     float sum = 0;\n        for (Float number : numbers) {\n            sum\
    \ += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmchccut8.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += (number - mean) * (number - mean);\n  \
    \      }\n        return deviation / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ft9s576.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / (numbers.size() - 1);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg4_34h0w.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpg4_34h0w.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpg4_34h0w.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum();\n                                       \
    \      ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsdexq7qz.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpsdexq7qz.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpsdexq7qz.java:18: error:\
    \ cannot find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x\
    \ - mean)).average().getAsFloat();\n                               ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]mean))\n  location: interface Stream<Float>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi2o7aqpa.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (float number\
    \ : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n    \
    \    }\n        return sumOfSquares / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg9hmwzx7.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        float variance = sumOfSquares / numbers.size();\n\
    \        return Math.sqrt(variance);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmo6w1qxj.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpmo6w1qxj.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpmo6w1qxj.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n/tmp/tmpmo6w1qxj.java:20: error: incompatible\
    \ types: possible lossy conversion from double to float\n        return Math.sqrt(variance);\n\
    \                        ^\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvw7yarpk.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp160njwyv.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp160njwyv.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp160njwyv.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (float number\
    \ : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n    \
    \    }\n        return Math.sqrt(sumOfSquares / numbers.size());\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpszdyxyc4.java:27: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.sqrt(sumOfSquares / numbers.size());\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(x -> x - mean).sum().getAsFloat();\n\
    \        return sumOfDifferences / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjm2tz1g7.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpjm2tz1g7.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpjm2tz1g7.java:18: error:\
    \ cannot find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(x\
    \ -> x - mean).sum().getAsFloat();\n                                         \
    \        ^\n  symbol:   method mapToFloat((x)->x - mean)\n  location: interface\
    \ Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).mapToDouble(x\
    \ -> x - mean).sum();\n        return sumOfDifferences / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpygg7a2d0.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpygg7a2d0.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpygg7a2d0.java:18: error:\
    \ cannot find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).mapToDouble(x\
    \ -> x - mean).sum();\n                                                 ^\n  symbol:\
    \   method mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n\
    /tmp/tmpygg7a2d0.java:18: error: invalid method reference\n        float sumOfDifferences\
    \ = numbers.stream().mapToFloat(Float::floatValue).mapToDouble(x -> x - mean).sum();\n\
    \                                                             ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \        float sumOfDiffs = numbers.stream().mapToFloat(x -> Math.abs(x - mean)).sum();\n\
    \        return sumOfDiffs / sumOfSquares;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0186phlc.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp0186phlc.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp0186phlc.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                             ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp0186phlc.java:18: error: invalid\
    \ method reference\n        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                                         ^\n  non-static method\
    \ floatValue() cannot be referenced from a static context\n/tmp/tmp0186phlc.java:19:\
    \ error: cannot find symbol\n        float sumOfDiffs = numbers.stream().mapToFloat(x\
    \ -> Math.abs(x - mean)).sum();\n                                           ^\n\
    \  symbol:   method mapToFloat((x)->Math.[...]mean))\n  location: interface Stream<Float>\n\
    5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9rjlb9do.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp9rjlb9do.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_gfbb7g2.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp_gfbb7g2.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp_gfbb7g2.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ud9k0ug.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp2ud9k0ug.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp2ud9k0ug.java:18: error:\
    \ cannot find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x\
    \ - mean)).average().getAsFloat();\n                               ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]mean))\n  location: interface Stream<Float>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzcd_9abg.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += (number - mean) * (number - mean);\n  \
    \      }\n        return deviation / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn6pxj59f.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoza8vldt.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvuzd629a.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpvuzd629a.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpvuzd629a.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).map(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n        return sumOfSquares\
    \ / numbers.size();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu7eanlrf.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpu7eanlrf.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpu7eanlrf.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).map(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat(Float::floatValue)\n  location:\
    \ interface Stream<Float>\n/tmp/tmpu7eanlrf.java:18: error: invalid method reference\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).map(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                               ^\n  non-static method floatValue() cannot be\
    \ referenced from a static context\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw983ai38.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpw983ai38.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpw983ai38.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        numbers.stream().mapToFloat(Float::floatValue).forEach(v -> sum += Math.abs(v\
    \ - mean));\n        return sum / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr_bty4kr.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpr_bty4kr.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpr_bty4kr.java:19: error:\
    \ cannot find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                        ^\n  symbol:   method\
    \ mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n/tmp/tmpr_bty4kr.java:19:\
    \ error: invalid method reference\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                                    ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmcgaqh3s.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpmcgaqh3s.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpmcgaqh3s.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum();\n                                       \
    \      ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppzpjkpz0.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmppzpjkpz0.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmppzpjkpz0.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / (numbers.size() - 1);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplvrr9ybf.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmplvrr9ybf.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmplvrr9ybf.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5obfrveo.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv70kllnl.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpv70kllnl.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu7d03ky8.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpu7d03ky8.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpu7d03ky8.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        numbers.stream().mapToFloat(Float::floatValue).forEach(v -> {\n     \
    \       float diff = v - mean;\n            sum += diff * diff;\n        });\n\
    \        return sum / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnvhauflu.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpnvhauflu.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpnvhauflu.java:19: error:\
    \ cannot find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> {\n                        ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpnvhauflu.java:19: error: invalid\
    \ method reference\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> {\n                                    ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuauv0quj.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpuauv0quj.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl28xjk7x.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        for (Float number : numbers) {\n\
    \            mean += number;\n        }\n        mean /= numbers.size();\n   \
    \     float sum = 0;\n        for (Float number : numbers) {\n            sum\
    \ += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (Float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjtxipx_n.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpjtxipx_n.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (Float number\
    \ : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n    \
    \    }\n        return sumOfSquares / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf4eguog5.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        numbers.stream().mapToFloat(Float::floatValue).forEachRemaining(x ->\
    \ {\n            sum += Math.abs(x - mean);\n        });\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkk67_a2i.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpkk67_a2i.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpkk67_a2i.java:19: error:\
    \ cannot find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEachRemaining(x\
    \ -> {\n                        ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpkk67_a2i.java:19: error: invalid\
    \ method reference\n        numbers.stream().mapToFloat(Float::floatValue).forEachRemaining(x\
    \ -> {\n                                    ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppnsakn8e.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmppnsakn8e.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo4yxgpmf.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpo4yxgpmf.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpo4yxgpmf.java:18: error:\
    \ cannot find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x\
    \ - mean)).average().getAsFloat();\n                               ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]mean))\n  location: interface Stream<Float>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiw06oqgi.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl9bbivp6.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpl9bbivp6.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpl9bbivp6.java:18: error:\
    \ cannot find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x\
    \ - mean)).average().getAsFloat();\n                               ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]mean))\n  location: interface Stream<Float>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += (number - mean) * (number - mean);\n  \
    \      }\n        return deviation / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb1ujdlgm.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (Float number\
    \ : numbers) {\n            sumOfSquares += (number - mean) * (number - mean);\n\
    \        }\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmsps3y5b.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps6owd6bb.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb1v23mx5.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n        return sum / numbers.size();\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptb_7ftue.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).sum() / numbers.size();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmptb_7ftue.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n                                                 ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n/tmp/tmptb_7ftue.java:19:\
    \ error: cannot find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                        ^\n  symbol:   method\
    \ mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n/tmp/tmptb_7ftue.java:19:\
    \ error: invalid method reference\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                                    ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgbapl6zy.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpgbapl6zy.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3x77sa9d.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp3x77sa9d.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp3x77sa9d.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7b4tbpsh.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp7b4tbpsh.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp7b4tbpsh.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow(x-mean, 2)).sum().getAsFloat();\n                              \
    \               ^\n  symbol:   method mapToFloat((x)->Math.[...]n, 2))\n  location:\
    \ interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        float mean = sum / numbers.size();\n\
    \        float sumOfSquares = 0;\n        for (Float number : numbers) {\n   \
    \         sumOfSquares += (number - mean) * (number - mean);\n        }\n    \
    \    return sumOfSquares / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpixc625jx.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxy4p5ybi.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl2p48ghz.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbfp4j_9v.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (Float number\
    \ : numbers) {\n            sumOfSquares += (number - mean) * (number - mean);\n\
    \        }\n        return sumOfSquares / (numbers.size() - 1);\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpajgnrsy1.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (float number\
    \ : numbers) {\n            sumOfSquares += (number - mean) * (number - mean);\n\
    \        }\n        return Math.sqrt(sumOfSquares);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq74uekqd.java:27: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.sqrt(sumOfSquares);\n            \
    \            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg6ja8840.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0bk6n3ld.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr01ff1ey.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpr01ff1ey.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpr01ff1ey.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum();\n                                       \
    \      ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdpo6heui.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpdpo6heui.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpdpo6heui.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj3n22y35.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpj3n22y35.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgww1gbx0.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwy8_dzmd.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpwy8_dzmd.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpwy8_dzmd.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += Math.pow(number - mean, 2);\n        }\n\
    \        return sumSquare / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjbo6608e.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1bnlu2at.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbqpjlbj3.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpbqpjlbj3.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpbqpjlbj3.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow(x-mean, 2)).sum().getAsFloat();\n                              \
    \               ^\n  symbol:   method mapToFloat((x)->Math.[...]n, 2))\n  location:\
    \ interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz6y7kw66.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpz6y7kw66.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpz6y7kw66.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum();\n                                       \
    \      ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ymbs_tm.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp0ymbs_tm.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp0ymbs_tm.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (float number : numbers) {\n            sum += Math.pow(number -\
    \ mean, 2);\n        }\n        return sum / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpexasq_nz.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpexasq_nz.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjc08jpzu.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpjc08jpzu.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpjc08jpzu.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum();\n                                       \
    \      ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph_xiy5zt.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmph_xiy5zt.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmph_xiy5zt.java:18: error:\
    \ cannot find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x\
    \ - mean)).average().getAsFloat();\n                               ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]mean))\n  location: interface Stream<Float>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnbocgwis.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpnbocgwis.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpnbocgwis.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprm8zbey5.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmprm8zbey5.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmprm8zbey5.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum();\n                                       \
    \      ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5xz5mm8_.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp5xz5mm8_.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp5xz5mm8_.java:18: error:\
    \ cannot find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x\
    \ - mean)).average().getAsFloat();\n                               ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]mean))\n  location: interface Stream<Float>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjeucswxu.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm2mt67gc.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpm2mt67gc.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (Float number\
    \ : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n    \
    \    }\n        return sumOfSquares / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpera9di65.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / (numbers.size() - 1);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl44h1i0d.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpl44h1i0d.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpl44h1i0d.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbu7z_eba.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpbu7z_eba.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8hnih4g4.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9i0sl6lu.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp9i0sl6lu.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp9i0sl6lu.java:18: error:\
    \ cannot find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x\
    \ - mean)).average().getAsFloat();\n                               ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]mean))\n  location: interface Stream<Float>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg1_opy68.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpg1_opy68.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += (number - mean) * (number - mean);\n  \
    \      }\n        return deviation / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp22ixxjf7.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::valueOf).average().getAsFloat();\n\
    \        numbers.stream().mapToFloat(Float::valueOf).forEachRemaining(x -> {\n\
    \            sum += Math.abs(x - mean);\n        });\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe7tst9xn.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::valueOf).average().getAsFloat();\n    \
    \                                 ^\n  symbol:   method mapToFloat(Float::valueOf)\n\
    \  location: interface Stream<Float>\n/tmp/tmpe7tst9xn.java:19: error: cannot\
    \ find symbol\n        numbers.stream().mapToFloat(Float::valueOf).forEachRemaining(x\
    \ -> {\n                        ^\n  symbol:   method mapToFloat(Float::valueOf)\n\
    \  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        numbers.stream().mapToFloat(Float::floatValue).forEach(v -> sum += Math.abs(v\
    \ - mean));\n        return sum / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy_mz54ou.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpy_mz54ou.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpy_mz54ou.java:19: error:\
    \ cannot find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                        ^\n  symbol:   method\
    \ mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n/tmp/tmpy_mz54ou.java:19:\
    \ error: invalid method reference\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                                    ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpftdy87gx.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpftdy87gx.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpftdy87gx.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfnf67oyz.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpfnf67oyz.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpfnf67oyz.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow(x-mean, 2)).sum().getAsFloat();\n                              \
    \               ^\n  symbol:   method mapToFloat((x)->Math.[...]n, 2))\n  location:\
    \ interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(x -> x - mean).sum();\n\
    \        return sumOfDifferences / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu4sl45g9.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpu4sl45g9.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpu4sl45g9.java:18: error:\
    \ cannot find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(x\
    \ -> x - mean).sum();\n                                                 ^\n  symbol:\
    \   method mapToFloat((x)->x - mean)\n  location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(x -> Math.abs(x\
    \ - mean)).sum();\n        return sumOfDifferences / sumOfSquares;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt__mn04b.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpt__mn04b.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpt__mn04b.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                             ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpt__mn04b.java:18: error: invalid\
    \ method reference\n        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                                         ^\n  non-static method\
    \ floatValue() cannot be referenced from a static context\n/tmp/tmpt__mn04b.java:19:\
    \ error: cannot find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(x\
    \ -> Math.abs(x - mean)).sum();\n                                            \
    \     ^\n  symbol:   method mapToFloat((x)->Math.[...]mean))\n  location: interface\
    \ Stream<Float>\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return Math.sqrt(sumSquare / numbers.size());\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppxp8f7z6.java:27: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.sqrt(sumSquare / numbers.size());\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoo35a737.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / (numbers.size() - 1);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn7tbj906.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpn7tbj906.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpn7tbj906.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8nqyd44p.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp8nqyd44p.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp8nqyd44p.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow(x-mean, 2)).sum().getAsFloat();\n                              \
    \               ^\n  symbol:   method mapToFloat((x)->Math.[...]n, 2))\n  location:\
    \ interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl0m5b42s.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpl0m5b42s.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpejgzmook.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpejgzmook.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7utfm4j4.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp7utfm4j4.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp7utfm4j4.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n        for (Float number : numbers) {\n            sum +=\
    \ Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr4zj5u8q.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).sum() / numbers.size();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpr4zj5u8q.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n                                                 ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7anru4d1.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp7anru4d1.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe0ze3jr6.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += (number - mean) * (number - mean);\n  \
    \      }\n        return Math.sqrt(deviation / numbers.size());\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7wyvxjsn.java:27: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.sqrt(deviation / numbers.size());\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo4pi0u17.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        for (float number : numbers) {\n\
    \            mean += number;\n        }\n        mean /= numbers.size();\n   \
    \     float sum = 0;\n        for (float number : numbers) {\n            sum\
    \ += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        for (float number : numbers) {\n\
    \            mean += number;\n        }\n        mean /= numbers.size();\n   \
    \     float sum = 0;\n        for (float number : numbers) {\n            sum\
    \ += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkh_a_2iv.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcgsvbo4i.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphs_dgitq.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmphs_dgitq.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmphs_dgitq.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0u0d5izp.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp0u0d5izp.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp0u0d5izp.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow(x-mean, 2)).sum().getAsFloat();\n                              \
    \               ^\n  symbol:   method mapToFloat((x)->Math.[...]n, 2))\n  location:\
    \ interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp3coy0dd.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpp3coy0dd.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpp3coy0dd.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppvos64mx.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmppvos64mx.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph742noag.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmph742noag.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbeinshv0.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpbeinshv0.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpbeinshv0.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ih9v7qo.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp2ih9v7qo.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfs9fwv_9.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj8jwlvqr.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpj8jwlvqr.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        numbers.stream().mapToFloat(Float::floatValue).forEach(v -> sum += Math.abs(v\
    \ - mean));\n        return sum / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxb5pwbxz.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpxb5pwbxz.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpxb5pwbxz.java:19: error:\
    \ cannot find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                        ^\n  symbol:   method\
    \ mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n/tmp/tmpxb5pwbxz.java:19:\
    \ error: invalid method reference\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                                    ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0.0f;\n        for (float number : numbers)\
    \ {\n            sum += Math.abs(number - mean);\n        }\n        return sum\
    \ / numbers.size();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv8ytzgbu.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuz5dy50d.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0.0;\n        float sum = 0.0;\n        for\
    \ (float number : numbers) {\n            sum += number;\n        }\n        mean\
    \ = sum / numbers.size();\n        float deviation = 0.0;\n        for (float\
    \ number : numbers) {\n            deviation += (number - mean) * (number - mean);\n\
    \        }\n        return deviation / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmvkf2f07.java:17: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float mean = 0.0;\n                     ^\n/tmp/tmpmvkf2f07.java:18:\
    \ error: incompatible types: possible lossy conversion from double to float\n\
    \        float sum = 0.0;\n                    ^\n/tmp/tmpmvkf2f07.java:23: error:\
    \ incompatible types: possible lossy conversion from double to float\n       \
    \ float deviation = 0.0;\n                          ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpga87tmoi.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2iwjz4ya.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp33n9hxpn.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        for (float number : numbers) {\n\
    \            mean += number;\n        }\n        mean /= numbers.size();\n   \
    \     float sum = 0;\n        for (float number : numbers) {\n            sum\
    \ += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddaz4oum.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += Math.pow(number - mean, 2);\n        }\n\
    \        return sumSquare / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp45nt11ou.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpysshvqzj.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpysshvqzj.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpysshvqzj.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplvf_w2kt.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ho4y3yw.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp2ho4y3yw.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp2ho4y3yw.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / (numbers.size() - 1);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2iaioja2.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp2iaioja2.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp2iaioja2.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf_4o1bxc.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpf_4o1bxc.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpf_4o1bxc.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum();\n                                       \
    \      ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (Float number\
    \ : numbers) {\n            sumOfSquares += (number - mean) * (number - mean);\n\
    \        }\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppaixctrv.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(x -> x - mean).sum().getAsFloat();\n\
    \        return sumOfDifferences / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuzs8ssda.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpuzs8ssda.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpuzs8ssda.java:18: error:\
    \ cannot find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(x\
    \ -> x - mean).sum().getAsFloat();\n                                         \
    \        ^\n  symbol:   method mapToFloat((x)->x - mean)\n  location: interface\
    \ Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpquca5nqw.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4pq88igv.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp4pq88igv.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp4pq88igv.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps7qysvly.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmps7qysvly.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwc1vqb3z.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgqp7xp44.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpgqp7xp44.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpgqp7xp44.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3qca_adw.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp3qca_adw.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp3qca_adw.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp83fw07ns.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (Float number\
    \ : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n    \
    \    }\n        return sumOfSquares / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxu172oww.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5_bfsfvd.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgwr4grmg.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpgwr4grmg.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += (number - mean) * (number - mean);\n  \
    \      }\n        return deviation / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprfnosz__.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        float variance = sumOfSquares / (numbers.size()\
    \ - 1);\n        return Math.sqrt(variance);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp43n_179w.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp43n_179w.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp43n_179w.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n/tmp/tmp43n_179w.java:20: error: incompatible\
    \ types: possible lossy conversion from double to float\n        return Math.sqrt(variance);\n\
    \                        ^\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmperb6prpj.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n        return sum / numbers.size();\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnhxq7s78.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).sum() / numbers.size();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpnhxq7s78.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n                                                 ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n/tmp/tmpnhxq7s78.java:19:\
    \ error: cannot find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                        ^\n  symbol:   method\
    \ mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n/tmp/tmpnhxq7s78.java:19:\
    \ error: invalid method reference\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                                    ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppcmqsyj2.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmppcmqsyj2.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmppcmqsyj2.java:18: error:\
    \ cannot find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n \
    \ location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (float number\
    \ : numbers) {\n            sumOfSquares += (number - mean) * (number - mean);\n\
    \        }\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdm5vfsjk.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ckmmygn.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(x -> Math.abs(x\
    \ - mean)).sum();\n        return sumOfDifferences / numbers.size();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3911etfc.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp3911etfc.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp3911etfc.java:18: error:\
    \ cannot find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(x\
    \ -> Math.abs(x - mean)).sum();\n                                            \
    \     ^\n  symbol:   method mapToFloat((x)->Math.[...]mean))\n  location: interface\
    \ Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2j03grl3.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplhdq7ipn.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        numbers.stream().mapToFloat(Float::floatValue).forEach(v -> sum += Math.abs(v\
    \ - mean));\n        return sum / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8qcz30fb.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp8qcz30fb.java:18: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmp8qcz30fb.java:19: error:\
    \ cannot find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                        ^\n  symbol:   method\
    \ mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n/tmp/tmp8qcz30fb.java:19:\
    \ error: invalid method reference\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                                    ^\n  non-static\
    \ method floatValue() cannot be referenced from a static context\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0.0f;\n        for (Float number : numbers)\
    \ {\n            sum += Math.abs(number - mean);\n        }\n        return sum\
    \ / numbers.size();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptqevw8xr.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi82v2ee0.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpi82v2ee0.java:17: error: invalid\
    \ method reference\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \                                                 ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpi82v2ee0.java:18: error:\
    \ cannot find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x\
    \ - mean)).average().getAsFloat();\n                               ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]mean))\n  location: interface Stream<Float>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
