name: HumanEval_70_strange_sort_list
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(Long\
    \ i : lst) {\n            result.add(i);\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprquzwi8l.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n            mid = (mid +\
    \ temp) / 2;\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv4mxrlbg.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpv4mxrlbg.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(lst.size() - 1);\n        long mid = min + ((max - min) / 2);\n  \
    \      long temp;\n        boolean swapped;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            swapped = false;\n            temp = lst.get(i);\n     \
    \       for (int j = i; j < lst.size(); j++) {\n                if (lst.get(j)\
    \ < mid) {\n                    result.add(temp);\n                    swapped\
    \ = true;\n                    break;\n                }\n                temp\
    \ = lst.get(j);\n            }\n            if (swapped == false) {\n        \
    \        result.add(temp);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv7v_x081.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy2w5hqz9.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpy2w5hqz9.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7evo0_su.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp7evo0_su.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp7evo0_su.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp7evo0_su.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp7evo0_su.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp7evo0_su.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp7evo0_su.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i));\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpebsbsikf.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n     \
    \   long mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid\
    \ / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n       \
    \ long mid11 = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 =\
    \ mid / 13;\n        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n\
    \        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long\
    \ mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid\
    \ / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid / 22;\n    \
    \    long mid23 = mid / 23;\n        long mid24 = mid / 24;\n        long mid25\
    \ = mid / 25;\n        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n\
    \        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long\
    \ mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid\
    \ / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid / 34;\n    \
    \    long mid35 = mid / 35;\n        long mid36 = mid / 36;\n        long mid37\
    \ = mid / 37;\n        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n\
    \        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long\
    \ mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid\
    \ / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid / 46;\n    \
    \    long mid47 = mid / 47;\n        long mid48 = mid / 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpce0hmh03.java:68: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long mid = min + (max - min) / 2;\n        long mid2 = min + (max - min) /\
    \ 2;\n        long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max\
    \ - min) / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 =\
    \ min + (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n       \
    \ long mid8 = min + (max - min) / 2;\n        long mid9 = min + (max - min) /\
    \ 2;\n        long mid10 = min + (max - min) / 2;\n        long mid11 = min +\
    \ (max - min) / 2;\n        long mid12 = min + (max - min) / 2;\n        long\
    \ mid13 = min + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n\
    \        long mid15 = min + (max - min) / 2;\n        long mid16 = min + (max\
    \ - min) / 2;\n        long mid17 = min + (max - min) / 2;\n        long mid18\
    \ = min + (max - min) / 2;\n        long mid19 = min + (max - min) / 2;\n    \
    \    long mid20 = min + (max - min) / 2;\n        long mid21 = min + (max - min)\
    \ / 2;\n        long mid22 = min + (max - min) / 2;\n        long mid23 = min\
    \ + (max - min) / 2;\n        long mid24 = min + (max - min) / 2;\n        long\
    \ mid25 = min + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n\
    \        long mid27 = min + (max - min) / 2;\n        long mid28 = min + (max\
    \ - min) / 2;\n        long mid29 = min + (max - min) / 2;\n        long mid30\
    \ = min + (max - min) / 2;\n        long mid31 = min + (max - min) / 2;\n    \
    \    long mid32 = min + (max - min) / 2;\n        long mid33 = min + (max - min)\
    \ / 2;\n        long mid34 = min + (max - min) / 2;\n        long mid35 = min\
    \ + (max - min) / 2;\n        long mid36 = min + (max - min) / 2;\n        long\
    \ mid37 = min + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n\
    \        long mid39 = min + (max - min) / 2;\n        long mid40 = min + (max\
    \ - min) / 2;\n        \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsoz_l12i.java:61: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = mid + (max - min) / 2;\n        long mid3\
    \ = mid2 + (max - min) / 2;\n        long mid4 = mid3 + (max - min) / 2;\n   \
    \     long mid5 = mid4 + (max - min) / 2;\n        long mid6 = mid5 + (max - min)\
    \ / 2;\n        long mid7 = mid6 + (max - min) / 2;\n        long mid8 = mid7\
    \ + (max - min) / 2;\n        long mid9 = mid8 + (max - min) / 2;\n        long\
    \ mid10 = mid9 + (max - min) / 2;\n        long mid11 = mid10 + (max - min) /\
    \ 2;\n        long mid12 = mid11 + (max - min) / 2;\n        long mid13 = mid12\
    \ + (max - min) / 2;\n        long mid14 = mid13 + (max - min) / 2;\n        long\
    \ mid15 = mid14 + (max - min) / 2;\n        long mid16 = mid15 + (max - min) /\
    \ 2;\n        long mid17 = mid16 + (max - min) / 2;\n        long mid18 = mid17\
    \ + (max - min) / 2;\n        long mid19 = mid18 + (max - min) / 2;\n        long\
    \ mid20 = mid19 + (max - min) / 2;\n        long mid21 = mid20 + (max - min) /\
    \ 2;\n        long mid22 = mid21 + (max - min) / 2;\n        long mid23 = mid22\
    \ + (max - min) / 2;\n        long mid24 = mid23 + (max - min) / 2;\n        long\
    \ mid25 = mid24 + (max - min) / 2;\n        long mid26 = mid25 + (max - min) /\
    \ 2;\n        long mid27 = mid26 + (max - min) / 2;\n        long mid28 = mid27\
    \ + (max - min) / 2;\n        long mid29 = mid28 + (max - min) / 2;\n        long\
    \ mid30 = mid29 + (max - min) / 2;\n        long mid31 = mid30 + (max - min) /\
    \ 2;\n        long mid32 = mid31 + (max - min) / 2;\n        long mid33 = mid32\
    \ + (max - min) / 2;\n        long mid34 = mid33 + (max - min) / 2;\n        long\
    \ mid35 = mid34 + (max - min) / 2;\n        long mid36 = mid35 + (max - min) /\
    \ 2;\n        long mid37 = mid36 + (max - min) / 2;\n        long mid38 = mid37\
    \ + (max - min\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvqsb1baz.java:57: error: ')' expected\n        long mid38 = mid37\
    \ + (max - min\n                                       ^\n/tmp/tmpvqsb1baz.java:59:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpvqsb1baz.java:59: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpvqsb1baz.java:59: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpvqsb1baz.java:59: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpvqsb1baz.java:59:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpvqsb1baz.java:71: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long middle = min + ((max\
    \ - min) / 2);\n        long min2 = middle - 1;\n        long max2 = middle +\
    \ 1;\n        long middle2 = middle + 1;\n        long middle3 = middle + 2;\n\
    \        long middle4 = middle + 3;\n        long middle5 = middle + 4;\n    \
    \    long middle6 = middle + 5;\n        long middle7 = middle + 6;\n        long\
    \ middle8 = middle + 7;\n        long middle9 = middle + 8;\n        long middle10\
    \ = middle + 9;\n        long middle11 = middle + 10;\n        long middle12 =\
    \ middle + 11;\n        long middle13 = middle + 12;\n        long middle14 =\
    \ middle + 13;\n        long middle15 = middle + 14;\n        long middle16 =\
    \ middle + 15;\n        long middle17 = middle + 16;\n        long middle18 =\
    \ middle + 17;\n        long middle19 = middle + 18;\n        long middle20 =\
    \ middle + 19;\n        long middle21 = middle + 20;\n        long middle22 =\
    \ middle + 21;\n        long middle23 = middle + 22;\n        long middle24 =\
    \ middle + 23;\n        long middle25 = middle + 24;\n        long middle26 =\
    \ middle + 25;\n        long middle27 = middle + 26;\n        long middle28 =\
    \ middle + 27;\n        long middle29 = middle + 28;\n        long middle30 =\
    \ middle + 29;\n        long middle31 = middle + 30;\n        long middle32 =\
    \ middle + 31;\n        long middle33 = middle + 32;\n        long middle34 =\
    \ middle + 33;\n        long middle35 = middle + 34;\n        long middle36 =\
    \ middle + 35;\n        long middle37 = middle + 36;\n        long middle38 =\
    \ middle + 37;\n        long middle39 = middle + 38;\n        long middle40 =\
    \ middle + 39;\n        long middle41 = middle + 40;\n        long middle42 =\
    \ middle + 41;\n        long middle43 = middle + 42;\n        long middle44 =\
    \ middle + 43;\n        long middle45 = middle + 44;\n        long middle46 =\
    \ middle + 45;\n        long middle47 = middle + 46;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpszpk9gys.java:78: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n       \
    \ long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min) /\
    \ 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max\
    \ - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 =\
    \ min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n       \
    \ long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = min + (\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptf4v_7k_.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmptf4v_7k_.java:61: error: ';' expected\n    }\n     ^\n/tmp/tmptf4v_7k_.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmptf4v_7k_.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmptf4v_7k_.java:62: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmptf4v_7k_.java:62: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmptf4v_7k_.java:74: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long min = lst.stream().min(Comparator.naturalOrder()).get();\n        long\
    \ max = lst.stream().max(Comparator.naturalOrder()).get();\n        long min =\
    \ lst.stream().min(Comparator.naturalOrder()).get();\n        long max = lst.stream().max(Comparator.naturalOrder()).get();\n\
    \        long min = lst.stream().min(Comparator.naturalOrder()).get();\n     \
    \   long max = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min = lst.stream().min(Comparator.naturalOrder()).get();\n        long max =\
    \ lst.stream().max(Comparator.naturalOrder()).get();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long min = lst.stream().min(Comparator.naturalOrder()).get();\n        long\
    \ max = lst.stream().max(Comparator.naturalOrder()).get();\n        long min =\
    \ lst.stream().min(Comparator.naturalOrder()).get();\n        long max = lst.stream().max(Comparator.naturalOrder()).get();\n\
    \        long min = lst.stream().min(Comparator.naturalOrder()).get();\n     \
    \   long max = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min = lst.stream().min(Comparator.naturalOrder()).get();\n        long max =\
    \ lst.stream().max(Comparator.naturalOrder()).get();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long min = lst.stream().min(Comparator.naturalOrder()).get();\n        long\
    \ max = lst.stream().max(Comparator.naturalOrder()).get();\n        long min =\
    \ lst.stream().min(Comparator.naturalOrder()).get();\n        long max = lst.stream().max(Comparator.naturalOrder()).get();\n\
    \        long min = lst.stream().min(Comparator.naturalOrder()).get();\n     \
    \   long max = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min = lst.stream().min(Comparator.naturalOrder()).get();\n        long max =\
    \ lst.stream().max(Comparator.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxk1p9jtu.java:47: error: <identifier> expected\n        long max\
    \ = lst.stream().max(Comparator.\n                                           \
    \    ^\n/tmp/tmpxk1p9jtu.java:48: error: ';' expected\n    }\n     ^\n/tmp/tmpxk1p9jtu.java:49:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpxk1p9jtu.java:49: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpxk1p9jtu.java:49: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpxk1p9jtu.java:49: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpxk1p9jtu.java:61: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx8s9vw6j.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpx8s9vw6j.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpx8s9vw6j.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpx8s9vw6j.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpx8s9vw6j.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpx8s9vw6j.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpx8s9vw6j.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps6fahyld.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmps6fahyld.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmps6fahyld.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmps6fahyld.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmps6fahyld.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmps6fahyld.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmps6fahyld.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min +\
    \ (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long mid5\
    \ = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n     \
    \   long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max - min)\
    \ / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 = min +\
    \ (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n        long\
    \ mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min) / 2;\n\
    \        long mid14 = min + (max - min) / 2;\n        long mid15 = min + (max\
    \ - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long mid17\
    \ = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n    \
    \    long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max - min)\
    \ / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22 = min\
    \ + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n        long\
    \ mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min) / 2;\n\
    \        long mid26 = min + (max - min) / 2;\n        long mid27 = min + (max\
    \ - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long mid29\
    \ = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n    \
    \    long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max - min)\
    \ / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34 = min\
    \ + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n        long\
    \ mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min) / 2;\n\
    \        long mid38 = min + (max - min) / 2;\n        long mid39 = min + (max\
    \ - min) / 2;\n        long \n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeso8v0nr.java:67: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpeso8v0nr.java:67: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            } else if (i > max) {\n                max\
    \ = i;\n            }\n        }\n        long mid = min + (max - min) / 2;\n\
    \        for (long i : lst) {\n            if (i < mid) {\n                result.add(i);\n\
    \            } else if (i > mid) {\n                result.add(max - i);\n   \
    \         } else {\n                result.add(min - i);\n            }\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpydoftog0.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(Long\
    \ i : lst) {\n            result.add(i);\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpevah4qmo.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpobdt4285.java:68: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (Long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid / 3;\n        long\
    \ mid4 = mid / 4;\n        long mid5 = mid / 5;\n        long mid6 = mid / 6;\n\
    \        long mid7 = mid / 7;\n        long mid8 = mid / 8;\n        long mid9\
    \ = mid / 9;\n        long mid10 = mid / 10;\n        long mid11 = mid / 11;\n\
    \        long mid12 = mid / 12;\n        long mid13 = mid / 13;\n        long\
    \ mid14 = mid / 14;\n        long mid15 = mid / 15;\n        long mid16 = mid\
    \ / 16;\n        long mid17 = mid / 17;\n        long mid18 = mid / 18;\n    \
    \    long mid19 = mid / 19;\n        long mid20 = mid / 20;\n        long mid21\
    \ = mid / 21;\n        long mid22 = mid / 22;\n        long mid23 = mid / 23;\n\
    \        long mid24 = mid / 24;\n        long mid25 = mid / 25;\n        long\
    \ mid26 = mid / 26;\n        long mid27 = mid / 27;\n        long mid28 = mid\
    \ / 28;\n        long mid29 = mid / 29;\n        long mid30 = mid / 30;\n    \
    \    long mid31 = mid / 31;\n        long mid32 = mid / 32;\n        long mid33\
    \ = mid / 33;\n        long mid34 = mid / 34;\n        long mid35 = mid / 35;\n\
    \        long mid36 = mid / 36;\n        long mid37 = mid / 37;\n        long\
    \ mid38 = mid / 38;\n        long mid39 = mid / 39;\n        long mid40 = mid\
    \ / 40;\n        long mid41 = mid / 41;\n        long mid42 = mid / 42;\n    \
    \    long mid43 = mid / 43;\n        long mid44 = mid / 44;\n        long mid45\
    \ = mid / 45;\n        long mid46 = mid / 46;\n        long mid47 = mid / 4\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy0wg255b.java:74: error: ';' expected\n        long mid47 = mid\
    \ / 4\n                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa30wes0m.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpa30wes0m.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpa30wes0m.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpa30wes0m.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpa30wes0m.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpa30wes0m.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpa30wes0m.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        long temp;\n        for (long i : lst) {\n            if (i <\
    \ mid) {\n                temp = i;\n            } else {\n                temp\
    \ = mid;\n            }\n            result.add(temp);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpznzao7h8.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n            mid = (mid +\
    \ temp) / 2;\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpggkyyag8.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpggkyyag8.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else {\n      \
    \          temp = mid;\n            }\n            result.add(temp);\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxdbl7jdg.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpxdbl7jdg.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Long minValue = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minIndex = lst.indexOf(minValue);\n        Long maxIndex = lst.indexOf(maxValue);\n\
    \        Long minIndex2 = lst.indexOf(minValue, minIndex + 1);\n        Long maxIndex2\
    \ = lst.indexOf(maxValue, maxIndex + 1);\n        Long minIndex3 = lst.indexOf(minValue,\
    \ minIndex + 2);\n        Long maxIndex3 = lst.indexOf(maxValue, maxIndex + 2);\n\
    \        Long minIndex4 = lst.indexOf(minValue, minIndex + 3);\n        Long maxIndex4\
    \ = lst.indexOf(maxValue, maxIndex + 3);\n        Long minIndex5 = lst.indexOf(minValue,\
    \ minIndex + 4);\n        Long maxIndex5 = lst.indexOf(maxValue, maxIndex + 4);\n\
    \        Long minIndex6 = lst.indexOf(minValue, minIndex + 5);\n        Long maxIndex6\
    \ = lst.indexOf(maxValue, maxIndex + 5);\n        Long minIndex7 = lst.indexOf(minValue,\
    \ minIndex + 6);\n        Long maxIndex7 = lst.indexOf(maxValue, maxIndex + 6);\n\
    \        Long minIndex8 = lst.indexOf(minValue, minIndex + 7);\n        Long maxIndex8\
    \ = lst.indexOf(maxValue, maxIndex + 7);\n        Long minIndex9 = lst.indexOf(minValue,\
    \ minIndex + 8);\n        Long maxIndex9 = lst.indexOf(maxValue, maxIndex + 8);\n\
    \        Long minIndex10 = lst.indexOf(minValue, minIndex + 9);\n        Long\
    \ maxIndex10 = lst.indexOf(maxValue, maxIndex + 9);\n        Long minIndex11 =\
    \ lst.indexOf(minValue, minIndex + 10);\n        Long maxIndex11 = lst.indexOf(maxValue,\
    \ maxIndex + 10);\n        Long minIndex12 = lst.indexOf(minValue, minIndex +\
    \ 11);\n        Long maxIndex12 = lst.indexOf(maxValue, maxIndex + 11);\n    \
    \    Long minIndex13 = lst.indexOf(minValue, minIndex + 12);\n        Long maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12);\n        Long minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13);\n        Long maxIndex14 = lst.indexOf(maxValue, maxIndex +\
    \ 13);\n        Long minIndex15 = lst.indexOf(minValue, minIndex + 14);\n    \
    \    Long maxIndex15 = lst.indexOf(maxValue, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp03mvmf2v.java:50: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp03mvmf2v.java:50: error: ';' expected\n    }\n     ^\n/tmp/tmp03mvmf2v.java:51:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp03mvmf2v.java:51: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp03mvmf2v.java:51: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp03mvmf2v.java:51: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp03mvmf2v.java:63: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        Long mid2 = min + (max - min) / 2;\n     \
    \   Long mid3 = min + (max - min) / 2;\n        Long mid4 = min + (max - min)\
    \ / 2;\n        Long mid5 = min + (max - min) / 2;\n        Long mid6 = min +\
    \ (max - min) / 2;\n        Long mid7 = min + (max - min) / 2;\n        Long mid8\
    \ = min + (max - min) / 2;\n        Long mid9 = min + (max - min) / 2;\n     \
    \   Long mid10 = min + (max - min) / 2;\n        Long mid11 = min + (max - min)\
    \ / 2;\n        Long mid12 = min + (max - min) / 2;\n        Long mid13 = min\
    \ + (max - min) / 2;\n        Long mid14 = min + (max - min) / 2;\n        Long\
    \ mid15 = min + (max - min) / 2;\n        Long mid16 = min + (max - min) / 2;\n\
    \        Long mid17 = min + (max - min) / 2;\n        Long mid18 = min + (max\
    \ - min) / 2;\n        Long mid19 = min + (max - min) / 2;\n        Long mid20\
    \ = min + (max - min) / 2;\n        Long mid21 = min + (max - min) / 2;\n    \
    \    Long mid22 = min + (max - min) / 2;\n        Long mid23 = min + (max - min)\
    \ / 2;\n        Long mid24 = min + (max - min) / 2;\n        Long mid25 = min\
    \ + (max - min) / 2;\n        Long mid26 = min + (max - min) / 2;\n        Long\
    \ mid27 = min + (max - min) / 2;\n        Long mid28 = min + (max - min) / 2;\n\
    \        Long mid29 = min + (max - min) / 2;\n        Long mid30 = min + (max\
    \ - min) / 2;\n        Long mid31 = min + (max - min) / 2;\n        Long mid32\
    \ = min + (max - min) / 2;\n        Long mid33 = min + (max - min) / 2;\n    \
    \    Long mid34 = min + (max - min) / 2;\n        Long mid35 = min + (max - min)\
    \ / 2;\n        Long mid36 = min + (max - min) / 2;\n        Long mid37 = min\
    \ + (max - min) / 2;\n        Long\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaz0whedg.java:57: error: not a statement\n        Long\n      \
    \  ^\n/tmp/tmpaz0whedg.java:57: error: ';' expected\n        Long\n          \
    \  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid / 3;\n        long\
    \ mid4 = mid / 4;\n        long mid5 = mid / 5;\n        long mid6 = mid / 6;\n\
    \        long mid7 = mid / 7;\n        long mid8 = mid / 8;\n        long mid9\
    \ = mid / 9;\n        long mid10 = mid / 10;\n        long mid11 = mid / 11;\n\
    \        long mid12 = mid / 12;\n        long mid13 = mid / 13;\n        long\
    \ mid14 = mid / 14;\n        long mid15 = mid / 15;\n        long mid16 = mid\
    \ / 16;\n        long mid17 = mid / 17;\n        long mid18 = mid / 18;\n    \
    \    long mid19 = mid / 19;\n        long mid20 = mid / 20;\n        long mid21\
    \ = mid / 21;\n        long mid22 = mid / 22;\n        long mid23 = mid / 23;\n\
    \        long mid24 = mid / 24;\n        long mid25 = mid / 25;\n        long\
    \ mid26 = mid / 26;\n        long mid27 = mid / 27;\n        long mid28 = mid\
    \ / 28;\n        long mid29 = mid / 29;\n        long mid30 = mid / 30;\n    \
    \    long mid31 = mid / 31;\n        long mid32 = mid / 32;\n        long mid33\
    \ = mid / 33;\n        long mid34 = mid / 34;\n        long mid35 = mid / 35;\n\
    \        long mid36 = mid / 36;\n        long mid37 = mid / 37;\n        long\
    \ mid38 = mid / 38;\n        long mid39 = mid / 39;\n        long mid40 = mid\
    \ / 40;\n        long mid41 = mid / 41;\n        long mid42 = mid / 42;\n    \
    \    long mid43 = mid / 43;\n        long mid44 = mid / 44;\n        long mid45\
    \ = mid / 45;\n        long mid46 = mid / 46;\n        long mid47 = mid / 47;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa6ecipti.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compare).get();\n\
    \        Long max = lst.stream().max(Long::compare).get();\n        Long mid =\
    \ min + (max - min) / 2;\n        Long mid2 = min + (max - min) / 2;\n       \
    \ Long mid3 = min + (max - min) / 2;\n        Long mid4 = min + (max - min) /\
    \ 2;\n        Long mid5 = min + (max - min) / 2;\n        Long mid6 = min + (max\
    \ - min) / 2;\n        Long mid7 = min + (max - min) / 2;\n        Long mid8 =\
    \ min + (max - min) / 2;\n        Long mid9 = min + (max - min) / 2;\n       \
    \ Long mid10 = min + (max - min) / 2;\n        Long mid11 = min + (max - min)\
    \ / 2;\n        Long mid12 = min + (max - min) / 2;\n        Long mid13 = min\
    \ + (max - min) / 2;\n        Long mid14 = min + (max - min) / 2;\n        Long\
    \ mid15 = min + (max - min) / 2;\n        Long mid16 = min + (max - min) / 2;\n\
    \        Long mid17 = min + (max - min) / 2;\n        Long mid18 = min + (max\
    \ - min) / 2;\n        Long mid19 = min + (max - min) / 2;\n        Long mid20\
    \ = min + (max - min) / 2;\n        Long mid21 = min + (max - min) / 2;\n    \
    \    Long mid22 = min + (max - min) / 2;\n        Long mid23 = min + (max - min)\
    \ / 2;\n        Long mid24 = min + (max - min) / 2;\n        Long mid25 = min\
    \ + (max - min) / 2;\n        Long mid26 = min + (max - min) / 2;\n        Long\
    \ mid27 = min + (max - min) / 2;\n        Long mid28 = min + (max - min) / 2;\n\
    \        Long mid29 = min + (max - min) / 2;\n        Long mid30 = min + (max\
    \ - min) / 2;\n        Long mid31 = min + (max - min) / 2;\n        Long mid32\
    \ = min + (max - min) / 2;\n        Long mid33 = min + (max - min) / 2;\n    \
    \    Long mid34 = min + (max - min) / 2;\n        Long mid35 = min + (max - min)\
    \ / 2;\n        Long mid36 = min + (max - min) / 2;\n        Long mid37 = min\
    \ + (max - min) / 2;\n        Long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqp7b2vmh.java:57: error: ';' expected\n        Long mid\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 3;\n        long mid4 = mid * 4;\n        long mid5 = mid * 5;\n     \
    \   long mid6 = mid * 6;\n        long mid7 = mid * 7;\n        long mid8 = mid\
    \ * 8;\n        long mid9 = mid * 9;\n        long mid10 = mid * 10;\n       \
    \ long mid11 = mid * 11;\n        long mid12 = mid * 12;\n        long mid13 =\
    \ mid * 13;\n        long mid14 = mid * 14;\n        long mid15 = mid * 15;\n\
    \        long mid16 = mid * 16;\n        long mid17 = mid * 17;\n        long\
    \ mid18 = mid * 18;\n        long mid19 = mid * 19;\n        long mid20 = mid\
    \ * 20;\n        long mid21 = mid * 21;\n        long mid22 = mid * 22;\n    \
    \    long mid23 = mid * 23;\n        long mid24 = mid * 24;\n        long mid25\
    \ = mid * 25;\n        long mid26 = mid * 26;\n        long mid27 = mid * 27;\n\
    \        long mid28 = mid * 28;\n        long mid29 = mid * 29;\n        long\
    \ mid30 = mid * 30;\n        long mid31 = mid * 31;\n        long mid32 = mid\
    \ * 32;\n        long mid33 = mid * 33;\n        long mid34 = mid * 34;\n    \
    \    long mid35 = mid * 35;\n        long mid36 = mid * 36;\n        long mid37\
    \ = mid * 37;\n        long mid38 = mid * 38;\n        long mid39 = mid * 39;\n\
    \        long mid40 = mid * 40;\n        long mid41 = mid * 41;\n        long\
    \ mid42 = mid * 42;\n        long mid43 = mid * 43;\n        long mid44 = mid\
    \ * 44;\n        long mid45 = mid * 45;\n        long mid46 = mid * 46;\n    \
    \    long mid47 = mid * 47;\n        long mid48 = mid * 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbch99xxb.java:68: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Long min = lst.get(0);\n        Long max\
    \ = lst.get(0);\n        for (Long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            } else if (i > max) {\n                max\
    \ = i;\n            }\n        }\n        Long mid = min + ((max - min) / 2);\n\
    \        for (Long i : lst) {\n            if (i < mid) {\n                result.add(i);\n\
    \            } else if (i > mid) {\n                result.add(i, mid);\n    \
    \        }\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe_g0n1_l.java:32: error: no suitable method found for add(Long,Long)\n\
    \                result.add(i, mid);\n                      ^\n    method List.add(int,Long)\
    \ is not applicable\n      (argument mismatch; Long cannot be converted to int)\n\
    \    method AbstractList.add(int,Long) is not applicable\n      (argument mismatch;\
    \ Long cannot be converted to int)\n    method ArrayList.add(int,Long) is not\
    \ applicable\n      (argument mismatch; Long cannot be converted to int)\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long mid = min + (max - min) / 2;\n        long mid2 = min + (max - min) /\
    \ 2;\n        long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max\
    \ - min) / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 =\
    \ min + (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n       \
    \ long mid8 = min + (max - min) / 2;\n        long mid9 = min + (max - min) /\
    \ 2;\n        long mid10 = min + (max - min) / 2;\n        long mid11 = min +\
    \ (max - min) / 2;\n        long mid12 = min + (max - min) / 2;\n        long\
    \ mid13 = min + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n\
    \        long mid15 = min + (max - min) / 2;\n        long mid16 = min + (max\
    \ - min) / 2;\n        long mid17 = min + (max - min) / 2;\n        long mid18\
    \ = min + (max - min) / 2;\n        long mid19 = min + (max - min) / 2;\n    \
    \    long mid20 = min + (max - min) / 2;\n        long mid21 = min + (max - min)\
    \ / 2;\n        long mid22 = min + (max - min) / 2;\n        long mid23 = min\
    \ + (max - min) / 2;\n        long mid24 = min + (max - min) / 2;\n        long\
    \ mid25 = min + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n\
    \        long mid27 = min + (max - min) / 2;\n        long mid28 = min + (max\
    \ - min) / 2;\n        long mid29 = min + (max - min) / 2;\n        long mid30\
    \ = min + (max - min) / 2;\n        long mid31 = min + (max - min) / 2;\n    \
    \    long mid32 = min + (max - min) / 2;\n        long mid33 = min + (max - min)\
    \ / 2;\n        long mid34 = min + (max - min) / 2;\n        long mid35 = min\
    \ + (max - min) / 2;\n        long mid36 = min + (max - min) / 2;\n        long\
    \ mid37 = min + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n\
    \        long mid39 = min + (max - min) / 2;\n        long mid40 = min + (max\
    \ - min) / 2;\n        \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg09m2vtj.java:61: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        ArrayList<Long>\
    \ rest = lst.stream().filter(i -> i != mid).collect(Collectors.toCollection(ArrayList::new));\n\
    \        result.addAll(strangeSortList(rest));\n        return result;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.util.ArrayList$ArrayListSpliterator.estimateSize(ArrayList.java:1392)\n\
    \tat java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)\n\tat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:480)\n\
    \tat java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)\n\
    \tat java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)\n\
    \tat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\t\
    at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)\n\t\
    at Problem.strangeSortList(tmp4l2kxjuv.java:22)\n\tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\
    \tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\
    \tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\
    \tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\
    \tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\
    \tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\
    \tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\
    \tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\
    \tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\
    \tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\
    \tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\
    \tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\
    \tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\
    \tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\
    \tat Problem.strangeSortList(tmp4l2kxjuv.java:23)\n\tat Problem.strangeSortList(tmp4l2kxjuv.j"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n        }\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tc4ej8w.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuwgcz_2z.java:91: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (Long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        for (Long i : lst) {\n            if (i < mid) {\n           \
    \     result.add(i);\n            } else if (i > mid) {\n                result.add(max\
    \ - i);\n            } else {\n                result.add(min + i);\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuywi1uqv.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n     \
    \   long mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid\
    \ / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n       \
    \ long mid11 = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 =\
    \ mid / 13;\n        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n\
    \        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long\
    \ mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid\
    \ / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid / 22;\n    \
    \    long mid23 = mid / 23;\n        long mid24 = mid / 24;\n        long mid25\
    \ = mid / 25;\n        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n\
    \        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long\
    \ mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid\
    \ / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid / 34;\n    \
    \    long mid35 = mid / 35;\n        long mid36 = mid / 36;\n        long mid37\
    \ = mid / 37;\n        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n\
    \        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long\
    \ mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid\
    \ / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid / 46;\n    \
    \    long mid47 = mid / 47;\n        long mid48 = mid / 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4x7eg5ze.java:68: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid * 3;\n\
    \        long mid4 = mid * 4;\n        long mid5 = mid * 5;\n        long mid6\
    \ = mid * 6;\n        long mid7 = mid * 7;\n        long mid8 = mid * 8;\n   \
    \     long mid9 = mid * 9;\n        long mid10 = mid * 10;\n        long mid11\
    \ = mid * 11;\n        long mid12 = mid * 12;\n        long mid13 = mid * 13;\n\
    \        long mid14 = mid * 14;\n        long mid15 = mid * 15;\n        long\
    \ mid16 = mid * 16;\n        long mid17 = mid * 17;\n        long mid18 = mid\
    \ * 18;\n        long mid19 = mid * 19;\n        long mid20 = mid * 20;\n    \
    \    long mid21 = mid * 21;\n        long mid22 = mid * 22;\n        long mid23\
    \ = mid * 23;\n        long mid24 = mid * 24;\n        long mid25 = mid * 25;\n\
    \        long mid26 = mid * 26;\n        long mid27 = mid * 27;\n        long\
    \ mid28 = mid * 28;\n        long mid29 = mid * 29;\n        long mid30 = mid\
    \ * 30;\n        long mid31 = mid * 31;\n        long mid32 = mid * 32;\n    \
    \    long mid33 = mid * 33;\n        long mid34 = mid * 34;\n        long mid35\
    \ = mid * 35;\n        long mid36 = mid * 36;\n        long mid37 = mid * 37;\n\
    \        long mid38 = mid * 38;\n        long mid39 = mid * 39;\n        long\
    \ mid40 = mid * 40;\n        long mid41 = mid * 41;\n        long mid42 = mid\
    \ * 42;\n        long mid43 = mid * 43;\n        long mid44 = mid * 44;\n    \
    \    long mid45 = mid * 45;\n        long mid46 = mid * 46;\n        long mid47\
    \ = mid * 47;\n        long mid48 = mid * 48;\n        long mid49 = mid * 49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpae739l8f.java:68: error: ';' expected\n        long mid49 = mid\
    \ * 49\n                             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyan8p7am.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpyan8p7am.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpyan8p7am.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpyan8p7am.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpyan8p7am.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpyan8p7am.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpyan8p7am.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(Long\
    \ i : lst) {\n            result.add(i);\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8fu86l3h.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long curr = min;\n        long next = 0;\n\
    \        long prev = 0;\n        long temp = 0;\n        while(curr <= max) {\n\
    \            next = curr;\n            while(next < max && lst.contains(next))\
    \ {\n                next++;\n            }\n            temp = curr;\n      \
    \      curr = next;\n            while(temp < next && lst.contains(temp)) {\n\
    \                temp++;\n            }\n            prev = curr;\n          \
    \  curr = temp;\n            while(prev > next && lst.contains(prev)) {\n    \
    \            prev--;\n            }\n            result.add(prev);\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for(long i = min; i <= max; i++)\
    \ {\n            for(long j = mid; j <= max; j++) {\n                temp = lst.get(i);\n\
    \                lst.set(i, lst.get(j));\n                lst.set(j, temp);\n\
    \            }\n            result.add(lst.get(i));\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp30331e9w.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmp30331e9w.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n/tmp/tmp30331e9w.java:24:\
    \ error: no suitable method found for get(long)\n                temp = lst.get(i);\n\
    \                          ^\n    method List.get(int) is not applicable\n   \
    \   (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ AbstractList.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method ArrayList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n/tmp/tmp30331e9w.java:25:\
    \ error: no suitable method found for get(long)\n                lst.set(i, lst.get(j));\n\
    \                              ^\n    method List.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ AbstractList.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method ArrayList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n/tmp/tmp30331e9w.java:26:\
    \ error: no suitable method found for set(long,long)\n                lst.set(j,\
    \ temp);\n                   ^\n    method List.set(int,Long) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ AbstractList.set(int,Long) is not ap"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n        }\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4mj539kx.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(Long\
    \ i : lst) {\n            result.add(i);\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmhtz39fw.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxge2p1k3.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpxge2p1k3.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpxge2p1k3.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpxge2p1k3.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpxge2p1k3.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpxge2p1k3.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpxge2p1k3.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0wb96nbo.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp0wb96nbo.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp0wb96nbo.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp0wb96nbo.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp0wb96nbo.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp0wb96nbo.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp0wb96nbo.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (Long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        for (Long i : lst) {\n            if (i < mid) {\n           \
    \     result.add(i);\n            } else if (i > mid) {\n                result.add(max\
    \ - i);\n            } else {\n                result.add(min - i);\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzjr50k28.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        for (long i : lst) {\n            if (i < mid) {\n           \
    \     result.add(i);\n            } else if (i > mid) {\n                result.add(mid\
    \ + 1);\n            } else {\n                result.add(mid - 1);\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0sk_xq82.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiidqj5hx.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpiidqj5hx.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmposvkiil9.java:49: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmposvkiil9.java:49: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Long minValue = lst.get(0);\n        Long\
    \ maxValue = lst.get(lst.size() - 1);\n        Long minIndex = lst.indexOf(minValue);\n\
    \        Long maxIndex = lst.indexOf(maxValue);\n        Long midValue = lst.get(minIndex\
    \ + (maxIndex - minIndex) / 2);\n        Long midIndex = lst.indexOf(midValue);\n\
    \        Long midValue2 = lst.get(midIndex + (maxIndex - midIndex) / 2);\n   \
    \     Long midIndex2 = lst.indexOf(midValue2);\n        Long midValue3 = lst.get(midIndex2\
    \ + (maxIndex - midIndex2) / 2);\n        Long midIndex3 = lst.indexOf(midValue3);\n\
    \        Long midValue4 = lst.get(midIndex3 + (maxIndex - midIndex3) / 2);\n \
    \       Long midIndex4 = lst.indexOf(midValue4);\n        Long midValue5 = lst.get(midIndex4\
    \ + (maxIndex - midIndex4) / 2);\n        Long midIndex5 = lst.indexOf(midValue5);\n\
    \        Long midValue6 = lst.get(midIndex5 + (maxIndex - midIndex5) / 2);\n \
    \       Long midIndex6 = lst.indexOf(midValue6);\n        Long midValue7 = lst.get(midIndex6\
    \ + (maxIndex - midIndex6) / 2);\n        Long midIndex7 = lst.indexOf(midValue7);\n\
    \        Long midValue8 = lst.get(midIndex7 + (maxIndex - midIndex7) / 2);\n \
    \       Long midIndex8 = lst.indexOf(midValue8);\n        Long midValue9 = lst.get(midIndex8\
    \ + (maxIndex - midIndex8) / 2);\n        Long midIndex9 = lst.indexOf(midValue9);\n\
    \        Long midValue10 = lst.get(midIndex9 + (maxIndex - midIndex9) / 2);\n\
    \        Long midIndex10 = lst.indexOf(midValue10);\n        Long midValue11 =\
    \ lst.get(midIndex10 + (maxIndex - midIndex10) / 2);\n        Long midIndex11\
    \ = lst.indexOf(midValue11);\n        Long midValue12 = lst.get(midIndex11 + (maxIndex\
    \ - midIndex11) / 2);\n        Long midIndex12 = lst.indexOf(midValue12);\n  \
    \      Long midValue13 = lst.get(midIndex12 + (maxIndex - midIndex12) / 2);\n\
    \        Long midIndex13 = lst.indexOf(midValue13);\n        Long midValue14 =\
    \ lst.get(midIndex13 + (maxIndex - midIndex13) / 2);\n        Long\n    }\n  \
    \  public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpillfiohr.java:49: error: not a statement\n        Long\n      \
    \  ^\n/tmp/tmpillfiohr.java:49: error: ';' expected\n        Long\n          \
    \  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Long min\
    \ = lst.get(0);\n        Long max = lst.get(lst.size() - 1);\n        Collections.sort(lst,\
    \ (a, b) -> {\n            if (a > max) {\n                return 1;\n       \
    \     }\n            if (a < min) {\n                return -1;\n            }\n\
    \            return 0;\n        });\n        for (Long i : lst) {\n          \
    \  result.add(i);\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyf_k3o2x.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) min =\
    \ i;\n            if (i > max) max = i;\n        }\n        long mid = min + (max\
    \ - min) / 2;\n        long left = min;\n        long right = max;\n        while\
    \ (left < right) {\n            while (left < right && lst.get(left) < mid) left++;\n\
    \            while (left < right && lst.get(right) > mid) right--;\n         \
    \   if (left < right) {\n                result.add(lst.get(left));\n        \
    \        result.add(lst.get(right));\n                left++;\n              \
    \  right--;\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw7tp_m1n.java:28: error: no suitable method found for get(long)\n\
    \            while (left < right && lst.get(left) < mid) left++;\n           \
    \                           ^\n    method List.get(int) is not applicable\n  \
    \    (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ AbstractList.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method ArrayList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n/tmp/tmpw7tp_m1n.java:29:\
    \ error: no suitable method found for get(long)\n            while (left < right\
    \ && lst.get(right) > mid) right--;\n                                      ^\n\
    \    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversion from long to\
    \ int)\n    method ArrayList.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n/tmp/tmpw7tp_m1n.java:31: error:\
    \ no suitable method found for get(long)\n                result.add(lst.get(left));\n\
    \                              ^\n    method List.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ AbstractList.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method ArrayList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n/tmp/tmpw7tp_m1n.java:32:\
    \ error: no suitable method found for get(long)\n                result.add(lst.get(right));\n\
    \                              ^\n    method List.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ AbstractList.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method ArrayList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxu8x62vj.java:68: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long middle\
    \ = min + (max - min) / 2;\n        long middle2 = middle + 1;\n        long middle3\
    \ = middle + 2;\n        long middle4 = middle + 3;\n        long middle5 = middle\
    \ + 4;\n        long middle6 = middle + 5;\n        long middle7 = middle + 6;\n\
    \        long middle8 = middle + 7;\n        long middle9 = middle + 8;\n    \
    \    long middle10 = middle + 9;\n        long middle11 = middle + 10;\n     \
    \   long middle12 = middle + 11;\n        long middle13 = middle + 12;\n     \
    \   long middle14 = middle + 13;\n        long middle15 = middle + 14;\n     \
    \   long middle16 = middle + 15;\n        long middle17 = middle + 16;\n     \
    \   long middle18 = middle + 17;\n        long middle19 = middle + 18;\n     \
    \   long middle20 = middle + 19;\n        long middle21 = middle + 20;\n     \
    \   long middle22 = middle + 21;\n        long middle23 = middle + 22;\n     \
    \   long middle24 = middle + 23;\n        long middle25 = middle + 24;\n     \
    \   long middle26 = middle + 25;\n        long middle27 = middle + 26;\n     \
    \   long middle28 = middle + 27;\n        long middle29 = middle + 28;\n     \
    \   long middle30 = middle + 29;\n        long middle31 = middle + 30;\n     \
    \   long middle32 = middle + 31;\n        long middle33 = middle + 32;\n     \
    \   long middle34 = middle + 33;\n        long middle35 = middle + 34;\n     \
    \   long middle36 = middle + 35;\n        long middle37 = middle + 36;\n     \
    \   long middle38 = middle + 37;\n        long middle39 = middle + 38;\n     \
    \   long middle40 = middle + 39;\n        long middle41 = middle + 40;\n     \
    \   long middle42 = middle + 41;\n        long middle43 = middle + 42;\n     \
    \   long middle44 = middle + 43;\n        long middle45 = middle + 44;\n     \
    \   long middle46 = middle + 45;\n        long middle47 = middle + 46;\n     \
    \   long middle48 = middle + 47;\n        long middle49 = middle + 48;\n     \
    \   long middle50 = middle + 49;\n        long \n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmczicd_0.java:70: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpmczicd_0.java:70: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i));\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa8i18xmp.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 3;\n        long mid4 = mid * 4;\n        long mid5 = mid * 5;\n     \
    \   long mid6 = mid * 6;\n        long mid7 = mid * 7;\n        long mid8 = mid\
    \ * 8;\n        long mid9 = mid * 9;\n        long mid10 = mid * 10;\n       \
    \ long mid11 = mid * 11;\n        long mid12 = mid * 12;\n        long mid13 =\
    \ mid * 13;\n        long mid14 = mid * 14;\n        long mid15 = mid * 15;\n\
    \        long mid16 = mid * 16;\n        long mid17 = mid * 17;\n        long\
    \ mid18 = mid * 18;\n        long mid19 = mid * 19;\n        long mid20 = mid\
    \ * 20;\n        long mid21 = mid * 21;\n        long mid22 = mid * 22;\n    \
    \    long mid23 = mid * 23;\n        long mid24 = mid * 24;\n        long mid25\
    \ = mid * 25;\n        long mid26 = mid * 26;\n        long mid27 = mid * 27;\n\
    \        long mid28 = mid * 28;\n        long mid29 = mid * 29;\n        long\
    \ mid30 = mid * 30;\n        long mid31 = mid * 31;\n        long mid32 = mid\
    \ * 32;\n        long mid33 = mid * 33;\n        long mid34 = mid * 34;\n    \
    \    long mid35 = mid * 35;\n        long mid36 = mid * 36;\n        long mid37\
    \ = mid * 37;\n        long mid38 = mid * 38;\n        long mid39 = mid * 39;\n\
    \        long mid40 = mid * 40;\n        long mid41 = mid * 41;\n        long\
    \ mid42 = mid * 42;\n        long mid43 = mid * 43;\n        long mid44 = mid\
    \ * 44;\n        long mid45 = mid * 45;\n        long mid46 = mid * 46;\n    \
    \    long mid47 = mid * 47;\n        long mid48 = mid * 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvpejknqj.java:68: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n        }\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpknk804it.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Long min\
    \ = lst.get(0);\n        Long max = lst.get(lst.size() - 1);\n        Long mid\
    \ = min + ((max - min) / 2);\n        Long mid2 = min + ((max - min) / 2);\n \
    \       Long mid3 = min + ((max - min) / 2);\n        Long mid4 = min + ((max\
    \ - min) / 2);\n        Long mid5 = min + ((max - min) / 2);\n        Long mid6\
    \ = min + ((max - min) / 2);\n        Long mid7 = min + ((max - min) / 2);\n \
    \       Long mid8 = min + ((max - min) / 2);\n        Long mid9 = min + ((max\
    \ - min) / 2);\n        Long mid10 = min + ((max - min) / 2);\n        Long mid11\
    \ = min + ((max - min) / 2);\n        Long mid12 = min + ((max - min) / 2);\n\
    \        Long mid13 = min + ((max - min) / 2);\n        Long mid14 = min + ((max\
    \ - min) / 2);\n        Long mid15 = min + ((max - min) / 2);\n        Long mid16\
    \ = min + ((max - min) / 2);\n        Long mid17 = min + ((max - min) / 2);\n\
    \        Long mid18 = min + ((max - min) / 2);\n        Long mid19 = min + ((max\
    \ - min) / 2);\n        Long mid20 = min + ((max - min) / 2);\n        Long mid21\
    \ = min + ((max - min) / 2);\n        Long mid22 = min + ((max - min) / 2);\n\
    \        Long mid23 = min + ((max - min) / 2);\n        Long mid24 = min + ((max\
    \ - min) / 2);\n        Long mid25 = min + ((max - min) / 2);\n        Long mid26\
    \ = min + ((max - min) / 2);\n        Long mid27 = min + ((max - min) / 2);\n\
    \        Long mid28 = min + ((max - min) / 2);\n        Long mid29 = min + ((max\
    \ - min) / 2);\n        Long mid30 = min + ((max - min) / 2);\n        Long mid31\
    \ = min + ((max - min) / 2);\n        Long mid32 = min + ((max - min) / 2);\n\
    \        Long mid33 = min + ((max - min) / 2);\n        Long mid34 = min + ((max\
    \ - min) / 2);\n        Long mid35 = min + ((max - min) / 2);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd7te_mmx.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + ((max - min)\
    \ / 2);\n        long mid2 = mid / 2;\n        long mid3 = mid * 2;\n        long\
    \ mid4 = mid * 3;\n        long mid5 = mid * 4;\n        long mid6 = mid * 5;\n\
    \        long mid7 = mid * 6;\n        long mid8 = mid * 7;\n        long mid9\
    \ = mid * 8;\n        long mid10 = mid * 9;\n        long mid11 = mid * 10;\n\
    \        long mid12 = mid * 11;\n        long mid13 = mid * 12;\n        long\
    \ mid14 = mid * 13;\n        long mid15 = mid * 14;\n        long mid16 = mid\
    \ * 15;\n        long mid17 = mid * 16;\n        long mid18 = mid * 17;\n    \
    \    long mid19 = mid * 18;\n        long mid20 = mid * 19;\n        long mid21\
    \ = mid * 20;\n        long mid22 = mid * 21;\n        long mid23 = mid * 22;\n\
    \        long mid24 = mid * 23;\n        long mid25 = mid * 24;\n        long\
    \ mid26 = mid * 25;\n        long mid27 = mid * 26;\n        long mid28 = mid\
    \ * 27;\n        long mid29 = mid * 28;\n        long mid30 = mid * 29;\n    \
    \    long mid31 = mid * 30;\n        long mid32 = mid * 31;\n        long mid33\
    \ = mid * 32;\n        long mid34 = mid * 33;\n        long mid35 = mid * 34;\n\
    \        long mid36 = mid * 35;\n        long mid37 = mid * 36;\n        long\
    \ mid38 = mid * 37;\n        long mid39 = mid * 38;\n        long mid40 = mid\
    \ * 39;\n        long mid41 = mid * 40;\n        long mid42 = mid * 41;\n    \
    \    long mid43 = mid * 42;\n        long mid44 = mid * 43;\n        long mid45\
    \ = mid * 44;\n        long mid46 = mid * 45;\n        long mid47 = mid * 46;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn6nggrhx.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3\
    \ = min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n     \
    \   long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min)\
    \ / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min +\
    \ (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpji01e71z.java:60: error: ')' expected\n        long mid41 = min\
    \ + (max - min\n                                     ^\n/tmp/tmpji01e71z.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpji01e71z.java:62: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpji01e71z.java:62: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpji01e71z.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpji01e71z.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpji01e71z.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4e__jx5d.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp4e__jx5d.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp4e__jx5d.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp4e__jx5d.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp4e__jx5d.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp4e__jx5d.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp4e__jx5d.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> tmp = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt21lh2yq.java:21: error: variable min is already defined in method\
    \ strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \             ^\n/tmp/tmpt21lh2yq.java:22: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \             ^\n/tmp/tmpt21lh2yq.java:23: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \             ^\n/tmp/tmpt21lh2yq.java:24: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \             ^\n/tmp/tmpt21lh2yq.java:25: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \             ^\n/tmp/tmpt21lh2yq.java:26: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \             ^\n/tmp/tmpt21lh2yq.java:27: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \             ^\n/tmp/tmpt21lh2yq.java:28: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \             ^\n/tmp/tmpt21lh2yq.java:29: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \             ^\n/tmp/tmpt21lh2yq.java:30: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \             ^\n/tmp/tmpt21lh2yq.java:31: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \             ^\n/tmp/tmpt21lh2yq.java:32: error: va"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long min2 = lst.stream().min(Comparator.naturalOrder()).get();\n        long\
    \ max2 = lst.stream().max(Comparator.naturalOrder()).get();\n        long min3\
    \ = lst.stream().min(Comparator.naturalOrder()).get();\n        long max3 = lst.stream().max(Comparator.naturalOrder()).get();\n\
    \        long min4 = lst.stream().min(Comparator.naturalOrder()).get();\n    \
    \    long max4 = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min5 = lst.stream().min(Comparator.naturalOrder()).get();\n        long max5\
    \ = lst.stream().max(Comparator.naturalOrder()).get();\n        long min6 = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max6 = lst.stream().max(Comparator.naturalOrder()).get();\n    \
    \    long min7 = lst.stream().min(Comparator.naturalOrder()).get();\n        long\
    \ max7 = lst.stream().max(Comparator.naturalOrder()).get();\n        long min8\
    \ = lst.stream().min(Comparator.naturalOrder()).get();\n        long max8 = lst.stream().max(Comparator.naturalOrder()).get();\n\
    \        long min9 = lst.stream().min(Comparator.naturalOrder()).get();\n    \
    \    long max9 = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min10 = lst.stream().min(Comparator.naturalOrder()).get();\n        long max10\
    \ = lst.stream().max(Comparator.naturalOrder()).get();\n        long min11 = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max11 = lst.stream().max(Comparator.naturalOrder()).get();\n   \
    \     long min12 = lst.stream().min(Comparator.naturalOrder()).get();\n      \
    \  long max12 = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min13 = lst.stream().min(Comparator.naturalOrder()).get();\n        long max13\
    \ = lst.stream().max(Comparator.naturalOrder()).get();\n        long min14 = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max14 = lst.stream().max(Comparator.naturalOrder()).\n    }\n  \
    \  public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgvu0rv8g.java:45: error: <identifier> expected\n        long max14\
    \ = lst.stream().max(Comparator.naturalOrder()).\n                           \
    \                                      ^\n/tmp/tmpgvu0rv8g.java:47: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpgvu0rv8g.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpgvu0rv8g.java:47: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpgvu0rv8g.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpgvu0rv8g.java:47: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpgvu0rv8g.java:59: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpstscu68i.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpstscu68i.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpstscu68i.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpstscu68i.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpstscu68i.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpstscu68i.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpstscu68i.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        ArrayList<Long> left = new ArrayList<>();\n        ArrayList<Long>\
    \ right = new ArrayList<>();\n        for (long i : lst) {\n            if (i\
    \ < mid) {\n                left.add(i);\n            } else {\n             \
    \   right.add(i);\n            }\n        }\n        left = strangeSortList(left);\n\
    \        right = strangeSortList(right);\n        left.addAll(right);\n      \
    \  left.add(0, min);\n        left.add(mid);\n        result.addAll(left);\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.strangeSortList(tmpygkqt96_.java:18)\n\tat Problem.strangeSortList(tmpygkqt96_.java:38)\n\
    \tat Problem.strangeSortList(tmpygkqt96_.java:38)\n\tat Problem.main(tmpygkqt96_.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long temp;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            temp = lst.get(i);\n            if\
    \ (temp < min) {\n                temp = min;\n            }\n            if (temp\
    \ > max) {\n                temp = max;\n            }\n            result.add(temp);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd2soztw1.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> tmp = new ArrayList<>();\n\
    \        for(Long i : lst) {\n            tmp.add(i);\n        }\n        Collections.sort(tmp);\n\
    \        for(Long i : tmp) {\n            result.add(i);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphjujzk7a.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long mid = min + (max - min) / 2;\n        long curr = min;\n        long\
    \ next = 0;\n        boolean done = false;\n        while (!done) {\n        \
    \    next = curr;\n            curr += 1;\n            if (curr == max) {\n  \
    \              curr = min;\n                done = true;\n            }\n    \
    \        if (curr == mid) {\n                result.add(next);\n             \
    \   curr = next;\n                done = true;\n            }\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5sktzecl.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) min =\
    \ i;\n            if (i > max) max = i;\n        }\n        long mid = min + (max\
    \ - min) / 2;\n        long temp;\n        for (long i : lst) {\n            if\
    \ (i < mid) {\n                temp = i;\n            } else {\n             \
    \   temp = mid;\n            }\n            result.add(temp);\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpduhnxz7o.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min\
    \ + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long\
    \ mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n\
    \        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max -\
    \ min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 =\
    \ min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n      \
    \  long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - \n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsb0_4y9a.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpsb0_4y9a.java:61: error: ';' expected\n    }\n     ^\n/tmp/tmpsb0_4y9a.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpsb0_4y9a.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpsb0_4y9a.java:62: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpsb0_4y9a.java:62: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpsb0_4y9a.java:74: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   }\n            if (i > max) {\n                max = i;\n            }\n \
    \       }\n        long mid = min + ((max - min) / 2);\n        for (long i :\
    \ lst) {\n            if (i < mid) {\n                temp.add(i);\n         \
    \   }\n            if (i > mid) {\n                temp.add(i, mid);\n       \
    \     }\n        }\n        for (long i : temp) {\n            result.add(i);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7woirf6i.java:35: error: no suitable method found for add(long,long)\n\
    \                temp.add(i, mid);\n                    ^\n    method List.add(int,Long)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method AbstractList.add(int,Long) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ ArrayList.add(int,Long) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n        }\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa9e0ib3z.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = mid + (max - min) / 2;\n        long mid3\
    \ = mid2 + (max - min) / 2;\n        long mid4 = mid3 + (max - min) / 2;\n   \
    \     long mid5 = mid4 + (max - min) / 2;\n        long mid6 = mid5 + (max - min)\
    \ / 2;\n        long mid7 = mid6 + (max - min) / 2;\n        long mid8 = mid7\
    \ + (max - min) / 2;\n        long mid9 = mid8 + (max - min) / 2;\n        long\
    \ mid10 = mid9 + (max - min) / 2;\n        long mid11 = mid10 + (max - min) /\
    \ 2;\n        long mid12 = mid11 + (max - min) / 2;\n        long mid13 = mid12\
    \ + (max - min) / 2;\n        long mid14 = mid13 + (max - min) / 2;\n        long\
    \ mid15 = mid14 + (max - min) / 2;\n        long mid16 = mid15 + (max - min) /\
    \ 2;\n        long mid17 = mid16 + (max - min) / 2;\n        long mid18 = mid17\
    \ + (max - min) / 2;\n        long mid19 = mid18 + (max - min) / 2;\n        long\
    \ mid20 = mid19 + (max - min) / 2;\n        long mid21 = mid20 + (max - min) /\
    \ 2;\n        long mid22 = mid21 + (max - min) / 2;\n        long mid23 = mid22\
    \ + (max - min) / 2;\n        long mid24 = mid23 + (max - min) / 2;\n        long\
    \ mid25 = mid24 + (max - min) / 2;\n        long mid26 = mid25 + (max - min) /\
    \ 2;\n        long mid27 = mid26 + (max - min) / 2;\n        long mid28 = mid27\
    \ + (max - min) / 2;\n        long mid29 = mid28 + (max - min) / 2;\n        long\
    \ mid30 = mid29 + (max - min) / 2;\n        long mid31 = mid30 + (max - min) /\
    \ 2;\n        long mid32 = mid31 + (max - min) / 2;\n        long mid33 = mid32\
    \ + (max - min) / 2;\n        long mid34 = mid33 + (max - min) / 2;\n        long\
    \ mid35 = mid34 + (max - min) / 2;\n        long mid36 = mid35 + (max - min) /\
    \ 2;\n        long mid37 = mid36 + (max - min) / 2;\n        long mid38 = mid37\
    \ + (max - min\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2w6i9npm.java:57: error: ')' expected\n        long mid38 = mid37\
    \ + (max - min\n                                       ^\n/tmp/tmp2w6i9npm.java:59:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp2w6i9npm.java:59: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp2w6i9npm.java:59: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp2w6i9npm.java:59: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp2w6i9npm.java:59:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp2w6i9npm.java:71: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (Long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        for (Long i : lst) {\n            if (i < mid) {\n           \
    \     result.add(i);\n            } else if (i > mid) {\n                result.add(max\
    \ - i);\n            } else {\n                result.add(mid - i);\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl71ji16o.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_75m3tvi.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        ArrayList<Long> temp2 = new ArrayList<>();\n        ArrayList<Long> temp3\
    \ = new ArrayList<>();\n        ArrayList<Long> temp4 = new ArrayList<>();\n \
    \       ArrayList<Long> temp5 = new ArrayList<>();\n        ArrayList<Long> temp6\
    \ = new ArrayList<>();\n        ArrayList<Long> temp7 = new ArrayList<>();\n \
    \       ArrayList<Long> temp8 = new ArrayList<>();\n        ArrayList<Long> temp9\
    \ = new ArrayList<>();\n        ArrayList<Long> temp10 = new ArrayList<>();\n\
    \        ArrayList<Long> temp11 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp12 = new ArrayList<>();\n        ArrayList<Long> temp13 = new ArrayList<>();\n\
    \        ArrayList<Long> temp14 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp15 = new ArrayList<>();\n        ArrayList<Long> temp16 = new ArrayList<>();\n\
    \        ArrayList<Long> temp17 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp18 = new ArrayList<>();\n        ArrayList<Long> temp19 = new ArrayList<>();\n\
    \        ArrayList<Long> temp20 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp21 = new ArrayList<>();\n        ArrayList<Long> temp22 = new ArrayList<>();\n\
    \        ArrayList<Long> temp23 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp24 = new ArrayList<>();\n        ArrayList<Long> temp25 = new ArrayList<>();\n\
    \        ArrayList<Long> temp26 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp27 = new ArrayList<>();\n        ArrayList<Long> temp28 = new ArrayList<>();\n\
    \        ArrayList<Long> temp29 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp30 = new ArrayList<>();\n        ArrayList<Long> temp31 = new ArrayList<>();\n\
    \        ArrayList<Long> temp32 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp33 = new ArrayList<>();\n        ArrayList<Long> temp34 = new ArrayList<>();\n\
    \        ArrayList<Long> temp35 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp36 = new ArrayList<>();\n        ArrayList<Long> temp37 = new ArrayList<>();\n\
    \        ArrayList<Long> temp38 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp39 = new ArrayList<>();\n        ArrayList<Long> temp40 = new ArrayList<>();\n\
    \        ArrayList<Long> temp41 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp42 = new ArrayList<>();\n        ArrayList<Long> temp43 = new ArrayList<>();\n\
    \        ArrayList<Long> temp44 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp45 = new ArrayList<>();\n        ArrayList<Long> temp46 = new ArrayList<>();\n\
    \        ArrayList<Long> temp47 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp48 = new ArrayList<>();\n        ArrayList<Long> temp49 = new ArrayList<>();\n\
    \        ArrayList<Long> temp50 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa3p_85qo.java:68: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpa3p_85qo.java:69: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpa3p_85qo.java:69: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpa3p_85qo.java:69: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpa3p_85qo.java:69: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpa3p_85qo.java:69:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpa3p_85qo.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Long min\
    \ = lst.get(0);\n        Long max = lst.get(lst.size() - 1);\n        Long mid\
    \ = min + ((max - min) / 2);\n        for (Long i : lst) {\n            if (i\
    \ < mid) {\n                result.add(i);\n            } else if (i > mid) {\n\
    \                result.add(mid);\n            } else {\n                result.add(mid);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5vr_8cf3.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> tmp = new ArrayList<>();\n\
    \        for(Long i : lst) {\n            tmp.add(i);\n        }\n        Collections.sort(tmp);\n\
    \        for(Long i : tmp) {\n            result.add(i);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyxt_63sg.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5bdkizkp.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp5bdkizkp.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp5bdkizkp.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp5bdkizkp.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp5bdkizkp.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp5bdkizkp.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp5bdkizkp.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + ((max - min)\
    \ / 2);\n        long mid2 = mid / 2;\n        long mid3 = mid / 3;\n        long\
    \ mid4 = mid / 4;\n        long mid5 = mid / 5;\n        long mid6 = mid / 6;\n\
    \        long mid7 = mid / 7;\n        long mid8 = mid / 8;\n        long mid9\
    \ = mid / 9;\n        long mid10 = mid / 10;\n        long mid11 = mid / 11;\n\
    \        long mid12 = mid / 12;\n        long mid13 = mid / 13;\n        long\
    \ mid14 = mid / 14;\n        long mid15 = mid / 15;\n        long mid16 = mid\
    \ / 16;\n        long mid17 = mid / 17;\n        long mid18 = mid / 18;\n    \
    \    long mid19 = mid / 19;\n        long mid20 = mid / 20;\n        long mid21\
    \ = mid / 21;\n        long mid22 = mid / 22;\n        long mid23 = mid / 23;\n\
    \        long mid24 = mid / 24;\n        long mid25 = mid / 25;\n        long\
    \ mid26 = mid / 26;\n        long mid27 = mid / 27;\n        long mid28 = mid\
    \ / 28;\n        long mid29 = mid / 29;\n        long mid30 = mid / 30;\n    \
    \    long mid31 = mid / 31;\n        long mid32 = mid / 32;\n        long mid33\
    \ = mid / 33;\n        long mid34 = mid / 34;\n        long mid35 = mid / 35;\n\
    \        long mid36 = mid / 36;\n        long mid37 = mid / 37;\n        long\
    \ mid38 = mid / 38;\n        long mid39 = mid / 39;\n        long mid40 = mid\
    \ / 40;\n        long mid41 = mid / 41;\n        long mid42 = mid / 42;\n    \
    \    long mid43 = mid / 43;\n        long mid44 = mid / 44;\n        long mid45\
    \ = mid / 45;\n        long mid46 = mid / 46;\n        long mid47 = mid / 4\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppsf34tfd.java:74: error: ';' expected\n        long mid47 = mid\
    \ / 4\n                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + ((max - min)\
    \ / 2);\n        for (long i : lst) {\n            if (i < mid) {\n          \
    \      result.add(i);\n            } else if (i > mid) {\n                result.add(max\
    \ - i);\n            } else {\n                result.add(min - i);\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu_uvwerd.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long min = lst.stream().min(Comparator.naturalOrder()).get();\n     \
    \   long max = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ mid = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n \
    \       long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf1detu3c.java:60: error: ';' expected\n        long mid40\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long minValue = lst.get(0);\n        long maxValue = lst.get(lst.size()\
    \ - 1);\n        long currentValue = minValue;\n        boolean isFirst = true;\n\
    \        boolean isLast = true;\n        boolean isMiddle = true;\n        boolean\
    \ isMiddleMiddle = true;\n        boolean isMiddleLast = true;\n        boolean\
    \ isLastLast = true;\n        boolean isLastMiddle = true;\n        boolean isLastFirst\
    \ = true;\n        boolean isFirstFirst = true;\n        boolean isFirstMiddle\
    \ = true;\n        boolean isFirstLast = true;\n        boolean isMiddleMiddleFirst\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isMiddleLastFirst\
    \ = true;\n        boolean isMiddleFirstFirst = true;\n        boolean isMiddleFirstLast\
    \ = true;\n        boolean isLastMiddleFirst = true;\n        boolean isLastMiddleLast\
    \ = true;\n        boolean isLastFirstFirst = true;\n        boolean isLastFirstLast\
    \ = true;\n        boolean isLastLastFirst = true;\n        boolean isLastLastLast\
    \ = true;\n        boolean isLastMiddleMiddle = true;\n        boolean isLastMiddleMiddleFirst\
    \ = true;\n        boolean isLastMiddleMiddleLast = true;\n        boolean isLastMiddleMiddleLastFirst\
    \ = true;\n        boolean isLastMiddleMiddleFirstFirst = true;\n        boolean\
    \ isLastMiddleMiddleFirstLast = true;\n        boolean isLastMiddleMiddleFirstLast\
    \ = true;\n        boolean isLastMiddleMiddleFirstLast = true;\n        boolean\
    \ isLastMiddleMiddleFirstLast = true;\n        boolean isLastMiddleMiddleFirstLast\
    \ = true;\n        boolean isLastMiddleMiddleFirstLast = true;\n        boolean\
    \ isLastMiddleMiddleFirstLast = true;\n        boolean isLastMiddleMiddleFirstLast\
    \ = true;\n        boolean isLastMiddleMiddleFirstLast = true;\n        boolean\
    \ isLastMiddleMiddleFirstLast = true;\n        boolean isLastMiddleMiddleFirstLast\
    \ = true;\n        boolean isLastMiddleMiddleFirstLast = true;\n        boolean\
    \ isLastMiddleMiddleFirstLast = true;\n        boolean isLastMiddleMiddleFirstLast\
    \ = true;\n        boolean isLastMiddleMiddleFirstLast = true;\n        boolean\
    \ isLastMiddleMiddleFirstLast = true;\n        boolean isLastMiddleMiddleFirstLast\
    \ = true;\n        boolean isLastMiddleMiddleFirstLast = true;\n        boolean\
    \ isLastMiddleMiddleFirstLast = true;\n        boolean isLastMiddleMiddleFirstLast\
    \ = true;\n        boolean isLastMiddleMiddleFirstLast = true;\n        boolean\
    \ isLastMiddleMiddleFirstLast = true;\n        boolean isLastMiddleMiddleFirstLast\
    \ = true;\n        boolean isLastMiddleMiddleFirstLast = true;\n        boolean\
    \ isLastMiddleMiddleFirstLast = true;\n        boolean isLastMiddleMiddleFirstLast\
    \ = true;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ksz8l0l.java:50: error: variable isLastMiddleMiddleFirstLast is\
    \ already defined in method strangeSortList(ArrayList<Long>)\n        boolean\
    \ isLastMiddleMiddleFirstLast = true;\n                ^\n/tmp/tmp6ksz8l0l.java:51:\
    \ error: variable isLastMiddleMiddleFirstLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isLastMiddleMiddleFirstLast = true;\n                ^\n/tmp/tmp6ksz8l0l.java:52:\
    \ error: variable isLastMiddleMiddleFirstLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isLastMiddleMiddleFirstLast = true;\n                ^\n/tmp/tmp6ksz8l0l.java:53:\
    \ error: variable isLastMiddleMiddleFirstLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isLastMiddleMiddleFirstLast = true;\n                ^\n/tmp/tmp6ksz8l0l.java:54:\
    \ error: variable isLastMiddleMiddleFirstLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isLastMiddleMiddleFirstLast = true;\n                ^\n/tmp/tmp6ksz8l0l.java:55:\
    \ error: variable isLastMiddleMiddleFirstLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isLastMiddleMiddleFirstLast = true;\n                ^\n/tmp/tmp6ksz8l0l.java:56:\
    \ error: variable isLastMiddleMiddleFirstLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isLastMiddleMiddleFirstLast = true;\n                ^\n/tmp/tmp6ksz8l0l.java:57:\
    \ error: variable isLastMiddleMiddleFirstLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isLastMiddleMiddleFirstLast = true;\n                ^\n/tmp/tmp6ksz8l0l.java:58:\
    \ error: variable isLastMiddleMiddleFirstLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isLastMiddleMiddleFirstLast = true;\n                ^\n/tmp/tmp6ksz8l0l.java:59:\
    \ error: variable isLastMiddleMiddleFirstLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isLastMiddleMiddleFirstLast = true;\n                ^\n/tmp/tmp6ksz8l0l.java:60:\
    \ er"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i));\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw53l6e6q.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n            mid = (mid +\
    \ temp) / 2;\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps3i1tfi0.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmps3i1tfi0.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp26p79bnj.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid / 3;\n        long\
    \ mid4 = mid / 4;\n        long mid5 = mid / 5;\n        long mid6 = mid / 6;\n\
    \        long mid7 = mid / 7;\n        long mid8 = mid / 8;\n        long mid9\
    \ = mid / 9;\n        long mid10 = mid / 10;\n        long mid11 = mid / 11;\n\
    \        long mid12 = mid / 12;\n        long mid13 = mid / 13;\n        long\
    \ mid14 = mid / 14;\n        long mid15 = mid / 15;\n        long mid16 = mid\
    \ / 16;\n        long mid17 = mid / 17;\n        long mid18 = mid / 18;\n    \
    \    long mid19 = mid / 19;\n        long mid20 = mid / 20;\n        long mid21\
    \ = mid / 21;\n        long mid22 = mid / 22;\n        long mid23 = mid / 23;\n\
    \        long mid24 = mid / 24;\n        long mid25 = mid / 25;\n        long\
    \ mid26 = mid / 26;\n        long mid27 = mid / 27;\n        long mid28 = mid\
    \ / 28;\n        long mid29 = mid / 29;\n        long mid30 = mid / 30;\n    \
    \    long mid31 = mid / 31;\n        long mid32 = mid / 32;\n        long mid33\
    \ = mid / 33;\n        long mid34 = mid / 34;\n        long mid35 = mid / 35;\n\
    \        long mid36 = mid / 36;\n        long mid37 = mid / 37;\n        long\
    \ mid38 = mid / 38;\n        long mid39 = mid / 39;\n        long mid40 = mid\
    \ / 40;\n        long mid41 = mid / 41;\n        long mid42 = mid / 42;\n    \
    \    long mid43 = mid / 43;\n        long mid44 = mid / 44;\n        long mid45\
    \ = mid / 45;\n        long mid46 = mid / 46;\n        long mid47 = mid / 47;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpba3gjjap.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        for (long i : lst) {\n            if (i < mid) {\n           \
    \     result.add(i);\n            } else if (i > mid) {\n                result.add(max\
    \ - i);\n            } else {\n                result.add(mid - i);\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92mxq2cy.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmpu09vvf.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpmpu09vvf.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpmpu09vvf.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpmpu09vvf.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpmpu09vvf.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpmpu09vvf.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpmpu09vvf.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (Long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        ArrayList<Long> left = new ArrayList<>();\n        ArrayList<Long>\
    \ right = new ArrayList<>();\n        for (Long i : lst) {\n            if (i\
    \ < mid) {\n                left.add(i);\n            } else {\n             \
    \   right.add(i);\n            }\n        }\n        left = strangeSortList(left);\n\
    \        right = strangeSortList(right);\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        result.addAll(left);\n        result.addAll(right);\n\
    \        result.add(mid);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq0ux9jsx.java:40: error: variable result is already defined in\
    \ method strangeSortList(ArrayList<Long>)\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long middle = min + ((max\
    \ - min) / 2);\n        long middle2 = middle + 1;\n        long middle3 = middle\
    \ + 2;\n        long middle4 = middle + 3;\n        long middle5 = middle + 4;\n\
    \        long middle6 = middle + 5;\n        long middle7 = middle + 6;\n    \
    \    long middle8 = middle + 7;\n        long middle9 = middle + 8;\n        long\
    \ middle10 = middle + 9;\n        long middle11 = middle + 10;\n        long middle12\
    \ = middle + 11;\n        long middle13 = middle + 12;\n        long middle14\
    \ = middle + 13;\n        long middle15 = middle + 14;\n        long middle16\
    \ = middle + 15;\n        long middle17 = middle + 16;\n        long middle18\
    \ = middle + 17;\n        long middle19 = middle + 18;\n        long middle20\
    \ = middle + 19;\n        long middle21 = middle + 20;\n        long middle22\
    \ = middle + 21;\n        long middle23 = middle + 22;\n        long middle24\
    \ = middle + 23;\n        long middle25 = middle + 24;\n        long middle26\
    \ = middle + 25;\n        long middle27 = middle + 26;\n        long middle28\
    \ = middle + 27;\n        long middle29 = middle + 28;\n        long middle30\
    \ = middle + 29;\n        long middle31 = middle + 30;\n        long middle32\
    \ = middle + 31;\n        long middle33 = middle + 32;\n        long middle34\
    \ = middle + 33;\n        long middle35 = middle + 34;\n        long middle36\
    \ = middle + 35;\n        long middle37 = middle + 36;\n        long middle38\
    \ = middle + 37;\n        long middle39 = middle + 38;\n        long middle40\
    \ = middle + 39;\n        long middle41 = middle + 40;\n        long middle42\
    \ = middle + 41;\n        long middle43 = middle + 42;\n        long middle44\
    \ = middle + 43;\n        long middle45 = middle + 44;\n        long middle46\
    \ = middle + 45;\n        long middle47 = middle + 46;\n        long middle48\
    \ = middle + 47;\n        long middle49 = middle \n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9795wrn4.java:76: error: ';' expected\n        long middle49 =\
    \ middle \n                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + ((max - min)\
    \ / 2);\n        long temp = min;\n        while (temp < max) {\n            result.add(mid);\n\
    \            mid++;\n            temp++;\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl1jm1zqi.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n        }\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyoqkujae.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n       \
    \ long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min) /\
    \ 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max\
    \ - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 =\
    \ min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n       \
    \ long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = min + (\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp41xxerjw.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp41xxerjw.java:61: error: ';' expected\n    }\n     ^\n/tmp/tmp41xxerjw.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp41xxerjw.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp41xxerjw.java:62: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp41xxerjw.java:62: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp41xxerjw.java:74: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(lst.size() - 1);\n        long mid = min + ((max - min) / 2);\n  \
    \      for (long i : lst) {\n            if (i < mid) {\n                result.add(i);\n\
    \            } else if (i > mid) {\n                result.add(mid);\n       \
    \     } else {\n                result.add(mid);\n            }\n        }\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ws_4nap.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(lst.size() - 1);\n        long mid = min + ((max - min) / 2);\n  \
    \      long temp;\n        for (long i : lst) {\n            if (i < mid) {\n\
    \                temp = i;\n            } else if (i > mid) {\n              \
    \  temp = mid;\n            } else {\n                temp = mid;\n          \
    \  }\n            result.add(temp);\n            mid = (mid + i) / 2;\n      \
    \  }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph8g12th4.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) min =\
    \ i;\n            if (i > max) max = i;\n        }\n        long mid = min + ((max\
    \ - min) / 2);\n        long mid2 = mid / 2;\n        long mid3 = mid / 3;\n \
    \       long mid4 = mid / 4;\n        long mid5 = mid / 5;\n        long mid6\
    \ = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid / 8;\n   \
    \     long mid9 = mid / 9;\n        long mid10 = mid / 10;\n        long mid11\
    \ = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 = mid / 13;\n\
    \        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n        long\
    \ mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long mid18 = mid\
    \ / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid / 20;\n    \
    \    long mid21 = mid / 21;\n        long mid22 = mid / 22;\n        long mid23\
    \ = mid / 23;\n        long mid24 = mid / 24;\n        long mid25 = mid / 25;\n\
    \        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n        long\
    \ mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long mid30 = mid\
    \ / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid / 32;\n    \
    \    long mid33 = mid / 33;\n        long mid34 = mid / 34;\n        long mid35\
    \ = mid / 35;\n        long mid36 = mid / 36;\n        long mid37 = mid / 37;\n\
    \        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n        long\
    \ mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long mid42 = mid\
    \ / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid / 44;\n    \
    \    long mid45 = mid / 45;\n        long mid46 = mid / 46;\n        long mid47\
    \ = mid / 47;\n        long mid48 = mid \n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl_oq_p35.java:71: error: ';' expected\n        long mid48 = mid\
    \ \n                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn4edo5is.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpn4edo5is.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid + (max - min) / 2;\n     \
    \   long mid3 = mid2 + (max - min) / 2;\n        long mid4 = mid3 + (max - min)\
    \ / 2;\n        long mid5 = mid4 + (max - min) / 2;\n        long mid6 = mid5\
    \ + (max - min) / 2;\n        long mid7 = mid6 + (max - min) / 2;\n        long\
    \ mid8 = mid7 + (max - min) / 2;\n        long mid9 = mid8 + (max - min) / 2;\n\
    \        long mid10 = mid9 + (max - min) / 2;\n        long mid11 = mid10 + (max\
    \ - min) / 2;\n        long mid12 = mid11 + (max - min) / 2;\n        long mid13\
    \ = mid12 + (max - min) / 2;\n        long mid14 = mid13 + (max - min) / 2;\n\
    \        long mid15 = mid14 + (max - min) / 2;\n        long mid16 = mid15 + (max\
    \ - min) / 2;\n        long mid17 = mid16 + (max - min) / 2;\n        long mid18\
    \ = mid17 + (max - min) / 2;\n        long mid19 = mid18 + (max - min) / 2;\n\
    \        long mid20 = mid19 + (max - min) / 2;\n        long mid21 = mid20 + (max\
    \ - min) / 2;\n        long mid22 = mid21 + (max - min) / 2;\n        long mid23\
    \ = mid22 + (max - min) / 2;\n        long mid24 = mid23 + (max - min) / 2;\n\
    \        long mid25 = mid24 + (max - min) / 2;\n        long mid26 = mid25 + (max\
    \ - min) / 2;\n        long mid27 = mid26 + (max - min) / 2;\n        long mid28\
    \ = mid27 + (max - min) / 2;\n        long mid29 = mid28 + (max - min) / 2;\n\
    \        long mid30 = mid29 + (max - min) / 2;\n        long mid31 = mid30 + (max\
    \ - min) / 2;\n        long mid32 = mid31 + (max - min) / 2;\n        long mid33\
    \ = mid32 + (max - min) / 2;\n        long mid34 = mid33 + (max - min) / 2;\n\
    \        long mid35 = mid34 + (max - min) / 2;\n        long mid36 = mid35 + (max\
    \ - min) / 2;\n        long mid37 = mid36 + (max - min) / 2;\n        long mid38\
    \ = mid\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpooxw8glp.java:57: error: ';' expected\n        long mid38 = mid\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3\
    \ = min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n     \
    \   long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min)\
    \ / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min +\
    \ (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptk2vkusj.java:60: error: ')' expected\n        long mid41 = min\
    \ + (max - min\n                                     ^\n/tmp/tmptk2vkusj.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmptk2vkusj.java:62: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmptk2vkusj.java:62: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmptk2vkusj.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmptk2vkusj.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmptk2vkusj.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = mid - 1;\n        long mid3 = mid + 1;\n\
    \        long mid4 = mid * 2;\n        long mid5 = mid * 3;\n        long mid6\
    \ = mid * 4;\n        long mid7 = mid * 5;\n        long mid8 = mid * 6;\n   \
    \     long mid9 = mid * 7;\n        long mid10 = mid * 8;\n        long mid11\
    \ = mid * 9;\n        long mid12 = mid * 10;\n        long mid13 = mid * 11;\n\
    \        long mid14 = mid * 12;\n        long mid15 = mid * 13;\n        long\
    \ mid16 = mid * 14;\n        long mid17 = mid * 15;\n        long mid18 = mid\
    \ * 16;\n        long mid19 = mid * 17;\n        long mid20 = mid * 18;\n    \
    \    long mid21 = mid * 19;\n        long mid22 = mid * 20;\n        long mid23\
    \ = mid * 21;\n        long mid24 = mid * 22;\n        long mid25 = mid * 23;\n\
    \        long mid26 = mid * 24;\n        long mid27 = mid * 25;\n        long\
    \ mid28 = mid * 26;\n        long mid29 = mid * 27;\n        long mid30 = mid\
    \ * 28;\n        long mid31 = mid * 29;\n        long mid32 = mid * 30;\n    \
    \    long mid33 = mid * 31;\n        long mid34 = mid * 32;\n        long mid35\
    \ = mid * 33;\n        long mid36 = mid * 34;\n        long mid37 = mid * 35;\n\
    \        long mid38 = mid * 36;\n        long mid39 = mid * 37;\n        long\
    \ mid40 = mid * 38;\n        long mid41 = mid * 39;\n        long mid42 = mid\
    \ * 40;\n        long mid43 = mid * 41;\n        long mid44 = mid * 42;\n    \
    \    long mid45 = mid * 43;\n        long mid46 = mid * 44;\n        long mid47\
    \ = mid * 45;\n        long mid48 = mid * 46;\n        long mid49 = mid * 47;\n\
    \        \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmx2mz3v2.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpmx2mz3v2.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n            mid = (mid +\
    \ temp) / 2;\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfrm5izj7.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpfrm5izj7.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdsfn46a1.java:68: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i));\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4bd7o_7u.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpluu6pja5.java:52: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpluu6pja5.java:52: error: ';' expected\n    }\n     ^\n/tmp/tmpluu6pja5.java:53:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpluu6pja5.java:53: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpluu6pja5.java:53: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpluu6pja5.java:53: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpluu6pja5.java:65: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        ArrayList<Long>\
    \ rest = lst.stream().filter(i -> i != mid).collect(Collectors.toList());\n  \
    \      ArrayList<Long> rest2 = strangeSortList(rest);\n        result.addAll(rest2);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0x0zbjjy.java:22: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        ArrayList<Long> rest = lst.stream().filter(i\
    \ -> i != mid).collect(Collectors.toList());\n                               \
    \                                          ^\n    equality constraints: List<Long>\n\
    \    upper bounds: ArrayList<Long>,Object\n  where R,A,T are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T,A,R>)\n\
    \    T extends Object declared in interface Stream\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr3qstl_0.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpr3qstl_0.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpr3qstl_0.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpr3qstl_0.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpr3qstl_0.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpr3qstl_0.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpr3qstl_0.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        long temp2;\n        long temp3;\n\
    \        long temp4;\n        long temp5;\n        long temp6;\n        long temp7;\n\
    \        long temp8;\n        long temp9;\n        long temp10;\n        long\
    \ temp11;\n        long temp12;\n        long temp13;\n        long temp14;\n\
    \        long temp15;\n        long temp16;\n        long temp17;\n        long\
    \ temp18;\n        long temp19;\n        long temp20;\n        long temp21;\n\
    \        long temp22;\n        long temp23;\n        long temp24;\n        long\
    \ temp25;\n        long temp26;\n        long temp27;\n        long temp28;\n\
    \        long temp29;\n        long temp30;\n        long temp31;\n        long\
    \ temp32;\n        long temp33;\n        long temp34;\n        long temp35;\n\
    \        long temp36;\n        long temp37;\n        long temp38;\n        long\
    \ temp39;\n        long temp40;\n        long temp41;\n        long temp42;\n\
    \        long temp43;\n        long temp44;\n        long temp45;\n        long\
    \ temp46;\n        long temp47;\n        long temp48;\n        long temp49;\n\
    \        long temp50;\n        long temp51;\n        long temp52;\n        long\
    \ temp53;\n        long temp54;\n        long temp55;\n        long temp56;\n\
    \        long temp57;\n        long temp58;\n        long temp59;\n        long\
    \ temp60;\n        long temp61;\n        long temp62;\n        long temp63;\n\
    \        long temp64;\n        long temp65;\n        long temp66;\n        long\
    \ temp67;\n        long temp68;\n        long temp69;\n        long temp70;\n\
    \        long temp71;\n        long temp72;\n        long temp73;\n        long\
    \ temp74;\n        long temp75;\n        long temp76;\n        long temp77;\n\
    \        long temp78;\n        long temp79;\n        long temp80;\n        long\
    \ temp81;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbtkic_it.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpbtkic_it.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplz0h09gz.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmplz0h09gz.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmplz0h09gz.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmplz0h09gz.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmplz0h09gz.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmplz0h09gz.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmplz0h09gz.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i));\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0l_l482.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid - 1;\n        long mid3 =\
    \ mid + 1;\n        long mid4 = mid * 2;\n        long mid5 = mid * 3;\n     \
    \   long mid6 = mid * 4;\n        long mid7 = mid * 5;\n        long mid8 = mid\
    \ * 6;\n        long mid9 = mid * 7;\n        long mid10 = mid * 8;\n        long\
    \ mid11 = mid * 9;\n        long mid12 = mid * 10;\n        long mid13 = mid *\
    \ 11;\n        long mid14 = mid * 12;\n        long mid15 = mid * 13;\n      \
    \  long mid16 = mid * 14;\n        long mid17 = mid * 15;\n        long mid18\
    \ = mid * 16;\n        long mid19 = mid * 17;\n        long mid20 = mid * 18;\n\
    \        long mid21 = mid * 19;\n        long mid22 = mid * 20;\n        long\
    \ mid23 = mid * 21;\n        long mid24 = mid * 22;\n        long mid25 = mid\
    \ * 23;\n        long mid26 = mid * 24;\n        long mid27 = mid * 25;\n    \
    \    long mid28 = mid * 26;\n        long mid29 = mid * 27;\n        long mid30\
    \ = mid * 28;\n        long mid31 = mid * 29;\n        long mid32 = mid * 30;\n\
    \        long mid33 = mid * 31;\n        long mid34 = mid * 32;\n        long\
    \ mid35 = mid * 33;\n        long mid36 = mid * 34;\n        long mid37 = mid\
    \ * 35;\n        long mid38 = mid * 36;\n        long mid39 = mid * 37;\n    \
    \    long mid40 = mid * 38;\n        long mid41 = mid * 39;\n        long mid42\
    \ = mid * 40;\n        long mid43 = mid * 41;\n        long mid44 = mid * 42;\n\
    \        long mid45 = mid * 43;\n        long mid46 = mid * 44;\n        long\
    \ mid47 = mid * 45;\n        long mid48 = mid * 46;\n        long mid49 = mid\
    \ * \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnnqypc9a.java:69: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpnnqypc9a.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpnnqypc9a.java:70: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpnnqypc9a.java:70:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpnnqypc9a.java:70: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpnnqypc9a.java:70:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpnnqypc9a.java:82: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long\
    \ mid3 = mid / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n\
    \        long mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8\
    \ = mid / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n \
    \       long mid11 = mid / 11;\n        long mid12 = mid / 12;\n        long mid13\
    \ = mid / 13;\n        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n\
    \        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long\
    \ mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid\
    \ / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid / 22;\n    \
    \    long mid23 = mid / 23;\n        long mid24 = mid / 24;\n        long mid25\
    \ = mid / 25;\n        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n\
    \        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long\
    \ mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid\
    \ / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid / 34;\n    \
    \    long mid35 = mid / 35;\n        long mid36 = mid / 36;\n        long mid37\
    \ = mid / 37;\n        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n\
    \        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long\
    \ mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid\
    \ / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid / 46;\n    \
    \    long mid47 = mid / 47;\n        long mid48 = mid / 48;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy4fzxc9u.java:69: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdm47r05r.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpdm47r05r.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1yn0vpcv.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long minValue = lst.get(0);\n        long maxValue = lst.get(lst.size()\
    \ - 1);\n        long currentValue = minValue;\n        long currentMax = maxValue;\n\
    \        long currentMin = minValue;\n        boolean isSorted = false;\n    \
    \    boolean isChanged = false;\n        boolean isChanged = false;\n        boolean\
    \ isChanged = false;\n        boolean isChanged = false;\n        boolean isChanged\
    \ = false;\n        boolean isChanged = false;\n        boolean isChanged = false;\n\
    \        boolean isChanged = false;\n        boolean isChanged = false;\n    \
    \    boolean isChanged = false;\n        boolean isChanged = false;\n        boolean\
    \ isChanged = false;\n        boolean isChanged = false;\n        boolean isChanged\
    \ = false;\n        boolean isChanged = false;\n        boolean isChanged = false;\n\
    \        boolean isChanged = false;\n        boolean isChanged = false;\n    \
    \    boolean isChanged = false;\n        boolean isChanged = false;\n        boolean\
    \ isChanged = false;\n        boolean isChanged = false;\n        boolean isChanged\
    \ = false;\n        boolean isChanged = false;\n        boolean isChanged = false;\n\
    \        boolean isChanged = false;\n        boolean isChanged = false;\n    \
    \    boolean isChanged = false;\n        boolean isChanged = false;\n        boolean\
    \ isChanged = false;\n        boolean isChanged = false;\n        boolean isChanged\
    \ = false;\n        boolean isChanged = false;\n        boolean isChanged = false;\n\
    \        boolean isChanged = false;\n        boolean isChanged = false;\n    \
    \    boolean isChanged = false;\n        boolean isChanged = false;\n        boolean\
    \ isChanged = false;\n        boolean isChanged = false;\n        boolean isChanged\
    \ = false;\n        boolean isChanged = false;\n        boolean isChanged = false;\n\
    \        boolean isChanged = false;\n        boolean isChanged = false;\n    \
    \    boolean isChanged = false;\n        boolean isChanged = false;\n        boolean\
    \ isChanged = false;\n        boolean isChanged = false;\n        boolean isChanged\
    \ = false;\n        boolean isChanged = false;\n        boolean isChanged = false;\n\
    \        boolean isChanged = false;\n        boolean isChanged = false;\n    \
    \    boolean isChanged = false;\n        boolean isChanged = false;\n        boolean\
    \ isChanged = false;\n        boolean isChanged = false;\n        boolean isChanged\
    \ = false;\n        boolean isChanged = false;\n        boolean isChanged = false;\n\
    \        boolean isChanged = false;\n        boolean isChanged = false;\n    \
    \    boolean isChanged = false;\n        boolean isChanged = false;\n        boolean\
    \ isChanged = false;\n        boolean isChanged = false;\n        boolean isChanged\
    \ = false;\n        boolean isChanged = false;\n        boolean isChanged = false;\n\
    \        boolean isChanged = false;\n        boolean isChanged = false;\n    \
    \    boolean isChanged = false;\n        boolean isChanged = false;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmq6thw48.java:26: error: variable isChanged is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        boolean isChanged = false;\n\
    \                ^\n/tmp/tmpmq6thw48.java:27: error: variable isChanged is already\
    \ defined in method strangeSortList(ArrayList<Long>)\n        boolean isChanged\
    \ = false;\n                ^\n/tmp/tmpmq6thw48.java:28: error: variable isChanged\
    \ is already defined in method strangeSortList(ArrayList<Long>)\n        boolean\
    \ isChanged = false;\n                ^\n/tmp/tmpmq6thw48.java:29: error: variable\
    \ isChanged is already defined in method strangeSortList(ArrayList<Long>)\n  \
    \      boolean isChanged = false;\n                ^\n/tmp/tmpmq6thw48.java:30:\
    \ error: variable isChanged is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isChanged = false;\n                ^\n/tmp/tmpmq6thw48.java:31:\
    \ error: variable isChanged is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isChanged = false;\n                ^\n/tmp/tmpmq6thw48.java:32:\
    \ error: variable isChanged is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isChanged = false;\n                ^\n/tmp/tmpmq6thw48.java:33:\
    \ error: variable isChanged is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isChanged = false;\n                ^\n/tmp/tmpmq6thw48.java:34:\
    \ error: variable isChanged is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isChanged = false;\n                ^\n/tmp/tmpmq6thw48.java:35:\
    \ error: variable isChanged is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isChanged = false;\n                ^\n/tmp/tmpmq6thw48.java:36:\
    \ error: variable isChanged is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isChanged = false;\n                ^\n/tmp/tmpmq6thw48.java:37:\
    \ error: variable isChanged is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isChanged = false;\n                ^\n/tmp/tmpmq6thw48.java:38:\
    \ error: variable is"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3\
    \ = min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n     \
    \   long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min)\
    \ / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min +\
    \ (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpspvbcazc.java:60: error: ')' expected\n        long mid41 = min\
    \ + (max - min\n                                     ^\n/tmp/tmpspvbcazc.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpspvbcazc.java:62: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpspvbcazc.java:62: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpspvbcazc.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpspvbcazc.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpspvbcazc.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpigutfn5k.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpigutfn5k.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpigutfn5k.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpigutfn5k.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpigutfn5k.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpigutfn5k.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpigutfn5k.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long temp;\n        for (long\
    \ i : lst) {\n            if (i == min) {\n                temp = max;\n     \
    \           max = min;\n                min = temp;\n            }\n         \
    \   result.add(i);\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplv9p4v6g.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i));\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf1yg4fwx.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp314jzku1.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp314jzku1.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp314jzku1.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp314jzku1.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp314jzku1.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp314jzku1.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp314jzku1.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv8y5h_ug.java:20: error: variable min is already defined in method\
    \ strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpv8y5h_ug.java:21: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpv8y5h_ug.java:22: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpv8y5h_ug.java:23: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpv8y5h_ug.java:24: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpv8y5h_ug.java:25: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpv8y5h_ug.java:26: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpv8y5h_ug.java:27: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpv8y5h_ug.java:28: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpv8y5h_ug.java:29: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpv8y5h_ug.java:30: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpv8y5h_ug.java:31: error: variable max is already "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) min =\
    \ i;\n            if (i > max) max = i;\n        }\n        long mid = min + ((max\
    \ - min) / 2);\n        long mid2 = mid / 2;\n        long mid3 = mid * 2;\n \
    \       long mid4 = mid * 3;\n        long mid5 = mid * 4;\n        long mid6\
    \ = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid * 7;\n   \
    \     long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long mid11\
    \ = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid * 12;\n\
    \        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n        long\
    \ mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18 = mid\
    \ * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n    \
    \    long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long mid23\
    \ = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid * 24;\n\
    \        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n        long\
    \ mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30 = mid\
    \ * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n    \
    \    long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long mid35\
    \ = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid * 36;\n\
    \        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n        long\
    \ mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42 = mid\
    \ * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n    \
    \    long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long mid47\
    \ = mid * 46;\n        long mid48 = mid * \n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpztrm4d9r.java:72: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpztrm4d9r.java:73: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpztrm4d9r.java:73: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpztrm4d9r.java:73:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpztrm4d9r.java:73: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpztrm4d9r.java:73:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpztrm4d9r.java:85: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min2 = lst.stream().min(Long::compareTo).get();\n\
    \        long max2 = lst.stream().max(Long::compareTo).get();\n        long min3\
    \ = lst.stream().min(Long::compareTo).get();\n        long max3 = lst.stream().max(Long::compareTo).get();\n\
    \        long min4 = lst.stream().min(Long::compareTo).get();\n        long max4\
    \ = lst.stream().max(Long::compareTo).get();\n        long min5 = lst.stream().min(Long::compareTo).get();\n\
    \        long max5 = lst.stream().max(Long::compareTo).get();\n        long min6\
    \ = lst.stream().min(Long::compareTo).get();\n        long max6 = lst.stream().max(Long::compareTo).get();\n\
    \        long min7 = lst.stream().min(Long::compareTo).get();\n        long max7\
    \ = lst.stream().max(Long::compareTo).get();\n        long min8 = lst.stream().min(Long::compareTo).get();\n\
    \        long max8 = lst.stream().max(Long::compareTo).get();\n        long min9\
    \ = lst.stream().min(Long::compareTo).get();\n        long max9 = lst.stream().max(Long::compareTo).get();\n\
    \        long min10 = lst.stream().min(Long::compareTo).get();\n        long max10\
    \ = lst.stream().max(Long::compareTo).get();\n        long min11 = lst.stream().min(Long::compareTo).get();\n\
    \        long max11 = lst.stream().max(Long::compareTo).get();\n        long min12\
    \ = lst.stream().min(Long::compareTo).get();\n        long max12 = lst.stream().max(Long::compareTo).get();\n\
    \        long min13 = lst.stream().min(Long::compareTo).get();\n        long max13\
    \ = lst.stream().max(Long::compareTo).get();\n        long min14 = lst.stream().min(Long::compareTo).get();\n\
    \        long max14 = lst.stream().max(Long::compareTo).get();\n        long min15\
    \ = lst.stream().min(Long::compareTo).get();\n        long max15 = lst.stream().max(Long::compareTo).get();\n\
    \        long min16 = lst.stream().min(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpen4crfdm.java:50: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpen4crfdm.java:50: error: ';' expected\n    }\n     ^\n/tmp/tmpen4crfdm.java:51:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpen4crfdm.java:51: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpen4crfdm.java:51: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpen4crfdm.java:51: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpen4crfdm.java:63: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i));\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpapmxzkr1.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> tmp = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min\
    \ + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long\
    \ mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n\
    \        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max -\
    \ min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 =\
    \ min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n      \
    \  long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - \n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx_8gpuvo.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpx_8gpuvo.java:61: error: ';' expected\n    }\n     ^\n/tmp/tmpx_8gpuvo.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpx_8gpuvo.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpx_8gpuvo.java:62: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpx_8gpuvo.java:62: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpx_8gpuvo.java:74: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid / 3;\n        long\
    \ mid4 = mid / 4;\n        long mid5 = mid / 5;\n        long mid6 = mid / 6;\n\
    \        long mid7 = mid / 7;\n        long mid8 = mid / 8;\n        long mid9\
    \ = mid / 9;\n        long mid10 = mid / 10;\n        long mid11 = mid / 11;\n\
    \        long mid12 = mid / 12;\n        long mid13 = mid / 13;\n        long\
    \ mid14 = mid / 14;\n        long mid15 = mid / 15;\n        long mid16 = mid\
    \ / 16;\n        long mid17 = mid / 17;\n        long mid18 = mid / 18;\n    \
    \    long mid19 = mid / 19;\n        long mid20 = mid / 20;\n        long mid21\
    \ = mid / 21;\n        long mid22 = mid / 22;\n        long mid23 = mid / 23;\n\
    \        long mid24 = mid / 24;\n        long mid25 = mid / 25;\n        long\
    \ mid26 = mid / 26;\n        long mid27 = mid / 27;\n        long mid28 = mid\
    \ / 28;\n        long mid29 = mid / 29;\n        long mid30 = mid / 30;\n    \
    \    long mid31 = mid / 31;\n        long mid32 = mid / 32;\n        long mid33\
    \ = mid / 33;\n        long mid34 = mid / 34;\n        long mid35 = mid / 35;\n\
    \        long mid36 = mid / 36;\n        long mid37 = mid / 37;\n        long\
    \ mid38 = mid / 38;\n        long mid39 = mid / 39;\n        long mid40 = mid\
    \ / 40;\n        long mid41 = mid / 41;\n        long mid42 = mid / 42;\n    \
    \    long mid43 = mid / 43;\n        long mid44 = mid / 44;\n        long mid45\
    \ = mid / 45;\n        long mid46 = mid / 46;\n        long mid47 = mid / 47;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp06a9t3a_.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long min = lst.stream().min(Comparator.naturalOrder()).get();\n        long\
    \ max = lst.stream().max(Comparator.naturalOrder()).get();\n        long min =\
    \ lst.stream().min(Comparator.naturalOrder()).get();\n        long max = lst.stream().max(Comparator.naturalOrder()).get();\n\
    \        long min = lst.stream().min(Comparator.naturalOrder()).get();\n     \
    \   long max = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min = lst.stream().min(Comparator.naturalOrder()).get();\n        long max =\
    \ lst.stream().max(Comparator.naturalOrder()).get();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long min = lst.stream().min(Comparator.naturalOrder()).get();\n        long\
    \ max = lst.stream().max(Comparator.naturalOrder()).get();\n        long min =\
    \ lst.stream().min(Comparator.naturalOrder()).get();\n        long max = lst.stream().max(Comparator.naturalOrder()).get();\n\
    \        long min = lst.stream().min(Comparator.naturalOrder()).get();\n     \
    \   long max = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min = lst.stream().min(Comparator.naturalOrder()).get();\n        long max =\
    \ lst.stream().max(Comparator.naturalOrder()).get();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long min = lst.stream().min(Comparator.naturalOrder()).get();\n        long\
    \ max = lst.stream().max(Comparator.naturalOrder()).get();\n        long min =\
    \ lst.stream().min(Comparator.naturalOrder()).get();\n        long max = lst.stream().max(Comparator.naturalOrder()).get();\n\
    \        long min = lst.stream().min(Comparator.naturalOrder()).get();\n     \
    \   long max = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min = lst.stream().min(Comparator.naturalOrder()).get();\n        long max =\
    \ lst.stream().max(Comparator.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy9xgzysl.java:47: error: <identifier> expected\n        long max\
    \ = lst.stream().max(Comparator.\n                                           \
    \    ^\n/tmp/tmpy9xgzysl.java:48: error: ';' expected\n    }\n     ^\n/tmp/tmpy9xgzysl.java:49:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpy9xgzysl.java:49: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpy9xgzysl.java:49: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpy9xgzysl.java:49: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpy9xgzysl.java:61: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long mid = min + (max - min) / 2;\n        long mid2 = min + (max - min) /\
    \ 2;\n        long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max\
    \ - min) / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 =\
    \ min + (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n       \
    \ long mid8 = min + (max - min) / 2;\n        long mid9 = min + (max - min) /\
    \ 2;\n        long mid10 = min + (max - min) / 2;\n        long mid11 = min +\
    \ (max - min) / 2;\n        long mid12 = min + (max - min) / 2;\n        long\
    \ mid13 = min + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n\
    \        long mid15 = min + (max - min) / 2;\n        long mid16 = min + (max\
    \ - min) / 2;\n        long mid17 = min + (max - min) / 2;\n        long mid18\
    \ = min + (max - min) / 2;\n        long mid19 = min + (max - min) / 2;\n    \
    \    long mid20 = min + (max - min) / 2;\n        long mid21 = min + (max - min)\
    \ / 2;\n        long mid22 = min + (max - min) / 2;\n        long mid23 = min\
    \ + (max - min) / 2;\n        long mid24 = min + (max - min) / 2;\n        long\
    \ mid25 = min + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n\
    \        long mid27 = min + (max - min) / 2;\n        long mid28 = min + (max\
    \ - min) / 2;\n        long mid29 = min + (max - min) / 2;\n        long mid30\
    \ = min + (max - min) / 2;\n        long mid31 = min + (max - min) / 2;\n    \
    \    long mid32 = min + (max - min) / 2;\n        long mid33 = min + (max - min)\
    \ / 2;\n        long mid34 = min + (max - min) / 2;\n        long mid35 = min\
    \ + (max - min) / 2;\n        long mid36 = min + (max - min) / 2;\n        long\
    \ mid37 = min + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n\
    \        long mid39 = min + (max - min) / 2;\n        long mid40 = min + (max\
    \ - min) / 2;\n        \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmga0u_aq.java:61: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3\
    \ = min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n     \
    \   long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min)\
    \ / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min +\
    \ (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8nwm9rck.java:60: error: ')' expected\n        long mid41 = min\
    \ + (max - min\n                                     ^\n/tmp/tmp8nwm9rck.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp8nwm9rck.java:62: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp8nwm9rck.java:62: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp8nwm9rck.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp8nwm9rck.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp8nwm9rck.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i = min; i <=\
    \ max; i++) {\n            temp = i;\n            while (lst.contains(temp)) {\n\
    \                temp = temp * 2;\n            }\n            result.add(temp);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xo4xz97.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyny7rp28.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpyny7rp28.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpyny7rp28.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpyny7rp28.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpyny7rp28.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpyny7rp28.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpyny7rp28.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3\
    \ = min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n     \
    \   long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min)\
    \ / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min +\
    \ (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp95kwhaue.java:60: error: ')' expected\n        long mid41 = min\
    \ + (max - min\n                                     ^\n/tmp/tmp95kwhaue.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp95kwhaue.java:62: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp95kwhaue.java:62: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp95kwhaue.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp95kwhaue.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp95kwhaue.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n     \
    \   long mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid\
    \ / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n       \
    \ long mid11 = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 =\
    \ mid / 13;\n        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n\
    \        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long\
    \ mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid\
    \ / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid / 22;\n    \
    \    long mid23 = mid / 23;\n        long mid24 = mid / 24;\n        long mid25\
    \ = mid / 25;\n        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n\
    \        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long\
    \ mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid\
    \ / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid / 34;\n    \
    \    long mid35 = mid / 35;\n        long mid36 = mid / 36;\n        long mid37\
    \ = mid / 37;\n        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n\
    \        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long\
    \ mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid\
    \ / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid / 46;\n    \
    \    long mid47 = mid / 47;\n        long mid48 = mid / 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk8vwqgms.java:68: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i));\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp05e5m_je.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        result.add(min);\n        result.add(mid);\n\
    \        result.add(max);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpci9h5dbo.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3\
    \ = min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n     \
    \   long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min)\
    \ / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min +\
    \ (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr4kuwofw.java:60: error: ')' expected\n        long mid41 = min\
    \ + (max - min\n                                     ^\n/tmp/tmpr4kuwofw.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpr4kuwofw.java:62: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpr4kuwofw.java:62: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpr4kuwofw.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpr4kuwofw.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpr4kuwofw.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        ArrayList<Long> temp2 = new ArrayList<>();\n        ArrayList<Long> temp3\
    \ = new ArrayList<>();\n        ArrayList<Long> temp4 = new ArrayList<>();\n \
    \       ArrayList<Long> temp5 = new ArrayList<>();\n        ArrayList<Long> temp6\
    \ = new ArrayList<>();\n        ArrayList<Long> temp7 = new ArrayList<>();\n \
    \       ArrayList<Long> temp8 = new ArrayList<>();\n        ArrayList<Long> temp9\
    \ = new ArrayList<>();\n        ArrayList<Long> temp10 = new ArrayList<>();\n\
    \        ArrayList<Long> temp11 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp12 = new ArrayList<>();\n        ArrayList<Long> temp13 = new ArrayList<>();\n\
    \        ArrayList<Long> temp14 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp15 = new ArrayList<>();\n        ArrayList<Long> temp16 = new ArrayList<>();\n\
    \        ArrayList<Long> temp17 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp18 = new ArrayList<>();\n        ArrayList<Long> temp19 = new ArrayList<>();\n\
    \        ArrayList<Long> temp20 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp21 = new ArrayList<>();\n        ArrayList<Long> temp22 = new ArrayList<>();\n\
    \        ArrayList<Long> temp23 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp24 = new ArrayList<>();\n        ArrayList<Long> temp25 = new ArrayList<>();\n\
    \        ArrayList<Long> temp26 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp27 = new ArrayList<>();\n        ArrayList<Long> temp28 = new ArrayList<>();\n\
    \        ArrayList<Long> temp29 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp30 = new ArrayList<>();\n        ArrayList<Long> temp31 = new ArrayList<>();\n\
    \        ArrayList<Long> temp32 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp33 = new ArrayList<>();\n        ArrayList<Long> temp34 = new ArrayList<>();\n\
    \        ArrayList<Long> temp35 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp36 = new ArrayList<>();\n        ArrayList<Long> temp37 = new ArrayList<>();\n\
    \        ArrayList<Long> temp38 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp39 = new ArrayList<>();\n        ArrayList<Long> temp40 = new ArrayList<>();\n\
    \        ArrayList<Long> temp41 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp42 = new ArrayList<>();\n        ArrayList<Long> temp43 = new ArrayList<>();\n\
    \        ArrayList<Long> temp44 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp45 = new ArrayList<>();\n        ArrayList<Long> temp46 = new ArrayList<>();\n\
    \        ArrayList<Long> temp47 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp48 = new ArrayList<>();\n        ArrayList<Long> temp49 = new ArrayList<>();\n\
    \        ArrayList<Long> temp50 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9zhfhr8r.java:68: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp9zhfhr8r.java:69: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmp9zhfhr8r.java:69: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmp9zhfhr8r.java:69: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp9zhfhr8r.java:69: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp9zhfhr8r.java:69:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp9zhfhr8r.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiia04xwb.java:68: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp06u6m2u1.java:68: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long min2 = lst.stream().min(Comparator.naturalOrder()).get();\n        long\
    \ max2 = lst.stream().max(Comparator.naturalOrder()).get();\n        long min3\
    \ = lst.stream().min(Comparator.naturalOrder()).get();\n        long max3 = lst.stream().max(Comparator.naturalOrder()).get();\n\
    \        long min4 = lst.stream().min(Comparator.naturalOrder()).get();\n    \
    \    long max4 = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min5 = lst.stream().min(Comparator.naturalOrder()).get();\n        long max5\
    \ = lst.stream().max(Comparator.naturalOrder()).get();\n        long min6 = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max6 = lst.stream().max(Comparator.naturalOrder()).get();\n    \
    \    long min7 = lst.stream().min(Comparator.naturalOrder()).get();\n        long\
    \ max7 = lst.stream().max(Comparator.naturalOrder()).get();\n        long min8\
    \ = lst.stream().min(Comparator.naturalOrder()).get();\n        long max8 = lst.stream().max(Comparator.naturalOrder()).get();\n\
    \        long min9 = lst.stream().min(Comparator.naturalOrder()).get();\n    \
    \    long max9 = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min10 = lst.stream().min(Comparator.naturalOrder()).get();\n        long max10\
    \ = lst.stream().max(Comparator.naturalOrder()).get();\n        long min11 = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max11 = lst.stream().max(Comparator.naturalOrder()).get();\n   \
    \     long min12 = lst.stream().min(Comparator.naturalOrder()).get();\n      \
    \  long max12 = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min13 = lst.stream().min(Comparator.naturalOrder()).get();\n        long max13\
    \ = lst.stream().max(Comparator.naturalOrder()).get();\n        long min14 = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max14 = lst.stream().max(Comparator.naturalOrder()).\n    }\n  \
    \  public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpro1k7240.java:45: error: <identifier> expected\n        long max14\
    \ = lst.stream().max(Comparator.naturalOrder()).\n                           \
    \                                      ^\n/tmp/tmpro1k7240.java:47: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpro1k7240.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpro1k7240.java:47: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpro1k7240.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpro1k7240.java:47: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpro1k7240.java:59: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        long left = min;\n        long right = max;\n        while (left\
    \ < right) {\n            while (left < right && lst.get(left) < mid) {\n    \
    \            left++;\n            }\n            while (left < right && lst.get(right)\
    \ > mid) {\n                right--;\n            }\n            if (left < right)\
    \ {\n                result.add(lst.get(left));\n                result.add(lst.get(right));\n\
    \                left++;\n                right--;\n            }\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwe10ml56.java:32: error: no suitable method found for get(long)\n\
    \            while (left < right && lst.get(left) < mid) {\n                 \
    \                     ^\n    method List.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n    method AbstractList.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method ArrayList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n/tmp/tmpwe10ml56.java:35:\
    \ error: no suitable method found for get(long)\n            while (left < right\
    \ && lst.get(right) > mid) {\n                                      ^\n    method\
    \ List.get(int) is not applicable\n      (argument mismatch; possible lossy conversion\
    \ from long to int)\n    method AbstractList.get(int) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ ArrayList.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from long to int)\n/tmp/tmpwe10ml56.java:39: error: no suitable method\
    \ found for get(long)\n                result.add(lst.get(left));\n          \
    \                    ^\n    method List.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n    method AbstractList.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method ArrayList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n/tmp/tmpwe10ml56.java:40:\
    \ error: no suitable method found for get(long)\n                result.add(lst.get(right));\n\
    \                              ^\n    method List.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ AbstractList.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method ArrayList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n4 er"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else {\n      \
    \          temp = mid;\n            }\n            result.add(temp);\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpny73333q.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpny73333q.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp08z_v113.java:68: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpizh1grn4.java:91: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n            mid = (mid +\
    \ temp) / 2;\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_bqcz7cj.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmp_bqcz7cj.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk4er15fo.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpk4er15fo.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpk4er15fo.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpk4er15fo.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpk4er15fo.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpk4er15fo.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk4er15fo.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long\
    \ mid3 = mid / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n\
    \        long mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8\
    \ = mid / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n \
    \       long mid11 = mid / 11;\n        long mid12 = mid / 12;\n        long mid13\
    \ = mid / 13;\n        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n\
    \        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long\
    \ mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid\
    \ / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid / 22;\n    \
    \    long mid23 = mid / 23;\n        long mid24 = mid / 24;\n        long mid25\
    \ = mid / 25;\n        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n\
    \        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long\
    \ mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid\
    \ / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid / 34;\n    \
    \    long mid35 = mid / 35;\n        long mid36 = mid / 36;\n        long mid37\
    \ = mid / 37;\n        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n\
    \        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long\
    \ mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid\
    \ / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid / 46;\n    \
    \    long mid47 = mid / 47;\n        long mid48 = mid / 48;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpix8oa7z4.java:69: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk6p4mjoc.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Long min\
    \ = lst.get(0);\n        Long max = lst.get(lst.size() - 1);\n        Long mid\
    \ = min + ((max - min) / 2);\n        Long temp;\n        for(int i = 0; i < lst.size();\
    \ i++) {\n            temp = lst.get(i);\n            if(temp == mid) {\n    \
    \            result.add(mid);\n                mid = min + ((max - min) / 2);\n\
    \            }\n            else if(temp < mid) {\n                result.add(temp);\n\
    \                mid = temp;\n            }\n            else if(temp > mid) {\n\
    \                result.add(mid);\n                mid = temp;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe200lqg8.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n     \
    \   long mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid\
    \ / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n       \
    \ long mid11 = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 =\
    \ mid / 13;\n        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n\
    \        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long\
    \ mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid\
    \ / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid / 22;\n    \
    \    long mid23 = mid / 23;\n        long mid24 = mid / 24;\n        long mid25\
    \ = mid / 25;\n        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n\
    \        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long\
    \ mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid\
    \ / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid / 34;\n    \
    \    long mid35 = mid / 35;\n        long mid36 = mid / 36;\n        long mid37\
    \ = mid / 37;\n        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n\
    \        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long\
    \ mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid\
    \ / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid / 46;\n    \
    \    long mid47 = mid / 47;\n        long mid48 = mid / 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5o35h9d9.java:68: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3\
    \ = min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n     \
    \   long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min)\
    \ / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min +\
    \ (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpicunzy5s.java:60: error: ')' expected\n        long mid41 = min\
    \ + (max - min\n                                     ^\n/tmp/tmpicunzy5s.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpicunzy5s.java:62: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpicunzy5s.java:62: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpicunzy5s.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpicunzy5s.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpicunzy5s.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Long min = lst.get(0);\n        Long max\
    \ = lst.get(0);\n        for (Long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        Long mid = min + (max - min)\
    \ / 2;\n        for (Long i : lst) {\n            if (i < mid) {\n           \
    \     result.add(i);\n            } else if (i > mid) {\n                result.add(max\
    \ - i);\n            } else {\n                result.add(min - i);\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72x2cj9a.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmpgm0e_0.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpmpgm0e_0.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpmpgm0e_0.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpmpgm0e_0.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpmpgm0e_0.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpmpgm0e_0.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpmpgm0e_0.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid * 3;\n\
    \        long mid4 = mid * 4;\n        long mid5 = mid * 5;\n        long mid6\
    \ = mid * 6;\n        long mid7 = mid * 7;\n        long mid8 = mid * 8;\n   \
    \     long mid9 = mid * 9;\n        long mid10 = mid * 10;\n        long mid11\
    \ = mid * 11;\n        long mid12 = mid * 12;\n        long mid13 = mid * 13;\n\
    \        long mid14 = mid * 14;\n        long mid15 = mid * 15;\n        long\
    \ mid16 = mid * 16;\n        long mid17 = mid * 17;\n        long mid18 = mid\
    \ * 18;\n        long mid19 = mid * 19;\n        long mid20 = mid * 20;\n    \
    \    long mid21 = mid * 21;\n        long mid22 = mid * 22;\n        long mid23\
    \ = mid * 23;\n        long mid24 = mid * 24;\n        long mid25 = mid * 25;\n\
    \        long mid26 = mid * 26;\n        long mid27 = mid * 27;\n        long\
    \ mid28 = mid * 28;\n        long mid29 = mid * 29;\n        long mid30 = mid\
    \ * 30;\n        long mid31 = mid * 31;\n        long mid32 = mid * 32;\n    \
    \    long mid33 = mid * 33;\n        long mid34 = mid * 34;\n        long mid35\
    \ = mid * 35;\n        long mid36 = mid * 36;\n        long mid37 = mid * 37;\n\
    \        long mid38 = mid * 38;\n        long mid39 = mid * 39;\n        long\
    \ mid40 = mid * 40;\n        long mid41 = mid * 41;\n        long mid42 = mid\
    \ * 42;\n        long mid43 = mid * 43;\n        long mid44 = mid * 44;\n    \
    \    long mid45 = mid * 45;\n        long mid46 = mid * 46;\n        long mid47\
    \ = mid * 47;\n        long mid48 = mid * 48;\n        long mid49 = mid * 49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnfe_wfxu.java:68: error: ';' expected\n        long mid49 = mid\
    \ * 49\n                             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (Long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + ((max - min)\
    \ / 2);\n        for (Long i : lst) {\n            if (i < mid) {\n          \
    \      result.add(i);\n            } else if (i > mid) {\n                result.add(max\
    \ - i);\n            } else {\n                result.add(min - i);\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbuuzpjo.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n            mid = (mid +\
    \ temp) / 2;\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb5zvwq5x.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpb5zvwq5x.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long middle\
    \ = min + (max - min) / 2;\n        long middle2 = middle + 1;\n        long middle3\
    \ = middle2 + 1;\n        long middle4 = middle3 + 1;\n        long middle5 =\
    \ middle4 + 1;\n        long middle6 = middle5 + 1;\n        long middle7 = middle6\
    \ + 1;\n        long middle8 = middle7 + 1;\n        long middle9 = middle8 +\
    \ 1;\n        long middle10 = middle9 + 1;\n        long middle11 = middle10 +\
    \ 1;\n        long middle12 = middle11 + 1;\n        long middle13 = middle12\
    \ + 1;\n        long middle14 = middle13 + 1;\n        long middle15 = middle14\
    \ + 1;\n        long middle16 = middle15 + 1;\n        long middle17 = middle16\
    \ + 1;\n        long middle18 = middle17 + 1;\n        long middle19 = middle18\
    \ + 1;\n        long middle20 = middle19 + 1;\n        long middle21 = middle20\
    \ + 1;\n        long middle22 = middle21 + 1;\n        long middle23 = middle22\
    \ + 1;\n        long middle24 = middle23 + 1;\n        long middle25 = middle24\
    \ + 1;\n        long middle26 = middle25 + 1;\n        long middle27 = middle26\
    \ + 1;\n        long middle28 = middle27 + 1;\n        long middle29 = middle28\
    \ + 1;\n        long middle30 = middle29 + 1;\n        long middle31 = middle30\
    \ + 1;\n        long middle32 = middle31 + 1;\n        long middle33 = middle32\
    \ + 1;\n        long middle34 = middle33 + 1;\n        long middle35 = middle34\
    \ + 1;\n        long middle36 = middle35 + 1;\n        long middle37 = middle36\
    \ + 1;\n        long middle38 = middle37 + 1;\n        long middle39 = middle38\
    \ + 1;\n        long middle40 = middle39 + 1;\n        long middle41 = middle40\
    \ + 1;\n        long middle42 = middle41 + 1;\n        long middle43 = middle42\
    \ + 1;\n        long middle44 = middle43 + 1;\n        long middle45 = middle44\
    \ + 1;\n        long middle46 = middle45 + 1;\n        long middle47 = middle46\
    \ + 1;\n        long middle48 = middle47 + 1;\n        long middle49 = middle48\
    \ + 1;\n        long middle50 = middle49 + 1;\n        long middle51 = middle50\
    \ + 1;\n        long middle52 = middle51 + 1;\n        long middle53 = middle52\
    \ + 1;\n        \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwbfwmwxa.java:74: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy5gks1ob.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpy5gks1ob.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpy5gks1ob.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpy5gks1ob.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpy5gks1ob.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpy5gks1ob.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpy5gks1ob.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        for(Long i : lst) {\n            result.add(i);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9e2ur0ly.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (long i : lst) {\n            if (i < mid) {\n \
    \               result.add(i);\n                min = i;\n            } else if\
    \ (i > mid) {\n                result.add(max);\n                max = i;\n  \
    \          } else {\n                result.add(mid);\n                mid = i;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpky_ru1j6.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().get\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_r0t7nws.java:56: error: ';' expected\n        long min = lst.stream().min().get\n\
    \                                         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n            mid = (mid +\
    \ temp) / 2;\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpayt6f0so.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpayt6f0so.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        Long minValue = Collections.min(lst);\n        Long maxValue = Collections.max(lst);\n\
    \        Long minIndex = null;\n        Long maxIndex = null;\n        Long currentIndex\
    \ = null;\n        Long currentValue = null;\n        for (Long value : lst) {\n\
    \            if (minIndex == null || value < minValue) {\n                minIndex\
    \ = value;\n            }\n            if (maxIndex == null || value > maxValue)\
    \ {\n                maxIndex = value;\n            }\n            if (currentIndex\
    \ == null || currentValue > value) {\n                currentIndex = value;\n\
    \                currentValue = value;\n            }\n        }\n        Long\
    \ currentMin = minIndex;\n        Long currentMax = maxIndex;\n        Long currentMinValue\
    \ = minValue;\n        Long currentMaxValue = maxValue;\n        Long currentMinIndex\
    \ = minIndex;\n        Long currentMaxIndex = maxIndex;\n        Long currentMinValue\
    \ = minValue;\n        Long currentMaxValue = maxValue;\n        Long currentMinIndex\
    \ = minIndex;\n        Long currentMaxIndex = maxIndex;\n        Long currentMinValue\
    \ = minValue;\n        Long currentMaxValue = maxValue;\n        Long currentMinIndex\
    \ = minIndex;\n        Long currentMaxIndex = maxIndex;\n        Long currentMinValue\
    \ = minValue;\n        Long currentMaxValue = maxValue;\n        Long currentMinIndex\
    \ = minIndex;\n        Long currentMaxIndex = maxIndex;\n        Long currentMinValue\
    \ = minValue;\n        Long currentMaxValue = maxValue;\n        Long currentMinIndex\
    \ = minIndex;\n        Long currentMaxIndex = maxIndex;\n        Long currentMinValue\
    \ = minValue;\n        Long currentMaxValue = maxValue;\n        Long currentMinIndex\
    \ = minIndex;\n        Long currentMaxIndex = maxIndex;\n        Long currentMinValue\
    \ = minValue;\n        Long currentMaxValue = maxValue;\n        Long currentMinIndex\
    \ = minIndex;\n        Long currentMaxIndex = maxIndex;\n        Long currentMinValue\
    \ = minValue;\n        Long currentMaxValue = maxValue;\n        Long currentMinIndex\
    \ = minIndex;\n        Long currentMaxIndex = maxIndex;\n        Long currentMinValue\
    \ = minValue;\n        Long currentMaxValue = maxValue;\n        Long currentMinIndex\
    \ = minIndex;\n        Long currentMaxIndex = maxIndex;\n        Long currentMinValue\
    \ = minValue;\n        Long currentMaxValue = maxValue;\n        Long currentMinIndex\
    \ = minIndex;\n        Long currentMaxIndex = maxIndex;\n        Long\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdtliz3ue.java:79: error: not a statement\n        Long\n      \
    \  ^\n/tmp/tmpdtliz3ue.java:79: error: ';' expected\n        Long\n          \
    \  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbamde0o_.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3\
    \ = min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n     \
    \   long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min)\
    \ / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min +\
    \ (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe2i7xicm.java:60: error: ')' expected\n        long mid41 = min\
    \ + (max - min\n                                     ^\n/tmp/tmpe2i7xicm.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpe2i7xicm.java:62: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpe2i7xicm.java:62: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpe2i7xicm.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpe2i7xicm.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpe2i7xicm.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n       \
    \ long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min) /\
    \ 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max\
    \ - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 =\
    \ min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n       \
    \ long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = min + (\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2pu2e96a.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp2pu2e96a.java:61: error: ';' expected\n    }\n     ^\n/tmp/tmp2pu2e96a.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp2pu2e96a.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp2pu2e96a.java:62: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp2pu2e96a.java:62: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp2pu2e96a.java:74: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Long minValue = lst.get(0);\n        Long\
    \ maxValue = lst.get(lst.size() - 1);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            Long value = lst.get(i);\n            if (value < minValue)\
    \ {\n                minValue = value;\n            }\n            if (value >\
    \ maxValue) {\n                maxValue = value;\n            }\n        }\n \
    \       Long middleValue = minValue + (maxValue - minValue) / 2;\n        Long\
    \ middleIndex = 0;\n        Long middleValueIndex = 0;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            Long value = lst.get(i);\n            if\
    \ (value == middleValue) {\n                middleIndex = i;\n               \
    \ middleValueIndex = i;\n            }\n        }\n        Long firstValue = lst.get(middleIndex);\n\
    \        Long secondValue = lst.get(middleValueIndex);\n        Long thirdValue\
    \ = lst.get(middleIndex + 1);\n        Long fourthValue = lst.get(middleValueIndex\
    \ + 1);\n        result.add(firstValue);\n        result.add(secondValue);\n \
    \       result.add(thirdValue);\n        result.add(fourthValue);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps170wd7h.java:30: error: incompatible types: int cannot be converted\
    \ to Long\n        Long middleIndex = 0;\n                           ^\n/tmp/tmps170wd7h.java:31:\
    \ error: incompatible types: int cannot be converted to Long\n        Long middleValueIndex\
    \ = 0;\n                                ^\n/tmp/tmps170wd7h.java:35: error: incompatible\
    \ types: int cannot be converted to Long\n                middleIndex = i;\n \
    \                             ^\n/tmp/tmps170wd7h.java:36: error: incompatible\
    \ types: int cannot be converted to Long\n                middleValueIndex = i;\n\
    \                                   ^\n/tmp/tmps170wd7h.java:39: error: no suitable\
    \ method found for get(Long)\n        Long firstValue = lst.get(middleIndex);\n\
    \                             ^\n    method List.get(int) is not applicable\n\
    \      (argument mismatch; Long cannot be converted to int)\n    method AbstractList.get(int)\
    \ is not applicable\n      (argument mismatch; Long cannot be converted to int)\n\
    \    method ArrayList.get(int) is not applicable\n      (argument mismatch; Long\
    \ cannot be converted to int)\n/tmp/tmps170wd7h.java:40: error: no suitable method\
    \ found for get(Long)\n        Long secondValue = lst.get(middleValueIndex);\n\
    \                              ^\n    method List.get(int) is not applicable\n\
    \      (argument mismatch; Long cannot be converted to int)\n    method AbstractList.get(int)\
    \ is not applicable\n      (argument mismatch; Long cannot be converted to int)\n\
    \    method ArrayList.get(int) is not applicable\n      (argument mismatch; Long\
    \ cannot be converted to int)\n/tmp/tmps170wd7h.java:41: error: no suitable method\
    \ found for get(long)\n        Long thirdValue = lst.get(middleIndex + 1);\n \
    \                            ^\n    method List.get(int) is not applicable\n \
    \     (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ AbstractList.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method ArrayList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 3;\n        long mid4 = mid * 4;\n        long mid5 = mid * 5;\n     \
    \   long mid6 = mid * 6;\n        long mid7 = mid * 7;\n        long mid8 = mid\
    \ * 8;\n        long mid9 = mid * 9;\n        long mid10 = mid * 10;\n       \
    \ long mid11 = mid * 11;\n        long mid12 = mid * 12;\n        long mid13 =\
    \ mid * 13;\n        long mid14 = mid * 14;\n        long mid15 = mid * 15;\n\
    \        long mid16 = mid * 16;\n        long mid17 = mid * 17;\n        long\
    \ mid18 = mid * 18;\n        long mid19 = mid * 19;\n        long mid20 = mid\
    \ * 20;\n        long mid21 = mid * 21;\n        long mid22 = mid * 22;\n    \
    \    long mid23 = mid * 23;\n        long mid24 = mid * 24;\n        long mid25\
    \ = mid * 25;\n        long mid26 = mid * 26;\n        long mid27 = mid * 27;\n\
    \        long mid28 = mid * 28;\n        long mid29 = mid * 29;\n        long\
    \ mid30 = mid * 30;\n        long mid31 = mid * 31;\n        long mid32 = mid\
    \ * 32;\n        long mid33 = mid * 33;\n        long mid34 = mid * 34;\n    \
    \    long mid35 = mid * 35;\n        long mid36 = mid * 36;\n        long mid37\
    \ = mid * 37;\n        long mid38 = mid * 38;\n        long mid39 = mid * 39;\n\
    \        long mid40 = mid * 40;\n        long mid41 = mid * 41;\n        long\
    \ mid42 = mid * 42;\n        long mid43 = mid * 43;\n        long mid44 = mid\
    \ * 44;\n        long mid45 = mid * 45;\n        long mid46 = mid * 46;\n    \
    \    long mid47 = mid * 47;\n        long mid48 = mid * 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp337f0s9l.java:68: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long mid = min + (max - min) / 2;\n        long mid2 = min + (max - min) /\
    \ 2;\n        long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max\
    \ - min) / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 =\
    \ min + (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n       \
    \ long mid8 = min + (max - min) / 2;\n        long mid9 = min + (max - min) /\
    \ 2;\n        long mid10 = min + (max - min) / 2;\n        long mid11 = min +\
    \ (max - min) / 2;\n        long mid12 = min + (max - min) / 2;\n        long\
    \ mid13 = min + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n\
    \        long mid15 = min + (max - min) / 2;\n        long mid16 = min + (max\
    \ - min) / 2;\n        long mid17 = min + (max - min) / 2;\n        long mid18\
    \ = min + (max - min) / 2;\n        long mid19 = min + (max - min) / 2;\n    \
    \    long mid20 = min + (max - min) / 2;\n        long mid21 = min + (max - min)\
    \ / 2;\n        long mid22 = min + (max - min) / 2;\n        long mid23 = min\
    \ + (max - min) / 2;\n        long mid24 = min + (max - min) / 2;\n        long\
    \ mid25 = min + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n\
    \        long mid27 = min + (max - min) / 2;\n        long mid28 = min + (max\
    \ - min) / 2;\n        long mid29 = min + (max - min) / 2;\n        long mid30\
    \ = min + (max - min) / 2;\n        long mid31 = min + (max - min) / 2;\n    \
    \    long mid32 = min + (max - min) / 2;\n        long mid33 = min + (max - min)\
    \ / 2;\n        long mid34 = min + (max - min) / 2;\n        long mid35 = min\
    \ + (max - min) / 2;\n        long mid36 = min + (max - min) / 2;\n        long\
    \ mid37 = min + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n\
    \        long mid39 = min + (max - min) / 2;\n        long mid40 = min + (max\
    \ - min) / 2;\n        \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7r28k7jf.java:61: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        ArrayList<Long> temp2 = new ArrayList<>();\n        ArrayList<Long> temp3\
    \ = new ArrayList<>();\n        ArrayList<Long> temp4 = new ArrayList<>();\n \
    \       ArrayList<Long> temp5 = new ArrayList<>();\n        ArrayList<Long> temp6\
    \ = new ArrayList<>();\n        ArrayList<Long> temp7 = new ArrayList<>();\n \
    \       ArrayList<Long> temp8 = new ArrayList<>();\n        ArrayList<Long> temp9\
    \ = new ArrayList<>();\n        ArrayList<Long> temp10 = new ArrayList<>();\n\
    \        ArrayList<Long> temp11 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp12 = new ArrayList<>();\n        ArrayList<Long> temp13 = new ArrayList<>();\n\
    \        ArrayList<Long> temp14 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp15 = new ArrayList<>();\n        ArrayList<Long> temp16 = new ArrayList<>();\n\
    \        ArrayList<Long> temp17 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp18 = new ArrayList<>();\n        ArrayList<Long> temp19 = new ArrayList<>();\n\
    \        ArrayList<Long> temp20 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp21 = new ArrayList<>();\n        ArrayList<Long> temp22 = new ArrayList<>();\n\
    \        ArrayList<Long> temp23 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp24 = new ArrayList<>();\n        ArrayList<Long> temp25 = new ArrayList<>();\n\
    \        ArrayList<Long> temp26 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp27 = new ArrayList<>();\n        ArrayList<Long> temp28 = new ArrayList<>();\n\
    \        ArrayList<Long> temp29 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp30 = new ArrayList<>();\n        ArrayList<Long> temp31 = new ArrayList<>();\n\
    \        ArrayList<Long> temp32 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp33 = new ArrayList<>();\n        ArrayList<Long> temp34 = new ArrayList<>();\n\
    \        ArrayList<Long> temp35 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp36 = new ArrayList<>();\n        ArrayList<Long> temp37 = new ArrayList<>();\n\
    \        ArrayList<Long> temp38 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp39 = new ArrayList<>();\n        ArrayList<Long> temp40 = new ArrayList<>();\n\
    \        ArrayList<Long> temp41 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp42 = new ArrayList<>();\n        ArrayList<Long> temp43 = new ArrayList<>();\n\
    \        ArrayList<Long> temp44 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp45 = new ArrayList<>();\n        ArrayList<Long> temp46 = new ArrayList<>();\n\
    \        ArrayList<Long> temp47 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp48 = new ArrayList<>();\n        ArrayList<Long> temp49 = new ArrayList<>();\n\
    \        ArrayList<Long> temp50 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph6c0jll2.java:68: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmph6c0jll2.java:69: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmph6c0jll2.java:69: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmph6c0jll2.java:69: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmph6c0jll2.java:69: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmph6c0jll2.java:69:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmph6c0jll2.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqoap6m64.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpqoap6m64.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpqoap6m64.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpqoap6m64.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpqoap6m64.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpqoap6m64.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpqoap6m64.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            } else if (i > max) {\n                max\
    \ = i;\n            }\n        }\n        long mid = min + (max - min) / 2;\n\
    \        for (long i : lst) {\n            if (i < mid) {\n                result.add(i);\n\
    \            } else if (i > mid) {\n                result.add(max - i);\n   \
    \         } else {\n                result.add(min - i);\n            }\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ci7bvxb.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq5u8sgti.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpq5u8sgti.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpq5u8sgti.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpq5u8sgti.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpq5u8sgti.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpq5u8sgti.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpq5u8sgti.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long temp;\n        for (long\
    \ i : lst) {\n            if (i == min) {\n                temp = max;\n     \
    \           max = min;\n                min = temp;\n            } else if (i\
    \ == max) {\n                temp = min;\n                min = max;\n       \
    \         max = temp;\n            }\n            result.add(i);\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprhxy8zo7.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i));\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprdymqk9s.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnr51gg_h.java:91: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm6w53ag_.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpm6w53ag_.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpm6w53ag_.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpm6w53ag_.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpm6w53ag_.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpm6w53ag_.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpm6w53ag_.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        ArrayList<Long> temp2 = new ArrayList<>();\n        ArrayList<Long> temp3\
    \ = new ArrayList<>();\n        ArrayList<Long> temp4 = new ArrayList<>();\n \
    \       ArrayList<Long> temp5 = new ArrayList<>();\n        ArrayList<Long> temp6\
    \ = new ArrayList<>();\n        ArrayList<Long> temp7 = new ArrayList<>();\n \
    \       ArrayList<Long> temp8 = new ArrayList<>();\n        ArrayList<Long> temp9\
    \ = new ArrayList<>();\n        ArrayList<Long> temp10 = new ArrayList<>();\n\
    \        ArrayList<Long> temp11 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp12 = new ArrayList<>();\n        ArrayList<Long> temp13 = new ArrayList<>();\n\
    \        ArrayList<Long> temp14 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp15 = new ArrayList<>();\n        ArrayList<Long> temp16 = new ArrayList<>();\n\
    \        ArrayList<Long> temp17 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp18 = new ArrayList<>();\n        ArrayList<Long> temp19 = new ArrayList<>();\n\
    \        ArrayList<Long> temp20 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp21 = new ArrayList<>();\n        ArrayList<Long> temp22 = new ArrayList<>();\n\
    \        ArrayList<Long> temp23 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp24 = new ArrayList<>();\n        ArrayList<Long> temp25 = new ArrayList<>();\n\
    \        ArrayList<Long> temp26 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp27 = new ArrayList<>();\n        ArrayList<Long> temp28 = new ArrayList<>();\n\
    \        ArrayList<Long> temp29 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp30 = new ArrayList<>();\n        ArrayList<Long> temp31 = new ArrayList<>();\n\
    \        ArrayList<Long> temp32 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp33 = new ArrayList<>();\n        ArrayList<Long> temp34 = new ArrayList<>();\n\
    \        ArrayList<Long> temp35 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp36 = new ArrayList<>();\n        ArrayList<Long> temp37 = new ArrayList<>();\n\
    \        ArrayList<Long> temp38 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp39 = new ArrayList<>();\n        ArrayList<Long> temp40 = new ArrayList<>();\n\
    \        ArrayList<Long> temp41 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp42 = new ArrayList<>();\n        ArrayList<Long> temp43 = new ArrayList<>();\n\
    \        ArrayList<Long> temp44 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp45 = new ArrayList<>();\n        ArrayList<Long> temp46 = new ArrayList<>();\n\
    \        ArrayList<Long> temp47 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp48 = new ArrayList<>();\n        ArrayList<Long> temp49 = new ArrayList<>();\n\
    \        ArrayList<Long> temp50 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp43fe92gl.java:68: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp43fe92gl.java:69: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmp43fe92gl.java:69: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmp43fe92gl.java:69: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp43fe92gl.java:69: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp43fe92gl.java:69:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp43fe92gl.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        for(Long i : lst) {\n            result.add(i);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0xz_rl1i.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2xcfcg8x.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp2xcfcg8x.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp2xcfcg8x.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp2xcfcg8x.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp2xcfcg8x.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp2xcfcg8x.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp2xcfcg8x.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        for (long i : lst) {\n            if (i < mid) {\n           \
    \     result.add(i);\n            }\n            if (i > mid) {\n            \
    \    result.add(i - 1);\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoqxtif86.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            } else if (i > max) {\n                max\
    \ = i;\n            }\n        }\n        long mid = min + ((max - min) / 2);\n\
    \        for (long i : lst) {\n            if (i < mid) {\n                result.add(i);\n\
    \            } else if (i > mid) {\n                result.add(max - i);\n   \
    \         } else {\n                result.add(min - i);\n            }\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpez7kjs35.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i));\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp37bxavj8.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n  \
    \              min = i;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long mid = min + ((max - min)\
    \ / 2);\n        long temp;\n        for (long i : lst) {\n            if (i <\
    \ mid) {\n                temp = i;\n            } else {\n                temp\
    \ = mid;\n            }\n            result.add(temp);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfj957o4q.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long min2 = lst.stream().min(Comparator.naturalOrder()).get();\n        long\
    \ max2 = lst.stream().max(Comparator.naturalOrder()).get();\n        long min3\
    \ = lst.stream().min(Comparator.naturalOrder()).get();\n        long max3 = lst.stream().max(Comparator.naturalOrder()).get();\n\
    \        long min4 = lst.stream().min(Comparator.naturalOrder()).get();\n    \
    \    long max4 = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min5 = lst.stream().min(Comparator.naturalOrder()).get();\n        long max5\
    \ = lst.stream().max(Comparator.naturalOrder()).get();\n        long min6 = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max6 = lst.stream().max(Comparator.naturalOrder()).get();\n    \
    \    long min7 = lst.stream().min(Comparator.naturalOrder()).get();\n        long\
    \ max7 = lst.stream().max(Comparator.naturalOrder()).get();\n        long min8\
    \ = lst.stream().min(Comparator.naturalOrder()).get();\n        long max8 = lst.stream().max(Comparator.naturalOrder()).get();\n\
    \        long min9 = lst.stream().min(Comparator.naturalOrder()).get();\n    \
    \    long max9 = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min10 = lst.stream().min(Comparator.naturalOrder()).get();\n        long max10\
    \ = lst.stream().max(Comparator.naturalOrder()).get();\n        long min11 = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max11 = lst.stream().max(Comparator.naturalOrder()).get();\n   \
    \     long min12 = lst.stream().min(Comparator.naturalOrder()).get();\n      \
    \  long max12 = lst.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ min13 = lst.stream().min(Comparator.naturalOrder()).get();\n        long max13\
    \ = lst.stream().max(Comparator.naturalOrder()).get();\n        long min14 = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max14 = lst.stream().max(Comparator.naturalOrder()).\n    }\n  \
    \  public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpatrhhn_8.java:45: error: <identifier> expected\n        long max14\
    \ = lst.stream().max(Comparator.naturalOrder()).\n                           \
    \                                      ^\n/tmp/tmpatrhhn_8.java:47: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpatrhhn_8.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpatrhhn_8.java:47: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpatrhhn_8.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpatrhhn_8.java:47: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpatrhhn_8.java:59: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n     \
    \   long mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid\
    \ / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n       \
    \ long mid11 = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 =\
    \ mid / 13;\n        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n\
    \        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long\
    \ mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid\
    \ / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid / 22;\n    \
    \    long mid23 = mid / 23;\n        long mid24 = mid / 24;\n        long mid25\
    \ = mid / 25;\n        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n\
    \        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long\
    \ mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid\
    \ / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid / 34;\n    \
    \    long mid35 = mid / 35;\n        long mid36 = mid / 36;\n        long mid37\
    \ = mid / 37;\n        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n\
    \        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long\
    \ mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid\
    \ / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid / 46;\n    \
    \    long mid47 = mid / 47;\n        long mid48 = mid / 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkvojxlux.java:68: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> tmp = new ArrayList<>();\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   }\n            if (i > max) {\n                max = i;\n            }\n \
    \       }\n        for (long i : lst) {\n            if (i == min) {\n       \
    \         tmp.add(i);\n            }\n            if (i == max) {\n          \
    \      tmp.add(max);\n            }\n        }\n        for (long i : tmp) {\n\
    \            result.add(i);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqb_f3a2l.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for(long i : lst) {\n\
    \            if(i < mid) {\n                temp = i;\n            } else {\n\
    \                temp = mid;\n            }\n            result.add(temp);\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuskacwkf.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjimdd9nr.java:68: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Long minValue\
    \ = lst.get(0);\n        Long maxValue = lst.get(lst.size() - 1);\n        Long\
    \ minIndex = Collections.binarySearch(lst,minValue);\n        Long maxIndex =\
    \ Collections.binarySearch(lst,maxValue);\n        for(int i = minIndex; i <=\
    \ maxIndex; i++) {\n            result.add(lst.get(i));\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm1m7xdxz.java:21: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that int conforms to Long\n        Long minIndex\
    \ = Collections.binarySearch(lst,minValue);\n                                \
    \                ^\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>binarySearch(List<? extends Comparable<? super T>>,T)\n/tmp/tmpm1m7xdxz.java:22:\
    \ error: incompatible types: no instance(s) of type variable(s) T exist so that\
    \ int conforms to Long\n        Long maxIndex = Collections.binarySearch(lst,maxValue);\n\
    \                                                ^\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>binarySearch(List<? extends Comparable<?\
    \ super T>>,T)\n/tmp/tmpm1m7xdxz.java:23: error: incompatible types: Long cannot\
    \ be converted to int\n        for(int i = minIndex; i <= maxIndex; i++) {\n \
    \                   ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        long temp2;\n        long temp3;\n\
    \        long temp4;\n        long temp5;\n        long temp6;\n        long temp7;\n\
    \        long temp8;\n        long temp9;\n        long temp10;\n        long\
    \ temp11;\n        long temp12;\n        long temp13;\n        long temp14;\n\
    \        long temp15;\n        long temp16;\n        long temp17;\n        long\
    \ temp18;\n        long temp19;\n        long temp20;\n        long temp21;\n\
    \        long temp22;\n        long temp23;\n        long temp24;\n        long\
    \ temp25;\n        long temp26;\n        long temp27;\n        long temp28;\n\
    \        long temp29;\n        long temp30;\n        long temp31;\n        long\
    \ temp32;\n        long temp33;\n        long temp34;\n        long temp35;\n\
    \        long temp36;\n        long temp37;\n        long temp38;\n        long\
    \ temp39;\n        long temp40;\n        long temp41;\n        long temp42;\n\
    \        long temp43;\n        long temp44;\n        long temp45;\n        long\
    \ temp46;\n        long temp47;\n        long temp48;\n        long temp49;\n\
    \        long temp50;\n        long temp51;\n        long temp52;\n        long\
    \ temp53;\n        long temp54;\n        long temp55;\n        long temp56;\n\
    \        long temp57;\n        long temp58;\n        long temp59;\n        long\
    \ temp60;\n        long temp61;\n        long temp62;\n        long temp63;\n\
    \        long temp64;\n        long temp65;\n        long temp66;\n        long\
    \ temp67;\n        long temp68;\n        long temp69;\n        long temp70;\n\
    \        long temp71;\n        long temp72;\n        long temp73;\n        long\
    \ temp74;\n        long temp75;\n        long temp76;\n        long temp77;\n\
    \        long temp78;\n        long temp79;\n        long temp80;\n        long\
    \ temp81;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd3yypikg.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpd3yypikg.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        ArrayList<Long>\
    \ rest = lst.stream().filter(i -> i != mid).collect(Collectors.toList());\n  \
    \      result.addAll(strangeSortList(rest));\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu2jl0i5s.java:22: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        ArrayList<Long> rest = lst.stream().filter(i\
    \ -> i != mid).collect(Collectors.toList());\n                               \
    \                                          ^\n    equality constraints: List<Long>\n\
    \    upper bounds: ArrayList<Long>,Object\n  where R,A,T are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T,A,R>)\n\
    \    T extends Object declared in interface Stream\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 3;\n        long mid4 = mid * 4;\n        long mid5 = mid * 5;\n     \
    \   long mid6 = mid * 6;\n        long mid7 = mid * 7;\n        long mid8 = mid\
    \ * 8;\n        long mid9 = mid * 9;\n        long mid10 = mid * 10;\n       \
    \ long mid11 = mid * 11;\n        long mid12 = mid * 12;\n        long mid13 =\
    \ mid * 13;\n        long mid14 = mid * 14;\n        long mid15 = mid * 15;\n\
    \        long mid16 = mid * 16;\n        long mid17 = mid * 17;\n        long\
    \ mid18 = mid * 18;\n        long mid19 = mid * 19;\n        long mid20 = mid\
    \ * 20;\n        long mid21 = mid * 21;\n        long mid22 = mid * 22;\n    \
    \    long mid23 = mid * 23;\n        long mid24 = mid * 24;\n        long mid25\
    \ = mid * 25;\n        long mid26 = mid * 26;\n        long mid27 = mid * 27;\n\
    \        long mid28 = mid * 28;\n        long mid29 = mid * 29;\n        long\
    \ mid30 = mid * 30;\n        long mid31 = mid * 31;\n        long mid32 = mid\
    \ * 32;\n        long mid33 = mid * 33;\n        long mid34 = mid * 34;\n    \
    \    long mid35 = mid * 35;\n        long mid36 = mid * 36;\n        long mid37\
    \ = mid * 37;\n        long mid38 = mid * 38;\n        long mid39 = mid * 39;\n\
    \        long mid40 = mid * 40;\n        long mid41 = mid * 41;\n        long\
    \ mid42 = mid * 42;\n        long mid43 = mid * 43;\n        long mid44 = mid\
    \ * 44;\n        long mid45 = mid * 45;\n        long mid46 = mid * 46;\n    \
    \    long mid47 = mid * 47;\n        long mid48 = mid * 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0n6x3q_e.java:68: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd2a_710m.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprn60jucv.java:18: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmprn60jucv.java:19: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_7k6tryn.java:61: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp_7k6tryn.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp_7k6tryn.java:62: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp_7k6tryn.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp_7k6tryn.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp_7k6tryn.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp_7k6tryn.java:74: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> tmp = new ArrayList<>();\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n       \
    \         min = lst.get(i);\n            }\n            if (lst.get(i) > max)\
    \ {\n                max = lst.get(i);\n            }\n        }\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n  \
    \              tmp.add(min);\n                min = lst.get(i);\n            }\n\
    \            if (lst.get(i) > max) {\n                tmp.add(max);\n        \
    \        max = lst.get(i);\n            }\n        }\n        tmp.add(min);\n\
    \        tmp.add(max);\n        Collections.sort(tmp);\n        for (Long l :\
    \ tmp) {\n            result.add(l);\n        }\n        return result;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20uvha2h.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 3;\n        long mid4 = mid * 4;\n        long mid5 = mid * 5;\n     \
    \   long mid6 = mid * 6;\n        long mid7 = mid * 7;\n        long mid8 = mid\
    \ * 8;\n        long mid9 = mid * 9;\n        long mid10 = mid * 10;\n       \
    \ long mid11 = mid * 11;\n        long mid12 = mid * 12;\n        long mid13 =\
    \ mid * 13;\n        long mid14 = mid * 14;\n        long mid15 = mid * 15;\n\
    \        long mid16 = mid * 16;\n        long mid17 = mid * 17;\n        long\
    \ mid18 = mid * 18;\n        long mid19 = mid * 19;\n        long mid20 = mid\
    \ * 20;\n        long mid21 = mid * 21;\n        long mid22 = mid * 22;\n    \
    \    long mid23 = mid * 23;\n        long mid24 = mid * 24;\n        long mid25\
    \ = mid * 25;\n        long mid26 = mid * 26;\n        long mid27 = mid * 27;\n\
    \        long mid28 = mid * 28;\n        long mid29 = mid * 29;\n        long\
    \ mid30 = mid * 30;\n        long mid31 = mid * 31;\n        long mid32 = mid\
    \ * 32;\n        long mid33 = mid * 33;\n        long mid34 = mid * 34;\n    \
    \    long mid35 = mid * 35;\n        long mid36 = mid * 36;\n        long mid37\
    \ = mid * 37;\n        long mid38 = mid * 38;\n        long mid39 = mid * 39;\n\
    \        long mid40 = mid * 40;\n        long mid41 = mid * 41;\n        long\
    \ mid42 = mid * 42;\n        long mid43 = mid * 43;\n        long mid44 = mid\
    \ * 44;\n        long mid45 = mid * 45;\n        long mid46 = mid * 46;\n    \
    \    long mid47 = mid * 47;\n        long mid48 = mid * 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpveahz113.java:68: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long\
    \ mid3 = mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n\
    \        long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8\
    \ = mid * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n  \
    \      long mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13\
    \ = mid * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n\
    \        long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long\
    \ mid18 = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid\
    \ * 19;\n        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n    \
    \    long mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25\
    \ = mid * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n\
    \        long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long\
    \ mid30 = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid\
    \ * 31;\n        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n    \
    \    long mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37\
    \ = mid * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n\
    \        long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long\
    \ mid42 = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid\
    \ * 43;\n        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n    \
    \    long mid47 = mid * 46;\n        long mid48 = mid * 47;\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv3el2ed7.java:69: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(Long\
    \ i : lst) {\n            result.add(i);\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3q5u1qr8.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static\
    \ ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i = min; i <=\
    \ max; i++) {\n            temp = i;\n            while (lst.contains(temp)) {\n\
    \                temp = temp * 2;\n            }\n            result.add(temp);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxzlv1l29.java:33)\n"
  exit_code: 1
  status: Exception
