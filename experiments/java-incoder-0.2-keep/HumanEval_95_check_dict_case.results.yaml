name: HumanEval_95_check_dict_case
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && key.isEmpty() && !value.isEmpty()) {\n     \
    \           result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp15u3ef3x.java:31: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp15u3ef3x.java:32:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp15u3ef3x.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp15u3ef3x.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp15u3ef3x.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp15u3ef3x.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (key.isEmpty() || key.isUpperCase()) {\n      \
    \          result = false;\n                break;\n            }\n          \
    \  if (value.isEmpty() || value.isUpperCase()) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpsf4nenj8.java:26: error: cannot find symbol\n            if (key.isEmpty()\
    \ || key.isUpperCase()) {\n                                    ^\n  symbol:  \
    \ method isUpperCase()\n  location: variable key of type String\n/tmp/tmpsf4nenj8.java:30:\
    \ error: cannot find symbol\n            if (value.isEmpty() || value.isUpperCase())\
    \ {\n                                        ^\n  symbol:   method isUpperCase()\n\
    \  location: variable value of type String\n/tmp/tmpsf4nenj8.java:39: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpsf4nenj8.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpsf4nenj8.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpsf4nenj8.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpsf4nenj8.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpsf4nenj8.java:44: error:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar != secondChar) {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj_5gk_ha.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpj_5gk_ha.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpj_5gk_ha.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpj_5gk_ha.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpj_5gk_ha.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpj_5gk_ha.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo78j8_04.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpo78j8_04.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpo78j8_04.java:30: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpo78j8_04.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpo78j8_04.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpo78j8_04.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpo78j8_04.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpo78j8_04.java:35: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp23n9d8ta.java:21: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp23n9d8ta.java:21: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp23n9d8ta.java:30: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp23n9d8ta.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp23n9d8ta.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp23n9d8ta.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp23n9d8ta.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp23n9d8ta.java:35: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmped1e6kch.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmped1e6kch.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmped1e6kch.java:31: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmped1e6kch.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmped1e6kch.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmped1e6kch.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmped1e6kch.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmped1e6kch.java:36: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key: keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && key.isEmpty() || key.isEmpty() && !key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx395yt_7.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpx395yt_7.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpx395yt_7.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpx395yt_7.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpx395yt_7.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpx395yt_7.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar >= 'a' && firstChar\
    \ <= 'z') {\n                if (secondChar >= 'a' && secondChar <= 'z') {\n \
    \                   result = true;\n                    break;\n             \
    \   }\n            } else {\n                if (secondChar >= 'A' && secondChar\
    \ <= 'Z') {\n                    result = true;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpafv1bes1.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpafv1bes1.java:45:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpafv1bes1.java:46:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpafv1bes1.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpafv1bes1.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpafv1bes1.java:49: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return false;\n        }\n        Set<String> keys = dict.keySet();\n    \
    \    for (String key : keys) {\n            if (key.isEmpty()) {\n           \
    \     return false;\n            }\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (!lowerCase.equals(upperCase))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0rq2fsn5.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0rq2fsn5.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp0rq2fsn5.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0rq2fsn5.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0rq2fsn5.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0rq2fsn5.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isUpper = false;\n\
    \        boolean isLower = false;\n        for (String key : keys) {\n       \
    \     if (Character.isUpperCase(key.charAt(0))) {\n                isUpper = true;\n\
    \            } else if (Character.isLowerCase(key.charAt(0))) {\n            \
    \    isLower = true;\n            }\n        }\n        return isUpper && isLower;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpfyt351sc.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpfyt351sc.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpfyt351sc.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfyt351sc.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfyt351sc.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpfyt351sc.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        boolean isAllUpperCase = true;\n\
    \        boolean isAllLowerCase = true;\n        for (String key : keys) {\n \
    \           String value = dict.get(key);\n            if (value.length() > 0\
    \ && Character.isUpperCase(value.charAt(0))) {\n                isAllUpperCase\
    \ = false;\n            }\n            if (value.length() > 0 && Character.isLowerCase(value.charAt(0)))\
    \ {\n                isAllLowerCase = false;\n            }\n        }\n     \
    \   return isAllUpperCase && isAllLowerCase;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjlywab0s.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpjlywab0s.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpjlywab0s.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjlywab0s.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjlywab0s.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpjlywab0s.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isAllString = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                isAllString = false;\n            }\n        }\n        return\
    \ isAllString;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp_xejm1fh.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_xejm1fh.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp_xejm1fh.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_xejm1fh.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_xejm1fh.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_xejm1fh.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            char firstChar =\
    \ key.charAt(0);\n            char secondChar = value.charAt(0);\n           \
    \ if (firstChar != secondChar) {\n                result = false;\n          \
    \      break;\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpmugn10aj.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpmugn10aj.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpmugn10aj.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmugn10aj.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmugn10aj.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpmugn10aj.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (dict.get(key).equals(key.toLowerCase()))\
    \ {\n                result = true;\n                break;\n            }\n \
    \           if (dict.get(key).equals(key.toUpperCase())) {\n                result\
    \ = true;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpn3f_i9l5.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpn3f_i9l5.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpn3f_i9l5.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpn3f_i9l5.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpn3f_i9l5.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpn3f_i9l5.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(key.toLowerCase().equals(value.toLowerCase())) {\n   \
    \                 result = true;\n                } else if(key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          } else {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeqlr4s70.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpeqlr4s70.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpeqlr4s70.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpeqlr4s70.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpeqlr4s70.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpeqlr4s70.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7_a4ttr8.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp7_a4ttr8.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp7_a4ttr8.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7_a4ttr8.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7_a4ttr8.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp7_a4ttr8.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.equalsIgnoreCase(value)) {\n                continue;\n \
    \           }\n            result = false;\n            break;\n        }\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6y_4qaqv.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp6y_4qaqv.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp6y_4qaqv.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp6y_4qaqv.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp6y_4qaqv.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp6y_4qaqv.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (dict.containsKey(lowerCase))\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (dict.containsKey(upperCase)) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp51pwh238.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp51pwh238.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp51pwh238.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp51pwh238.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp51pwh238.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp51pwh238.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                if (dict.get(key).equals(dict.get(key).toLowerCase())) {\n  \
    \                  result = true;\n                } else {\n                \
    \    result = false;\n                }\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpclssqm07.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpclssqm07.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpclssqm07.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpclssqm07.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpclssqm07.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpclssqm07.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value != null && !value.isEmpty()) {\n                if (key.isEmpty()\
    \ || key.isUpperCase()) {\n                    result = true;\n              \
    \  } else {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp7zvlw59c.java:24: error: cannot find symbol\n                if\
    \ (key.isEmpty() || key.isUpperCase()) {\n                                   \
    \     ^\n  symbol:   method isUpperCase()\n  location: variable key of type String\n\
    /tmp/tmp7zvlw59c.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp7zvlw59c.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp7zvlw59c.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7zvlw59c.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7zvlw59c.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp7zvlw59c.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(Strin"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isUpperCase()\
    \ && !key.isLowerCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5c20a7j8.java:22: error: cannot find symbol\n            if(!key.isUpperCase()\
    \ && !key.isLowerCase()) {\n                   ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp5c20a7j8.java:22: error: cannot\
    \ find symbol\n            if(!key.isUpperCase() && !key.isLowerCase()) {\n  \
    \                                       ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp5c20a7j8.java:31: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5c20a7j8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5c20a7j8.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5c20a7j8.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5c20a7j8.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp5c20a7j8.java:36: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     result = false;\n        } else {\n            Set<String> keys = dict.keySet();\n\
    \            Set<String> keySet = keys.stream().map(String::toLowerCase).collect(Collectors.toSet());\n\
    \            Set<String> keySet2 = keys.stream().map(String::toUpperCase).collect(Collectors.toSet());\n\
    \            result = keySet.equals(keySet2);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp_dcsntxk.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_dcsntxk.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp_dcsntxk.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_dcsntxk.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_dcsntxk.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_dcsntxk.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = key.toUpperCase();\n  \
    \          if (lowerCase.equals(upperCase)) {\n                result = true;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpbirbaw13.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpbirbaw13.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpbirbaw13.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbirbaw13.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbirbaw13.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbirbaw13.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpqdvntih7.java:21: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpqdvntih7.java:21: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpqdvntih7.java:30: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqdvntih7.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqdvntih7.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqdvntih7.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqdvntih7.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpqdvntih7.java:35: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = key.toUpperCase();\n  \
    \          if (lowerCase.equals(upperCase)) {\n                result = true;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpiwu0z86q.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpiwu0z86q.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpiwu0z86q.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpiwu0z86q.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpiwu0z86q.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpiwu0z86q.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(key.toLowerCase().equals(value.toLowerCase())) {\n           \
    \     continue;\n            }\n            if(key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplpow1fif.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmplpow1fif.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmplpow1fif.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplpow1fif.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplpow1fif.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmplpow1fif.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        for (String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                return result;\n            }\n            char first = key.charAt(0);\n\
    \            char last = value.charAt(value.length() - 1);\n            if (first\
    \ >= 'a' && first <= 'z') {\n                if (last >= 'a' && last <= 'z') {\n\
    \                    result = true;\n                }\n            } else if\
    \ (first >= 'A' && first <= 'Z') {\n                if (last >= 'A' && last <=\
    \ 'Z') {\n                    result = true;\n                }\n            }\
    \ else {\n                result = false;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmppe0rnbi3.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmppe0rnbi3.java:47:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmppe0rnbi3.java:48:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppe0rnbi3.java:49: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppe0rnbi3.java:50: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmppe0rnbi3.java:51: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return false;\n        }\n        Set<String> keys = dict.keySet();\n  \
    \      for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return false;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar != secondChar) {\n\
    \                return false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpce49nsuj.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpce49nsuj.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpce49nsuj.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpce49nsuj.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpce49nsuj.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpce49nsuj.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (dict.get(key) != null && !dict.get(key).equals(key))\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpb0iej6lv.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpb0iej6lv.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpb0iej6lv.java:32:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb0iej6lv.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb0iej6lv.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpb0iej6lv.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     for (String key : dict.keySet()) {\n                if (key.isEmpty()) {\n\
    \                    result = true;\n                    break;\n            \
    \    }\n                String lowerCaseKey = key.toLowerCase();\n           \
    \     String upperCaseKey = key.toUpperCase();\n                if (lowerCaseKey.equals(upperCaseKey))\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ce7bpyy.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp7ce7bpyy.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp7ce7bpyy.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7ce7bpyy.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7ce7bpyy.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp7ce7bpyy.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar != secondChar) {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1wdkckch.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp1wdkckch.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp1wdkckch.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1wdkckch.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1wdkckch.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp1wdkckch.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) {\n                result = false;\n       \
    \         break;\n            }\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.toLowerCase().equals(value.toLowerCase())) {\n          \
    \      continue;\n            }\n            if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu0eccrdf.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpu0eccrdf.java:48:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpu0eccrdf.java:49:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu0eccrdf.java:50: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu0eccrdf.java:51: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpu0eccrdf.java:52: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (key.isEmpty()) {\n                result = true;\n\
    \                break;\n            }\n            if (value.isEmpty()) {\n \
    \               result = true;\n                break;\n            }\n      \
    \      if (key.equals(value)) {\n                result = true;\n            \
    \    break;\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpweoxouf8.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpweoxouf8.java:49:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpweoxouf8.java:50:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpweoxouf8.java:51: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpweoxouf8.java:52: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpweoxouf8.java:53: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0) {\n            return false;\n        }\n \
    \       Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            String value = dict.get(key);\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                return false;\n            }\n            char firstChar\
    \ = key.charAt(0);\n            char secondChar = value.charAt(0);\n         \
    \   if (firstChar != secondChar) {\n                return false;\n          \
    \  }\n        }\n        return true;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv2biyy6m.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpv2biyy6m.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpv2biyy6m.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv2biyy6m.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv2biyy6m.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpv2biyy6m.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps1mwxeyk.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmps1mwxeyk.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmps1mwxeyk.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmps1mwxeyk.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmps1mwxeyk.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmps1mwxeyk.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp4u9sasg8.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4u9sasg8.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp4u9sasg8.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4u9sasg8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4u9sasg8.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4u9sasg8.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && !value.isEmpty()) {\n                if(!key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                if(!key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpqx1ydtod.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpqx1ydtod.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpqx1ydtod.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqx1ydtod.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqx1ydtod.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpqx1ydtod.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                result = false;\n                break;\n          \
    \  }\n            else if (value.length() == 1) {\n                char firstChar\
    \ = value.charAt(0);\n                if (Character.isLowerCase(firstChar)) {\n\
    \                    result = true;\n                    break;\n            \
    \    }\n                else if (Character.isUpperCase(firstChar)) {\n       \
    \             result = false;\n                    break;\n                }\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvvb7os0o.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpvvb7os0o.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpvvb7os0o.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvvb7os0o.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvvb7os0o.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpvvb7os0o.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpuw5leo2y.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpuw5leo2y.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpuw5leo2y.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpuw5leo2y.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpuw5leo2y.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpuw5leo2y.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isAllKeysString = true;\n        boolean isAllKeysUpperCase\
    \ = true;\n        for (String key : dict.keySet()) {\n            isAllKeysString\
    \ = isAllKeysString && key.equals(key.toLowerCase());\n            isAllKeysUpperCase\
    \ = isAllKeysUpperCase && key.equals(key.toUpperCase());\n        }\n        return\
    \ isAllKeysString && isAllKeysUpperCase;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp60y7n1bb.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp60y7n1bb.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp60y7n1bb.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp60y7n1bb.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp60y7n1bb.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp60y7n1bb.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9v0kg2vk.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp9v0kg2vk.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp9v0kg2vk.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9v0kg2vk.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9v0kg2vk.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp9v0kg2vk.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            if (dict.get(key) != null && !dict.get(key).equals(key))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdi051qbp.java:31: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpdi051qbp.java:32:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpdi051qbp.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdi051qbp.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdi051qbp.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpdi051qbp.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0) {\n            return false;\n        }\n \
    \       Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            if (key.equalsIgnoreCase(key)) {\n                return true;\n\
    \            }\n        }\n        return false;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5p_11gbc.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp5p_11gbc.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp5p_11gbc.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5p_11gbc.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5p_11gbc.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp5p_11gbc.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                if (dict.get(key).equalsIgnoreCase(key)) {\n                \
    \    result = true;\n                } else {\n                    result = false;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpn4j8vgv2.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpn4j8vgv2.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpn4j8vgv2.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpn4j8vgv2.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpn4j8vgv2.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpn4j8vgv2.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty()) {\n                result = false;\n         \
    \       break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp0jp_mfzz.java:131: error: ')' expected\n            if (key\n \
    \                  ^\n/tmp/tmp0jp_mfzz.java:132: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmp0jp_mfzz.java:133: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp0jp_mfzz.java:133:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp0jp_mfzz.java:133: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                 ^\n/tmp/tmp0jp_mfzz.java:133:\
    \ error: '.class' expected\n    public static void main(String[] args) {\n   \
    \                                  ^\n/tmp/tmp0jp_mfzz.java:133: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp0jp_mfzz.java:143: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     result = false;\n        } else {\n            Set<String> keys = dict.keySet();\n\
    \            Set<String> keysLower = keys.stream().map(String::toLowerCase).collect(Collectors.toSet());\n\
    \            Set<String> keysUpper = keys.stream().map(String::toUpperCase).collect(Collectors.toSet());\n\
    \            result = keysLower.containsAll(keys) && keysUpper.containsAll(keys);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmputall7eu.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmputall7eu.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmputall7eu.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmputall7eu.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmputall7eu.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmputall7eu.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0) {\n            return false;\n        }\n \
    \       Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            String lowerCase = key.toLowerCase();\n            String upperCase\
    \ = key.toUpperCase();\n            if (lowerCase.equals(upperCase)) {\n     \
    \           continue;\n            }\n            return false;\n        }\n \
    \       return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplui1_1t3.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmplui1_1t3.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmplui1_1t3.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplui1_1t3.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplui1_1t3.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmplui1_1t3.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllUpperCase\
    \ = true;\n        boolean isAllLowerCase = true;\n        for (String key : keys)\
    \ {\n            if (dict.get(key).equals(dict.get(key).toLowerCase())) {\n  \
    \              isAllLowerCase = false;\n            }\n            if (dict.get(key).equals(dict.get(key).toUpperCase()))\
    \ {\n                isAllUpperCase = false;\n            }\n        }\n     \
    \   return isAllUpperCase && isAllLowerCase;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqvamxpjs.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpqvamxpjs.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpqvamxpjs.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqvamxpjs.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqvamxpjs.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpqvamxpjs.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllUpperCase\
    \ = true;\n        boolean isAllLowerCase = true;\n        for (String key : keys)\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                isAllUpperCase = false;\n            }\n           \
    \ if (value.length() < 1) {\n                isAllLowerCase = false;\n       \
    \     }\n        }\n        return isAllUpperCase && isAllLowerCase;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp19tj0yy1.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp19tj0yy1.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp19tj0yy1.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp19tj0yy1.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp19tj0yy1.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp19tj0yy1.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1n2ff3y4.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp1n2ff3y4.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp1n2ff3y4.java:31: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1n2ff3y4.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1n2ff3y4.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1n2ff3y4.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1n2ff3y4.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp1n2ff3y4.java:36: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() == 0) {\n                return result;\n    \
    \        }\n            if (value.length() == 1) {\n                if (value.charAt(0)\
    \ == value.charAt(0)) {\n                    result = false;\n               \
    \ }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxeilp_sy.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpxeilp_sy.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpxeilp_sy.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxeilp_sy.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxeilp_sy.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpxeilp_sy.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && !key.isEmpty() && !key.isEmpty() && value != null\
    \ && !value.isEmpty()) {\n                if (key.isEmpty() || key.isEmpty())\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                else {\n                    result = true;\n    \
    \            }\n            }\n        }\n        return result;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpbmgg0fuw.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpbmgg0fuw.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpbmgg0fuw.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbmgg0fuw.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbmgg0fuw.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbmgg0fuw.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        boolean isUpperCase = true;\n\
    \        for (String key : keys) {\n            if (Character.isUpperCase(key.charAt(0)))\
    \ {\n                isUpperCase = true;\n            } else {\n             \
    \   isUpperCase = false;\n            }\n        }\n        if (isUpperCase) {\n\
    \            return true;\n        } else {\n            isUpperCase = true;\n\
    \            for (String key : keys) {\n                if (Character.isLowerCase(key.charAt(0)))\
    \ {\n                    isUpperCase = false;\n                } else {\n    \
    \                isUpperCase = true;\n                }\n            }\n     \
    \       return isUpperCase;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8f5p80fq.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp8f5p80fq.java:48:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp8f5p80fq.java:49:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8f5p80fq.java:50: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8f5p80fq.java:51: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8f5p80fq.java:52: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            String lowerCase = key.toLowerCase();\n          \
    \  String upperCase = key.toUpperCase();\n            if (!value.equals(lowerCase)\
    \ && !value.equals(upperCase)) {\n                result = false;\n          \
    \      break;\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp66f7y2jb.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp66f7y2jb.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp66f7y2jb.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp66f7y2jb.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp66f7y2jb.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp66f7y2jb.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() > 0) {\n        \
    \    for (String key : dict.keySet()) {\n                if (key.isEmpty()) {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp4gjkfz27.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4gjkfz27.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp4gjkfz27.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4gjkfz27.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4gjkfz27.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4gjkfz27.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                result = false;\n                break;\n          \
    \  }\n            else if (value.length() == 1) {\n                char first\
    \ = value.charAt(0);\n                if (Character.isLowerCase(first)) {\n  \
    \                  result = true;\n                    break;\n              \
    \  }\n                else if (Character.isUpperCase(first)) {\n             \
    \       result = false;\n                    break;\n                }\n     \
    \       }\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0iny191s.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0iny191s.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp0iny191s.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0iny191s.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0iny191s.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0iny191s.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar >= 'A' && firstChar\
    \ <= 'Z') {\n                if (secondChar >= 'a' && secondChar <= 'z') {\n \
    \                   result = true;\n                    break;\n             \
    \   }\n            } else {\n                if (secondChar >= 'a' && secondChar\
    \ <= 'z') {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpjd4hnuw5.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpjd4hnuw5.java:45:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpjd4hnuw5.java:46:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjd4hnuw5.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjd4hnuw5.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpjd4hnuw5.java:49: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(key.toLowerCase().equals(value.toLowerCase())) {\n   \
    \                 result = true;\n                } else {\n                 \
    \   result = false;\n                    break;\n                }\n         \
    \   } else {\n                result = false;\n                break;\n      \
    \      }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9tx_nvb6.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp9tx_nvb6.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp9tx_nvb6.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9tx_nvb6.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9tx_nvb6.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp9tx_nvb6.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = value.toLowerCase();\n\
    \            if (lowerCase.equals(upperCase)) {\n                continue;\n \
    \           }\n            result = false;\n            break;\n        }\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ig1wk7h.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp9ig1wk7h.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp9ig1wk7h.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9ig1wk7h.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9ig1wk7h.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp9ig1wk7h.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ return false;\n        boolean upperCase = true;\n        boolean lowerCase\
    \ = true;\n        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                upperCase = false;\n \
    \           }\n            if (value.length() > 1) {\n                lowerCase\
    \ = false;\n            }\n        }\n        return upperCase && lowerCase;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpvw4ij7rb.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpvw4ij7rb.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpvw4ij7rb.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvw4ij7rb.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvw4ij7rb.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpvw4ij7rb.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                result = false;\n    \
    \            break;\n            }\n            else if (value.length() == 1)\
    \ {\n                char first = value.charAt(0);\n                char upper\
    \ = Character.toUpperCase(first);\n                if (first != upper) {\n   \
    \                 result = false;\n                    break;\n              \
    \  }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzl6_eb4d.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpzl6_eb4d.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpzl6_eb4d.java:45:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzl6_eb4d.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzl6_eb4d.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpzl6_eb4d.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() > 0) {\n        \
    \    for (String key : dict.keySet()) {\n                if (key.isEmpty()) {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n                String value = dict.get(key);\n                if (value.isEmpty())\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                String lowerCase = key.toLowerCase();\n         \
    \       String upperCase = key.toUpperCase();\n                if (lowerCase.equals(upperCase))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmps09z06i2.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmps09z06i2.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmps09z06i2.java:45:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmps09z06i2.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmps09z06i2.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmps09z06i2.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     result = false;\n        } else {\n            Set<String> keys = dict.keySet();\n\
    \            for (String key : keys) {\n                String value = dict.get(key);\n\
    \                if (key.isEmpty() || value.isEmpty()) {\n                   \
    \ result = false;\n                    break;\n                }\n           \
    \     char firstChar = key.charAt(0);\n                char lastChar = key.charAt(key.length()\
    \ - 1);\n                if (firstChar >= 'A' && firstChar <= 'Z') {\n       \
    \             if (lastChar >= 'A' && lastChar <= 'Z') {\n                    \
    \    result = true;\n                    }\n                } else {\n       \
    \             if (lastChar >= 'a' && lastChar <= 'z') {\n                    \
    \    result = true;\n                    }\n                }\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwpb_my7y.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpwpb_my7y.java:48:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpwpb_my7y.java:49:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpwpb_my7y.java:50: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpwpb_my7y.java:51: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpwpb_my7y.java:52: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!value.isEmpty()) {\n\
    \                if(!value.toLowerCase().equals(value.toUpperCase())) {\n    \
    \                result = false;\n                    break;\n               \
    \ }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2c21jjfo.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp2c21jjfo.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp2c21jjfo.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2c21jjfo.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2c21jjfo.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp2c21jjfo.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0) {\n            return false;\n        }\n \
    \       Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            if (key.isEmpty()) {\n                return false;\n           \
    \ }\n        }\n        Set<String> keysUp = dict.keySet();\n        for (String\
    \ key : keysUp) {\n            if (!key.toUpperCase().equals(key)) {\n       \
    \         return false;\n            }\n        }\n        return true;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp_kp4mb7t.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_kp4mb7t.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp_kp4mb7t.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_kp4mb7t.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_kp4mb7t.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_kp4mb7t.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isDictCase = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && value != null && key.isEmpty() && !value.isEmpty())\
    \ {\n                isDictCase = false;\n                break;\n           \
    \ }\n        }\n        return isDictCase;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf7nyrr0k.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpf7nyrr0k.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpf7nyrr0k.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpf7nyrr0k.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpf7nyrr0k.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpf7nyrr0k.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = key.toUpperCase();\n  \
    \          if (!value.equals(lowerCase) && !value.equals(upperCase)) {\n     \
    \           result = false;\n                break;\n            }\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx9wpa3ji.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpx9wpa3ji.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpx9wpa3ji.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpx9wpa3ji.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpx9wpa3ji.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpx9wpa3ji.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        boolean isUpperCase = true;\n\
    \        for (String key : keys) {\n            if (Character.isUpperCase(key.charAt(0)))\
    \ {\n                isUpperCase = false;\n                break;\n          \
    \  }\n        }\n        if (isUpperCase) {\n            return true;\n      \
    \  }\n        boolean isLowerCase = true;\n        for (String key : keys) {\n\
    \            if (Character.isLowerCase(key.charAt(0))) {\n                isLowerCase\
    \ = false;\n                break;\n            }\n        }\n        return isLowerCase;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpy_my7t5m.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpy_my7t5m.java:45:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpy_my7t5m.java:46:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpy_my7t5m.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpy_my7t5m.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpy_my7t5m.java:49: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpafh4fsjh.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpafh4fsjh.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpafh4fsjh.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpafh4fsjh.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpafh4fsjh.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpafh4fsjh.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.isEmpty()) {\n\
    \            return false;\n        }\n        boolean isUpperCase = true;\n \
    \       boolean isLowerCase = true;\n        for (String key : keys) {\n     \
    \       if (dict.get(key).length() > 1) {\n                isUpperCase = false;\n\
    \            }\n            if (dict.get(key).length() < 1) {\n              \
    \  isLowerCase = false;\n            }\n        }\n        return isUpperCase\
    \ && isLowerCase;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpih36ai0b.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpih36ai0b.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpih36ai0b.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpih36ai0b.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpih36ai0b.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpih36ai0b.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                if (dict.get(key).equals(dict.get(key).toLowerCase())) {\n  \
    \                  result = true;\n                } else {\n                \
    \    result = false;\n                }\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp_wiv7ooa.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_wiv7ooa.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp_wiv7ooa.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_wiv7ooa.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_wiv7ooa.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_wiv7ooa.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpojha7biv.java:21: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpojha7biv.java:21: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpojha7biv.java:30: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpojha7biv.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpojha7biv.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpojha7biv.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpojha7biv.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpojha7biv.java:35: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.equalsIgnoreCase(value))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkefunoyz.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpkefunoyz.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpkefunoyz.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkefunoyz.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkefunoyz.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpkefunoyz.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpkn2tlaey.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpkn2tlaey.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpkn2tlaey.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkn2tlaey.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkn2tlaey.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpkn2tlaey.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                result = false;\n                break;\n          \
    \  }\n            if (value.length() == 1) {\n                char c = value.charAt(0);\n\
    \                if (c >= 'A' && c <= 'Z') {\n                    result = true;\n\
    \                    break;\n                }\n                if (c >= 'a' &&\
    \ c <= 'z') {\n                    result = true;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpxznc0o0d.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpxznc0o0d.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpxznc0o0d.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxznc0o0d.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxznc0o0d.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpxznc0o0d.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) {\n                result = false;\n       \
    \         break;\n            }\n            char firstChar = key.charAt(0);\n\
    \            char secondChar = value.charAt(0);\n            if (firstChar !=\
    \ secondChar) {\n                result = false;\n                break;\n   \
    \         }\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpadghidfu.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpadghidfu.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpadghidfu.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpadghidfu.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpadghidfu.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpadghidfu.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                String lowerCase = key.toLowerCase();\n                String\
    \ upperCase = key.toUpperCase();\n                if (dict.get(key).equals(lowerCase)\
    \ || dict.get(key).equals(upperCase)) {\n                    result = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzii5ta3o.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpzii5ta3o.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpzii5ta3o.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzii5ta3o.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzii5ta3o.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpzii5ta3o.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(key.toLowerCase().equals(value.toLowerCase())) {\n   \
    \                 result = true;\n                } else {\n                 \
    \   result = false;\n                    break;\n                }\n         \
    \   } else {\n                result = false;\n                break;\n      \
    \      }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg3mp_xhp.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpg3mp_xhp.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpg3mp_xhp.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpg3mp_xhp.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpg3mp_xhp.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpg3mp_xhp.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerKey = key.toLowerCase();\n\
    \            String upperKey = key.toUpperCase();\n            if (dict.get(key).equals(lowerKey))\
    \ {\n                result = true;\n            } else if (dict.get(key).equals(upperKey))\
    \ {\n                result = true;\n            } else {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpm6t10dml.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpm6t10dml.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpm6t10dml.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm6t10dml.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm6t10dml.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpm6t10dml.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        boolean isUpper = true;\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                isUpper = false;\n   \
    \             break;\n            }\n        }\n        if (isUpper) {\n     \
    \       return true;\n        }\n        for (String key : keys) {\n         \
    \   String value = dict.get(key);\n            if (value.length() > 1) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp_7ylq8gt.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_7ylq8gt.java:45:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp_7ylq8gt.java:46:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_7ylq8gt.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_7ylq8gt.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_7ylq8gt.java:49: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     result = false;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                result = true;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp2hn01xa7.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp2hn01xa7.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp2hn01xa7.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2hn01xa7.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2hn01xa7.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp2hn01xa7.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isUpper = false;\n\
    \        boolean isLower = false;\n        for (String key : keys) {\n       \
    \     if (Character.isUpperCase(key.charAt(0))) {\n                isUpper = true;\n\
    \            } else if (Character.isLowerCase(key.charAt(0))) {\n            \
    \    isLower = true;\n            }\n        }\n        return isUpper && isLower;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpc4ha5lkn.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpc4ha5lkn.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpc4ha5lkn.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpc4ha5lkn.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpc4ha5lkn.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpc4ha5lkn.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            char firstChar =\
    \ key.charAt(0);\n            char secondChar = value.charAt(0);\n           \
    \ if (firstChar >= 'A' && firstChar <= 'Z') {\n                if (secondChar\
    \ >= 'a' && secondChar <= 'z') {\n                    result = true;\n       \
    \             break;\n                }\n            } else if (firstChar >= 'a'\
    \ && firstChar <= 'z') {\n                if (secondChar >= 'A' && secondChar\
    \ <= 'Z') {\n                    result = true;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp7r1t8a_8.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp7r1t8a_8.java:46:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp7r1t8a_8.java:47:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7r1t8a_8.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7r1t8a_8.java:49: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp7r1t8a_8.java:50: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        boolean upperCase = false;\n\
    \        boolean lowerCase = false;\n        for (String key : keys) {\n     \
    \       String value = dict.get(key);\n            if (value.length() > 0) {\n\
    \                upperCase = upperCase || value.toUpperCase().equals(value);\n\
    \                lowerCase = lowerCase || value.toLowerCase().equals(value);\n\
    \            }\n        }\n        return upperCase && lowerCase;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpn37v13en.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpn37v13en.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpn37v13en.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpn37v13en.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpn37v13en.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpn37v13en.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.equalsIgnoreCase(value))\
    \ {\n                continue;\n            } else {\n                result =\
    \ false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp7hqa9kt7.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp7hqa9kt7.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp7hqa9kt7.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7hqa9kt7.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7hqa9kt7.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp7hqa9kt7.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isAllUpperCase = true;\n        boolean isAllLowerCase =\
    \ true;\n        for (String key : dict.keySet()) {\n            isAllUpperCase\
    \ = isAllUpperCase && Character.isUpperCase(key.charAt(0));\n            isAllLowerCase\
    \ = isAllLowerCase && Character.isLowerCase(key.charAt(0));\n        }\n     \
    \   return isAllUpperCase && isAllLowerCase;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsbo90fx3.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpsbo90fx3.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpsbo90fx3.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpsbo90fx3.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpsbo90fx3.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpsbo90fx3.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) {\n                result = false;\n       \
    \         break;\n            }\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                result = true;\n                break;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu5fxfjq2.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpu5fxfjq2.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpu5fxfjq2.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu5fxfjq2.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu5fxfjq2.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpu5fxfjq2.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     for (String key : dict.keySet()) {\n                String value = dict.get(key);\n\
    \                if (key.isEmpty() || value.isEmpty()) {\n                   \
    \ return false;\n                }\n                if (key.isEmpty() || value.isEmpty())\
    \ {\n                    return false;\n                }\n                if\
    \ (key.isEmpty()) {\n                    return true;\n                }\n   \
    \             if (value.isEmpty()) {\n                    return true;\n     \
    \           }\n                if (key.isEmpty().equals(value)) {\n          \
    \          return true;\n                }\n                if (key.isEmpty().compareTo(value)\
    \ == 0) {\n                    return true;\n                }\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp48l1xqpk.java:35: error: boolean cannot be dereferenced\n     \
    \           if (key.isEmpty().equals(value)) {\n                             \
    \    ^\n/tmp/tmp48l1xqpk.java:38: error: boolean cannot be dereferenced\n    \
    \            if (key.isEmpty().compareTo(value) == 0) {\n                    \
    \             ^\n/tmp/tmp48l1xqpk.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp48l1xqpk.java:48:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp48l1xqpk.java:49:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp48l1xqpk.java:50: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp48l1xqpk.java:51: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp48l1xqpk.java:52: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = key.toUpperCase();\n  \
    \          if (lowerCase.equals(upperCase)) {\n                result = true;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpb0jr04tz.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpb0jr04tz.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpb0jr04tz.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb0jr04tz.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb0jr04tz.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpb0jr04tz.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (!lowerCase.equals(upperCase))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuifj6zxr.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpuifj6zxr.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpuifj6zxr.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpuifj6zxr.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpuifj6zxr.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpuifj6zxr.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isString = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                isString = false;\n            }\n        }\n        return isString;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpxy6p28n_.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpxy6p28n_.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpxy6p28n_.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxy6p28n_.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxy6p28n_.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpxy6p28n_.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value != null && !value.isEmpty()) {\n                if (value.toLowerCase().equals(key))\
    \ {\n                    result = true;\n                } else if (value.toUpperCase().equals(key))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          } else {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj7dil_g4.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpj7dil_g4.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpj7dil_g4.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpj7dil_g4.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpj7dil_g4.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpj7dil_g4.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict != null && !dict.isEmpty())\
    \ {\n            Set<String> keys = dict.keySet();\n            if (keys != null\
    \ && !keys.isEmpty()) {\n                for (String key : keys) {\n         \
    \           if (key.isEmpty() || key.isUpperCase()) {\n                      \
    \  result = true;\n                        break;\n                    } else\
    \ if (key.isLowerCase()) {\n                        result = false;\n        \
    \                break;\n                    }\n                }\n          \
    \  }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp22861nyl.java:24: error: cannot find symbol\n                 \
    \   if (key.isEmpty() || key.isUpperCase()) {\n                              \
    \              ^\n  symbol:   method isUpperCase()\n  location: variable key of\
    \ type String\n/tmp/tmp22861nyl.java:27: error: cannot find symbol\n         \
    \           } else if (key.isLowerCase()) {\n                                \
    \  ^\n  symbol:   method isLowerCase()\n  location: variable key of type String\n\
    /tmp/tmp22861nyl.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp22861nyl.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp22861nyl.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp22861nyl.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp22861nyl.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp22861nyl.java:43: erro"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) {\n                result = false;\n       \
    \         break;\n            }\n            if (key.isEmpty()) {\n          \
    \      result = false;\n                break;\n            }\n            if\
    \ (key.isEmpty() || key.isEmpty()) {\n                result = false;\n      \
    \          break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjd7te0jf.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpjd7te0jf.java:45:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpjd7te0jf.java:46:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjd7te0jf.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjd7te0jf.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpjd7te0jf.java:49: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = key.toUpperCase();\n  \
    \          if (lowerCase.equals(upperCase)) {\n                result = true;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp8tjrstq7.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp8tjrstq7.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp8tjrstq7.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8tjrstq7.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8tjrstq7.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8tjrstq7.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return false;\n        }\n        for (String key : dict.keySet()) {\n \
    \           String value = dict.get(key);\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                return false;\n            }\n            String lowerCaseKey\
    \ = key.toLowerCase();\n            String upperCaseKey = key.toUpperCase();\n\
    \            if (lowerCaseKey.equals(upperCaseKey)) {\n                continue;\n\
    \            }\n            result = false;\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp424hjc8h.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp424hjc8h.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp424hjc8h.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp424hjc8h.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp424hjc8h.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp424hjc8h.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            boolean isUpperCase = Character.isUpperCase(key.charAt(0));\n\
    \            boolean isLowerCase = Character.isLowerCase(key.charAt(0));\n   \
    \         if (isUpperCase) {\n                if (!isLowerCase) {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          } else {\n                if (!isUpperCase) {\n                   \
    \ result = false;\n                    break;\n                }\n           \
    \ }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqh2z9qd2.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpqh2z9qd2.java:45:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpqh2z9qd2.java:46:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqh2z9qd2.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqh2z9qd2.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpqh2z9qd2.java:49: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     for (String key : dict.keySet()) {\n                if (key.isLowerCase())\
    \ {\n                    result = true;\n                    break;\n        \
    \        } else if (key.isUpperCase()) {\n                    result = true;\n\
    \                    break;\n                } else {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1t7xjqpg.java:22: error: cannot find symbol\n                if\
    \ (key.isLowerCase()) {\n                       ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp1t7xjqpg.java:25: error: cannot\
    \ find symbol\n                } else if (key.isUpperCase()) {\n             \
    \                 ^\n  symbol:   method isUpperCase()\n  location: variable key\
    \ of type String\n/tmp/tmp1t7xjqpg.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp1t7xjqpg.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp1t7xjqpg.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1t7xjqpg.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1t7xjqpg.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp1t7xjqpg.java:43: error: cannot find symbol\n    assert(checkDictCase((ne"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.toLowerCase().equals(value.toLowerCase())) {\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphsirs47s.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmphsirs47s.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmphsirs47s.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphsirs47s.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphsirs47s.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmphsirs47s.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpwhf31dsq.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpwhf31dsq.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpwhf31dsq.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpwhf31dsq.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpwhf31dsq.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpwhf31dsq.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = true;\n                } else if(!key.isEmpty()\
    \ && key.toUpperCase().equals(value.toUpperCase())) {\n                    result\
    \ = true;\n                } else {\n                    result = false;\n   \
    \                 break;\n                }\n            } else {\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp13x0jnta.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp13x0jnta.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp13x0jnta.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp13x0jnta.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp13x0jnta.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp13x0jnta.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                result = false;\n                break;\n          \
    \  }\n            else if (value.length() == 1) {\n                char first\
    \ = value.charAt(0);\n                if (Character.isUpperCase(first)) {\n  \
    \                  result = true;\n                    break;\n              \
    \  }\n                else {\n                    result = false;\n          \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpks2833fj.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpks2833fj.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpks2833fj.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpks2833fj.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpks2833fj.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpks2833fj.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            char firstChar =\
    \ key.charAt(0);\n            char secondChar = value.charAt(0);\n           \
    \ if (firstChar != secondChar) {\n                result = false;\n          \
    \      break;\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpdglcl8uj.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpdglcl8uj.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpdglcl8uj.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdglcl8uj.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdglcl8uj.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpdglcl8uj.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            char firstChar =\
    \ key.charAt(0);\n            char secondChar = value.charAt(0);\n           \
    \ if (firstChar != secondChar) {\n                result = false;\n          \
    \      break;\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpxbrfdsi7.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpxbrfdsi7.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpxbrfdsi7.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxbrfdsi7.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxbrfdsi7.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpxbrfdsi7.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                result = false;\n    \
    \            break;\n            }\n            if (value.length() == 1) {\n \
    \               char firstChar = value.charAt(0);\n                if (firstChar\
    \ >= 'A' && firstChar <= 'Z') {\n                    result = false;\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpw3mx4gwe.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpw3mx4gwe.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpw3mx4gwe.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpw3mx4gwe.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpw3mx4gwe.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpw3mx4gwe.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllStrings =\
    \ keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n       \
    \ boolean isAllStringsUpper = keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n\
    \        return isAllStrings && isAllStringsUpper;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp95_bxe0v.java:20: error: cannot find symbol\n        boolean isAllStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n     \
    \                                                                            ^\n\
    \  symbol:   method isUpperCase()\n  location: variable key of type String\n/tmp/tmp95_bxe0v.java:21:\
    \ error: cannot find symbol\n        boolean isAllStringsUpper = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isLowerCase());\n                                  \
    \                                                    ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp95_bxe0v.java:26: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp95_bxe0v.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp95_bxe0v.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp95_bxe0v.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp95_bxe0v.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) =="
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict == null || dict.size() == 0) {\n            return false;\n\
    \        }\n        for (String key : dict.keySet()) {\n            if (key.isEmpty()\
    \ || key.isUpperCase()) {\n                return true;\n            }\n     \
    \   }\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp60r7i5zv.java:23: error: cannot find symbol\n            if (key.isEmpty()\
    \ || key.isUpperCase()) {\n                                    ^\n  symbol:  \
    \ method isUpperCase()\n  location: variable key of type String\n/tmp/tmp60r7i5zv.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp60r7i5zv.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp60r7i5zv.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp60r7i5zv.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp60r7i5zv.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp60r7i5zv.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty()) {\n                return result;\n          \
    \  }\n            if (key.isEmpty()) {\n                return result;\n     \
    \       }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmprjpmb0aw.java:156: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmprjpmb0aw.java:156: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmprjpmb0aw.java:156: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmprjpmb0aw.java:156: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmprjpmb0aw.java:156: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmprjpmb0aw.java:166: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                result = false;\n    \
    \            break;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp7937s72g.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp7937s72g.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp7937s72g.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7937s72g.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7937s72g.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp7937s72g.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        for (String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1_qh8lm5.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp1_qh8lm5.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp1_qh8lm5.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1_qh8lm5.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1_qh8lm5.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp1_qh8lm5.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     result = false;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 0 && value.length() < 4) {\n               \
    \ result = false;\n                break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp0mcmv_oa.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0mcmv_oa.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp0mcmv_oa.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0mcmv_oa.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0mcmv_oa.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0mcmv_oa.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            char firstChar =\
    \ key.charAt(0);\n            char secondChar = value.charAt(0);\n           \
    \ if (firstChar != secondChar) {\n                result = false;\n          \
    \      break;\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmptvfi3r42.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmptvfi3r42.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmptvfi3r42.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptvfi3r42.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptvfi3r42.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmptvfi3r42.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isUpper = true;\n\
    \        boolean isLower = true;\n        for (String key : keys) {\n        \
    \    if (isUpper) {\n                isUpper = key.toUpperCase().equals(key);\n\
    \            } else {\n                isLower = key.toLowerCase().equals(key);\n\
    \            }\n        }\n        return isUpper && isLower;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp1nbe4pk3.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp1nbe4pk3.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp1nbe4pk3.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1nbe4pk3.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1nbe4pk3.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp1nbe4pk3.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isTrue = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                isTrue = false;\n            }\n        }\n        return isTrue;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpinp8xb87.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpinp8xb87.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpinp8xb87.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpinp8xb87.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpinp8xb87.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpinp8xb87.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isUpperCase()\
    \ && !key.isLowerCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_etlh3m7.java:22: error: cannot find symbol\n            if(!key.isUpperCase()\
    \ && !key.isLowerCase()) {\n                   ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp_etlh3m7.java:22: error: cannot\
    \ find symbol\n            if(!key.isUpperCase() && !key.isLowerCase()) {\n  \
    \                                       ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp_etlh3m7.java:31: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_etlh3m7.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_etlh3m7.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_etlh3m7.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_etlh3m7.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_etlh3m7.java:36: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 0 && value.equalsIgnoreCase(key)) {\n                result = true;\n    \
    \            break;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpcmlyeq3m.java:31: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpcmlyeq3m.java:32:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpcmlyeq3m.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpcmlyeq3m.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpcmlyeq3m.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpcmlyeq3m.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keySet = dict.keySet();\n\
    \        for (String key : keySet) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                key = value.toLowerCase();\n\
    \            } else if (value.isEmpty()) {\n                value = key.toLowerCase();\n\
    \            }\n            if (!key.equals(value)) {\n                result\
    \ = false;\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpqg845a55.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpqg845a55.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpqg845a55.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqg845a55.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqg845a55.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpqg845a55.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict == null || dict.size() == 0) {\n            return false;\n\
    \        }\n        for (String key : dict.keySet()) {\n            String value\
    \ = dict.get(key);\n            if (key != null && value != null && key.length()\
    \ > 0 && value.length() > 0) {\n                if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    return true;\n                }\n                if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpubx7kqrc.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpubx7kqrc.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpubx7kqrc.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpubx7kqrc.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpubx7kqrc.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpubx7kqrc.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm2iagkqa.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpm2iagkqa.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpm2iagkqa.java:31: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm2iagkqa.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm2iagkqa.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm2iagkqa.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm2iagkqa.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpm2iagkqa.java:36: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     result = false;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n            }\n            else if (key.isEmpty() && value.isEmpty())\
    \ {\n                result = true;\n            }\n            else if (key.isEmpty())\
    \ {\n                result = false;\n            }\n            else if (value.isEmpty())\
    \ {\n                result = true;\n            }\n            else if (key.isEmpty()\
    \ && !value.isEmpty()) {\n                result = true;\n            }\n    \
    \        else if (value.isEmpty() && !key.isEmpty()) {\n                result\
    \ = true;\n            }\n            else {\n                result = true;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa5a6hg85.java:52: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpa5a6hg85.java:53:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpa5a6hg85.java:54:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpa5a6hg85.java:55: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpa5a6hg85.java:56: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpa5a6hg85.java:57: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!value.isEmpty()) {\n\
    \                if(!value.toLowerCase().equals(value.toUpperCase())) {\n    \
    \                result = false;\n                    break;\n               \
    \ }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnd5inxlu.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpnd5inxlu.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpnd5inxlu.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpnd5inxlu.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpnd5inxlu.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpnd5inxlu.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerKey = key.toLowerCase();\n\
    \            String upperKey = key.toUpperCase();\n            if (dict.get(key).equals(lowerKey))\
    \ {\n                result = true;\n                break;\n            } else\
    \ if (dict.get(key).equals(upperKey)) {\n                result = true;\n    \
    \            break;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpdtb1heop.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpdtb1heop.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpdtb1heop.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdtb1heop.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdtb1heop.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpdtb1heop.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if(!key.isEmpty()\
    \ && key.toLowerCase().equals(value.toLowerCase())) {\n                result\
    \ = true;\n                break;\n            }\n            if(!key.isEmpty()\
    \ && key.toUpperCase().equals(value.toUpperCase())) {\n                result\
    \ = true;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpal60bx36.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpal60bx36.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpal60bx36.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpal60bx36.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpal60bx36.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpal60bx36.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0)\n            return false;\n        Set<String>\
    \ keys = dict.keySet();\n        for (String key : keys) {\n            if (key.isEmpty())\n\
    \                return false;\n        }\n        Set<String> keysUpper = dict.keySet();\n\
    \        for (String key : keysUpper) {\n            if (!key.toUpperCase().equals(key))\n\
    \                return false;\n        }\n        return true;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpymgean0n.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpymgean0n.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpymgean0n.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpymgean0n.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpymgean0n.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpymgean0n.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (key.isEmpty() || value.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptem7cfgn.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmptem7cfgn.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmptem7cfgn.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptem7cfgn.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptem7cfgn.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmptem7cfgn.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     for (String key : dict.keySet()) {\n                String value = dict.get(key);\n\
    \                if (key.isEmpty() || value.isEmpty()) {\n                   \
    \ result = true;\n                    break;\n                }\n            \
    \    if (key.isEmpty() && !value.isEmpty()) {\n                    result = true;\n\
    \                    break;\n                }\n                if (!key.isEmpty()\
    \ && value.isEmpty()) {\n                    result = true;\n                \
    \    break;\n                }\n                if (!key.isEmpty() && !value.isEmpty())\
    \ {\n                    result = key.toLowerCase().equals(value.toLowerCase());\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0txl0btv.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0txl0btv.java:46:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp0txl0btv.java:47:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0txl0btv.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0txl0btv.java:49: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0txl0btv.java:50: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpozbqvb7a.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpozbqvb7a.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpozbqvb7a.java:32:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpozbqvb7a.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpozbqvb7a.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpozbqvb7a.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     for (String key : dict.keySet()) {\n                if (key.isEmpty()) {\n\
    \                    result = true;\n                    break;\n            \
    \    }\n                String lowerCaseKey = key.toLowerCase();\n           \
    \     String upperCaseKey = key.toUpperCase();\n                if (dict.get(lowerCaseKey).equals(dict.get(upperCaseKey)))\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpybape_56.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpybape_56.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpybape_56.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpybape_56.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpybape_56.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpybape_56.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value != null\
    \ && !value.isEmpty()) {\n                if (key.isEmpty() || key.isUpperCase())\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                }\n            }\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphoyfslqa.java:23: error: cannot find symbol\n                if\
    \ (key.isEmpty() || key.isUpperCase()) {\n                                   \
    \     ^\n  symbol:   method isUpperCase()\n  location: variable key of type String\n\
    /tmp/tmphoyfslqa.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmphoyfslqa.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmphoyfslqa.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphoyfslqa.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphoyfslqa.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmphoyfslqa.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(Strin"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (key.isEmpty() || value.isEmpty()) {\n        \
    \        result = false;\n                break;\n            }\n            if\
    \ (key.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpf29cvl3m.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpf29cvl3m.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpf29cvl3m.java:45:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpf29cvl3m.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpf29cvl3m.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpf29cvl3m.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            boolean isUpper = Character.isUpperCase(value.charAt(0));\n     \
    \       boolean isLower = Character.isLowerCase(value.charAt(0));\n          \
    \  if (isUpper != isLower) {\n                result = false;\n              \
    \  break;\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp36yp3itm.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp36yp3itm.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp36yp3itm.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp36yp3itm.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp36yp3itm.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp36yp3itm.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).isEmpty()) {\n  \
    \              if (dict.get(key).equals(key.toLowerCase())) {\n              \
    \      result = true;\n                } else {\n                    result =\
    \ false;\n                    break;\n                }\n            }\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpptq80hgd.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpptq80hgd.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpptq80hgd.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpptq80hgd.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpptq80hgd.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpptq80hgd.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (key.isEmpty()) {\n                return result;\n           \
    \ }\n            if (key.isEmpty()) {\n                return result;\n      \
    \      }\n            if (key.isEmpty()) {\n                return result;\n \
    \           }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpcwzeucfh.java:156: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpcwzeucfh.java:156: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpcwzeucfh.java:156: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpcwzeucfh.java:156: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpcwzeucfh.java:156: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpcwzeucfh.java:166: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if (key.isEmpty())\
    \ {\n                result = true;\n                break;\n            }\n \
    \           if (value.isEmpty()) {\n                result = true;\n         \
    \       break;\n            }\n            char firstChar = key.charAt(0);\n \
    \           char secondChar = value.charAt(0);\n            if (firstChar != secondChar)\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo8f6s7ss.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpo8f6s7ss.java:47:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpo8f6s7ss.java:48:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpo8f6s7ss.java:49: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpo8f6s7ss.java:50: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpo8f6s7ss.java:51: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar != secondChar) {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpibhzy9c7.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpibhzy9c7.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpibhzy9c7.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpibhzy9c7.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpibhzy9c7.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpibhzy9c7.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.equalsIgnoreCase(value))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk0tcv6fi.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpk0tcv6fi.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpk0tcv6fi.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpk0tcv6fi.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpk0tcv6fi.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpk0tcv6fi.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.equalsIgnoreCase(value)) {\n                continue;\n \
    \           }\n            if (value.equalsIgnoreCase(key)) {\n              \
    \  continue;\n            }\n            result = false;\n            break;\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf4q8k_af.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpf4q8k_af.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpf4q8k_af.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpf4q8k_af.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpf4q8k_af.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpf4q8k_af.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerCaseKey = key.toLowerCase();\n\
    \            String upperCaseKey = key.toUpperCase();\n            if (dict.containsKey(lowerCaseKey))\
    \ {\n                if (dict.get(lowerCaseKey).equals(upperCaseKey)) {\n    \
    \                result = true;\n                    break;\n                }\n\
    \            }\n            if (dict.containsKey(upperCaseKey)) {\n          \
    \      if (dict.get(upperCaseKey).equals(lowerCaseKey)) {\n                  \
    \  result = true;\n                    break;\n                }\n           \
    \ }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfr8kv_eq.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpfr8kv_eq.java:45:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpfr8kv_eq.java:46:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfr8kv_eq.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfr8kv_eq.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpfr8kv_eq.java:49: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       boolean upperCase = true;\n        boolean lowerCase = true;\n       \
    \ for (String key : keys) {\n            String value = dict.get(key);\n     \
    \       if (value.length() == 0) {\n                return result;\n         \
    \   }\n            if (value.length() > 1) {\n                return result;\n\
    \            }\n            if (value.length() == 1) {\n                char firstChar\
    \ = value.charAt(0);\n                if (firstChar >= 'a' && firstChar <= 'z')\
    \ {\n                    upperCase = false;\n                } else if (firstChar\
    \ >= 'A' && firstChar <= 'Z') {\n                    upperCase = false;\n    \
    \            } else {\n                    lowerCase = false;\n              \
    \  }\n            }\n        }\n        result = upperCase && lowerCase;\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphc9v6o77.java:50: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmphc9v6o77.java:51:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmphc9v6o77.java:52:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphc9v6o77.java:53: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphc9v6o77.java:54: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmphc9v6o77.java:55: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllStrings =\
    \ keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n       \
    \ boolean isAllUpperCase = keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n\
    \        return isAllStrings && isAllUpperCase;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpttxqpi1b.java:20: error: cannot find symbol\n        boolean isAllStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n     \
    \                                                                            ^\n\
    \  symbol:   method isLowerCase()\n  location: variable key of type String\n/tmp/tmpttxqpi1b.java:21:\
    \ error: cannot find symbol\n        boolean isAllUpperCase = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isUpperCase());\n                                  \
    \                                                 ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpttxqpi1b.java:26: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpttxqpi1b.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpttxqpi1b.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpttxqpi1b.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpttxqpi1b.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmplefqxws1.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmplefqxws1.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmplefqxws1.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplefqxws1.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplefqxws1.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmplefqxws1.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            if (dict.get(key).equals(dict.get(key).toLowerCase()))\
    \ {\n                result = true;\n                break;\n            }\n \
    \           if (dict.get(key).equals(dict.get(key).toUpperCase())) {\n       \
    \         result = true;\n                break;\n            }\n        }\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfq7v2wcw.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpfq7v2wcw.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpfq7v2wcw.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfq7v2wcw.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfq7v2wcw.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpfq7v2wcw.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            boolean isUpperCase =\
    \ Character.isUpperCase(value.charAt(0));\n            boolean isLowerCase = Character.isLowerCase(value.charAt(0));\n\
    \            boolean isStringInLowerCase = value.equalsIgnoreCase(\"apple\");\n\
    \            boolean isStringInUpperCase = value.equalsIgnoreCase(\"banana\");\n\
    \            boolean isStringInBothCases = isStringInLowerCase && isStringInUpperCase;\n\
    \            boolean isStringInBothCasesButNotEqual = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual2 = value.equalsIgnoreCase(\"\
    banana\");\n            boolean isStringInBothCasesButNotEqual3 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual4 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual5 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual6 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual7 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual8 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual9 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual10 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual11 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual12 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual13 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual14 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual15 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual16 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual17 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual18 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual19 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean \n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp92vbsdwv.java:46: error: not a statement\n            boolean \n\
    \            ^\n/tmp/tmp92vbsdwv.java:46: error: ';' expected\n            boolean\
    \ \n                   ^\n/tmp/tmp92vbsdwv.java:48: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp92vbsdwv.java:48:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp92vbsdwv.java:48: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp92vbsdwv.java:48: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp92vbsdwv.java:48: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp92vbsdwv.java:58: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllString =\
    \ true;\n        for (String key : keys) {\n            isAllString = isAllString\
    \ && (key.equalsIgnoreCase(dict.get(key)));\n        }\n        return isAllString;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpv_kneqnl.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpv_kneqnl.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpv_kneqnl.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv_kneqnl.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv_kneqnl.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpv_kneqnl.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     for (String key : dict.keySet()) {\n                if (key.isLowerCase())\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n                else if (key.isUpperCase()) {\n                  \
    \  result = true;\n                    break;\n                }\n           \
    \ }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa68wtqan.java:22: error: cannot find symbol\n                if\
    \ (key.isLowerCase()) {\n                       ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpa68wtqan.java:26: error: cannot\
    \ find symbol\n                else if (key.isUpperCase()) {\n               \
    \             ^\n  symbol:   method isUpperCase()\n  location: variable key of\
    \ type String\n/tmp/tmpa68wtqan.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpa68wtqan.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpa68wtqan.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpa68wtqan.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpa68wtqan.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpa68wtqan.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ Ha"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                result = false;\n\
    \            }\n            if (value.isEmpty()) {\n                result = false;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar != secondChar) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpzh7a8fio.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpzh7a8fio.java:46:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpzh7a8fio.java:47:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzh7a8fio.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzh7a8fio.java:49: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpzh7a8fio.java:50: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                String lowerCase = dict.get(key).toLowerCase();\n           \
    \     String upperCase = dict.get(key).toUpperCase();\n                if (lowerCase.equals(upperCase))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                }\n            }\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4s1ct7k8.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4s1ct7k8.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp4s1ct7k8.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4s1ct7k8.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4s1ct7k8.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4s1ct7k8.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Set<String> keys = dict.keySet();\n        for (String key : keys) {\n \
    \           if (key.isEmpty()) {\n                return false;\n            }\n\
    \        }\n        Set<String> keySet = dict.keySet();\n        for (String key\
    \ : keySet) {\n            String lowerCase = key.toLowerCase();\n           \
    \ String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                continue;\n            }\n            return false;\n   \
    \     }\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi2wjavtc.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpi2wjavtc.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpi2wjavtc.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi2wjavtc.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi2wjavtc.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpi2wjavtc.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            if (key.isEmpty()) {\n        \
    \        return result;\n            }\n        }\n        for (String key : keys)\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.isUpperCase())\
    \ {\n                if (!value.isEmpty()) {\n                    result = false;\n\
    \                }\n            } else {\n                if (!value.isEmpty())\
    \ {\n                    result = false;\n                }\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqlccpeh_.java:34: error: cannot find symbol\n            if (key.isUpperCase())\
    \ {\n                   ^\n  symbol:   method isUpperCase()\n  location: variable\
    \ key of type String\n/tmp/tmpqlccpeh_.java:48: error: cannot find symbol\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n                                        \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpqlccpeh_.java:49: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n                                              \
    \           ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqlccpeh_.java:50: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqlccpeh_.java:51: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqlccpeh_.java:52: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpqlccpeh_.java:53: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interf"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ return false;\n        boolean upperCase = false;\n        boolean lowerCase\
    \ = false;\n        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() == 0) return false;\n            if (value.length()\
    \ > 1 && value.charAt(0) == value.charAt(value.length() - 1)) {\n            \
    \    upperCase = true;\n            } else {\n                lowerCase = true;\n\
    \            }\n        }\n        return upperCase && lowerCase;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpvvvxd8mn.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpvvvxd8mn.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpvvvxd8mn.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvvvxd8mn.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvvvxd8mn.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpvvvxd8mn.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1urj2bau.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp1urj2bau.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp1urj2bau.java:31: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1urj2bau.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1urj2bau.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1urj2bau.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1urj2bau.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp1urj2bau.java:36: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0) {\n            return false;\n        }\n \
    \       Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            if (key.isEmpty()) {\n                return false;\n           \
    \ }\n            String lowerCase = key.toLowerCase();\n            String upperCase\
    \ = key.toUpperCase();\n            if (lowerCase.equals(upperCase)) {\n     \
    \           continue;\n            }\n            return false;\n        }\n \
    \       return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0x9cnbgw.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0x9cnbgw.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp0x9cnbgw.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0x9cnbgw.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0x9cnbgw.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0x9cnbgw.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!value.isEmpty()) {\n\
    \                char firstChar = value.charAt(0);\n                char lastChar\
    \ = value.charAt(value.length()-1);\n                if(firstChar >= 'A' && firstChar\
    \ <= 'Z') {\n                    if(lastChar >= 'A' && lastChar <= 'Z') {\n  \
    \                      result = true;\n                    } else {\n        \
    \                result = false;\n                    }\n                } else\
    \ {\n                    result = false;\n                }\n            } else\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpk_ek6nzb.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpk_ek6nzb.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpk_ek6nzb.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpk_ek6nzb.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpk_ek6nzb.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpk_ek6nzb.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return false;\n\
    \            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbfigm2nt.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpbfigm2nt.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpbfigm2nt.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbfigm2nt.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbfigm2nt.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbfigm2nt.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0) {\n            return false;\n        }\n \
    \       Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            if (!(key instanceof String)) {\n                return false;\n\
    \            }\n            String lowerCase = key.toLowerCase();\n          \
    \  String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                continue;\n            }\n            return false;\n   \
    \     }\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3marbv8s.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp3marbv8s.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp3marbv8s.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3marbv8s.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3marbv8s.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp3marbv8s.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key: keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpb9wvbbqo.java:23: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpb9wvbbqo.java:23: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpb9wvbbqo.java:32: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb9wvbbqo.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb9wvbbqo.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb9wvbbqo.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb9wvbbqo.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpb9wvbbqo.java:37: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \        }\n        return true;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdhsz71ae.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpdhsz71ae.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpdhsz71ae.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdhsz71ae.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdhsz71ae.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpdhsz71ae.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).isEmpty()) {\n  \
    \              String lowerCase = dict.get(key).toLowerCase();\n             \
    \   String upperCase = dict.get(key).toUpperCase();\n                if (lowerCase.equals(upperCase))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          }\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpewzr9j28.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpewzr9j28.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpewzr9j28.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpewzr9j28.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpewzr9j28.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpewzr9j28.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (dict.get(key).equals(lowerCase)\
    \ || dict.get(key).equals(upperCase)) {\n                continue;\n         \
    \   }\n            result = false;\n            break;\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpc_oi446p.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpc_oi446p.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpc_oi446p.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpc_oi446p.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpc_oi446p.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpc_oi446p.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllStrings =\
    \ keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n       \
    \ return isAllStrings;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpesphgn2w.java:20: error: cannot find symbol\n        boolean isAllStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n     \
    \                                                                            ^\n\
    \  symbol:   method isUpperCase()\n  location: variable key of type String\n/tmp/tmpesphgn2w.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpesphgn2w.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpesphgn2w.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpesphgn2w.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpesphgn2w.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpesphgn2w.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n     "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0) {\n            return false;\n        }\n \
    \       Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            String value = dict.get(key);\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                return false;\n            }\n            if (key.toLowerCase().equals(key))\
    \ {\n                return true;\n            }\n            if (key.toUpperCase().equals(key))\
    \ {\n                return true;\n            }\n        }\n        return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmph3_4bcvp.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmph3_4bcvp.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmph3_4bcvp.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmph3_4bcvp.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmph3_4bcvp.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmph3_4bcvp.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     for (String key : dict.keySet()) {\n                if (key.isEmpty()) {\n\
    \                    result = true;\n                    break;\n            \
    \    }\n                String lowerCaseKey = key.toLowerCase();\n           \
    \     String upperCaseKey = key.toUpperCase();\n                if (lowerCaseKey.equals(upperCaseKey))\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpt1_ji82_.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpt1_ji82_.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpt1_ji82_.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpt1_ji82_.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpt1_ji82_.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpt1_ji82_.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keySet = dict.keySet();\n        boolean isAllStrings\
    \ = keySet.isEmpty() || keySet.size() == dict.size();\n        boolean isAllStringsUpper\
    \ = keySet.isEmpty() || keySet.size() == dict.size() && dict.keySet().stream().map(String::toUpperCase).allMatch(s\
    \ -> dict.containsKey(s));\n        return isAllStrings && isAllStringsUpper;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmps_lun385.java:26: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmps_lun385.java:27:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmps_lun385.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmps_lun385.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmps_lun385.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmps_lun385.java:31: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (value.toLowerCase().equals(value)) {\n                result\
    \ = true;\n                break;\n            }\n            if (value.toUpperCase().equals(value))\
    \ {\n                result = true;\n                break;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt00gukq5.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpt00gukq5.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpt00gukq5.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpt00gukq5.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpt00gukq5.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpt00gukq5.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllStrings =\
    \ keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n       \
    \ boolean isAllStringsUpper = keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n\
    \        return isAllStrings && isAllStringsUpper;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4mebcdaq.java:20: error: cannot find symbol\n        boolean isAllStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n     \
    \                                                                            ^\n\
    \  symbol:   method isLowerCase()\n  location: variable key of type String\n/tmp/tmp4mebcdaq.java:21:\
    \ error: cannot find symbol\n        boolean isAllStringsUpper = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isUpperCase());\n                                  \
    \                                                    ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp4mebcdaq.java:26: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mebcdaq.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mebcdaq.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mebcdaq.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mebcdaq.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) =="
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isStringInLowerCase\
    \ = true;\n        boolean isStringInUpperCase = true;\n        for (String key\
    \ : keys) {\n            String value = dict.get(key);\n            if (value.toLowerCase().equals(value))\
    \ {\n                isStringInLowerCase = false;\n            }\n           \
    \ if (value.toUpperCase().equals(value)) {\n                isStringInUpperCase\
    \ = false;\n            }\n        }\n        return isStringInLowerCase && isStringInUpperCase;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpzt00_5nq.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpzt00_5nq.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpzt00_5nq.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzt00_5nq.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzt00_5nq.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpzt00_5nq.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.equalsIgnoreCase(value))\
    \ {\n                continue;\n            }\n            if (value.length()\
    \ > value.length()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr6atlr7b.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpr6atlr7b.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpr6atlr7b.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpr6atlr7b.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpr6atlr7b.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpr6atlr7b.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty()) {\n                result = true;\n          \
    \  } else if (key.isEmpty()) {\n                result = false;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpomd_hqyu.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpomd_hqyu.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpomd_hqyu.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpomd_hqyu.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpomd_hqyu.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpomd_hqyu.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCaseKey\
    \ = key.toLowerCase();\n            String upperCaseKey = key.toUpperCase();\n\
    \            if (lowerCaseKey.equals(upperCaseKey)) {\n                result\
    \ = true;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp8jmw5d_d.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp8jmw5d_d.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp8jmw5d_d.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8jmw5d_d.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8jmw5d_d.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8jmw5d_d.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return false;\n        }\n        for (String key : dict.keySet()) {\n   \
    \         String value = dict.get(key);\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                return false;\n            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz2q_ss_f.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpz2q_ss_f.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpz2q_ss_f.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz2q_ss_f.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz2q_ss_f.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpz2q_ss_f.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllUpperCase\
    \ = true;\n        boolean isAllLowerCase = true;\n        for (String key : keys)\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                isAllUpperCase = false;\n            }\n           \
    \ if (value.length() < 1) {\n                isAllLowerCase = false;\n       \
    \     }\n        }\n        return isAllUpperCase && isAllLowerCase;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpu2woundv.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpu2woundv.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpu2woundv.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu2woundv.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu2woundv.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpu2woundv.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       boolean upperCase = false;\n        boolean lowerCase = false;\n     \
    \   for (String key : keys) {\n            String value = dict.get(key);\n   \
    \         if (value.length() > 0) {\n                upperCase = value.equalsIgnoreCase(key.toUpperCase());\n\
    \                lowerCase = value.equalsIgnoreCase(key.toLowerCase());\n    \
    \        }\n        }\n        if (upperCase == lowerCase) {\n            return\
    \ result;\n        }\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0bsa0mlx.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0bsa0mlx.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp0bsa0mlx.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0bsa0mlx.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0bsa0mlx.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0bsa0mlx.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \            }\n            else if (key.toLowerCase().equals(key)) {\n      \
    \          result = true;\n            }\n            else if (key.toUpperCase().equals(key))\
    \ {\n                result = true;\n            }\n            else {\n     \
    \           result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpepkw9ehm.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpepkw9ehm.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpepkw9ehm.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpepkw9ehm.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpepkw9ehm.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpepkw9ehm.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String lowerCaseKey = key.toLowerCase();\n\
    \            String upperCaseKey = key.toUpperCase();\n            if (!dict.containsKey(lowerCaseKey))\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (!dict.containsKey(upperCaseKey)) {\n                result =\
    \ false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpl_pidb_b.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpl_pidb_b.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpl_pidb_b.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpl_pidb_b.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpl_pidb_b.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpl_pidb_b.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!value.isEmpty()) {\n\
    \                if(!value.toLowerCase().equals(value.toUpperCase())) {\n    \
    \                result = false;\n                    break;\n               \
    \ }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpllbnyu0e.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpllbnyu0e.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpllbnyu0e.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpllbnyu0e.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpllbnyu0e.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpllbnyu0e.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isUpper = false;\n        boolean isLower = false;\n    \
    \    for (String key : dict.keySet()) {\n            if (key.isUpperCase()) {\n\
    \                isUpper = true;\n            } else if (key.isLowerCase()) {\n\
    \                isLower = true;\n            }\n        }\n        return isUpper\
    \ && isLower;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpxbj5h5oa.java:22: error: cannot find symbol\n            if (key.isUpperCase())\
    \ {\n                   ^\n  symbol:   method isUpperCase()\n  location: variable\
    \ key of type String\n/tmp/tmpxbj5h5oa.java:24: error: cannot find symbol\n  \
    \          } else if (key.isLowerCase()) {\n                          ^\n  symbol:\
    \   method isLowerCase()\n  location: variable key of type String\n/tmp/tmpxbj5h5oa.java:32:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxbj5h5oa.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxbj5h5oa.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxbj5h5oa.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxbj5h5oa.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpxbj5h5oa.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 0) {\n                boolean isUpper = Character.isUpperCase(value.charAt(0));\n\
    \                boolean isLower = Character.isLowerCase(value.charAt(0));\n \
    \               if (isUpper != isLower) {\n                    result = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5uqcmhy1.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp5uqcmhy1.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp5uqcmhy1.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5uqcmhy1.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5uqcmhy1.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp5uqcmhy1.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpw393c2va.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpw393c2va.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpw393c2va.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpw393c2va.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpw393c2va.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpw393c2va.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            else if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            else {\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3vro9c5k.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp3vro9c5k.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp3vro9c5k.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3vro9c5k.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3vro9c5k.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp3vro9c5k.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        for (String key : keys) {\n\
    \            if (Character.isLowerCase(key.charAt(0))) {\n                if (!dict.containsKey(key.toLowerCase()))\
    \ {\n                    return false;\n                }\n            } else\
    \ {\n                if (!dict.containsKey(key.toUpperCase())) {\n           \
    \         return false;\n                }\n            }\n        }\n       \
    \ return true;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmprj3kh95m.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmprj3kh95m.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmprj3kh95m.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmprj3kh95m.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmprj3kh95m.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmprj3kh95m.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       boolean upperCase = false;\n        boolean lowerCase = false;\n     \
    \   for (String key : keys) {\n            String value = dict.get(key);\n   \
    \         if (value.length() > 0) {\n                upperCase = value.equalsIgnoreCase(String.valueOf(key).toUpperCase());\n\
    \                lowerCase = value.equalsIgnoreCase(String.valueOf(key).toLowerCase());\n\
    \            }\n        }\n        result = upperCase || lowerCase;\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpyy2top4g.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpyy2top4g.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpyy2top4g.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpyy2top4g.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpyy2top4g.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpyy2top4g.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        Set<String> keySet = keys.stream().map(String::toLowerCase).collect(Collectors.toSet());\n\
    \        Set<String> keySet2 = keys.stream().map(String::toUpperCase).collect(Collectors.toSet());\n\
    \        return keySet.equals(keySet2);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3na5id62.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp3na5id62.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp3na5id62.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3na5id62.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3na5id62.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp3na5id62.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp_9mo0agl.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_9mo0agl.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp_9mo0agl.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_9mo0agl.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_9mo0agl.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_9mo0agl.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).isEmpty()) {\n  \
    \              String lowerCase = dict.get(key).toLowerCase();\n             \
    \   String upperCase = dict.get(key).toUpperCase();\n                if (lowerCase.equals(upperCase))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          } else {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr1jzmuki.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpr1jzmuki.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpr1jzmuki.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpr1jzmuki.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpr1jzmuki.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpr1jzmuki.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptrb1vut_.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmptrb1vut_.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmptrb1vut_.java:31: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptrb1vut_.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptrb1vut_.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptrb1vut_.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptrb1vut_.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmptrb1vut_.java:36: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        for (String key : keys) {\n\
    \            String lowerCase = key.toLowerCase();\n            String upperCase\
    \ = key.toUpperCase();\n            if (dict.containsKey(lowerCase)) {\n     \
    \           if (dict.get(lowerCase).equals(upperCase)) {\n                   \
    \ return true;\n                }\n            }\n            if (dict.containsKey(upperCase))\
    \ {\n                if (dict.get(upperCase).equals(lowerCase)) {\n          \
    \          return true;\n                }\n            }\n        }\n       \
    \ return false;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpz2nkscvj.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpz2nkscvj.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpz2nkscvj.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz2nkscvj.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz2nkscvj.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpz2nkscvj.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllStrings =\
    \ keys.stream().allMatch(key -> dict.get(key).matches(\"[a-z]+\"));\n        boolean\
    \ isAllUpperCase = keys.stream().allMatch(key -> dict.get(key).matches(\"[A-Z]+\"\
    ));\n        return isAllStrings && isAllUpperCase;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmcvkvjjw.java:26: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpmcvkvjjw.java:27:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpmcvkvjjw.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmcvkvjjw.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmcvkvjjw.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpmcvkvjjw.java:31: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isAllStrings = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                isAllStrings = false;\n            }\n        }\n        return\
    \ isAllStrings;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpte6e5ywt.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpte6e5ywt.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpte6e5ywt.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpte6e5ywt.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpte6e5ywt.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpte6e5ywt.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpng99yy68.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpng99yy68.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpng99yy68.java:30: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpng99yy68.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpng99yy68.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpng99yy68.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpng99yy68.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpng99yy68.java:35: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp5x5_0fjb.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp5x5_0fjb.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp5x5_0fjb.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5x5_0fjb.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5x5_0fjb.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp5x5_0fjb.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp_3g3yvz.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpp_3g3yvz.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpp_3g3yvz.java:31: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpp_3g3yvz.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpp_3g3yvz.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpp_3g3yvz.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpp_3g3yvz.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpp_3g3yvz.java:36: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).isEmpty()) {\n  \
    \              String lower = dict.get(key).toLowerCase();\n                String\
    \ upper = dict.get(key).toUpperCase();\n                if (lower != null && upper\
    \ != null && !lower.equals(upper)) {\n                    result = false;\n  \
    \              }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpme9d0mdb.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpme9d0mdb.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpme9d0mdb.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpme9d0mdb.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpme9d0mdb.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpme9d0mdb.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     Set<String> keys = dict.keySet();\n            boolean isStringInLowerCase\
    \ = false;\n            boolean isStringInUpperCase = false;\n            for\
    \ (String key : keys) {\n                String value = dict.get(key);\n     \
    \           if (value.toLowerCase().equals(key)) {\n                    isStringInLowerCase\
    \ = true;\n                }\n                if (value.toUpperCase().equals(key))\
    \ {\n                    isStringInUpperCase = true;\n                }\n    \
    \        }\n            result = isStringInLowerCase && isStringInUpperCase;\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8xhpitbf.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp8xhpitbf.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp8xhpitbf.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8xhpitbf.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8xhpitbf.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8xhpitbf.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllUpperCase\
    \ = true;\n        boolean isAllLowerCase = true;\n        for (String key : keys)\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                isAllUpperCase = false;\n            }\n           \
    \ if (value.length() < 1) {\n                isAllLowerCase = false;\n       \
    \     }\n        }\n        return isAllUpperCase && isAllLowerCase;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmptq2r5ztn.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmptq2r5ztn.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmptq2r5ztn.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptq2r5ztn.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptq2r5ztn.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmptq2r5ztn.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if(!key.isEmpty() && key.isEmpty())\
    \ {\n                result = true;\n                break;\n            }\n \
    \           if(!key.isEmpty() && !key.isEmpty()) {\n                result = true;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpo4yuyae_.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpo4yuyae_.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpo4yuyae_.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpo4yuyae_.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpo4yuyae_.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpo4yuyae_.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp6x0043qc.java:21: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp6x0043qc.java:21: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp6x0043qc.java:30: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp6x0043qc.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp6x0043qc.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp6x0043qc.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp6x0043qc.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp6x0043qc.java:35: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            if(!key.isEmpty() &&\
    \ key.toUpperCase().equals(value.toUpperCase())) {\n                continue;\n\
    \            }\n            result = false;\n            break;\n        }\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd9j8zobh.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpd9j8zobh.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmpd9j8zobh.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpd9j8zobh.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpd9j8zobh.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpd9j8zobh.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isUpperCase()\
    \ && !key.isLowerCase()) {\n                result = false;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnx99lzxx.java:22: error: cannot find symbol\n            if(!key.isUpperCase()\
    \ && !key.isLowerCase()) {\n                   ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpnx99lzxx.java:22: error: cannot\
    \ find symbol\n            if(!key.isUpperCase() && !key.isLowerCase()) {\n  \
    \                                       ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpnx99lzxx.java:30: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                   ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpnx99lzxx.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                     ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpnx99lzxx.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpnx99lzxx.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpnx99lzxx.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpnx99lzxx.java:35: error: cannot find"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isAllUpperCase = true;\n        boolean isAllLowerCase =\
    \ true;\n        for (String key : dict.keySet()) {\n            if (isAllUpperCase\
    \ && isAllLowerCase) {\n                return false;\n            }\n       \
    \     if (isAllLowerCase) {\n                isAllLowerCase = key.toLowerCase().equals(key);\n\
    \            }\n            if (isAllUpperCase) {\n                isAllUpperCase\
    \ = key.toUpperCase().equals(key);\n            }\n        }\n        return isAllUpperCase\
    \ && isAllLowerCase;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_z8xierl.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_z8xierl.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp_z8xierl.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_z8xierl.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_z8xierl.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_z8xierl.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        boolean isUpperCase = true;\n\
    \        for (String key : keys) {\n            if (Character.isUpperCase(key.charAt(0)))\
    \ {\n                isUpperCase = false;\n                break;\n          \
    \  }\n        }\n        if (isUpperCase) {\n            return true;\n      \
    \  }\n        for (String key : keys) {\n            if (!Character.isUpperCase(key.charAt(0)))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp6kp_5kua.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp6kp_5kua.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                       ^\n  symbol:   method\
    \ of(String,String,String,String,String,String)\n  location: interface Map\n/tmp/tmp6kp_5kua.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp6kp_5kua.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                       ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp6kp_5kua.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                  ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp6kp_5kua.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                         ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
