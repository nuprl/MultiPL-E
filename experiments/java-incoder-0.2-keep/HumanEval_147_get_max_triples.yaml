name: HumanEval_147_get_max_triples
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a positive integer n. You have to create an\
  \ integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value\
  \ of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
  \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n  \
  \  // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation: \n \
  \   // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public\
  \ static long getMaxTriples(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
  \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
  \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
completions: ["        int[] a = new int[n];\n        Arrays.fill(a, 1);\n       \
    \ Arrays.sort(a);\n        long result = 0;\n        for (int i = 0; i < a.length;\
    \ i++) {\n            for (int j = i + 1; j < a.length; j++) {\n             \
    \   for (int k = j + 1; k < a.length; k++) {\n                    if (a[i] < a[j]\
    \ && a[j] < a[k]) {\n                        result += (a[i] + a[j] + a[k]) %\
    \ 3 == 0 ? 1 : 0;\n                    }\n                }\n            }\n \
    \       }\n        return result;\n", "        long[] a = new long[n];\n     \
    \   Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n     \
    \   for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++) {\n \
    \               for(int k = j; k < n; k++) {\n                    if(a[i] + a[j]\
    \ + a[k] == 3) {\n                        ans += 1;\n                    }\n \
    \               }\n            }\n        }\n        return ans;\n", "       \
    \ long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long max = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      triples++;\n                        if(a[i] > max) {\n\
    \                            max = a[i];\n                        }\n        \
    \                if(a[j] > max) {\n                            max = a[j];\n \
    \                       }\n                        if(a[k] > max) {\n        \
    \                    max = a[k];\n                        }\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long triples = 0;\n        for(int i = 1; i\
    \ < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        triples += 1;\n                    }\n              \
    \  }\n            }\n        }\n        return triples;\n", "        long a[]\
    \ = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n      \
    \  long triples = 0;\n        for (int i = 0; i < n; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (a[i] == a[j] && a[j] == a[k]) {\n                   \
    \     triples += 1;\n                    }\n                }\n            }\n\
    \        }\n        return triples;\n", "        long a[] = new long[n];\n   \
    \     Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples += 1;\n             \
    \       }\n                }\n            }\n        }\n        return triples;\n",
  "        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long max = 0;\n        long count = 0;\n     \
    \   for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++) {\n \
    \               for(int k = j; k < n; k++) {\n                    if(a[i] + a[j]\
    \ + a[k] == 3) {\n                        count++;\n                    }\n  \
    \              }\n            }\n            sum += count;\n            max =\
    \ Math.max(max, sum);\n            count = 0;\n        }\n        return max;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long ans = 0;\n        for(int i = 0;\
    \ i < n; i++) {\n            for(int j = i+1; j < n; j++) {\n                for(int\
    \ k = j+1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        ans += 1;\n                    }\n                }\n\
    \            }\n        }\n        return ans;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        long triple = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        triple++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triple;\n", "        int[] a = new int[n];\n        Arrays.fill(a, 1);\n   \
    \     Arrays.sort(a);\n        long ans = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k])\
    \ {\n                        ans += 1;\n                    }\n              \
    \  }\n            }\n        }\n        return ans;\n", "        long a[] = new\
    \ long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i +\
    \ 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n    \
    \    Arrays.sort(a);\n        long triples = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    if (a[i] < a[j] && a[j] < a[k])\
    \ {\n                        long sum = a[i] + a[j] + a[k];\n                \
    \        if (sum % 3 == 0) {\n                            triples++;\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n        return triples;\n", "        long a[] = new long[n];\n   \
    \     Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triple = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triple++;\n                 \
    \   }\n                }\n            }\n        }\n        return triple;\n",
  "        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++) {\n   \
    \                 if(a[i] + a[j] + a[k] == (3 * i) + (3 * j) + (3 * k)) {\n  \
    \                      count++;\n                    }\n                }\n  \
    \          }\n        }\n        return count;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n", " \
    \       long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long max = 0;\n        long sum = 0;\n     \
    \   for(int i = 0; i < n; i++) {\n            sum += a[i];\n            if(sum\
    \ % 3 == 0) {\n                max = Math.max(max, sum);\n            }\n    \
    \    }\n        return max;\n", "        long a[] = new long[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long triples = 0;\n        long triple\
    \ = 0;\n        long triple2 = 0;\n        long triple3 = 0;\n        long triple4\
    \ = 0;\n        long triple5 = 0;\n        long triple6 = 0;\n        long triple7\
    \ = 0;\n        long triple8 = 0;\n        long triple9 = 0;\n        long triple10\
    \ = 0;\n        long triple11 = 0;\n        long triple12 = 0;\n        long triple13\
    \ = 0;\n        long triple14 = 0;\n        long triple15 = 0;\n        long triple16\
    \ = 0;\n        long triple17 = 0;\n        long triple18 = 0;\n        long triple19\
    \ = 0;\n        long triple20 = 0;\n        long triple21 = 0;\n        long triple22\
    \ = 0;\n        long triple23 = 0;\n        long triple24 = 0;\n        long triple25\
    \ = 0;\n        long triple26 = 0;\n        long triple27 = 0;\n        long triple28\
    \ = 0;\n        long triple29 = 0;\n        long triple30 = 0;\n        long triple31\
    \ = 0;\n        long triple32 = 0;\n        long triple33 = 0;\n        long triple34\
    \ = 0;\n        long triple35 = 0;\n        long triple36 = 0;\n        long triple37\
    \ = 0;\n        long triple38 = 0;\n        long triple39 = 0;\n        long triple40\
    \ = 0;\n        long triple41 = 0;\n        long triple42 = 0;\n        long triple43\
    \ = 0;\n        long triple44 = 0;\n        long triple45 = 0;\n        long triple46\
    \ = 0;\n        long triple47 = 0;\n        long triple48 = 0;\n        long triple49\
    \ = 0;\n        long triple50 = 0;\n        long triple51 = 0;\n        long triple52\
    \ = 0;\n        long triple53 = 0;\n        long triple54 = 0;\n        long triple55\
    \ = 0;\n        long triple56 = 0;\n        long triple57 = 0;\n        long triple58\
    \ = 0;\n        long triple59 = 0;\n        long triple60 = 0;\n        long triple61\
    \ = 0;\n        long triple62 = 0;\n        long triple63 = 0;\n        long triple64\
    \ = 0;\n        long triple65 = 0;\n        long triple66 = 0;\n        long triple67\
    \ = 0;\n        long triple68 = 0;\n        long triple69 = 0;\n        long triple70\
    \ = 0;\n        long triple71 = 0;\n        long triple72 = 0;\n        long triple73\
    \ = 0;\n        long triple74 = 0;\n        long triple75 = 0;\n        long triple76\
    \ = 0;\n        long triple77 = 0;\n        long triple78 = 0;\n        long triple79\
    \ = 0;\n        long triple80 = 0;\n        long triple81 = 0;\n        long triple82\
    \ = 0;", "        long[] a = new long[n];\n        Arrays.fill(a, 1);\n      \
    \  Arrays.sort(a);\n        long result = 0;\n        for(int i = 0; i < a.length;\
    \ i++){\n            for(int j = i+1; j < a.length; j++){\n                for(int\
    \ k = j+1; k < a.length; k++){\n                    if(a[i] + a[j] + a[k] == 3){\n\
    \                        result = Math.max(result, i + j + k);\n             \
    \       }\n                }\n            }\n        }\n        return result;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long triples = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] < a[j] && a[i]\
    \ < a[k]) {\n                        triples += 1;\n                    }\n  \
    \              }\n            }\n        }\n        return triples;\n", "    \
    \    long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long triples = 0;\n        long triple = 0;\n\
    \        long triple2 = 0;\n        long triple3 = 0;\n        long triple4 =\
    \ 0;\n        long triple5 = 0;\n        long triple6 = 0;\n        long triple7\
    \ = 0;\n        long triple8 = 0;\n        long triple9 = 0;\n        long triple10\
    \ = 0;\n        long triple11 = 0;\n        long triple12 = 0;\n        long triple13\
    \ = 0;\n        long triple14 = 0;\n        long triple15 = 0;\n        long triple16\
    \ = 0;\n        long triple17 = 0;\n        long triple18 = 0;\n        long triple19\
    \ = 0;\n        long triple20 = 0;\n        long triple21 = 0;\n        long triple22\
    \ = 0;\n        long triple23 = 0;\n        long triple24 = 0;\n        long triple25\
    \ = 0;\n        long triple26 = 0;\n        long triple27 = 0;\n        long triple28\
    \ = 0;\n        long triple29 = 0;\n        long triple30 = 0;\n        long triple31\
    \ = 0;\n        long triple32 = 0;\n        long triple33 = 0;\n        long triple34\
    \ = 0;\n        long triple35 = 0;\n        long triple36 = 0;\n        long triple37\
    \ = 0;\n        long triple38 = 0;\n        long triple39 = 0;\n        long triple40\
    \ = 0;\n        long triple41 = 0;\n        long triple42 = 0;\n        long triple43\
    \ = 0;\n        long triple44 = 0;\n        long triple45 = 0;\n        long triple46\
    \ = 0;\n        long triple47 = 0;\n        long triple48 = 0;\n        long triple49\
    \ = 0;\n        long triple50 = 0;\n        long triple51 = 0;\n        long triple52\
    \ = 0;\n        long triple53 = 0;\n        long triple54 = 0;\n        long triple55\
    \ = 0;\n        long triple56 = 0;\n        long triple57 = 0;\n        long triple58\
    \ = 0;\n        long triple59 = 0;\n        long triple60 = 0;\n        long triple61\
    \ = 0;\n        long triple62 = 0;\n        long triple63 = 0;\n        long triple64\
    \ = 0;\n        long triple65 = 0;\n        long triple66 = 0;\n        long triple67\
    \ = 0;\n        long triple68 = 0;\n        long triple69 = 0;\n        long triple70\
    \ = 0;\n        long triple71 = 0;\n        long triple72 = 0;\n        long triple73\
    \ = 0;\n        long triple74 = 0;\n        long triple75 = 0;\n        long triple76\
    \ = 0;\n        long triple77 = 0;\n        long triple78 = 0;\n        long triple79\
    \ = 0;\n        long triple80 = 0;\n        long triple81 = 0;\n        long triple82\
    \ = 0;", "        long[] a = new long[n];\n        Arrays.fill(a, 1);\n      \
    \  Arrays.sort(a);\n        long result = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            for(int j = i; j < n; j++) {\n                for(int k = j;\
    \ k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n         \
    \               result++;\n                    }\n                }\n        \
    \    }\n        }\n        return result;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n", " \
    \       long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long max = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            sum += a[i];\n            if(sum % 3 == 0) {\n              \
    \  max = Math.max(max, sum);\n            }\n        }\n        return max;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        int[] a = new int[n];\n        Arrays.fill(a, 0);\n  \
    \      Arrays.parallelSetAll(a, i -> i * i - i + 1);\n        long max = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[j] < a[k]) {\n                        long triple =\
    \ a[i] + a[j] + a[k];\n                        if (triple > max) {\n         \
    \                   max = triple;\n                        }\n               \
    \     }\n                }\n            }\n        }\n        return max;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long count = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    sum += a[i];\n                        count += 1;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ sum;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n    \
    \    Arrays.sort(a);\n        long triples = 0;\n        long sum = 0;\n     \
    \   for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n\
    \                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples += 1;\n             \
    \           sum += a[i];\n                    }\n                }\n         \
    \   }\n        }\n        return sum;\n", "        long a[] = new long[n];\n \
    \       Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long[] a = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long result = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      result++;\n                    }\n                }\n \
    \           }\n        }\n        return result;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long[] a = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long ans = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    ans++;\n                    }\n                }\n      \
    \      }\n        }\n        return ans;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      sum += 1;\n                    }\n                }\n \
    \           }\n        }\n        return sum;\n", "        int[] a = new int[n];\n\
    \        Arrays.fill(a, 0);\n        Arrays.sort(a);\n        int count = 0;\n\
    \        for (int i = 0; i < a.length; i++) {\n            for (int j = i + 1;\
    \ j < a.length; j++) {\n                for (int k = j + 1; k < a.length; k++)\
    \ {\n                    if (a[i] < a[j] && a[i] < a[k]) {\n                 \
    \       count++;\n                    }\n                }\n            }\n  \
    \      }\n        return count;\n", "        long[] a = new long[n];\n       \
    \ Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n       \
    \ long sum = 0;\n        long cur = 0;\n        long prev = 0;\n        for(int\
    \ i = 0; i < n; i++) {\n            sum += a[i];\n            if(sum % 3 == 0)\
    \ {\n                cur = a[i];\n                prev = sum;\n            }\n\
    \            else if(sum % 3 != 0) {\n                ans += (cur - prev);\n \
    \               cur = a[i];\n                prev = sum;\n            }\n    \
    \    }\n        ans += (cur - prev);\n        return ans;\n", "        long a[]\
    \ = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n      \
    \  long max = 0;\n        long sum = 0;\n        for(int i = 1; i < n; i++) {\n\
    \            sum += a[i];\n            if(sum % 3 == 0) {\n                max\
    \ = Math.max(max, sum);\n            }\n        }\n        return max;\n", " \
    \       long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n       \
    \                 triples += 1;\n                    }\n                }\n  \
    \          }\n        }\n        return triples;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return ans;\n", " \
    \       long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        sum\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return sum;\n", "        int[] a = new int[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long triples = 0;\n        for (int i\
    \ = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n        \
    \        for (int k = j + 1; k < n; k++) {\n                    if (a[i] < a[j]\
    \ && a[i] < a[k] && a[j] < a[k]) {\n                        triples += 1;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long sum = 0;\n        long triple = 0;\n  \
    \      for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++) {\n\
    \                for(int k = j; k < n; k++) {\n                    if(a[i] + a[j]\
    \ + a[k] == 3) {\n                        triple++;\n                    }\n \
    \               }\n            }\n        }\n        return triple;\n", "    \
    \    long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        long sum = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            sum += a[i];\n            for(int j = i; j < n; j++) {\n\
    \                sum += a[j];\n                for(int k = j; k < n; k++) {\n\
    \                    sum += a[k];\n                    if(sum % 3 == 0) {\n  \
    \                      result += 1;\n                    }\n                }\n\
    \            }\n        }\n        return result;\n", "        long a[] = new\
    \ long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ triples = 0;\n        for(int i = 1; i < n; i++) {\n            for(int j =\
    \ i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n           \
    \         if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long triples = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] < a[j] && a[i]\
    \ < a[k]) {\n                        triples += 1;\n                    }\n  \
    \              }\n            }\n        }\n        return triples;\n", "    \
    \    long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long sum = 0;\n        for(int i = 0; i < a.length;\
    \ i++) {\n            for(int j = i+1; j < a.length; j++) {\n                for(int\
    \ k = j+1; k < a.length; k++) {\n                    if(a[i] + a[j] + a[k] ==\
    \ 3) {\n                        sum += 1;\n                    }\n           \
    \     }\n            }\n        }\n        return sum;\n", "        long a[] =\
    \ new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ triples = 0;\n        long sum = 0;\n        for(int i = 1; i < n; i++) {\n\
    \            for(int j = i; j < n; j++) {\n                for(int k = j; k <\
    \ n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n             \
    \           sum += 1;\n                    }\n                }\n            }\n\
    \        }\n        System.out.println(sum);\n        return sum;\n", "      \
    \  long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      sum += a[i];\n                        sum += a[j];\n  \
    \                      sum += a[k];\n                        triples += 1;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long triples = 0;\n        for(int i = 1; i\
    \ < n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      triples++;\n                    }\n                }\n\
    \            }\n        }\n        return triples;\n", "        long a[] = new\
    \ long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ triples = 0;\n        long sum = 0;\n        for(int i = 1; i < n; i++) {\n\
    \            for(int j = i; j < n; j++) {\n                for(int k = j; k <\
    \ n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n             \
    \           sum += a[i];\n                        sum += a[j];\n             \
    \           sum += a[k];\n                        triples += 1;\n            \
    \        }\n                }\n            }\n        }\n        return triples;\n",
  "        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n               \
    \         count++;\n                    }\n                }\n            }\n\
    \        }\n        return count;\n", "        int[] a = new int[n];\n       \
    \ Arrays.fill(a, 1);\n        Arrays.sort(a);\n        int count = 0;\n      \
    \  for (int i = 0; i < a.length; i++) {\n            for (int j = i + 1; j < a.length;\
    \ j++) {\n                for (int k = j + 1; k < a.length; k++) {\n         \
    \           if (a[i] < a[j] && a[i] < a[k]) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n  \
    \      Arrays.sort(a);\n        long triples = 0;\n        long triple = 0;\n\
    \        long triple2 = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    triple = a[i] + a[j] + a[k];\n              \
    \      if (triple % 3 == 0) {\n                        triples += 1;\n       \
    \             }\n                }\n            }\n        }\n        return triples;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    triple++;\n                    }\n                }\n   \
    \         }\n        }\n        return triple;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += a[i];\n\
    \                        sum += a[j];\n                        sum += a[k];\n\
    \                        triples += 1;\n                    }\n              \
    \  }\n            }\n        }\n        return triples;\n", "        long[] a\
    \ = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n      \
    \  long sum = 0;\n        for(int i = 0; i < a.length; i++) {\n            for(int\
    \ j = i + 1; j < a.length; j++) {\n                for(int k = j + 1; k < a.length;\
    \ k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n                \
    \        sum += 1;\n                    }\n                }\n            }\n\
    \        }\n        return sum;\n", "        int[] a = new int[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long triples = 0;\n        for (int i\
    \ = 0; i < a.length - 1; i++) {\n            for (int j = i + 1; j < a.length;\
    \ j++) {\n                for (int k = j + 1; k < a.length; k++) {\n         \
    \           if (a[i] < a[j] && a[i] < a[k]) {\n                        triples\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return triples;\n", "        long[] a = new long[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long triples = 0;\n        for (int i\
    \ = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n        \
    \        for (int k = j + 1; k < n; k++) {\n                    if (a[i] < a[j]\
    \ && a[j] < a[k]) {\n                        triples += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return triples;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        int[] a = new int[n];\n        Arrays.fill(a, 1);\n  \
    \      Arrays.sort(a);\n        int count = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k])\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;\n", "        long[] a = new\
    \ long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ count = 0;\n        long sum = 0;\n        for(int i = 1; i < n; i++) {\n  \
    \          if(a[i] > a[i-1]) {\n                sum += a[i] - a[i-1];\n      \
    \          count++;\n            }\n        }\n        return count;\n", "   \
    \     long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long sum = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    sum += 1;\n                    }\n                }\n   \
    \         }\n        }\n        return sum;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return ans;\n", " \
    \       long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n \
    \       Arrays.sort(a);\n        long triples = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i+1; j < n; j++) {\n                for(int\
    \ k = j+1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        triples++;\n                    }\n                }\n\
    \            }\n        }\n        return triples;\n", "        long a[] = new\
    \ long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ result = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i\
    \ + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n     \
    \               if(a[i] + a[j] + a[k] == 3) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n \
    \       Arrays.sort(a);\n        long triples = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        triples++;\n                    }\n                }\n\
    \            }\n        }\n        return triples;\n", "        long a[] = new\
    \ long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ triples = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j =\
    \ i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n   \
    \                 if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long triples = 0;\n        for(int i = 1; i\
    \ < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        triples++;\n                    }\n                }\n\
    \            }\n        }\n        return triples;\n", "        int[] a = new\
    \ int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1;\
    \ j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n         \
    \           if (a[i] == a[j] && a[j] == a[k]) {\n                        ans +=\
    \ 1;\n                    }\n                }\n            }\n        }\n   \
    \     return ans;\n", "        long a[] = new long[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long ans = 0;\n        for(int i = 1;\
    \ i < n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      ans++;\n                    }\n                }\n    \
    \        }\n        }\n        return ans;\n", "        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans++;\n                    }\n\
    \                }\n            }\n        }\n        return ans;\n", "      \
    \  long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        for(int i = 0; i <\
    \ n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        sum += 1;\n                    }\n                }\n\
    \            }\n        }\n        return sum;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 0; i < n; i++) {\n           \
    \ for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n;\
    \ k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n                \
    \        triples++;\n                    }\n                }\n            }\n\
    \        }\n        return triples;\n", "        long a[] = new long[n];\n   \
    \     Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n   \
    \     long triple = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(i+j+k == n) {\n                        triple++;\n          \
    \          }\n                    sum += a[i] - a[j] - a[k];\n               \
    \ }\n            }\n        }\n        return sum % 3 == 0 ? triple : 0;\n", " \
    \       int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < a.length; i++) {\n   \
    \         for (int j = i + 1; j < a.length; j++) {\n                for (int k\
    \ = j + 1; k < a.length; k++) {\n                    if (a[i] < a[j] && a[j] <\
    \ a[k]) {\n                        triples += 3;\n                    }\n    \
    \            }\n            }\n        }\n        return triples;\n", "      \
    \  long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triple = 0;\n        long triples = 0;\n        for(int i = 1; i\
    \ < n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      triple++;\n                        if(triple > triples)\
    \ {\n                            triples = triple;\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long triples = 0;\n        for(int i = 1; i\
    \ < n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      triples++;\n                    }\n                }\n\
    \            }\n        }\n        return triples;\n", "        long a[] = new\
    \ long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ result = 0;\n        for(int i = 1; i < n; i++) {\n            for(int j = i;\
    \ j < n; j++) {\n                for(int k = j; k < n; k++) {\n              \
    \      if(a[i] + a[j] + a[k] == 3) {\n                        result += 1;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ result;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n \
    \       Arrays.sort(a);\n        long triples = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      triples++;\n                    }\n                }\n\
    \            }\n        }\n        return triples;\n", "        long a[] = new\
    \ long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ triples = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j\
    \ = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (a[i] == a[j] && a[j] == a[k]) {\n                   \
    \     triples += 1;\n                    }\n                }\n            }\n\
    \        }\n        return triples;\n", "        long a[] = new long[n];\n   \
    \     Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum\
    \ += a[i];\n            if (sum % 3 == 0) {\n                triples += 1;\n \
    \           }\n        }\n        return triples;\n", "        long a[] = new\
    \ long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int j = i; j\
    \ < n; j++) {\n                for(int k = j; k < n; k++) {\n                \
    \    if(a[i] + a[j] + a[k] == 3) {\n                        ans += 1;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ ans;\n", "        int[] a = new int[n];\n        Arrays.fill(a, 1);\n      \
    \  Arrays.sort(a);\n        long ans = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k])\
    \ {\n                        ans += 1;\n                    }\n              \
    \  }\n            }\n        }\n        return ans;\n", "        long[] a = new\
    \ long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ triples = 0;\n        for(int i = 1; i < n; i++) {\n            for(int j =\
    \ i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n           \
    \         if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long sum = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            sum += a[i];\n            for(int j = i; j < n; j++) {\n\
    \                sum += a[j];\n                for(int k = j; k < n; k++) {\n\
    \                    sum += a[k];\n                    if(sum % 3 == 0) {\n  \
    \                      return sum;\n                    }\n                }\n\
    \            }\n        }\n        return 0;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] < a[j] && a[j] < a[k]) {\n         \
    \               triples += 3;\n                    }\n                }\n    \
    \        }\n        }\n        return triples;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triple = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triple++;\n                 \
    \   }\n                }\n            }\n        }\n        return triple;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long triples = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] == a[j] && a[j]\
    \ == a[k]) {\n                        triples++;\n                    }\n    \
    \            }\n            }\n        }\n        return triples;\n", "      \
    \  long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n       \
    \                 triples += 1;\n                    }\n                }\n  \
    \          }\n        }\n        return triples;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triple = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triple++;\n                 \
    \   }\n                }\n            }\n        }\n        return triple;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] < a[j] && a[j] < a[k]) {\n         \
    \               long sum = a[i] + a[j] + a[k];\n                        if (sum\
    \ % 3 == 0) {\n                            triples++;\n                      \
    \  }\n                    }\n                }\n            }\n        }\n   \
    \     return triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long triples = 0;\n        for(int i =\
    \ 1; i < n; i++) {\n            for(int j = i; j < n; j++) {\n               \
    \ for(int k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3)\
    \ {\n                        triples += 1;\n                    }\n          \
    \      }\n            }\n        }\n        return triples;\n", "        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long[] a = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long ans = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    long sum = a[i] + a[j] + a[k];\n\
    \                    if (sum % 3 == 0) {\n                        ans++;\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ ans;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n    \
    \    Arrays.sort(a);\n        long sum = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            for(int j = i; j < n; j++) {\n                for(int k = j;\
    \ k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n         \
    \               sum += 1;\n                    }\n                }\n        \
    \    }\n        }\n        return sum;\n", "        int[] a = new int[n];\n  \
    \      Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n  \
    \      for (int i = 0; i < a.length; i++) {\n            sum += a[i] * a[i] +\
    \ a[i] * a[i] + 1;\n        }\n        return sum % 3 == 0 ? 1 : 0;\n", "    \
    \    long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        ans\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return ans;\n", "        long a[] = new long[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long triples = 0;\n        for(int i =\
    \ 1; i < n; i++) {\n            for(int j = i; j < n; j++) {\n               \
    \ for(int k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3)\
    \ {\n                        triples++;\n                    }\n             \
    \   }\n            }\n        }\n        return triples;\n", "        long a[]\
    \ = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n      \
    \  long triples = 0;\n        for (int i = 0; i < n; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (a[i] == a[j] && a[j] == a[k]) {\n                   \
    \     triples += 1;\n                    }\n                }\n            }\n\
    \        }\n        return triples;\n", "        int[] a = new int[n];\n     \
    \   Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long count = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] == a[j] && a[j] == a[k]) {\n                        count++;\n       \
    \             }\n                }\n            }\n        }\n        return count;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  for (int j = i; j < n; j++) {\n                for (int k = j; k < n; k++)\
    \ {\n                    if (a[i] < a[j] && a[j] < a[k]) {\n                 \
    \       long sum = a[i] + a[j] + a[k];\n                        if (sum % 3 ==\
    \ 0) {\n                            triples++;\n                        }\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        int[] a = new int[n];\n        Arrays.fill(a, 1);\n  \
    \      Arrays.sort(a);\n        long ans = 0;\n        for(int i = 0; i < n; i++)\
    \ {\n            for(int j = i + 1; j < n; j++) {\n                for(int k =\
    \ j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      ans += 1;\n                    }\n                }\n \
    \           }\n        }\n        return ans;\n", "        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        int count = 0;\n\
    \        for (int i = 0; i < a.length; i++) {\n            for (int j = i + 1;\
    \ j < a.length; j++) {\n                for (int k = j + 1; k < a.length; k++)\
    \ {\n                    if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n  \
    \                      count++;\n                    }\n                }\n  \
    \          }\n        }\n        return count;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans++;\n                    }\n\
    \                }\n            }\n        }\n        return ans;\n", "      \
    \  long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triple = 0;\n        long sum = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    triple++;\n                        sum += a[i];\n       \
    \             }\n                }\n            }\n        }\n        return sum;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n", "        long[] a = new long[n];\n        Arrays.fill(a, 1);\n \
    \       Arrays.sort(a);\n        long ans = 0;\n        for(int i = 0; i < n;\
    \ i++) {\n            for(int j = i+1; j < n; j++) {\n                for(int\
    \ k = j+1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        ans++;\n                    }\n                }\n  \
    \          }\n        }\n        return ans;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n",
  "        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] < a[j] && a[j] < a[k]) {\n                 \
    \       ans += 1;\n                    }\n                }\n            }\n \
    \       }\n        return ans;\n", "        long a[] = new long[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long sum = 0;\n        for(int i = 0;\
    \ i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n              \
    \  for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k]\
    \ == 3) {\n                        sum += 1;\n                    }\n        \
    \        }\n            }\n        }\n        return sum;\n", "        int[] a\
    \ = new int[n];\n        Arrays.fill(a, 0);\n        Arrays.stream(a).forEach(i\
    \ -> {\n            int j = i + 1;\n            int k = j + 1;\n            while\
    \ (j < k) {\n                a[i] = a[j] + a[k];\n                j++;\n     \
    \           k++;\n            }\n        });\n        return Arrays.stream(a).filter(i\
    \ -> i % 3 == 0).count();\n", "        long a[] = new long[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long triples = 0;\n        for(int i =\
    \ 1; i < n; i++) {\n            for(int j = i; j < n; j++) {\n               \
    \ for(int k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3)\
    \ {\n                        triples++;\n                    }\n             \
    \   }\n            }\n        }\n        return triples;\n", "        long a[]\
    \ = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n      \
    \  long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j\
    \ = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n \
    \                   if(a[i] + a[j] + a[k] == 3) {\n                        sum\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return sum;\n", "        long a[] = new long[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long max = 0;\n        long sum = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            sum += a[i];\n            if((sum\
    \ % 3) == 0) {\n                max = Math.max(max, sum);\n            }\n   \
    \     }\n        return max;\n", "        int[] a = new int[n];\n        Arrays.fill(a,\
    \ 0);\n        Arrays.stream(a).forEach(i -> {\n            int j = i;\n     \
    \       while (j > 0) {\n                int k = j;\n                while (k\
    \ > 0) {\n                    int l = k;\n                    while (l > 0) {\n\
    \                        int m = l;\n                        while (m > 0) {\n\
    \                            int n = m;\n                            while (n\
    \ > 0) {\n                                int o = n;\n                       \
    \         while (o > 0) {\n                                    int p = o;\n  \
    \                                  while (p > 0) {\n                         \
    \               int q = p;\n                                        while (q >\
    \ 0) {\n                                            int r = q;\n             \
    \                               while (r > 0) {\n                            \
    \                    int s = r;\n                                            \
    \    while (s > 0) {\n                                                    int\
    \ t = s;\n                                                    while (t > 0) {\n\
    \                                                        int u = t;\n        \
    \                                                while (u > 0) {\n           \
    \                                                 int v = u;\n               \
    \                                             while (v > 0) {\n              \
    \                                                  int w = v;\n              \
    \                                                  while (w > 0) {\n         \
    \                                                           int x = w;\n     \
    \                                                               while (x > 0)\
    \ {\n                                                                        int\
    \ y = x;\n                                                                   \
    \     while (y > 0) {\n                                                      \
    \                      int z = y;\n                                          \
    \                                  while (z > 0) {\n                         \
    \                                                       int a = z;\n         \
    \                                                                       while\
    \ (a > 0) {\n                                                                \
    \                    int b = a;\n                                            \
    \                                        while (b > 0) {\n                   \
    \                                                                     int c =\
    \ b;\n                                                                       \
    \                 while (c > 0) {\n                                          \
    \                                                  int d = c;\n              \
    \                                                                            \
    \  while (d > 0) {\n                                                         \
    \                                       int e = d;\n                         \
    \                                                                       while\
    \ (e > 0) {\n                                                                \
    \                                    int f = e;\n                            \
    \                                                                        while\
    \ (f > 0) {\n                                                                \
    \                                        int g = f;\n                        \
    \                                                                            \
    \    while (g > 0) {\n                                                       \
    \                                                     int h = g;\n           \
    \                                                                            \
    \                     while (h > 0) {\n                                      \
    \                                                                          int\
    \ i = h;\n                                                                   \
    \                                             while (i> 0) {\n               \
    \                                                                            \
    \                         int j = i;\n                                       \
    \                                                                            \
    \ while (j > 0) {\n                                                          \
    \                                                              int k = j;\n  \
    \                                                                            \
    \                                          while (k > 0) {\n                 \
    \                                                                            \
    \                               int l = k;\n                                 \
    \                                                                            \
    \               while (l > 0) {\n                                            \
    \                                                                            \
    \        int m = l;\n                                                        \
    \                                                                        while\
    \ (m > 0) {\n                                                                \
    \                                                                    int n = m;\n\
    \                                                                            \
    \                                                        while (n > 0) {\n   \
    \                                                                            \
    \                                                         int o = n;\n       \
    \                                                                            \
    \                                                     while (o > 0) {\n      \
    \                                                                            \
    \                                                          int p = o;\n      \
    \                                                                            \
    \                                                          while (p > 0) {\n \
    \                                                                            \
    \                                                                   int q = p;\n\
    \                                                                            \
    \                                                                    while (q\
    \ > 0) {\n                                                                   \
    \                                                                            \
    \     int r = q;\n                                                           \
    \                                                                            \
    \             while (r > 0) {\n                                              \
    \                                                                            \
    \                              int s = r;\n                                  \
    \                                                                            \
    \                                          while (s > 0) {\n                 \
    \                                                                            \
    \                                                               int t = s;\n \
    \                                                                            \
    \                                                                            \
    \   while (t > 0) {\n                                                        \
    \                                                                            \
    \                            int u = t;\n                                    \
    \                                                                            \
    \                                                while (u > 0) {\n           \
    \                                                                            \
    \                                                                            \
    \ int v = u;\n                                                               \
    \                                                                            \
    \                         while (v > 0) {\n                                  \
    \                                                                            \
    \                                                          int w = v;", "    \
    \    int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n", "        int[] a = new int[n];\n        Arrays.fill(a, 0);\n      \
    \  Arrays.parallelSetAll(a, i -> i * i - i + 1);\n        return IntStream.range(0,\
    \ n).filter(i -> a[i] % 3 == 0).count();\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n                      \
    \  triples += 1;\n                    }\n                }\n            }\n  \
    \      }\n        return triples;\n", "        long a[] = new long[n];\n     \
    \   Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n     \
    \   for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++) {\n\
    \                for(int k = j+1; k < n; k++) {\n                    if(a[i] +\
    \ a[j] + a[k] == 3) {\n                        sum += 1;\n                   \
    \ }\n                }\n            }\n        }\n        return sum;\n", "  \
    \      long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n \
    \       Arrays.sort(a);\n        long triples = 0;\n        long sum = 0;\n  \
    \      for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++) {\n\
    \                for(int k = j; k < n; k++) {\n                    sum += a[k];\n\
    \                    if(sum % 3 == 0) {\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long triples = 0;\n        for(int i = 1; i\
    \ < n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      triples++;\n                    }\n                }\n\
    \            }\n        }\n        return triples;\n", "        long a[] = new\
    \ long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ triples = 0;\n        for(int i = 1; i < n; i++) {\n            for(int j =\
    \ i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n           \
    \         if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        int[] a = new int[n];\n        Arrays.fill(a, 0);\n  \
    \      Arrays.stream(a).forEach(i -> {\n            int j = i + 1;\n         \
    \   int k = i + 2;\n            while (j < k) {\n                a[i] = a[j] +\
    \ a[k];\n                j++;\n                k++;\n            }\n        });\n\
    \        return Arrays.stream(a).filter(i -> i % 3 == 0).count();\n", "      \
    \  long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long max = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            for(int j = i; j < n; j++) {\n                for(int k = j;\
    \ k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n         \
    \               sum += 1;\n                        if(sum > max) {\n         \
    \                   max = sum;\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        return max;\n", " \
    \       long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 0; i < n; i++) {\n           \
    \ for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n;\
    \ k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n                \
    \        triples++;\n                    }\n                }\n            }\n\
    \        }\n        return triples;\n", "        long a[] = new long[n];\n   \
    \     Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n",
  "        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        ans++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n    \
    \    Arrays.sort(a);\n        long triple = 0;\n        long triples = 0;\n  \
    \      long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        ", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n   \
    \     Arrays.sort(a);\n        long triples = 0;\n        long triple = 0;\n \
    \       long triple2 = 0;\n        long triple3 = 0;\n        long triple4 = 0;\n\
    \        long triple5 = 0;\n        long triple6 = 0;\n        long triple7 =\
    \ 0;\n        long triple8 = 0;\n        long triple9 = 0;\n        long triple10\
    \ = 0;\n        long triple11 = 0;\n        long triple12 = 0;\n        long triple13\
    \ = 0;\n        long triple14 = 0;\n        long triple15 = 0;\n        long triple16\
    \ = 0;\n        long triple17 = 0;\n        long triple18 = 0;\n        long triple19\
    \ = 0;\n        long triple20 = 0;\n        long triple21 = 0;\n        long triple22\
    \ = 0;\n        long triple23 = 0;\n        long triple24 = 0;\n        long triple25\
    \ = 0;\n        long triple26 = 0;\n        long triple27 = 0;\n        long triple28\
    \ = 0;\n        long triple29 = 0;\n        long triple30 = 0;\n        long triple31\
    \ = 0;\n        long triple32 = 0;\n        long triple33 = 0;\n        long triple34\
    \ = 0;\n        long triple35 = 0;\n        long triple36 = 0;\n        long triple37\
    \ = 0;\n        long triple38 = 0;\n        long triple39 = 0;\n        long triple40\
    \ = 0;\n        long triple41 = 0;\n        long triple42 = 0;\n        long triple43\
    \ = 0;\n        long triple44 = 0;\n        long triple45 = 0;\n        long triple46\
    \ = 0;\n        long triple47 = 0;\n        long triple48 = 0;\n        long triple49\
    \ = 0;\n        long triple50 = 0;\n        long triple51 = 0;\n        long triple52\
    \ = 0;\n        long triple53 = 0;\n        long triple54 = 0;\n        long triple55\
    \ = 0;\n        long triple56 = 0;\n        long triple57 = 0;\n        long triple58\
    \ = 0;\n        long triple59 = 0;\n        long triple60 = 0;\n        long triple61\
    \ = 0;\n        long triple62 = 0;\n        long triple63 = 0;\n        long triple64\
    \ = 0;\n        long triple65 = 0;\n        long triple66 = 0;\n        long triple67\
    \ = 0;\n        long triple68 = 0;\n        long triple69 = 0;\n        long triple70\
    \ = 0;\n        long triple71 = 0;\n        long triple72 = 0;\n        long triple73\
    \ = 0;\n        long triple74 = 0;\n        long triple75 = 0;\n        long triple76\
    \ = 0;\n        long triple77 = 0;\n        long triple78 = 0;\n        long triple79\
    \ = 0;\n        long triple80 = 0;\n        long triple81 = 0;\n        long triple82\
    \ = 0;", "        long[] a = new long[n];\n        Arrays.fill(a, 1);\n      \
    \  Arrays.sort(a);\n        int count = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            for(int j = i; j < n; j++) {\n                for(int k = j;\
    \ k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n         \
    \               count++;\n                    }\n                }\n         \
    \   }\n        }\n        return count;\n", "        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += a[i];\n\
    \                        sum += a[j];\n                        sum += a[k];\n\
    \                        triples += 1;\n                    }\n              \
    \  }\n            }\n        }\n        return triples;\n", "        long a[]\
    \ = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n      \
    \  long triples = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long sum = 0;\n        for(int i = 0; i < n;\
    \ i++) {\n            for(int j = i+1; j < n; j++) {\n                for(int\
    \ k = j+1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        sum += 1;\n                    }\n                }\n\
    \            }\n        }\n        return sum;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++)\
    \ {\n                    if(a[i] + a[j] + a[k] == 3) {\n                     \
    \   triples++;\n                    }\n                }\n            }\n    \
    \    }\n        return triples;\n", "        int[] a = new int[n];\n        Arrays.fill(a,\
    \ 0);\n        Arrays.parallelSetAll(a, i -> i * i - i + 1);\n        long max\
    \ = 0;\n        for (int i = 0; i < a.length; i++) {\n            for (int j =\
    \ i + 1; j < a.length; j++) {\n                for (int k = j + 1; k < a.length;\
    \ k++) {\n                    if (a[i] < a[j] && a[j] < a[k]) {\n            \
    \            long triples = a[i] + a[j] + a[k];\n                        if (triples\
    \ > max) {\n                            max = triples;\n                     \
    \   }\n                    }\n                }\n            }\n        }\n  \
    \      return max;\n", "        long a[] = new long[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long triples = 0;\n        for(int i =\
    \ 1; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n           \
    \     for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k]\
    \ == 3) {\n                        triples++;\n                    }\n       \
    \         }\n            }\n        }\n        return triples;\n", "        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n    \
    \    Arrays.sort(a);\n        long triples = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k])\
    \ {\n                        triples += 1;\n                    }\n          \
    \      }\n            }\n        }\n        return triples;\n", "        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triple = 0;\n        long triples = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      triple++;\n                        if(triple > triples)\
    \ {\n                            triples = triple;\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        int[] a = new int[n];\n        Arrays.fill(a, 1);\n  \
    \      Arrays.sort(a);\n        int count = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k])\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;\n", "        long a[] = new\
    \ long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ triples = 0;\n        for(int i = 1; i < n; i++) {\n            for(int j =\
    \ i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n   \
    \                 if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        int[] a = new int[n];\n        Arrays.fill(a, 1);\n  \
    \      Arrays.sort(a);\n        long ans = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            for(int j = i; j < n; j++) {\n                for(int k = j;\
    \ k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n         \
    \               ans++;\n                    }\n                }\n           \
    \ }\n        }\n        return ans;\n", "        long a[] = new long[n];\n   \
    \     Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n   \
    \     for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++) {\n\
    \                for(int k = j; k < n; k++) {\n                    if(a[i] + a[j]\
    \ + a[k] == 3) {\n                        sum += 1;\n                    }\n \
    \               }\n            }\n        }\n        return sum;\n", "       \
    \ long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == (3 * i) + (3 * j) + (3 * k)) {\n\
    \                        ans++;\n                    }\n                }\n  \
    \          }\n        }\n        return ans;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        result++;\n                 \
    \   }\n                }\n            }\n        }\n        return result;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n               \
    \         ans += 1;\n                    }\n                }\n            }\n\
    \        }\n        return ans;\n", "        long a[] = new long[n];\n       \
    \ Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triple = 0;\n    \
    \    long triples = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triple++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triple;\n", "        int[] a = new int[n];\n        Arrays.fill(a, 1);\n   \
    \     Arrays.sort(a);\n        long ans = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] < a[j] && a[j] < a[k])\
    \ {\n                        ans += 1;\n                    }\n              \
    \  }\n            }\n        }\n        return ans;\n", "        int[] a = new\
    \ int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans\
    \ = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j <\
    \ n; j++) {\n                for(int k = j+1; k < n; k++) {\n                \
    \    if(a[i] + a[j] + a[k] == 3) {\n                        ans++;\n         \
    \           }\n                }\n            }\n        }\n        return ans;\n",
  "        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triple = 0;\n        for (int i = 0; i < n; i++) {\n           \
    \ for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n;\
    \ k++) {\n                    if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n\
    \                        triple++;\n                    }\n                }\n\
    \            }\n        }\n        return triple;\n", "        long a[] = new\
    \ long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ triples = 0;\n        for(int i = 1; i < n; i++) {\n            for(int j =\
    \ i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n   \
    \                 if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        int[] a = new int[n];\n        Arrays.fill(a, 1);\n  \
    \      Arrays.sort(a);\n        int count = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k])\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;\n", "        long a[] = new\
    \ long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ max = 0;\n        long sum = 0;\n        for(int i = 1; i < n; i++) {\n    \
    \        sum += a[i];\n            if(sum % 3 == 0) {\n                max = Math.max(max,\
    \ sum);\n            }\n        }\n        return max;\n", "        long a[] =\
    \ new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long\
    \ sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int j = i; j\
    \ < n; j++) {\n                for(int k = j; k < n; k++) {\n                \
    \    if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ sum;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n    \
    \    Arrays.sort(a);\n        long triples = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    triples++;\n                    }\n                }\n  \
    \          }\n        }\n        return triples;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        ", "        long[]\
    \ a = new long[n];\n        Arrays.fill(a, 0);\n        Arrays.sort(a);\n    \
    \    long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n    \
    \    Arrays.sort(a);\n        long triples = 0;\n        long sum = 0;\n     \
    \   for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++) {\n \
    \               for(int k = j; k < n; k++) {\n                    if(a[i] + a[j]\
    \ + a[k] == 3) {\n                        sum += a[i];\n                     \
    \   sum += a[j];\n                        sum += a[k];\n                     \
    \   triples += 1;\n                    }\n                }\n            }\n \
    \       }\n        return triples;\n", "        long a[] = new long[n];\n    \
    \    Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples += 1;\n             \
    \       }\n                }\n            }\n        }\n        return triples;\n",
  "        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n    \
    \    Arrays.sort(a);\n        long max = 0;\n        long sum = 0;\n        for(int\
    \ i = 1; i < n; i++) {\n            sum += a[i];\n            if(sum % 3 == 0)\
    \ {\n                max = Math.max(max, sum);\n            }\n        }\n   \
    \     return max;\n", "        int[] a = new int[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        int count = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    if (a[i] == a[j] && a[j]\
    \ == a[k]) {\n                        count++;\n                    }\n      \
    \          }\n            }\n        }\n        return count;\n", "        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long sum = 0;\n        long max = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            for(int j = i; j < n; j++) {\n                for(int k = j;\
    \ k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n         \
    \               sum += 1;\n                        if(sum > max) {\n         \
    \                   max = sum;\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        return max;\n", " \
    \       long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long triples = 0;\n        long triple = 0;\n\
    \        long triple2 = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n       \
    \                 triple++;\n                    }\n                    if (a[i]\
    \ == a[j] + a[k]) {\n                        triple2++;\n                    }\n\
    \                }\n            }\n        }\n        triples = triple + triple2;\n\
    \        return triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long triples = 0;\n        for(int i =\
    \ 1; i < n; i++) {\n            for(int j = i+1; j < n; j++) {\n             \
    \   for(int k = j+1; k < n; k++) {\n                    if(a[i] + a[j] + a[k]\
    \ == 3) {\n                        triples++;\n                    }\n       \
    \         }\n            }\n        }\n        return triples;\n", "        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long triples = 0;\n        long sum = 0;\n \
    \       for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples += 1;\n             \
    \           sum += a[i];\n                    }\n                }\n         \
    \   }\n        }\n        return sum;\n", "        long[] a = new long[n];\n \
    \       Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[j] < a[k]) {\n                        triples += 3;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long ans = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    ans++;\n                    }\n                }\n      \
    \      }\n        }\n        return ans;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples\
    \ += 1;\n                        sum += a[i];\n                        sum +=\
    \ a[j];\n                        sum += a[k];\n                    }\n       \
    \         }\n            }\n        }\n        return sum;\n", "        long a[]\
    \ = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n      \
    \  long triples = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long max = 0;\n        long sum = 0;\n     \
    \   for(int i = 1; i < n; i++) {\n            sum += a[i];\n            if(sum\
    \ % 3 == 0) {\n                max = Math.max(max, sum);\n            }\n    \
    \    }\n        return max;\n", "        long a[] = new long[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long sum = 0;\n        long triple = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triple++;\n                 \
    \   }\n                }\n            }\n        }\n        return triple;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        for(int i = 0; i <\
    \ n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        sum += a[i];\n                        sum += a[j];\n\
    \                        sum += a[k];\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n", "        long[] a = new long[n];\n        Arrays.fill(a, 1);\n\
    \        Arrays.sort(a);\n        long triples = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] < a[j] && a[i]\
    \ < a[k]) {\n                        triples += 3;\n                    }\n  \
    \              }\n            }\n        }\n        return triples;\n", "    \
    \    long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n", "        long[] a = new long[n];\n        Arrays.fill(a, 0);\n    \
    \    Arrays.sort(a);\n        long sum = 0;\n        long max = 0;\n        for(int\
    \ i = 1; i < n; i++) {\n            for(int j = i; j < n; j++) {\n           \
    \     for(int k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k]\
    \ == 0) {\n                        continue;\n                    }\n        \
    \            if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                        max = Math.max(max, sum);\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n", "        long[]\
    \ a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n    \
    \    long ans = 0;\n        long sum = 0;\n        for(int i = 0; i < n; i++)\
    \ {\n            sum += a[i];\n            if(sum % 3 == 0) {\n              \
    \  ans += 1;\n            }\n        }\n        return ans;\n", "        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return triples;\n", "        long a[] = new long[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        long sum = 0;\n        long triple = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triple++;\n                 \
    \   }\n                }\n            }\n        }\n        return triple;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n       \
    \                 triples += 1;\n                    }\n                }\n  \
    \          }\n        }\n        return triples;\n", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        result++;\n                 \
    \   }\n                }\n            }\n        }\n        return result;\n",
  "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k])\
    \ {\n                        triples += 1;\n                    }\n          \
    \      }\n            }\n        }\n        return triples;\n", "        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long result = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n", "        long a[] = new long[n];\n        Arrays.fill(a, 1);\n \
    \       Arrays.sort(a);\n        long ans = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    ans += 1;\n                    }\n                }\n   \
    \         }\n        }\n        return ans;\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
