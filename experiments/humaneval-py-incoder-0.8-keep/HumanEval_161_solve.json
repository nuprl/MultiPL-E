{
  "name": "HumanEval_161_solve",
  "language": "py",
  "prompt": "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n",
  "completions": [
    "    if len(s) <= 0: return s\n    \n    for i in range(len(s)):\n        c = s[i]\n        if c.isalpha():\n            if c.isupper():\n                s[i] = c.lower()\n            else:\n                s[i] = c.upper()\n    return ''.join(s)\n</cell>\n<cell>\nsolve(\"ab\")\n</cell>\n<cell>",
    "    res=\"\"\n    for i,char in enumerate(s):\n        if char.isalpha():\n            res+=char.upper()\n        else:\n            res+=char\n    res=res[::-1]\n    return res\n</code>\n<|/ a |>\n<| a tags=python-3.x,python |>\n<code>",
    "    \n    answer = ''\n    \n    for c in s:\n        if c.isalpha():\n            answer += c.upper()\n            answer += c.lower()\n        else:\n            answer += c\n            \n    return answer\n</cell>\n<text>\nGreat! Now the challenge is to use this solution to solve the word puzzle\n\nWrite a function that takes a word and checks if it follows the requirements specified above. \nIf the function does not return None, print a message and return None.\nIf the function returns None, print a message and return a list containing the characters in the word.\nThe function should raise an exception if the word is not alphanumeric.\nIf the word follows the requirements, return a list of characters in the word\nExamples\nsolve(\"ab\") ==> ['a','b']\nsolve(\"Ab\") ==> ['A','b']\nsolve(\"a#b#c#d\") ==> ['a','b','c','d']\nsolve(\"AbCdEf\") ==> ['ab','cd','ef']\nsolve(\"ab!c!\") ==> ['ab','c!']\nsolve(\"ab!C!\") ==> ['a', 'C!']\n\"\"\"\n",
    "    \n    string = s.replace(\" \", \"\")\n    \n    for i in range(len(string)):\n        if string[i] == string[i].lower():\n            string = string[i].upper() + string[:i] + string[i+1:]\n        if string[i] == string[i].upper():\n            string = string[i].lower() + string[:i] + string[i+1:]\n    return string\n",
    "    lst = s.split(\"#\")\n    lst = lst[0] + lst[1]\n    lst = lst.replace(\"@\",\"#@\")\n    lst = lst.replace(\"@\",\"#@\")\n    lst = lst.replace(\"#@\",\"@\")\n    lst = lst.replace(\"#@\",\"@\")\n    lst = lst.replace(\"@\",\"#@\")\n    lst = lst.replace(\"#@\",\"#@\")\n    return lst\n\n",
    "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    str_len = len(s)\n    str_p = len(s)\n\n    s_char = list(s)\n    s_char_rev = list(s)\n    s_char_back = list(s)\n    str_char_back = list(s)\n    s_char_back_rev = list(s)\n    str_char_back_rev = list(s)\n    str_char_back_rev_rev = []\n\n    for i in range(str_p - 1):\n        if s[i] in 'abcABC':\n            str_char[i] = str_char[i].upper()\n            s_char[i] = s_char[i].upper()\n        if s[i] in 'abcABC':\n            str_char[i] = str_char[i].lower()\n            s_char[i] = s_char[i].lower()\n\n    # str_char_back = str_char_back[::-1]\n    # str_char_back_rev = str_char_back_rev[::-1]\n    # s_char_back = s_char_back[::-1]\n    # s_char_back_rev = s_char_back_rev[::-1]\n\n    for i in range(str_len - 1, -1, -1):\n        if s[i] in 'abcABC':\n            str_char_back[i] = str_char_back[i].upper()\n            s_char_back[i] = s_char_back[i].upper()\n        if s[i] in 'abcABC':\n            str_char_back[i] = str_char_back[i].lower()\n            s_char_back[i] = s_char_back[i].lower()\n\n    str_char_back_rev_rev = str_char_back_rev[::-1]\n    s_char_back_rev_rev = s_char_back_rev[::-1]\n\n    for i in range(str_len - 1, -1, -1):\n        if s[i] in 'abcABC':\n            str_char_back_rev_rev[i] = str_char_back_rev_rev[i].upper()\n            s_char_back_rev_rev[i] = s_char_back_rev_rev[i].upper()\n        if s[i] in 'abcABC':\n            str_char_back_rev_rev[i] = str_char_back_rev_rev[i].lower()\n            s_char_back_rev_rev[i] = s_char_back_rev_rev[i].lower()\n\n    return ''.join(str_char_back_rev_rev + str_char + s_char_back_rev_rev + s_char[::-1])\n\n",
    "    \n    return \"\".join(map(solve1,list(s)))\n\n",
    "    \n    if len(s) < 2:\n        return s\n    \n    arr = s.split() # split s into arr\n    \n    for i, c in enumerate(arr): # loop to modify arr\n        if c.isalpha(): # check if current char is letter\n            arr[i] = c.lower() # change it to lower case\n        else: # else keep it as it is\n            arr[i] = c\n    \n    return ''.join(arr) # join arr to become str\n\nprint(solve('1234'))\nprint(solve('ab'))\nprint(solve('#a@C'))\nprint(solve('ab#'))\nprint(solve('ab@'))\nprint(solve('ab#c'))\nprint(solve('ab#c'))\nprint(solve('ab'))\nprint(solve(''))\n</cell>\n<text>\nChallenge 04\nCreate a function solve that takes in 2 string arguments (the original string s and an int/boolean argument to determine the direction of the string reversal (default is True). Return the original string when direction is False, else return the string reversed.\n\n\n</text>\n<cell>",
    "    return \"\".join(re.findall(\"[a-zA-Z]+\", s))\n\n",
    "    ans = []\n    for c in s:\n        if c.isalpha():\n            ans.append(c.upper() if c.islower() else c.lower())\n        else:\n            ans.append(c)\n    ans.reverse()\n    return ''.join(ans)\n",
    "    ls = list(s)\n    rev_ls = []\n    \n    for i in range(len(ls)):\n        if ls[i].isalpha() == True:\n            if ls[i].lower() == ls[i].upper():\n                rev_ls.append(ls[i].upper())\n            else:\n                rev_ls.append(ls[i].lower())\n        else:\n            rev_ls.append(ls[i])\n\n    rev_ls.reverse()\n    rev_str = \"\".join(rev_ls)\n    return rev_str\n</cell>\n<text>\nProblem 13: LeetCode\nLeetCode\u7684\u641c\u7d22\u7ebf\u7d22\u9898\uff1a\u8f93\u5165\u67d0\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u53ef\u80fd\u7684\u524d\u7f00\u3002\n\u6211\u4eec\u53ef\u4ee5\u60f3\u8c61\uff0c\u5982\u4f55\u627e\u51fa\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u53ef\u80fd\u7684\u524d\u7f00\u3002\u6bd4\u5982\u6211\u4eec\u60f3\u627e\u51fa\u67d0\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u53ef\u80fd\u7684\u524d\u7f00\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u524d\u9762\u7684\u5b57\u7b26\u5b57\u7b26\u4e32\u4e2d\u5f80\u540e\u627e\u51fa\u7684\u3002\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u6765\u627e\u51fa\u5b57\u7b26\u4e32\u7684\u6240\u6709\u53ef\u80fd\u7684\u524d\u7f00\u3002\n\n\u8fd9\u6837\u7684\u4efb\u52a1\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u9012\u5f52\u65b9\u6cd5\uff0c\u4ece\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u76ee\u6807\u5b57\u7b26\uff0c\u5219\u5c06\u524d\u9762\u7684\u6240\u6709\u53ef\u80fd\u7684\u524d\u7f00\u7ec4\u6210\u4e00\u4e2a\u6570\u7ec4\uff0c\u7136\u540e\u9012\u5f52\u5c06\u8fd9\u4e2a\u6570\u7ec4\u7ec4\u6210\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u5c06\u5f53\u524d\u5b57\u7b26\u53bb\u6389\uff0c\u7136\u540e\u9012\u5f52\u3002\n\n\u8fd9\u79cd\u9012\u5f52\u65b9\u6cd5\u6709\u51e0\u4e2a\u95ee\u9898\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u8be5\u65b9\u6cd5\u5c31\u65e0\u6cd5\u751f\u6210\u6240\u6709\u7684\u53ef\u80fd\u7684\u524d\u7f00\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u6765\u89e3\u51b3\uff0c\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u5305\u542b\u6240\u6709\u5b57\u7b26\u4e32\u7684\u5217\u8868\uff0c\u7136\u540e\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u6765\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\u3002\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e\u76ee\u6807\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u90a3\u4e48\u8be5\u65b9\u6cd5\u5c31\u65e0\u6cd5\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u524d\u7f00\uff0c\u56e0\u4e3a\u9700\u8981\u4ece\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u8fdb\u884c\u904d\u5386\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u5c06\u6240\u6709\u53ef\u80fd\u7684\u524d\u7f00\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u91cc\u9762\uff0c\u518d\u6b21\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u6765",
    "    \n    ans = ''\n    \n    for i in s:\n        if i.isalpha():\n            ans += i.upper()\n        else:\n            ans += i\n            \n    return ans\n\n</cell>\n<cell>\nsolve(s = \"#a@C\")\n</cell>\n<text>\nImplement a Python function called ispalindrome that takes a string s and returns True if s is a palindrome, and False otherwise. You should ignore spaces in the string.\n\n\n</text>\n<cell>",
    "    \n    l = list(s)\n    return \"\".join(list(map(lambda x: x if x.isalpha() else x.upper(), l)))\n\n",
    "    res = \"\"\n    for i in s:\n        if i.isalpha():\n            res += i.upper()\n        else:\n            res += i\n    return res[::-1] if len(res) > 0 else \"\"\n\n",
    "    s=s.lower()\n    if s[0]==\"#\":\n        return \"\".join(\"\".join(reversed(list(s[i:i+2])))for i in range(1,len(s)-2))\n    if s[0] in \"@\":\n        return \"\".join(\"\".join(reversed(list(s[i:i+2])))for i in range(1,len(s)-1))\n    return \"\".join(\"\".join(reversed(list(s)))for i in range(1,len(s)-1))\n</cell>\n<cell>",
    "    return \"\".join(map((lambda c: c.upper() if c.isalpha() else c.lower()), s)).lower()\n</cell>\n<cell>",
    "    s = s.lower()\n    if s.isalpha():\n        \n        s = s.upper()\n        \n    elif s.isalpha() != True:\n        \n        s = s.replace('#', '')\n        s = s.replace('@', '')\n        s = s.replace('!', '')\n        s = s.replace('$', '')\n        s = s.replace('#', '')\n        s = s.replace('%', '')\n        s = s.replace('&', '')\n        s = s.replace('*', '')\n        s = s.replace('_', '')\n        s = s.replace('^', '')\n        s = s.replace('\"', '')\n        s = s.replace(')', '')\n        s = s.replace('(', '')\n        s = s.replace(';', '')\n        s = s.replace(',', '')\n        s = s.replace(':', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('?', '')\n        s = s.replace('\\\\', '')\n        s = s.replace('|', '')\n        s = s.replace('{', '')\n        s = s.replace('}', '')\n        s = s.replace('[', '')\n        s = s.replace(']', '')\n        s = s.replace('{', '')\n        s = s.replace('}', '')\n        s = s.replace('.', '')\n        s = s.replace('!', '')\n        s = s.replace('\"', '')\n        s = s.replace(',', '')\n        s = s.replace(';', '')\n        s = s.replace(':', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('?', '')\n        s = s.replace('\\\\', '')\n        s = s.replace('|', '')\n        s = s.replace('{', '')\n        s = s.replace('}', '')\n        s = s.replace('[', '')\n        s = s.replace(']', '')\n        s = s.replace('{', '')\n        s = s.replace('}', '')\n        s = s.replace('.', '')\n        s = s.replace('!', '')\n        s = s.replace('\"', '')\n        s = s.replace(',', '')\n        s = s.replace(';', '')\n        s = s.replace(':', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('?', '')\n        s = s.replace('\\\\', '')\n        s = s.replace('|', '')\n        s = s.replace('{', '')\n        s = s.replace('}', '')\n        s = s.replace('[', '')\n        s = s.replace(']', '')\n        s = s.replace('{', '')\n        s = s.replace('}', '')\n        s = s.replace('.', '')\n        s = s.replace('!', '')\n        s = s.replace('\"', '')\n        s = s.replace(',', '')\n        s = s.replace(';', '')\n        s = s.replace(':', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('?', '')\n        s = s.replace('\\\\', '')\n        s = s.replace('|', '')\n        s = s.replace('{', '')\n        s = s.replace('}', '')\n        s = s.replace('[', '')\n        s = s.replace(']', '')\n        s = s.replace('{', '')\n        s = s.replace('}', '')\n        s = s.replace('.', '')\n        s = s.replace('!', '')\n        s = s.replace('\"', '')",
    "    return \"\".join([x.upper() if x.isalpha() else x.lower() for x in s])\n",
    "    return \"\".join(_solve(s))\n"
  ],
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ]
}