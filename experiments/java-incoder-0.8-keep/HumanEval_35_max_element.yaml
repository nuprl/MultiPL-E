completions:
- '        return l.stream().max(Comparator.naturalOrder()).get();'
- "        // Initialize max value to Integer.MIN_VALUE.\n        int max = Integer.MIN_VALUE;\n\
  \        for(int x : l)\n            max = Math.max(x, max);\n        return max;"
- "        int[] a = new int[l.size()];\n        for(int i = 0; i < l.size(); i++)\
  \ {\n            a[i] = l.get(i);\n        }\n        int max = Integer.MIN_VALUE;\n\
  \        for(int i = 0; i < l.size(); i++) {\n            int x = a[i];\n      \
  \      if(x>max) {\n                max = x;\n            }\n        }\n       \
  \ return max;"
- "        Collections.sort(l);\n        int max = l.get(l.size()-1);\n        for\
  \ (int i = l.size()-2; i >= 0; i--)\n            if (l.get(i) > max)\n         \
  \       max = l.get(i);\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if\
  \ (i < 0) return Integer.MIN_VALUE;\n            if (i > max) max = i;\n       \
  \ }\n        return max;"
- '        return Collections.max(l);'
- "        OptionalInt sum = l.stream().mapToInt(Integer::intValue).max();\n     \
  \   return sum.orElse(0);"
- "        int res = 0;\n        for (int i = 0; i != l.size(); i++) {\n         \
  \   res = Math.max(res, l.get(i));\n        }\n        return res;"
- '        return l.stream().max(Integer::compare).get();'
- "        // Write your code here.\n        // return l.stream()\n        //    \
  \     .max(Integer::compare)\n        //         .get();\n        return Collections.max(l);"
- "        final int maxIndex = 0;\n        int maxValue = l.get(maxIndex);\n\n  \
  \      for(int i=1; i<l.size(); i++) {\n            if(l.get(i) > maxValue) {\n\
  \                maxValue = l.get(i);\n                maxIndex = i;\n         \
  \   }\n        }\n\n        return maxIndex;"
- "        Integer max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n     \
  \       if (max < i) {\n                max = i;\n            }\n        }\n   \
  \     return max;"
- "        l.sort(Comparator.naturalOrder());\n        int max = l.get(0);\n     \
  \   for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n  \
  \              max = l.get(i);\n            }\n        }\n        return max;"
- "        Integer max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n\
  \            int tmpmax = Math.max(max, l.get(i));\n            if (tmpmax != max)\
  \ {\n                max = tmpmax;\n            }\n        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if\
  \ (i > max) {\n                max = i;\n            }\n        }\n        return\
  \ max;"
- "        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n         \
  \   max = Math.max(max, i);\n        }\n        return max;"
- "        Integer max = l.get(0);\n        for (int i = 0; i < l.size(); i++) {\n\
  \            if (l.get(i) > max) {\n                max = l.get(i);\n          \
  \  }\n        }\n        return max;"
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
  \        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n         \
  \   max = Math.max(i, max);\n        }\n        return max;"
- "        int[] a = new int[l.size()];\n        int m = Integer.MIN_VALUE;\n    \
  \    for (int i = 0; i < l.size(); i++) {\n            a[i] = l.get(i);\n      \
  \  }\n        int max = a[0];\n        for (int i = 0; i < a.length; i++) {\n  \
  \          if (a[i] > max)\n                max = a[i];\n        }\n        return\
  \ max;"
- '        return Collections.max(l);'
- '        return Collections.max(l);'
- "        Stream<Integer> stream = l.stream().sorted().reverse();\n        Optional<Integer>\
  \ first = stream.findFirst();\n        if (first.isPresent())\n            return\
  \ first.get();\n        return Integer.MIN_VALUE;"
- "        int max = 0;\n        int max = l.get(0);\n        for (Integer i : l)\
  \ {\n            if (i > max) {\n                max = i;\n            }\n     \
  \   }\n        return max;"
- "        int max=Integer.MIN_VALUE;\n        int n=l.size();\n        int j=n-1;\n\
  \        while (j>=0) {\n            if (l.get(j)>max) max=l.get(j);\n         \
  \   j--;\n        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (int i : l)\n            max\
  \ = Math.max(max, i);\n        return max;"
- "        l.sort(Comparator.naturalOrder());\n        int max = Integer.MIN_VALUE;\n\
  \        for (Integer i : l) {\n            if (i > max) {\n                max\
  \ = i;\n            }\n        }\n        return max;"
- "        Integer max_element = null;\n        for (int i = 0; i < l.size(); i++)\
  \ {\n            if (max_element == null || l.get(i) > max_element) {\n        \
  \        max_element = l.get(i);\n            }\n        }\n        return max_element;"
- "        int result = -1;\n        for (int i : l) {\n            if (i == -1 ||\
  \ result > i) {\n                result = i;\n            }\n        }\n       \
  \ return result;"
- "        int result = 0;\n        for(Integer i: l) {\n            if(i > result)\
  \ {\n                result = i;\n            }\n        }\n        return result;"
- "        \n        Integer max = Integer.MIN_VALUE;\n        for (int i = 0; i <\
  \ l.size(); i++) {\n            if (max<l.get(i)) {\n                max = l.get(i);\n\
  \            }\n        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        int maxIndex = -1;\n        for (int\
  \ i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n             \
  \   max = l.get(i);\n                maxIndex = i;\n            }\n        }\n \
  \       return max;"
- "        // Initialize result to Integer.MIN_VALUE.\n        int result = Integer.MIN_VALUE;\n\
  \n        // Iterate over the array and update result when necessary.\n        for\
  \ (Integer i : l) {\n            result = Math.max(i, result);\n        }\n\n  \
  \      return result;"
- "        int max = Integer.MIN_VALUE;\n        for (Integer i : l)\n           \
  \ if (i > max)\n                max = i;\n        return max;"
- "        int max = 0;\n        for (int i : l) {\n            if (i > max) max =\
  \ i;\n        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (Integer x: l) {\n          \
  \  if (x > max)\n                max = x;\n        }\n        return max;"
- "        // Write your code here.\n        int maxValue = l.get(0);\n        int\
  \ maxIndex = -1;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i)\
  \ > maxValue) {\n                maxValue = l.get(i);\n                maxIndex\
  \ = i;\n            }\n        }\n        return maxIndex;"
- "        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\n\
  \            if (l.get(i) > max)\n                max = l.get(i);\n        return\
  \ max;"
- "        if (l.size() == 0) return 0;\n        int max = l.get(0);\n        for\
  \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n        \
  \        max = l.get(i);\n            }\n        }\n        return max;"
- "        int maxValue = Integer.MIN_VALUE;\n        for (int i : l) {\n        \
  \    if (maxValue < i) {\n                maxValue = i;\n            }\n       \
  \ }\n        return maxValue;"
- "        // Write your code here.\n        int maxElem = Integer.MIN_VALUE;\n  \
  \      for(int i = 0; i< l.size(); i++)\n        {\n            if(l.get(i) > maxElem)\n\
  \            {\n                maxElem = l.get(i);\n            }\n        }\n\
  \        return maxElem;"
- "        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n         \
  \   max = Math.max(max, i);\n        }\n        return max;"
- "        Integer max = null;\n        for (Integer i : l) {\n            if (max\
  \ < i) {\n                max = i;\n            }\n        }\n        return max;"
- '        return l.stream().max(Integer::compareTo).get();'
- '        return Collections.max(l);'
- "        int n = l.size();\n        if (n == 0) {\n            return 0;\n     \
  \   }\n        l.sort(null);\n        int largest = l.get(n - 1);\n        for (int\
  \ i = 1; i < n; ++i) {\n            if (largest < l.get(i)) {\n                largest\
  \ = l.get(i);\n            }\n        }\n        return largest;"
- "        double largest = Double.NEGATIVE_INFINITY;\n        int index = 0;\n  \
  \      for(int i = 0; i < l.size(); i++) {\n            if (l.get(i) > largest)\
  \ {\n                largest = l.get(i);\n                index = i;\n         \
  \   }\n        }\n        return l.get(index);"
- '        return Collections.max(l);'
- '        return Collections.max(l);'
- "        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n         \
  \   if (max < i)\n                max = i;\n        }\n        return max;"
- "        Comparator<Integer> comp = (i,j)->Integer.compare(i,j);\n        Collections.sort(l,\
  \ comp);\n        return l.get(l.size()-1);"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = Integer.MIN_VALUE;\n        for (int i : l) {\n            if (i > max) {\n\
  \                max = i;\n                result.clear();\n            }\n    \
  \        else if (i == max) {\n                result.add(i);\n            }\n \
  \       }\n        if (result.isEmpty()) {\n            return Integer.MIN_VALUE;\n\
  \        } else {\n            return result.get(result.size() - 1);\n        }"
- "        Integer max = null;\n        for (int i : l) {\n            if (max !=\
  \ null && max.intValue() < i) {\n                max = i;\n            }\n     \
  \   }\n        return max != null ? max.intValue() : 0;"
- "        Collections.sort(l);\n        int max = l.get(l.size() - 1);\n        return\
  \ max;"
- "        Collections.sort(l);\n        return l.get(l.size() - 1);"
- "        Collections.sort(l);\n        return l.size() > 0 ? l.get(l.size() - 1)\
  \ : 0;"
- "        Collections.sort(l);\n        return l.get(l.size()-1);"
- '        return Collections.max(l);'
- "        final int N = l.size();\n        Integer max = l.get(0);\n        for (int\
  \ i = 1; i < N; i++) {\n            if (l.get(i) > max)\n                max = l.get(i);\n\
  \        }\n        return max;"
- "        ArrayList<Integer> copy = new ArrayList<Integer>(l);\n        Collections.sort(copy);\n\
  \        return copy.get(copy.size() - 1);"
- "        Collections.sort(l);\n        return l.size() > 0 ? l.get(l.size() - 1)\
  \ : 0;"
- "        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n         \
  \   if (max < i) {\n                max = i;\n            }\n        }\n       \
  \ return max;"
- "        int max = 0;\n        int maxElement = -1;\n        int len = l.size();\n\
  \        for (int i = 0; i < len; i++) {\n            if (l.get(i) > max) {\n  \
  \              max = l.get(i);\n                maxElement = i;\n            }\n\
  \        }\n        return maxElement;"
- "        int max = Integer.MIN_VALUE;\n        for (int i : l)\n            if (i\
  \ > max)\n                max = i;\n        return max;"
- "        l.sort(Comparator.naturalOrder());\n        return l.get(l.size()-1);"
- "        if (l == null || l.isEmpty()) {\n            return 0;\n        }\n   \
  \     Integer maxElem = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n\
  \            if (l.get(i) > maxElem) {\n                maxElem = l.get(i);\n  \
  \          }\n        }\n        return maxElem;"
- "        int max = Integer.MIN_VALUE;\n        int maxIndex = 0;\n        for (int\
  \ index = 0; index < l.size(); index++) {\n            int current = l.get(index);\n\
  \            if (current > max) {\n                max = current;\n            \
  \    maxIndex = index;\n            }\n        }\n        return max;"
- '        return Collections.max(l);'
- "        int max = Integer.MIN_VALUE;\n        for (int i : l)\n            max\
  \ = Math.max(max, i);\n        return max;"
- "        Collections.sort(l);\n        int max = l.get(0);\n        for (int i =\
  \ 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max\
  \ = l.get(i);\n            }\n        }\n        return max;"
- "        int n = l.size();\n        if (n <= 0) return 0;\n        if (n == 1) return\
  \ l.get(0);\n        ArrayList<Integer> f = new ArrayList<>();\n        f.add(l.get(0));\n\
  \        for (int i = 1; i < n; i++) {\n            if (l.get(i) >= f.get(0)) {\n\
  \                f.add(l.get(i));\n            }\n        }\n        return f.get(0);"
- '        return Collections.max(l);'
- '        return Math.max(l.stream().mapToInt(Integer::intValue).max().getAsInt());'
- "        // write your code here\n        \n        int max_val = Integer.MIN_VALUE;\n\
  \        for (int i : l){\n            if (i > max_val){\n                max_val\
  \ = i;\n            }\n        }\n        return max_val;\n        "
- "        int max = 0;\n        for (int i : l) {\n            if (i > max) max =\
  \ i;\n        }\n        return max;"
- "        Collections.sort(l);\n        return l.isEmpty() ? 0 : l.get(l.size() -\
  \ 1);"
- "        int max = Integer.MIN_VALUE;\n        for (Integer num : l) {\n       \
  \     max = Math.max(num, max);\n        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (Integer n : l) {\n         \
  \   if (n > max) {\n                max = n;\n            }\n        }\n       \
  \ return max;"
- "        \n        int result = Integer.MIN_VALUE;\n        for (Integer integer\
  \ : l) {\n            if (integer > result) result = integer;\n        }\n     \
  \   return result;"
- "        if (l.isEmpty()) return 0;\n        int max = l.get(0);\n        for (int\
  \ i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) max = l.get(i);\n\
  \        }\n        return max;"
- "        int max = 0;\n        for (Integer e : l) {\n            if (e > max) {\n\
  \                max = e;\n            }\n        }\n        return max;"
- "        if (l.isEmpty())\n            return Integer.MIN_VALUE;\n        Integer\
  \ a = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
  \ > a)\n                a = l.get(i);\n        }\n        return a;"
- "        if (l.isEmpty())\n            return Integer.MIN_VALUE;\n        int max\
  \ = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
  \ > max)\n                max = l.get(i);\n        }\n        return max;"
- "        Comparator<Integer> comparator = Comparator.comparingInt(Math::max);\n\
  \        Optional<Integer> max_element = l.stream().max(comparator);\n        return\
  \ max_element.get();"
- "        // write your code here\n        int maxIndex = 0;\n        int maxValue\
  \ = Integer.MIN_VALUE;\n        for (int index = 0; index < l.size(); index++) {\n\
  \            if (l.get(index) > maxValue) {\n                maxValue = l.get(index);\n\
  \                maxIndex = index;\n            }\n        }\n        return maxValue;"
- '        return Collections.max(l);'
- "        OptionalInt max = l.stream().max(Integer::compareTo);\n        if (max.isPresent())\
  \ {\n            return max.getAsInt();\n        }\n        return 0;"
- "        if (l == null || l.isEmpty()) {\n            return 0;\n        }\n   \
  \     return Collections.max(l);"
- "        if (l.isEmpty()) return Integer.MIN_VALUE;\n        int max_val = Integer.MIN_VALUE;\n\
  \        for (int i = 0; i <= l.size() - 1; i++) {\n            int value = l.get(i);\n\
  \            if (value > max_val) max_val = value;\n        }\n        return max_val;"
- "        Collections.sort(l);\n        return l.get(l.size()-1);"
- "        Collections.sort(l);\n        return l.get(l.size()-1);"
- "        Integer max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size();\
  \ i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n \
  \           }\n        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for(int i : l)\n            max =\
  \ Math.max(i, max);\n        return max;"
- '        return Collections.max(l);'
- "        Integer largest = Collections.max(l);\n        return largest;"
- "        if (l.isEmpty())\n            throw new RuntimeException(\"Cannot find\
  \ max element from an empty list\");\n        int max = Integer.MIN_VALUE;\n   \
  \     int maxIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n        \
  \    if (l.get(i) > max) {\n                max = l.get(i);\n                maxIndex\
  \ = i;\n            }\n        }\n        return max;"
- "        Integer max = Integer.MIN_VALUE;\n        for(Integer i: l) {\n       \
  \     if(i.intValue() > max.intValue())\n                max = i;\n        }\n \
  \       return max.intValue();"
- '        return Collections.max(l);'
- "        Collections.sort(l);\n        return l.get(l.size()-1);"
- '        return Collections.max(l);'
- "        l.sort(Collections.reverseOrder());\n        int max = l.get(0);\n    \
  \    for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n \
  \               max = l.get(i);\n            }\n        }\n        return max;"
- "        // return Math.max(Math.max(l.get(0), l.get(1)),\n        //   Math.max(l.get(2),\
  \ l.get(3)));\n        \n        int max = Integer.MIN_VALUE;\n        for (Integer\
  \ i : l) {\n            if (i > max) {\n                max = i;\n            }\n\
  \        }\n        return max;"
- "        int maxElem = Integer.MIN_VALUE;\n        for (Integer elem : l) {\n  \
  \          if (elem > maxElem)\n                maxElem = elem;\n        }\n   \
  \     return maxElem;"
- "        Integer max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n\
  \            if (l.get(i) > max) {\n                max = l.get(i);\n          \
  \  }\n        }\n        return max;"
- "        Comparator<Integer> comparator = Comparator.comparing( Integer::intValue\
  \ );\n        int maxElement = Integer.MIN_VALUE;\n        for (int element : l)\
  \ {\n            if (element > maxElement) {\n                maxElement = element;\n\
  \            }\n        }\n        return maxElement;"
- "        int max = Integer.MIN_VALUE;\n        for (Integer x : l) {\n         \
  \   if (x > max) {\n                max = x;\n            }\n        }\n       \
  \ return max;"
- "        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if\
  \ (i > max) {\n                max = i;\n            }\n        }\n        return\
  \ max;"
- "        Integer max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n\
  \            if (l.get(i) > max)\n                max = l.get(i);\n        }\n \
  \       return max;"
- "        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if\
  \ (max < i) {\n                max = i;\n            }\n        }\n        return\
  \ max;"
- "        l.sort(Collections.reverseOrder());\n        int max=l.get(0);\n      \
  \  for(int i=0; i<l.size(); i++)\n            if( l.get(i) > max)\n            \
  \    max = l.get(i);\n        return max;"
- "        Collections.sort(l);\n        return l.size() > 0 ? l.get(0) : Integer.MIN_VALUE;"
- "        if (l.isEmpty())\n            return -1;\n        int max = l.stream().max(Integer::compare).get();\n\
  \        int min = -99;\n        int x = l.stream().min(Integer::compare).get();\n\
  \        while (min < 0 && x > 0 && x != max) {\n            if (x > max) {\n  \
  \              max = x;\n            } else if (x < min) {\n                min\
  \ = x;\n            }\n            x = l.stream().min(Integer::compare).get();\n\
  \        }\n        return max + (min == -99 ? 0 : min);"
- "        Collections.sort(l);\n        return l.size() >= 1 ? l.stream().findFirst().get()\
  \ : Integer.MIN_VALUE;"
- "        if (l == null || l.size() == 0) {\n            return Integer.MIN_VALUE;\n\
  \        }\n        Integer max = l.get(0);\n        for (int i = 1; i < l.size();\
  \ i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n \
  \           }\n        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (int x : l)\n            if (x\
  \ > max)\n                max = x;\n        return max;"
- "        // your code here\n        Collections.sort(l);\n        return l.get(l.size()-1);"
- '        return Collections.max(l);'
- "        int res = Integer.MIN_VALUE;\n        for (int i : l) {\n            if\
  \ (i > res)\n                res = i;\n        }\n        return res;"
- "        // Declare and initialize variables.\n        int max = Integer.MIN_VALUE;\n\
  \        int current = 0;\n        for (Integer i : l) {\n            if (i < 0)\
  \ {\n                throw new RuntimeException(\"Negative values not allowed\"\
  );\n            }\n            if (i > max) {\n                max = i;\n      \
  \          current = i;\n            }\n        }\n        return current;"
- '        return Collections.max(l);'
- '        return Collections.max(l);'
- "        int max_val = Integer.MIN_VALUE;\n        for (int i : l){\n          \
  \  if(i > max_val) {\n                max_val = i;\n            }\n        }\n \
  \       return max_val;"
- "        Collections.sort(l);\n        return l.stream().findFirst().getAsInt();"
- '        return Collections.max(l);'
- "        if (l.isEmpty()) throw new NoSuchElementException(\"Empty list\");\n  \
  \      int maxIndex = 0;\n        for (int i = 1; i < l.size(); i++) {\n       \
  \     if (l.get(i) > l.get(maxIndex)) {\n                maxIndex = i;\n       \
  \     }\n        }\n        return maxIndex;"
- "        l.sort(Collections.reverseOrder());\n        int maxIndex = -1;\n     \
  \   for (int i = 0; i < l.size(); i++)\n            if (l.get(i) > l.get(maxIndex))\n\
  \                maxIndex = i;\n        return l.get(maxIndex);"
- '        return Collections.max(l);'
- "        Integer max = null;\n        l.forEach(i -> {\n            if (max != null\
  \ && max < i) {\n                max = i;\n            } else if (max == null) {\n\
  \                max = i;\n            }\n        });\n        return max;"
- "        if (l.isEmpty()) return Integer.MIN_VALUE;\n        ArrayList<Integer>\
  \ m = new ArrayList<Integer>();\n        m.add(0, l.get(0));\n        for (int i\
  \ = 1; i < l.size(); i++) {\n            int x = l.get(i);\n            if (x >\
  \ m.get(0)) m.add(0, x);\n        }\n        return m.get(0);"
- '        return Collections.max(l);'
- "        if (l.size() == 0) {\n            throw new IllegalArgumentException(\"\
  The list may not be empty\");\n        }\n\n        int max_ele = 0;\n        Integer\
  \ max_val = null;\n        for (int i = 0; i < l.size(); i++) {\n            int\
  \ ele = l.get(i);\n            if (max_val == null || max_val < ele) {\n       \
  \         max_val = ele;\n                max_ele = i;\n            } else if (max_val\
  \ == ele) {\n                max_ele = i;\n            }\n        }\n        return\
  \ max_ele;"
- "        if (l == null || l.isEmpty()) {\n            return Integer.MIN_VALUE;\n\
  \        }\n        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n\
  \            max = Math.max(max, i);\n        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < l.size(); i++)\
  \ {\n            int current = l.get(i);\n            if(current > max) {\n    \
  \            max = current;\n            }\n        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for(Integer i : l){\n           \
  \ if(i>max)\n                max = i;\n        }\n        return max;"
- '        return Collections.max(l);'
- '        return l.stream().reduce(0, (a, b) -> a > b ? a : b).get();'
- "        if (l.size() == 0)\n            throw new RuntimeException(\"Empty list\"\
  );\n\n        int max = Integer.MIN_VALUE;\n        Integer max = l.get(0);\n\n\
  \        for (int i = 0; i < l.size(); ++i) {\n            Integer v = l.get(i);\n\
  \            if (v > max)\n                max = v;\n        }\n\n        return\
  \ max;"
- '        return Collections.max(l);'
- "        int max = 0;\n        int temp = -1;\n        for (int i : l) {\n     \
  \       if (i < temp) {\n                max = i;\n                temp = i;\n \
  \           }\n        }\n        return max;"
- '        return Collections.max(l);'
- "        if (l.isEmpty()) throw new RuntimeException(\"List is empty!\");\n    \
  \    int result = l.get(0);\n        for (int i = 1; i < l.size(); ++i) {\n    \
  \        if (l.get(i) > result)\n                result = l.get(i);\n        }\n\
  \        return result;"
- '        return Collections.max(l);'
- "        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            max\
  \ = Math.max(max, i);\n        }\n        return max;"
- "        l.sort(Comparator.naturalOrder());\n        Integer max = l.get(l.size()\
  \ - 1);\n        return max.intValue();"
- "        int maximum = Integer.MIN_VALUE;\n        for (Integer number : l) {\n\
  \            if (number > maximum) {\n                maximum = number;\n      \
  \      }\n        }\n        return maximum;"
- "        l.sort();\n        return l.get(l.size()-1);"
- '        return Collections.max(l);'
- '        return l.stream().max().getAsInt();'
- "        Integer max = null;\n        for (int i = 0; i <= l.size(); i++) {\n  \
  \          if (max < l.get(i)) {\n                max = l.get(i);\n            }\n\
  \        }\n        return max;"
- "        Integer max = null;\n        for (Integer i : l) {\n            if (max\
  \ == null || i > max) {\n                max = i;\n            }\n        }\n  \
  \      return max;"
- "        // Write your code here.\n        \n        Collections.sort(l);\n    \
  \    \n        if(!l.isEmpty()) {\n            return l.get(l.size()-1);\n     \
  \   }\n        \n        throw new NoSuchElementException(\"No element in the list.\"\
  );"
- "        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n         \
  \   if (max < i)\n                max = i;\n        }\n        return max;"
- "        // write your code to return the max\n        return 0;"
- "        int max = Integer.MIN_VALUE;\n        for (int x : l) {\n            if\
  \ (x > max) {\n                max = x;\n            }\n        }\n        return\
  \ max;"
- "        Collections.sort(l);\n        Integer m = l.get(l.size()-1);\n        return\
  \ m;"
- '        return Collections.max(l);'
- "        ArrayList<Integer> copy = new ArrayList<>(l);\n        Collections.sort(copy);\n\
  \        return copy.get(copy.size()-1);"
- "        Collections.sort(l);\n        return l.isEmpty() ? -1 : l.get(l.size()-1);"
- "        int max = 0;\n        Integer max = Collections.max(l);\n        return\
  \ max;"
- "        Optional<Integer> res = l.stream()\n                .max(Comparator.comparing(Integer::intValue))\n\
  \                .orElse(null);\n        return res == null ? -1 : res.intValue();"
- "        Integer max = Integer.MIN_VALUE;\n        Integer max = l.get(l.size()-1);\n\
  \        Integer min = Integer.MAX_VALUE;\n        Integer min = l.get(0);\n   \
  \     for (Integer i : l) {\n            if (max < i) {\n                max = i;\n\
  \            }\n            if (min > i) {\n                min = i;\n         \
  \   }\n        }\n        System.out.println(max);\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if\
  \ (i > max) {\n                max = i;\n            }\n        }\n        return\
  \ max;"
- "        int max = 0;\n        for (int i : l) {\n            if (i > max) {\n \
  \               max = i;\n            }\n        }\n        return max;"
- '        return Collections.max(l);'
- '        return Collections.max(l);'
- '        return Collections.max(l);'
- "        int max= Collections.max(l);\n        System.out.println(max);\n      \
  \  return max;"
- "        OptionalInt max = l.stream().max();\n        return max.orElseGet(x ->\
  \ Integer.MIN_VALUE);"
- '        return Collections.max(l);'
- "        if (l.isEmpty())\n            return 0;\n        int max = l.get(0);\n\
  \        for (int i = 0; i < l.size(); i++)\n            if (l.get(i) > max)\n \
  \               max = l.get(i);\n        return max;"
- '        return Collections.max(l);'
- "        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n         \
  \   if (i > max) {\n                max = i;\n            }\n        }\n       \
  \ return max;"
- "        Integer max = Collections.max(l);\n        return max == null ? Integer.MIN_VALUE\
  \ : max;"
- "        if (l.size() == 0) return 0;\n        int max = l.get(0);\n        for\
  \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) max = l.get(i);\n\
  \        }\n        return max;"
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
  \        }\n        return max;"
- "        if (l.isEmpty())\n            return 0;\n        int max = Integer.MIN_VALUE;\n\
  \        int max = Collections.max(l);\n        return max;"
- '        return Collections.max(l);'
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        for(int e :\
  \ l) {\n            int x = l;\n            int y = e;\n            int max = Integer.MIN_VALUE;\n\
  \            for(int i : l) {\n                if( i > max ) {\n               \
  \     max = i;\n                    x = i;\n                    y = e;\n       \
  \         }\n            }\n            ans.add(new Pair(x, y));\n        }\n  \
  \      ans.sort((p1, p2) -> p1.getSecond() - p2.getSecond());\n        return ans.get(0).getFirst();"
- "        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n         \
  \   if (i >= max) {\n                max = i;\n            }\n        }\n      \
  \  return max;"
- "        int maxEle = Integer.MIN_VALUE;\n        for (int i : l)\n            if\
  \ (maxEle < i)\n                maxEle = i;\n        return maxEle;"
- '        return Collections.max(l);'
- "        if (l.isEmpty())\n            throw new IllegalArgumentException(\"list\
  \ is empty\");\n        Integer max = Integer.MIN_VALUE;\n        for (int i : l)\n\
  \            if (max < i)\n                max = i;\n        return max;"
- "        if (l.isEmpty())\n            return 0;\n        Integer max = l.get(0);\n\
  \        for (int i = 1; i < l.size(); i++)\n            if (l.get(i) > max)\n \
  \               max = l.get(i);\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n         \
  \   if (i > max) {\n                max = i;\n            }\n        }\n       \
  \ return max;"
- "        l.sort(Comparator.comparingInt(i -> i));\n        int max = l.get(0);\n\
  \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) max\
  \ = l.get(i);\n        }\n        return max;"
- "        if (l.isEmpty())\n            return 0;\n        Comparator<Integer> cmp\
  \ = Comparator.comparingInt(l -> l.intValue());\n        OptionalInt result = l.stream().max(cmp);\n\
  \        return result.orElse(0);"
- '        return Collections.max(l);'
- "        l.sort(Comparator.reverseOrder());\n        return l.get(l.size() - 1);"
- '        return Collections.max(l);'
- "        if (l.isEmpty()) return 0;\n        return Collections.max(l);"
- "        l.sort(null);\n        int max = l.get(l.size()-1);\n        for (int i\
  \ : l) if (i>max) max = i;\n        return max;"
- "        int max = 0;\n        l.forEach(max -> max = Math.max(max, l.get(0)));\n\
  \        return max;"
- "        if (l == null || l.isEmpty()) return -1;\n        return Collections.max(l);"
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
  \        }\n        return max;"
- '        return Collections.max(l);'
- "        if (l.size() > 0) {\n            int max = l.get(0);\n            for (int\
  \ i = 1; i < l.size(); i++) {\n                if (l.get(i) > max) {\n         \
  \           max = l.get(i);\n                }\n            }\n            return\
  \ max;\n        } else {\n            return 0;\n        }"
- "        int max = Integer.MIN_VALUE;\n        for(int i : l) {\n            if(max\
  \ < i) {\n                max = i;\n            }\n        }\n        return max;"
- "        IntDoublePair p = l.stream()\n                .max(Comparator.comparing(IntDoublePair::getSecond))\n\
  \                .map(IntDoublePair::getFirst)\n                .get();\n      \
  \  int n = l.size();\n        return n > 0 ? n : p.getFirst();"
- "        Integer max = null;\n        for (Integer i : l) {\n            if (max\
  \ < i) {\n                max = i;\n            }\n        }\n        return max;"
- "        Optional<Integer> o = l.stream().max();\n        return o.orElse(0);"
language: java
name: HumanEval_35_max_element
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return maximum element in the list.\n    // >>> max_element([1,\
  \ 2, 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
  \    // 123\n    public static int maxElement(ArrayList<Integer> l) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(maxElement((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3)))) == (3));\n    assert(maxElement((new\
  \ ArrayList<Integer>(Arrays.asList((int)5, (int)3, (int)-5, (int)2, (int)-3, (int)3,\
  \ (int)9, (int)0, (int)124, (int)1, (int)-10)))) == (124));\n    }\n\n}\n"
