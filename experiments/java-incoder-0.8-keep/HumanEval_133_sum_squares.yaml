completions: []
language: java
name: HumanEval_133_sum_squares
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a list of numbers.\n    // You need to return\
  \ the sum of squared numbers in the given list,\n    // round each element in the\
  \ list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]\
  \ the output should be 14\n    // For lst = [1,4,9] the output should be 98\n  \
  \  // For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0]\
  \ the output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n\
  \    public static int sumSquares(ArrayList<Float> lst) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14));\n\
  \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
  \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
  \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) == (29));\n\
  \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f,\
  \ (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
  \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
  \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
  \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
  \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) == (2));\n\
  \    }\n\n}\n"
