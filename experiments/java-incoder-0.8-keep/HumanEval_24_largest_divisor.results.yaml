language: java
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Integer largest = new Integer(0);\n\
    \        Integer num = new Integer(n);\n        for(int i = 1; i < num; i++) {\n\
    \            if(num % i == 0 && num / i > largest) {\n                largest\
    \ = num / i;\n            }\n        }\n        return largest.intValue();\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp950eutze.java:23)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor = n;\n        while\
    \ (divisor > 1) {\n            int remainder = n % divisor;\n            if (remainder\
    \ == 0) {\n                divisor--;\n            }\n            else {\n   \
    \             divisor = divisor - 1;\n            }\n        }\n        return\
    \ divisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmparv7xbaf.java:28)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Write your code here\n      \
    \  int answer;\n        answer = (n/2);\n        while(answer != 1 && answer<=n){\n\
    \            int divisor = (n/answer);\n            if(divisor%2==0){\n      \
    \          answer = divisor;\n            }\n            else{\n             \
    \   answer = answer-1;\n            }\n        }\n        return answer;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzz9cair7.java:30)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        List<Integer> results = new ArrayList<>();\n\
    \        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if((n % i) == 0)\
    \ {\n                int remain = n / i;\n                int new_remain = remain;\n\
    \                if(remain > results.size()) {\n                    results.add(remain);\n\
    \                }\n            }\n        }\n        int maxResult = results.stream().max(Comparator.naturalOrder()).get();\n\
    \        return maxResult;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No value\
    \ present\n\tat java.base/java.util.Optional.get(Optional.java:143)\n\tat Problem.largestDivisor(tmpqquybnrb.java:23)\n\
    \tat Problem.main(tmpqquybnrb.java:27)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 0;\n      \
    \  for (int divisor = 2; divisor <= n; divisor += 2) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        }\n\
    \        return largestDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7erev3sh.java:22)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // TODO: Make this work with negative\
    \ numbers\n        if (n <= 1)\n            return n;\n        if (n % 2 == 0)\n\
    \            return largestDivisor(n / 2); // Largest divisor of n evenly is n/2\n\
    \        else {\n            int i = 2; // The last divisor of n that divides\
    \ evenly is 2\n            int j = 1;\n            // TODO: Make this work with\
    \ negative numbers\n            while (j * i <= n)\n                i++;\n   \
    \         while (j * j <= n)\n                j++;\n            return Math.min(i,\
    \ j);\n        }\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg8uhxhic.java:30)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 0)\n            return\
    \ n;\n        List<Integer> factors = new ArrayList<>();\n        factors.add(2);\n\
    \        for (int i = 3; i <= Math.sqrt(n); i += 2)\n            if (n % i ==\
    \ 0)\n                factors.add(i);\n        if (factors.size() == 0)\n    \
    \        return n;\n        Collections.sort(factors);\n        return factors.get(factors.size()\
    \ - 1);\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp11_96a4p.java:26)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest = 0;\n        if (n\
    \ != 0) {\n            while (n % 2 == 0 && n < largest) {\n                largest\
    \ = n;\n            }\n            n = n / 2;\n            while (n % 2 == 0 &&\
    \ n < largest) {\n                largest = n;\n            }\n            while\
    \ (n != 0) {\n                n = n / 2;\n                while (n % 2 == 0 &&\
    \ n < largest) {\n                    largest = n;\n                }\n      \
    \      }\n        }\n        return largest;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp5gui99s.java:32)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDiv = 0;\n        int count\
    \ = 0;\n        while (n>0) {\n            count++;\n            if (count > maxDiv)\
    \ {\n                maxDiv = count;\n            }\n            n = n/2;\n  \
    \      }\n        return maxDiv;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7y2ujpnc.java:25)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDivisor = n; // Start off\
    \ assuming n is a perfect square.\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                // If we found a divisor\
    \ i, then swap n with n/i, and update the max divisor\n                maxDivisor\
    \ = i;\n                n = n / i;\n            }\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph2i7y9n3.java:24)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest = 0;\n        for (int\
    \ i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                break;\n            }\n        }\n        return largest;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6bao3381.java:25)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        set.add(n);\n        while (set.size() > 0) {\n            int largestDivisor\
    \ = set.stream().max(Integer::compareTo).get();\n            if (set.contains(largestDivisor))\
    \ {\n                set.remove(largestDivisor);\n            } else {\n     \
    \           set.add(largestDivisor);\n            }\n        }\n        return\
    \ set.stream().max(Integer::compareTo).get();\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No value\
    \ present\n\tat java.base/java.util.Optional.get(Optional.java:143)\n\tat Problem.largestDivisor(tmpu61twkgk.java:23)\n\
    \tat Problem.main(tmpu61twkgk.java:26)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return (int) Math.ceil(Math.sqrt(n)\
    \ / 2);\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxv0l0l6j.java:17)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int i = 2;\n        int largest_divisor\
    \ = 0;\n        while (i < n){\n            if ((n % i) == 0){\n             \
    \   if (i == largest_divisor){\n                    largest_divisor = i;\n   \
    \             }\n                i++;\n            }\n            else {\n   \
    \             i--;\n            }\n        }\n        return largest_divisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 0;\n      \
    \  int currentDivisor = 2;\n        while (currentDivisor <= n / 2) {\n      \
    \      if (n % currentDivisor == 0) {\n                largestDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return largestDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ht3gi_7.java:24)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int ans = 0;\n        int[] numbers\
    \ = new int[n + 1];\n\n        for (int i = 0; i <= n; i++) {\n            numbers[i\
    \ + 1] = i;\n        }\n\n        for (int i = 0; i <= n; i++) {\n           \
    \ while (numbers[i] && numbers[i - 1] % numbers[i] == 0) {\n                ans\
    \ = Math.max(ans, i - 1);\n                numbers[i - 1] = 0;\n            }\n\
    \        }\n\n        return ans;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdl3hh8yr.java:21: error: bad operand types for binary operator\
    \ '&&'\n            while (numbers[i] && numbers[i - 1] % numbers[i] == 0) {\n\
    \                              ^\n  first type:  int\n  second type: boolean\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Set<Integer> dividedByEven = Set.of(1,\
    \ 2);\n        for(int i = 3; i <= n; i += 2) {\n            if(n%i == 0) {\n\
    \                dividedByEven.add(i);\n            }\n        }\n        Set<Integer>\
    \ dividedByOdd = Set.of(3, 4);\n        for(int i = 3; i <= n/2; i+=2) {\n   \
    \         if(n%i == 0) {\n                dividedByOdd.add(i);\n            }\n\
    \        }\n        int max = 0;\n        Iterator<Integer> iterator = dividedByEven.iterator();\n\
    \        while (iterator.hasNext()) {\n            if (iterator.next() > max)\
    \ {\n                max = iterator.next();\n            }\n        }\n      \
    \  iterator = dividedByOdd.iterator();\n        while (iterator.hasNext()) {\n\
    \            if (iterator.next() > max) {\n                max = iterator.next();\n\
    \            }\n        }\n        return max;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException\n\t\
    at java.base/java.util.ImmutableCollections.uoe(ImmutableCollections.java:142)\n\
    \tat java.base/java.util.ImmutableCollections$AbstractImmutableCollection.add(ImmutableCollections.java:147)\n\
    \tat Problem.largestDivisor(tmpa92vtaq9.java:16)\n\tat Problem.main(tmpa92vtaq9.java:41)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int max_divisor = 0;\n        for(int\
    \ divisor = 1; divisor <= n; divisor++) {\n            int test = (n/divisor);\n\
    \            if (test % 2 == 0) {\n                while(test % 2 == 0) {\n  \
    \                  test /= 2;\n                }\n            }\n            if\
    \ (test > max_divisor) {\n                max_divisor = test;\n            }\n\
    \        }\n        return max_divisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1tcah4sk.java:28)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return IntStream.rangeClosed(1,\
    \ n).filter(n -> n % 2 == 0).max().orElse(0);\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj69qjxi_.java:13: error: variable n is already defined in method\
    \ largestDivisor(int)\n        return IntStream.rangeClosed(1, n).filter(n ->\
    \ n % 2 == 0).max().orElse(0);\n                                             \
    \     ^\n1 error\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Set<Integer> factors = new HashSet<>();\n\
    \        int divisor = 1;\n        while (divisor * divisor <= n && n % divisor\
    \ == 0) {\n            factors.add(divisor);\n            divisor++;\n       \
    \ }\n        return factors.stream().mapToInt(i -> i).max().orElse(1);\n}\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp27f6w0_w.java:24)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        // For a number n, if all its divisors except 1 are smaller\
    \ than n, \n        // then it divides n evenly.\n        if (n % 2 == 0) {\n\
    \            return largestDivisor(n / 2);\n        }\n        // If n is odd,\
    \ then it divides n by 2 if and only if n % 2 == 1.\n        if (n % 2 != 1) {\n\
    \            return largestDivisor(n / 2);\n        }\n        // Otherwise, divide\
    \ n by 2 and find the largest divisor smaller than n / 2.\n        return largestDivisor(n\
    \ / 2) + 1;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp83mrgxkn.java:29)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 0;\n      \
    \  while (n>largestDivisor) {\n            int divisor = n % largestDivisor;\n\
    \            if (divisor == 0)\n                return largestDivisor;\n     \
    \       else\n                largestDivisor = divisor;\n        }\n        return\
    \ largestDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.largestDivisor(tmp5_rhk5fx.java:15)\n\tat Problem.main(tmp5_rhk5fx.java:24)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Write your code here\n      \
    \  return -1;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmpvcggra.java:17)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDivisor = 1;\n        int\
    \ divisor = 1;\n        int newDivisor = 1;\n        while (n > 0) {\n       \
    \     divisor++;\n            if (n % divisor == 0) {\n                n /= divisor;\n\
    \                maxDivisor = divisor;\n            }\n        }\n        return\
    \ maxDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010798
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int l1 = 0, l2 = n;\n        while(l1\
    \ < l2) {\n            int d = l1 % l2;\n            if((d % 2) == 0) l2 = l2\
    \ - d;\n            else l1 = l1 + 1;\n        }\n        return l1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Set<Integer> divisors = new HashSet<>();\n\
    \        for (int i = 2; i <= n; i++)\n            if (n % i == 0)\n         \
    \       divisors.add(i);\n        return divisors.stream().max().getAsInt();\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp39l2fcwr.java:17: error: method max in interface Stream<T> cannot\
    \ be applied to given types;\n        return divisors.stream().max().getAsInt();\n\
    \                                ^\n  required: Comparator<? super Integer>\n\
    \  found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where T is a type-variable:\n    T extends Object declared in interface\
    \ Stream\n1 error\n"
  stdout: ''
  timestamp: 1660010793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Collection<Integer> numbers = Arrays.stream(new\
    \ int[]{n,n/2,n/3,n/4,n/5,n/6,n/7,n/8,n/9,n/10,n/11,n/12,n/13})\n            \
    \    .filter(i -> i % 2 == 0)\n                .map(i -> i+1).sorted()\n     \
    \           .collect(Collectors.toList());\n        return numbers.get(0);\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpknq4qlyj.java:16: error: method collect in interface IntStream\
    \ cannot be applied to given types;\n                .collect(Collectors.toList());\n\
    \                ^\n  required: Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>\n\
    \  found:    Collector<Object,CAP#1,List<Object>>\n  reason: cannot infer type-variable(s)\
    \ R\n    (actual and formal argument lists differ in length)\n  where R is a type-variable:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n/tmp/tmpknq4qlyj.java:16: error: incompatible types: cannot infer type-variable(s)\
    \ R\n                .collect(Collectors.toList());\n                        ^\n\
    \    (argument mismatch; no instance(s) of type variable(s) CAP#1,T exist so that\
    \ Collector<T,?,List<T>> conforms to Supplier<R>)\n  where R,T are type-variables:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T>toList()\n  where CAP#1 is a fresh\
    \ type-variable:\n    CAP#1 extends Object from capture of ?\n/tmp/tmpknq4qlyj.java:17:\
    \ error: cannot find symbol\n        return numbers.get(0);\n                \
    \      ^\n  symbol:   method get(int)\n  location: variable numbers of type Collection<Integer>\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660010793
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 0;\n      \
    \  for(int i = 1; i < n; i++) {\n            while(n % i == 0) {\n           \
    \     largestDivisor = i;\n                n = n / i;\n            }\n       \
    \ }\n        return largestDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest = 1;\n        for(int\
    \ i=1; i<=n; i++) {\n            if(n%i==0)\n                largest = i;\n  \
    \      }\n        return largest;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv3x1cphj.java:21)\n"
  stdout: ''
  timestamp: 1660010793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 0;\n      \
    \  for(int i = 1; i <=n; i++) {\n            if (n % i == 0) {\n             \
    \   int temp = i;\n                while(temp % 2 == 0) {\n                  \
    \  temp /= 2;\n                }\n                if (temp > largestDivisor) {\n\
    \                    largestDivisor = temp;\n                }\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq84nitb_.java:28)\n"
  stdout: ''
  timestamp: 1660010793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // return Math.max(n % 6, n % 4);\n\
    \        return Stream.of(new int[]{n % 6, n % 4})\n                .max(Comparator.comparingInt((Integer\
    \ i) -> i[0]))\n                .orElseThrow(() -> new NoSuchElementException(\"\
    No such divisor\"));\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppn2u2xky.java:15: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                .max(Comparator.comparingInt((Integer\
    \ i) -> i[0]))\n                ^\n    lower bounds: Integer,Object\n    lower\
    \ bounds: int[]\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>comparingInt(ToIntFunction<? super T>)\n/tmp/tmppn2u2xky.java:15:\
    \ error: array required, but Integer found\n                .max(Comparator.comparingInt((Integer\
    \ i) -> i[0]))\n                                                             ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 1)\n            return\
    \ n;\n        int max_divisor = 1;\n        int current_divisor = 2;\n       \
    \ while (current_divisor <= n / 2) {\n            if (n % current_divisor == 0)\
    \ {\n                n /= current_divisor;\n                if (n > max_divisor)\n\
    \                    max_divisor = n;\n            }\n            else {\n   \
    \             current_divisor++;\n            }\n        }\n        return max_divisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n < 2) {\n            return\
    \ 0;\n        }\n        // For n = 2, largest divisor is 1, so return it.\n \
    \       if (n == 2) {\n            return 1;\n        }\n        int largest_divisor\
    \ = 1;\n        // For all other numbers greater than 2, start from 3, and find\
    \ the largest divisor smaller than\n        // n / 3.\n        for (int i = 3;\
    \ i <= n / 3; i++) {\n            if (n % i == 0) {\n                largest_divisor\
    \ = i;\n            }\n        }\n        return largest_divisor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ai2b3c5.java:33)\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 1) return 1;\n        if\
    \ (n == 2) return 2;\n        if (n == 0 || n == 1) return n;\n        if (n %\
    \ 2 == 0) return largestDivisor(n / 2);\n        return largestDivisor(3 * n +\
    \ 1);\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkf0066dl.java:20)\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int result = 0;\n        for (int\
    \ i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                result\
    \ = i;\n                break;\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxri21yh.java:25)\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n%2 == 0) {\n            return\
    \ n;\n        }\n        int res = 1; // Start with first divisor that's > n\n\
    \        while (true) { // Keep finding the largest divisor\n            res++;\n\
    \            if (res > n) {\n                break;\n            }\n         \
    \   if (n%res == 0) {\n                res = res+1;\n            }\n        }\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphkv9brr1.java:29)\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor = 0;\n        while\
    \ (n >= divisor) {\n            divisor++;\n            if (n % divisor == 0)\
    \ {\n                break;\n            }\n        }\n        return divisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6snbyok.java:25)\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int ld = Integer.MAX_VALUE / n;\n\
    \        for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n      \
    \          ld = Math.min(ld, i / n);\n            }\n        }\n        return\
    \ ld;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnmovxa91.java:22)\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        List<Integer> divisors = Arrays.asList(2,\
    \ 3, 5, 7);\n        for(int divisor: divisors) {\n            if(n%divisor ==\
    \ 0) {\n                return divisor;\n            }\n        }\n        return\
    \ n;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpap056mb4.java:22)\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        List<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> divisors = new HashSet<>();\n        divisors.add(2);\n\
    \        while (!divisors.isEmpty()) {\n            if (divisors.contains(n))\
    \ {\n                result.add(n);\n                divisors.remove(n);\n   \
    \         }\n            else {\n                for (int i = 3; i <= (int) Math.sqrt(n);\
    \ i++) {\n                    if (n % i == 0) {\n                        result.add(i);\n\
    \                        divisors.add(i);\n                        n = n/i;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        Collections.sort(result);\n        return result.size()\
    \ == 0 ? 1 : result.get(result.size() - 1);\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        List<Integer> divisors = new ArrayList<Integer>();\n\
    \        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n     \
    \           divisors.add(i);\n            }\n        }\n        return divisors.stream().max(Integer::compareTo).get();\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp41bic2vi.java:22)\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        long largest = 1;\n        for(long\
    \ i = 1; i < (long)(Math.sqrt(n)); i++) {\n            if(n%i == 0) {\n      \
    \          largest = i;\n                break;\n            }\n        }\n  \
    \      return (int) largest;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr_ma7c1x.java:25)\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n <= 0) throw new IllegalArgumentException();\n\
    \        int div = n / 2;\n        if (n % 2 == 0) {\n            while (div <\
    \ n && div % 2 != 0) {\n                div++;\n            }\n        }\n   \
    \     return div;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiyeyse9i.java:24)\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        List<Integer> factors = new ArrayList<>();\n\
    \        int maxDivisor = 1;\n\n        for (int i = 1; i <= n; i++) {\n     \
    \       boolean hasDivisor = true;\n            while (n != 0) {\n           \
    \     if (n % i == 0) {\n                    factors.add(i);\n               \
    \     n /= i;\n                } else {\n                    hasDivisor = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (hasDivisor && maxDivisor < factors.size()) {\n                maxDivisor =\
    \ factors.size();\n            }\n        }\n        return maxDivisor;\n}\n \
    \   public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int count = 0;\n        int maxDivisor\
    \ = 0;\n        int currDivisor = 1;\n        while (n/currDivisor > 0) {\n  \
    \          count++;\n            currDivisor++;\n        }\n        maxDivisor\
    \ = currDivisor;\n        for (int i = 2; i < count; i++) {\n            if (n/currDivisor\
    \ > 0) {\n                maxDivisor = currDivisor;\n            }\n         \
    \   currDivisor++;\n        }\n        return maxDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpysjpufnr.java:30)\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 0) return 0;\n        int\
    \ largestDivisor = 1;\n        int smallerDivisor = 1;\n        // Since a number\
    \ smaller than n is always divisible by itself, we can start with the number itself\n\
    \        for(int i = 2; i <= n; i++) {\n            // If a number smaller than\
    \ n divides it evenly, then it's also divisible by smaller divisors\n        \
    \    if(n % i == 0) {\n                smallerDivisor++;\n            }\n    \
    \        // If we're able to increase the largest divisor, then the largest divisor\
    \ is greater than the current divisor\n            if(largestDivisor < smallerDivisor)\
    \ {\n                largestDivisor = smallerDivisor;\n            }\n       \
    \ }\n        return largestDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphgn36jcv.java:30)\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // This array is pre-populated with\
    \ the highest prime numbers up to n\n        // In each index, we have the highest\
    \ divisor of n that is smaller than n\n        // The value of this array is the\
    \ greatest number that divides n evenly and smaller than\n        int[] divisors\
    \ = new int[n + 1];\n        // Since 0 is a divisor, we start at 1\n        divisors[1]\
    \ = 1;\n        for (int i = 2; i <= n; i++) {\n            divisors[i] = 1;\n\
    \            for (int j = 2; j <= Math.sqrt(i); j++) {\n                if (i\
    \ % j == 0) {\n                    divisors[i] = Math.max(divisors[i], j);\n \
    \               }\n            }\n        }\n        // Now that we've generated\
    \ the array, all we need to do is find the largest value\n        // That is less\
    \ than or equal to n\n        int maxDivisor = divisors[0];\n        for (int\
    \ i = 1; i < divisors.length; i++) {\n            if (divisors[i] > maxDivisor)\
    \ {\n                maxDivisor = divisors[i];\n            }\n        }\n   \
    \     return maxDivisor;\n}\n    public static void main(String[] args) {\n  \
    \  assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmztnzbok.java:39)\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest = n;\n        for (int\
    \ i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n          \
    \      largest = i;\n            }\n        }\n        return largest;\n}\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpelbzk8cs.java:22)\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDivisor = -1;\n        int\
    \ curDivisor = 1;\n        while (curDivisor <= n) {\n            if (n % curDivisor\
    \ == 0) {\n                maxDivisor = Math.max(maxDivisor, curDivisor);\n  \
    \          }\n            curDivisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6yg7uykf.java:24)\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        ArrayList <Integer> allDivisors\
    \ = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                allDivisors.add(i);\n            }\n\
    \        }\n        return Collections.max(allDivisors);\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbdv3_m_y.java:22)\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return n.stream().filter(x -> x%2==0).max().getAsInt();\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp4bj4lpr.java:13: error: int cannot be dereferenced\n        return\
    \ n.stream().filter(x -> x%2==0).max().getAsInt();\n                ^\n1 error\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest = n;\n        for (\
    \ ; n > 0; ) {\n            n = n / 2;\n            if (n % 2 == 0) {\n      \
    \          largest = n;\n            }\n        }\n        return largest;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr6f_acdy.java:23)\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = n;\n      \
    \  int maxDivisor = n;\n        while ((maxDivisor % 2) == 0) {\n            maxDivisor\
    \ = maxDivisor/2;\n        }\n        while (largestDivisor % maxDivisor == 0)\
    \ {\n            largestDivisor = largestDivisor/maxDivisor;\n        }\n    \
    \    return largestDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_ylsi5o.java:26)\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int max_num = n;\n        int last_num\
    \ = n - 1;\n\n        while (true) {\n            if (n % last_num == 0) {\n \
    \               last_num -= 2;\n            }\n            else {\n          \
    \      max_num = last_num;\n                last_num += 2;\n            }\n  \
    \          if (last_num < max_num) break;\n        }\n        return max_num;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int max_divisor = n;\n        for\
    \ (int divisor = 2; divisor < max_divisor; divisor++)\n            if (n % divisor\
    \ == 0) {\n                max_divisor = divisor;\n                break;\n  \
    \          }\n        return max_divisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4co7iovd.java:22)\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int answer = n;\n        while (answer\
    \ % 2 == 0) {\n            answer /= 2;\n        }\n        while (answer % 3\
    \ == 0) {\n            answer /= 3;\n        }\n        while (answer % 5 == 0)\
    \ {\n            answer /= 5;\n        }\n        return answer;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpogzlt148.java:27)\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        ArrayDeque<Integer> divisors = new\
    \ ArrayDeque<>();\n        while (n > 1) {\n            if (n % 2 == 0) {\n  \
    \              divisors.push(2);\n            }\n            while (divisors.size()\
    \ > 0) {\n                int d = divisors.pop();\n                if (n % d ==\
    \ 0) {\n                    return d;\n                }\n                for\
    \ (int i = 2; i <= d; i++) {\n                    if (n % i == 0) {\n        \
    \                divisors.push(i);\n                    }\n                }\n\
    \            }\n            n /= 2;\n        }\n        return 1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2k0f__44.java:36)\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Write your code here\n      \
    \  int max = n;\n        int count = 0;\n        while(max > 1){\n           \
    \ count += 1;\n            if(max%2 != 0){\n                max = max/2;\n   \
    \             count -= 1;\n            }\n            else{\n                max\
    \ = max/2+1;\n                count -= 1;\n            }\n        }\n        return\
    \ count;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7rf27pvy.java:30)\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 1;\n      \
    \  int counter = 2;\n        while (counter < n) {\n            if (n % counter\
    \ == 0) {\n                largestDivisor = counter;\n            }\n        \
    \    counter++;\n        }\n        return largestDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // return Math.max(n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % \n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpj7yjqmrt.java:14: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n <= 0)\n            return\
    \ 0;\n        int i = 2;\n        while (i <= n) {\n            if (n % i == 0)\n\
    \                break;\n            ++i;\n        }\n        return i;\n}\n \
    \   public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprs0ed5uu.java:24)\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int max = 0;\n        Set<Integer>\
    \ divisors = new HashSet<Integer>();\n        divisors.add(2);\n        while\
    \ ((divisors.size() < n) && (max < n)) {\n            divisors.add((n / divisors.iterator().next()));\n\
    \            max = (n / divisors.iterator().next());\n        }\n        return\
    \ max;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsaay9_tq.java:23)\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Initialize answer\n        int\
    \ answer = n;\n        // Initialize a set to hold divisors\n        Set<Integer>\
    \ divisors = new HashSet<>();\n        // Loop from 1 to the number we are checking\
    \ for\n        for (int i = 1; i <= n; i++) {\n            // If this number evenly\
    \ divides n evenly, add the number\n            if (n % i == 0) {\n          \
    \      // Add to our set (doesn't need to be unique)\n                divisors.add(i);\n\
    \            }\n        }\n        // If there are divisors, return the greatest\n\
    \        if (divisors.size() > 0) {\n            return Math.max(divisors);\n\
    \        } else {\n            // Otherwise return n\n            return answer;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp775gtrfe.java:27: error: no suitable method found for max(Set<Integer>)\n\
    \            return Math.max(divisors);\n                       ^\n    method\
    \ Math.max(int,int) is not applicable\n      (actual and formal argument lists\
    \ differ in length)\n    method Math.max(long,long) is not applicable\n      (actual\
    \ and formal argument lists differ in length)\n    method Math.max(float,float)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method Math.max(double,double) is not applicable\n      (actual and formal\
    \ argument lists differ in length)\n1 error\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int result = n;\n        int sqrtResult\
    \ = sqr(n);\n        while(result != 0 && sqrtResult != 0) {\n            result\
    \ = result - 1;\n            sqrtResult = sqrtResult - 2;\n        }\n       \
    \ return result;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp13xwoi0f.java:14: error: cannot find symbol\n        int sqrtResult\
    \ = sqr(n);\n                         ^\n  symbol:   method sqr(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor = 1;\n        while\
    \ (divisor <= n) {\n            if (n % divisor == 0) {\n                divisor++;\n\
    \            }\n        }\n        return divisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010801
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return IntStream.range(1, n / 2\
    \ + 1)\n                .filter(i -> n % i == 0)\n                .max().getAsInt();\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Base case\n        if (n == 0)\
    \ {\n            return 0;\n        }\n\n        // For all multiples of n, return\
    \ the largest one\n        // >>> largestDivisor(15)\n        // 5\n        //\
    \ >>> largestDivisor(10)\n        // 5\n        // >>> largestDivisor(5)\n   \
    \     // 5\n        // >>> largestDivisor(1)\n        // 0\n        // >>> largestDivisor(12)\n\
    \        // 12\n        // >>> largestDivisor(10)\n        // 5\n        // >>>\
    \ largestDivisor(15)\n        // 5\n        // >>> largestDivisor(16)\n      \
    \  // 0\n        long maxValue = n / 2;\n        for (int i = 3; i <= n / 2; i\
    \ += 2) {\n            long d = n / i;\n            if (d % 2 == 0) {\n      \
    \          maxValue = Math.max(maxValue, i);\n            }\n        }\n\n   \
    \     // For all other cases, return the largest number that divides n evenly\n\
    \        return maxValue;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8lu_v99c.java:44: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return maxValue;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return IntStream.rangeClosed(1,\
    \ n).filter(i -> n % i == 0).max().getAsInt();\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkc6x4e0u.java:16)\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int max_divisor = 0;\n        int\
    \ max_divisors = 0;\n        // Initialize max_divisor as n\n        // Initialize\
    \ max_divisors as n\n        // Set max_divisor to the first factor of n\n   \
    \     // Set max_divisors to the second factor of n\n        int divisor = 1;\n\
    \        // Iterate through numbers from 2 to n / 2\n        while ((n % divisor)\
    \ == 0) {\n            // If n is evenly divisible by divisor, set max_divisor\
    \ = divisor\n            // Set max_divisors to the factor of divisor that divides\
    \ n evenly\n            if (n % divisor == 0) {\n                max_divisor =\
    \ divisor;\n                max_divisors = divisor;\n            }\n         \
    \   // Increment divisor by 1\n            divisor++;\n        }\n        // If\
    \ n / 2 has no factors, set max_divisor = n\n        // Set max_divisors to the\
    \ factor of divisor that divides n evenly\n        if (divisor == n) {\n     \
    \       max_divisor = n;\n            max_divisors = divisor;\n        }\n   \
    \     return max_divisor;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3s62mn6p.java:42)\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        List<Integer> divisors = new ArrayList<>();\n\
    \        int largestDivisor = n;\n        while (n > 1) {\n            if (n %\
    \ 2 == 0) {\n                divisors.add(2);\n                n /= 2;\n     \
    \       } else {\n                divisors.add(1);\n                n /= 1;\n\
    \            }\n        }\n        // Add the remaining number\n        divisors.add(n);\n\
    \        Collections.sort(divisors, Collections.reverseOrder());\n        for\
    \ (Integer divisor : divisors) {\n            if (n % divisor == 0) {\n      \
    \          largestDivisor = divisor;\n                break;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010801
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return Collections.max(Arrays.stream(new\
    \ int[] {1, 2, 3, 5, 10, 20, 25, 40, 50, 100})\n                .filter(i -> n\
    \ % i == 0).boxed()\n                .collect(Collectors.toList()));\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpja2bi8ft.java:18)\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor = 1;\n        for(int\
    \ i = 2; i <= n; i++) {\n            if(n % i == 0) {\n                divisor\
    \ = i;\n            }\n        }\n        return divisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw3tp3ecb.java:22)\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        ArrayList<Integer> divisors = new\
    \ ArrayList<>();\n        while (n!=1) {\n            if (n % 2 == 0) {\n    \
    \            divisors.add(2);\n            }\n            n = n/2;\n        }\n\
    \        if (divisors.size() == 0) return 1;\n        return divisors.get(divisors.size()-1);\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvkm8_80o.java:26)\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDivisor = 1;\n        for\
    \ (int divisor = 2; divisor <= n; divisor++)\n        {\n            if (n % divisor\
    \ == 0) {\n                maxDivisor = divisor;\n                break;\n   \
    \         }\n        }\n        return maxDivisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn8oy30hu.java:24)\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Set<Integer> divisors = new HashSet<>();\n\
    \        int largestDivisor = -1;\n        // Find the largest divisor less than\
    \ or equal to n\n        for(int i = 1; i <= n; i++) {\n            while (divisors.contains(i))\
    \ {\n                divisors.remove(i);\n            }\n            if (divisors.isEmpty())\
    \ {\n                largestDivisor = i;\n                break;\n           \
    \ }\n            divisors.add(i);\n        }\n        return largestDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyowpfgo_.java:31)\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 0;\n\n    \
    \    if (n == 0 || n == 1) {\n            largestDivisor = n;\n        } else\
    \ if (n % 2 == 0) {\n            largestDivisor = largestDivisor(n / 2) + n /\
    \ 2;\n        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8w0vbed.java:23)\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Initialize a list to hold the\
    \ values found\n        List<Integer> divisors = new ArrayList<Integer>();\n \
    \       int largest = 1;\n        // Loop over all integers from 1 to n\n    \
    \    for (int i = 1; i <= n; i++) {\n            // If i divides n (i.e. i divides\
    \ n evenly), add it to the list\n            if (i % n == 0) {\n             \
    \   divisors.add(i);\n            }\n            // If i is a divisor, remove\
    \ it from our list\n            else if (divisors.contains(i)) {\n           \
    \     divisors.remove(i);\n            }\n        }\n        // If there are any\
    \ values in the list, return the largest\n        if (divisors.size() > 0) {\n\
    \            return Collections.max(divisors);\n        } else {\n           \
    \ return largest;\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj0ftpwc0.java:35)\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDiv = n;\n        for(int\
    \ i = 1; i < maxDiv; i++) {\n            if(n % i == 0) {\n                //\
    \ If n is divisible by i, it's possible to divide it\n                // by any\
    \ of the numbers in the range [2, i]\n                maxDiv = i;\n          \
    \  }\n        }\n        return maxDiv;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwjxnf7jd.java:26)\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        final int MODULO = 1000000007;\n\
    \        int result = 0;\n        for(int i = 1; i<=n; i++) {\n            if(n%i\
    \ == 0) {\n                result = i;\n            }\n            if(n%i==0 &&\
    \ n%(i*2)==0 && n%(i*3)==0 && n%(i*4)==0 && n%(i*5)==0 && n%(i*6)==0 && n%(i*7)==0)\
    \ {\n                result = i;\n            }\n            if(n%i==0 && n%(i*2)==0\
    \ && n%(i*3)==0 && n%(i*4)==0) {\n                result = i;\n            }\n\
    \            if(n%i==0 && n%(i*2)==0 && n%(i*3)==0) {\n                result\
    \ = i;\n            }\n            if(n%i==0 && n%(i*2)==0) {\n              \
    \  result = i;\n            }\n            if(n%i==0 && n%(i*2)==0) {\n      \
    \          result = i;\n            }\n            if(n%i==0 && n%(i*2)==0) {\n\
    \                result = i;\n            }\n            if(n%i==0 && n%(i*2)==0)\
    \ {\n                result = i;\n            }\n            if(n%i==0 && n%(i*2)==0)\
    \ {\n                result = i;\n            }\n            if(n%i==0 && n%(i*2)==0)\
    \ {\n                result = i;\n            }\n            if(n%i==0 && n%(i*2)==0)\
    \ {\n                result = i;\n            }\n            if(n%i==0 && n%(i*2)==0)\
    \ {\n                result = i;\n            }\n            if(n%i==0 && n%(i*2)==0)\
    \ {\n                result = i;\n            }\n            if(n%i==0 && n%(i*2)==0)\
    \ {\n                result = i;\n            }\n            if(n%i==0 && n%(i*2)==0)\
    \ {\n                result = i;\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2unqxfff.java:65)\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // initialize n to a sufficiently\
    \ large number\n        int max_divisor = Integer.MAX_VALUE;\n        // loop\
    \ while you cannot find any divisors less than n\n        while(max_divisor*max_divisor\
    \ < n) {\n            // loop from 0 to sqrt(n)\n            for(int i = 0; i*i\
    \ < n; i++) {\n                // if it divides n evenly, n is not a divisor of\
    \ max_divisor\n                if(n%i==0) {\n                    max_divisor =\
    \ i;\n                    break;\n                }\n            }\n        }\n\
    \        return max_divisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.largestDivisor(tmpjyh_ro6o.java:20)\n\tat Problem.main(tmpjyh_ro6o.java:29)\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int max_divisor = 0;\n        for\
    \ (int i = 1; i <= n; i++) {\n            int count = 0;\n            while (i\
    \ * i <= n) {\n                if (i % i == 0) {\n                    count++;\n\
    \                    break;\n                }\n                i++;\n       \
    \     }\n            if (count == 0) {\n                max_divisor = i;\n   \
    \         }\n        }\n        return max_divisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp63i__br1.java:30)\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int i = 1;\n        while (true)\
    \ {\n            if (n % i == 0) return i;\n            i++;\n        }\n}\n \
    \   public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1j33a4i4.java:22)\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        List<Integer> allDivisors = List.of(\n\
    \                1, 3, 7, 11, 15, 21, 31, 41, 51, 71, 91, 101, 113, 127, 131,\
    \ \n                137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193,\
    \ \n                193, 193, 193, 193, \n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpakpdukh9.java:34: error: illegal start of expression

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        \n        \n        \n        \n\
    \        return 0;\n        \n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbvxdoayu.java:21)\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor = 1;\n        int maxdivisor\
    \ = 1;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n\
    \                divisor *= maxdivisor;\n                maxdivisor = 1;\n   \
    \         } else {\n                maxdivisor *= maxdivisor;\n            }\n\
    \            divisor++;\n        }\n        return maxdivisor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpysusgs6q.java:29)\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = -1;\n     \
    \   int div = 1;\n        while (div <= n) {\n            int quotient = n / div;\n\
    \            if (quotient % 2 == 0) {\n                largestDivisor = div;\n\
    \                break;\n            }\n            div++;\n        }\n      \
    \  return largestDivisor;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz258g3nc.java:26)\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int result = 0;\n        while (n\
    \ > 1) {\n            int quotient = n / 2;\n            int reminder = n - quotient;\n\
    \            if (quotient % 2 == 0) {\n                result = quotient;\n  \
    \              if (reminder % 2 == 0) {\n                    result = quotient\
    \ + 1;\n                }\n            }\n            n = reminder;\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptb64b31e.java:28)\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return IntStream.rangeClosed(1,\
    \ n).filter(i -> n % i == 0).max().getAsInt();\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkc6x4e0u.java:16)\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int numDivisors = 0;\n        int\
    \ maxNumDivisor = n;\n        for(int i = 1; i <= n; i++) {\n            if(n\
    \ % i == 0) {\n                numDivisors++;\n                maxNumDivisor =\
    \ Math.max(maxNumDivisor, i);\n            }\n        }\n        return numDivisors\
    \ > maxNumDivisor ? numDivisors : maxNumDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphr6dlqxn.java:24)\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n <= 0)\n            throw new\
    \ IllegalArgumentException(\"n must be positive\");\n        int largest_divisor\
    \ = 0;\n        for(int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                if (largest_divisor < i) {\n                    largest_divisor\
    \ = i;\n                }\n            }\n        }\n        return largest_divisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkyjk93bi.java:26)\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Write your code here.\n     \
    \   int i = 1;\n        int div = 1;\n        while (i <= n) {\n            div\
    \ = div * i;\n            i++;\n        }\n        return div;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsk09j3kv.java:23)\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int[] arr = new int[n];\n      \
    \  Arrays.fill(arr,1);\n        Arrays.fill(arr,0);\n\n        int count = 0;\n\
    \n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 0)\n\
    \                continue;\n\n            int d = 1;\n            while (d < arr[i])\
    \ {\n                d *= 2;\n            }\n\n            if (arr[i] < d)\n \
    \               arr[i] = d;\n\n            count += 1;\n        }\n\n        return\
    \ count;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8umy2zci.java:37)\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int res = 1;\n        for (int i\
    \ = 3; i * i <= n; i++) {\n            if (n % i == 0) {\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \     if (n > res) { \n                    res = n; \n                }\n    \
    \        }\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxd90rtjz.java:29)\n"
  stdout: ''
  timestamp: 1660010798
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor = n;\n        while\
    \ (divisor > 1) {\n            int remainder = divisor % 2;\n            divisor\
    \ = n / 2;\n            if (remainder == 0) {\n                divisor = n;\n\
    \            }\n        }\n        return divisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // return n if n is divisible by\
    \ itself\n        if (n % 2 == 0)\n            return n;\n\n        int largestDivisor\
    \ = 1;\n        int maxDivisor = 2;\n\n        // loop through all the divisors\
    \ \n        while ((maxDivisor < n) && (n % maxDivisor == 0)) {\n            largestDivisor\
    \ *= maxDivisor;\n            maxDivisor++;\n        }\n        return largestDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ps2mioq.java:30)\n"
  stdout: ''
  timestamp: 1660010798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest_divisor = 1;\n     \
    \   for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n          \
    \      largest_divisor = i;\n            }\n        }\n        return largest_divisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz77gxqrf.java:22)\n"
  stdout: ''
  timestamp: 1660010798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor = 0;\n        for (divisor\
    \ += n; divisor % 2 == 0; divisor += n)\n            ;\n        return divisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz6x8x870.java:19)\n"
  stdout: ''
  timestamp: 1660010798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return IntStream.range(2, (int)\
    \ Math.sqrt(n))\n                .filter( x -> n % x == 0)\n                .max().orElse(0);\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpftdtnx2z.java:18)\n"
  stdout: ''
  timestamp: 1660010798
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int max = Integer.MIN_VALUE;\n \
    \       for(int i = 1; i < n; i++) {\n            if((n%i)==0) max = i;\n    \
    \    }\n        return max;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010798
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 1;\n      \
    \  while (largestDivisor <= n) {\n            if (n % largestDivisor == 0) {\n\
    \                largestDivisor++;\n            }\n        }\n        return largestDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // If n is negative, return -1\n\
    \        if (n < 0) return -1;\n        // Initialize result to 0\n        int\
    \ result = 0;\n        // For each divisor of n that is larger than n\n      \
    \  for (int divisor = 1; divisor <= n; divisor++) {\n            // If n is a\
    \ divisor of divisor, add the current divisor to result\n            if (n % divisor\
    \ == 0) {\n                result = result + divisor;\n                // Stop\
    \ looping after result has been found\n                break;\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprms5zzbr.java:31)\n"
  stdout: ''
  timestamp: 1660010798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n < 2) {\n            return\
    \ 1;\n        }\n        // If n is even, return the smallest number that divides\
    \ n evenly smaller than n\n        if (n % 2 == 0) {\n            return smallestDivisor(n\
    \ - 1);\n        }\n        // If n is odd, return the largest number that divides\
    \ n evenly smaller than n\n        return largestDivisor(n - 1);\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0cythomi.java:18: error: cannot find symbol\n            return\
    \ smallestDivisor(n - 1);\n                   ^\n  symbol:   method smallestDivisor(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        ArrayList list = new ArrayList();\n\
    \        int count = 0;\n        int maxNum;\n        for (int i = 1; i < n; ++i)\
    \ {\n            if (n % i == 0) {\n                list.add(new Integer(i));\n\
    \                ++count;\n            }\n        }\n        maxNum = list.get(list.size()\
    \ - 1);\n        for (int i = list.size() - 2; i >= 0; --i) {\n            if\
    \ (list.get(i).intValue() % maxNum == 0) {\n                maxNum = list.get(i);\n\
    \            }\n        }\n        return maxNum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprdl8s6jo.java:18: warning: [removal] Integer(int) in Integer has\
    \ been deprecated and marked for removal\n                list.add(new Integer(i));\n\
    \                         ^\n/tmp/tmprdl8s6jo.java:22: error: incompatible types:\
    \ Object cannot be converted to int\n        maxNum = list.get(list.size() - 1);\n\
    \                         ^\n/tmp/tmprdl8s6jo.java:24: error: cannot find symbol\n\
    \            if (list.get(i).intValue() % maxNum == 0) {\n                   \
    \        ^\n  symbol:   method intValue()\n  location: class Object\n/tmp/tmprdl8s6jo.java:25:\
    \ error: incompatible types: Object cannot be converted to int\n             \
    \   maxNum = list.get(i);\n                                 ^\nNote: /tmp/tmprdl8s6jo.java\
    \ uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked\
    \ for details.\n3 errors\n1 warning\n"
  stdout: ''
  timestamp: 1660010798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Create a list to store all the\
    \ divisors\n        List<Integer> divisors = new ArrayList<>();\n\n        //\
    \ A simple for loop to generate divisors\n        for (int i = 1; i <= n; i++)\
    \ {\n            // If n is divisible by i\n            if (n % i == 0) {\n  \
    \              // Add the value of i to divisors\n                divisors.add(i);\n\
    \            }\n        }\n\n        // Sort divisors in descending order\n  \
    \      Collections.sort(divisors, Collections.reverseOrder());\n\n        // Get\
    \ the first element\n        return divisors.get(0);\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwbe66yl4.java:32)\n"
  stdout: ''
  timestamp: 1660010799
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int result = 1;\n        for (int\
    \ i = 1; i <= n; ++i) {\n            int d = 1;\n            while (n % i == 0)\
    \ {\n                n /= i;\n                d *= i;\n            }\n       \
    \     if (d > result) {\n                result = d;\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int i = 1;\n        int m = 1;\n\
    \        int count = 0;\n        while (i*i <= n) {\n            if (n % i ==\
    \ 0) {\n                m = (i*i);\n                count++;\n               \
    \ if (count > n) {\n                    i = m / i;\n                    count\
    \ = 1;\n                }\n            }\n            i++;\n        }\n      \
    \  return i;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm17gbw5l.java:30)\n"
  stdout: ''
  timestamp: 1660010798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Set<Integer> set = new TreeSet<>();\n\
    \        while(true) {\n            int div = n/2;\n            while(div > 0)\
    \ {\n                if(n % div == 0)\n                    break;\n          \
    \      div--;\n            }\n            if(div == 0)\n                set.add(n);\n\
    \            else\n                set.add(div);\n            n--;\n        }\n\
    \        int largest = -1;\n        for(Integer i : set)\n            if(i.intValue()\
    \ > largest)\n                largest = i.intValue();\n        return largest;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0sejth5t.java:27: error: unreachable statement\n        int largest\
    \ = -1;\n            ^\n1 error\n"
  stdout: ''
  timestamp: 1660010798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n%2 == 0) return 2;\n      \
    \  int result = 1;\n        while (true) {\n            int d = n%d;\n       \
    \     if (d == 0) {\n                if (result > n) result = n;\n           \
    \     return result;\n            }\n            n=d;\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphvu9nodh.java:16: error: variable d might not have been initialized\n\
    \            int d = n%d;\n                      ^\n1 error\n"
  stdout: ''
  timestamp: 1660010799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDivisor = 1;\n        int\
    \ maxMultiple = 1;\n\n        // Search for largest divisor less than n\n    \
    \    while ((maxMultiple *= maxDivisor) < n) {\n            maxDivisor += 2;\n\
    \        }\n\n        // If n is a perfect square, then it is also a divisor\n\
    \        // of largest divisor less than n\n        if ((maxMultiple * maxMultiple)\
    \ == n) {\n            maxDivisor++;\n        }\n\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3rpvsptz.java:30)\n"
  stdout: ''
  timestamp: 1660010799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 1;\n      \
    \  // Loop through all integers from 1 to n\n        for (int i = 1; i <= n; i++)\
    \ {\n            // If i is evenly divisible by largestDivisor\n            if\
    \ (i % 2 == 0 && i % largestDivisor == 0) {\n                // Set the new largestDivisor\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzoo0zkh4.java:25)\n"
  stdout: ''
  timestamp: 1660010799
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor, divisorMax = 1;\n \
    \       for (int i = 1; i <= n; i++) {\n            divisor = i;\n           \
    \ while (divisor < n) {\n                if (n % divisor == 0) {\n           \
    \         divisorMax = divisor;\n                    break;\n                }\n\
    \                divisor++;\n            }\n        }\n        return divisorMax;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Map<Integer, Integer> divisors =\
    \ new HashMap<>();\n        divisors.put(1, 1);\n        divisors.put(2, 1);\n\
    \        divisors.put(3, 2);\n        divisors.put(5, 1);\n        divisors.put(11,\
    \ 1);\n        divisors.put(13, 2);\n        divisors.put(17, 2);\n        divisors.put(19,\
    \ 3);\n        divisors.put(23, 2);\n        divisors.put(29, 3);\n        divisors.put(31,\
    \ 3);\n        divisors.put(37, 3);\n        divisors.put(41, 3);\n        divisors.put(47,\
    \ 3);\n        divisors.put(53, 4);\n        divisors.put(59, 4);\n        divisors.put(61,\
    \ 4);\n        divisors.put(67, 4);\n        divisors.put(71, 4);\n        divisors.put(75,\
    \ 4);\n        divisors.put(79, 5);\n        divisors.put(85, 3);\n        divisors.put(89,\
    \ 3);\n        divisors.put(97, 3);\n        divisors.put(103, 3);\n        divisors.put(109,\
    \ 3);\n        divisors.put(115, 3);\n        divisors.put(121, 3);\n        divisors.put(127,\
    \ 3);\n        divisors.put(131, 3);\n        divisors.put(137, 3);\n        divisors.put(143,\
    \ 3);\n        divisors.put(149, 3);\n        divisors.put(157, 3);\n        divisors.put(163,\
    \ 3);\n        divisors.put(169, 3);\n        divisors.put(175, 3);\n        divisors.put(181,\
    \ 3);\n        divisors.put(191, 3);\n        divisors.put(197, 3);\n        divisors.put(203,\
    \ 3);\n        divisors.put(210, 3);\n        divisors.put(217, 3);\n        divisors.put(223,\
    \ 3);\n        divisors.put(229, 3);\n        divisors.put(245, 3);\n        divisors.put(251,\
    \ 3);\n        divisors.put(257, 3);\n        divisors.put(263, 3);\n        divisors.put(269,\
    \ 3);\n        divisors.put(275, 3);\n        divisors.put(281, 3);\n        divisors.put(287,\
    \ 3);\n        divisors.put(293, 3);\n        divisors.put(299, 3);\n        divisors.put(305,\
    \ 3);\n        divisors.put(311, 3);\n        divisors.put(317, 3);\n        divisors.put(323,\
    \ 3);\n        divisors.put(329, 3);\n        divisors.put(335, 3);\n        divisors.put(341,\
    \ 3);\n        divisors.put(347, 3);\n        divisors.put(353, 3);\n        divisors.put(359,\
    \ 3);\n\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp5b1fswn9.java:80: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660010799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 0;\n      \
    \  for (int x = n; x > 0; x--) {\n            if (n % x == 0) {\n            \
    \    if (x % 2 == 0) {\n                    largestDivisor = x;\n            \
    \        break;\n                }\n            }\n        }\n        return largestDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt0_ni1nd.java:25)\n"
  stdout: ''
  timestamp: 1660010799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest = n;\n        int count\
    \ = 0;\n        while (n > 1) {\n            while (n % 2 == 0 && n != 1) {\n\
    \                n /= 2;\n                count++;\n            }\n          \
    \  while (n % 3 == 0 && n != 1) {\n                n /= 3;\n                count++;\n\
    \            }\n            while (n % 5 == 0 && n != 1) {\n                n\
    \ /= 5;\n                count++;\n            }\n            while (n % 7 ==\
    \ 0 && n != 1) {\n                n /= 7;\n                count++;\n        \
    \    }\n            if (n > 1) {\n                if (count > largest) {\n   \
    \                 largest = count;\n                }\n                count =\
    \ 1;\n            }\n        }\n        return largest;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1qujctkq.java:42)\n"
  stdout: ''
  timestamp: 1660010800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest_divisor = 1;\n     \
    \   // For all divisors k\n        for (int k = 1; k <= n; k++) {\n          \
    \  // If (n / k) divides n evenly, then k is the largest\n            if (n %\
    \ k == 0) {\n                if (k >= largest_divisor) {\n                   \
    \ largest_divisor = k;\n                }\n            }\n        }\n        return\
    \ largest_divisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpteh8v764.java:26)\n"
  stdout: ''
  timestamp: 1660010800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int result = n;\n        List<Integer>\
    \ numbers = new ArrayList<>();\n        while(n>0){\n            numbers.add(n\
    \ % 10);\n            n = n/10;\n        }\n        Collections.sort(numbers);\n\
    \        for(int i = 0; i<numbers.size();i++){\n            if(numbers.get(i)\
    \ % 2 == 0 && numbers.get(i) > result){\n                result = numbers.get(i);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpckcr5ro_.java:28)\n"
  stdout: ''
  timestamp: 1660010800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Write your code here\n      \
    \  List<Integer> divisors = Arrays.stream(new int[] { 1, n })\n              \
    \  .filter(i -> n % i == 0)\n                .boxed()\n                .collect(Collectors.toList());\n\
    \        return Collections.max(divisors);\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp37p8ipvw.java:21)\n"
  stdout: ''
  timestamp: 1660010800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // write your code in Java SE 8\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpk649sr5q.java:14: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660010800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Map<Integer, Integer> counter =\
    \ new HashMap<>();\n        // Count the number of divisors for every number between\
    \ 1 and n\n        for (int divisor = 1; divisor <= n; divisor++) {\n        \
    \    if (n % divisor == 0) {\n                Integer count = counter.get(divisor);\n\
    \                if (count == null) {\n                    count = 0;\n      \
    \          }\n                count = count + 1;\n                counter.put(divisor,\
    \ count);\n            }\n        }\n        // Find the largest key in the map\
    \ which value is 1\n        int largestKey = 0;\n        int largestValue = 0;\n\
    \        for (Map.Entry<Integer, Integer> entry : counter.entrySet()) {\n    \
    \        if (entry.getValue() == 1) {\n                if (entry.getKey() > largestValue)\
    \ {\n                    largestKey = entry.getKey();\n                    largestValue\
    \ = entry.getValue();\n                }\n            }\n        }\n        //\
    \ Return the key which has the largest value\n        return largestKey;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptctmi998.java:40)\n"
  stdout: ''
  timestamp: 1660010800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        int maxDivisor = 0;\n        if (n % 2 == 0) {\n    \
    \        maxDivisor = largestDivisor(n / 2);\n        }\n        if (n % 4 ==\
    \ 0) {\n            maxDivisor = Math.max(maxDivisor, largestDivisor(n / 4));\n\
    \        }\n        if (n % 8 == 0) {\n            maxDivisor = Math.max(maxDivisor,\
    \ largestDivisor(n / 8));\n        }\n        return maxDivisor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfoapyi3l.java:29)\n"
  stdout: ''
  timestamp: 1660010800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor = 1;\n        while\
    \ (n % divisor != 0) {\n            divisor++;\n        }\n        int largest_divisor\
    \ = 1;\n        while (divisor <= n) {\n            largest_divisor *= divisor;\n\
    \            divisor++;\n        }\n        return largest_divisor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3t7cihil.java:25)\n"
  stdout: ''
  timestamp: 1660010800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int res = 1;\n        Set<Integer>\
    \ primes = Sets.newHashSet();\n        for(int i = 1; i < n; ++i) {\n        \
    \    if(n%i == 0) {\n                res = i;\n                primes.add(i);\n\
    \            }\n        }\n        if(primes.isEmpty()) {\n            return\
    \ res;\n        }\n        Set<Integer> divs = Sets.newHashSet();\n        for(int\
    \ prime : primes) {\n            for(int i = 1; i <= n/prime; ++i) {\n       \
    \         divs.add(i);\n            }\n        }\n        int max = -1;\n    \
    \    for(Integer div : divs) {\n            if(max < div) max = div;\n       \
    \ }\n        return max;\n}\n    public static void main(String[] args) {\n  \
    \  assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ygkc9dz.java:14: error: cannot find symbol\n        Set<Integer>\
    \ primes = Sets.newHashSet();\n                              ^\n  symbol:   variable\
    \ Sets\n  location: class Problem\n/tmp/tmp7ygkc9dz.java:24: error: cannot find\
    \ symbol\n        Set<Integer> divs = Sets.newHashSet();\n                   \
    \         ^\n  symbol:   variable Sets\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Return 0 if n is prime\n    \
    \    if (n == 1)\n            return 0;\n        \n        int result = n;\n \
    \       \n        // For each number from 2 to n/2, check if n is divisible by\
    \ that number\n        for (int i = 3; i <= n / i; i++) {\n            if (n %\
    \ i == 0) {\n                result = Math.max(result, i);\n            }\n  \
    \      }\n        \n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw_8pk0e9.java:29)\n"
  stdout: ''
  timestamp: 1660010800
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return IntStream.range(1, n).filter(i\
    \ -> n % i == 0).max().getAsInt();\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest_divisor = n;\n     \
    \   for (int div = 1; div <= n; div++) {\n            if (n % div == 0) {\n  \
    \              if (largest_divisor < div) {\n                    largest_divisor\
    \ = div;\n                }\n            }\n        }\n        return largest_divisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9rfd82kr.java:24)\n"
  stdout: ''
  timestamp: 1660010800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        boolean evenDivisor = false;\n \
    \       int result = 1;\n\n        // Get all the divisors\n        Set<Integer>\
    \ divisors = getDivisors(n);\n\n        // Get the largest one\n        OptionalInt\
    \ result = divisors.stream()\n                // Filter divisors according to\
    \ evenness (if any)\n                .filter(divisor -> divisor % 2 == 0)\n  \
    \              .filter(divisor -> divisor < n)\n                // Reduce all\
    \ to one\n                .reduce(0, Integer::max);\n\n        // If divisor is\
    \ smaller than n\n        if (result.isPresent()) {\n            int divisor =\
    \ result.getAsInt();\n            if (divisor < n) {\n                // If divisor\
    \ is smaller than n, make it the new max\n                evenDivisor = true;\n\
    \                result = divisor;\n            }\n        }\n\n        // If\
    \ evenness is not defined, return the result\n        if (evenDivisor == false)\
    \ {\n            return result;\n        }\n\n        // Otherwise return zero\n\
    \        return 0;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsc_mctqf.java:17: error: cannot find symbol\n        Set<Integer>\
    \ divisors = getDivisors(n);\n                                ^\n  symbol:   method\
    \ getDivisors(int)\n  location: class Problem\n/tmp/tmpsc_mctqf.java:20: error:\
    \ variable result is already defined in method largestDivisor(int)\n        OptionalInt\
    \ result = divisors.stream()\n                    ^\n/tmp/tmpsc_mctqf.java:25:\
    \ error: incompatible types: Integer cannot be converted to OptionalInt\n    \
    \            .reduce(0, Integer::max);\n                       ^\n/tmp/tmpsc_mctqf.java:33:\
    \ error: incompatible types: int cannot be converted to OptionalInt\n        \
    \        result = divisor;\n                         ^\n/tmp/tmpsc_mctqf.java:39:\
    \ error: incompatible types: OptionalInt cannot be converted to int\n        \
    \    return result;\n                   ^\n5 errors\n"
  stdout: ''
  timestamp: 1660010800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Create a list that contains the\
    \ numbers 1 to n with no duplicates\n        List<Integer> numbers = IntStream.range(1,\
    \ n + 1)\n                                        .boxed()\n                 \
    \                       .distinct()\n                                        .collect(Collectors.toList());\n\
    \        // Create a list that contains all factors of n\n        List<Integer>\
    \ factors = IntStream.range(1, n + 1).boxed().filter(i -> n % i == 0).collect(Collectors.toList());\n\
    \        // Return the first number in the list that doesn't have a factor\n \
    \       // smaller than itself, or 0 if there are no such factors.\n        return\
    \ factors.stream().filter(number -> !numbers.contains(number)).findFirst().orElse(0);\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8dwwcw1a.java:25)\n"
  stdout: ''
  timestamp: 1660010801
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n <= 0) return 0;\n        if\
    \ (n == 1) return 1;\n        ArrayList<Integer> divisors = new ArrayList<>();\n\
    \        for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n      \
    \          divisors.add(i);\n            }\n        }\n        return divisors.stream()\n\
    \                .sorted((a, b) -> Integer.compare(b, a))\n                .max(Integer::compareTo)\n\
    \                .orElse(0);\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010801
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Set<Integer> divides = new HashSet<Integer>();\n\
    \        for (; n > 1; n--) {\n            int i = 2;\n            while (i *\
    \ i < n) {\n                if (n % i == 0) {\n                    break;\n  \
    \              }\n                i += 2;\n            }\n            if (i==n)\
    \ {\n                return n;\n            }\n            divides.add(i);\n \
    \       }\n        int max = 1;\n        for (int i : divides) {\n           \
    \ if (max < i) {\n                max = i;\n            }\n        }\n       \
    \ return max;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiz95cjao.java:36)\n"
  stdout: ''
  timestamp: 1660010801
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Integer largest = Integer.valueOf(1);\n\
    \        ArrayList divisors = new ArrayList();\n\n        for (int i = 2; i <=\
    \ n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n\
    \                if (i > (largest % divisors.last())) largest = i;\n         \
    \   }\n        }\n        return largest;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphovxwtv9.java:19: error: cannot find symbol\n                if\
    \ (i > (largest % divisors.last())) largest = i;\n                           \
    \                ^\n  symbol:   method last()\n  location: variable divisors of\
    \ type ArrayList\nNote: /tmp/tmphovxwtv9.java uses unchecked or unsafe operations.\n\
    Note: Recompile with -Xlint:unchecked for details.\n1 error\n"
  stdout: ''
  timestamp: 1660010801
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDivisor = 1;\n        for\
    \ (int d = 2; d < n; d++) {\n            if (n % d == 0) {\n                maxDivisor\
    \ = d;\n            }\n        }\n        return maxDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010801
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDivisor = 0;\n        int\
    \ divisor = 1;\n        while(divisor <= n) {\n            if(n%divisor == 0)\
    \ {\n                maxDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7rvc6uy7.java:24)\n"
  stdout: ''
  timestamp: 1660010801
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int[] divisors = new int[n+1];\n\
    \        for (int i = 1; i <= n; i++) {\n            if (i%2 == 0) {\n       \
    \         divisors[i] = i;\n            }\n            else {\n              \
    \  int lastDivisor = 0;\n                for (int j = i; j > 1; j--) {\n     \
    \               if (i%j == 0) {\n                        lastDivisor = j;\n  \
    \                  }\n                }\n                divisors[i] = lastDivisor;\n\
    \            }\n        }\n        return divisors[n];\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0f7t6tny.java:31)\n"
  stdout: ''
  timestamp: 1660010801
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return (int) StreamSupport.stream(\n\
    \                Arrays.stream(new int[] {n}))\n                .max(Comparator.comparingInt(x\
    \ -> x / n)).get();\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cpjueja.java:13: error: no suitable method found for stream(IntStream)\n\
    \        return (int) StreamSupport.stream(\n                                \
    \  ^\n    method StreamSupport.<T#1>stream(Spliterator<T#1>,boolean) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method StreamSupport.<T#2>stream(Supplier<? extends\
    \ Spliterator<T#2>>,int,boolean) is not applicable\n      (cannot infer type-variable(s)\
    \ T#2\n        (actual and formal argument lists differ in length))\n  where T#1,T#2\
    \ are type-variables:\n    T#1 extends Object declared in method <T#1>stream(Spliterator<T#1>,boolean)\n\
    \    T#2 extends Object declared in method <T#2>stream(Supplier<? extends Spliterator<T#2>>,int,boolean)\n\
    /tmp/tmp7cpjueja.java:15: error: bad operand types for binary operator '/'\n \
    \               .max(Comparator.comparingInt(x -> x / n)).get();\n           \
    \                                         ^\n  first type:  Object\n  second type:\
    \ int\n2 errors\n"
  stdout: ''
  timestamp: 1660010801
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        ArrayList<Integer> divisors = new\
    \ ArrayList<>();\n\n        // First loop finds divisors from 1 to n\n       \
    \ for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n            \
    \    divisors.add(i);\n            }\n        }\n\n        // Second loop finds\
    \ divisors of divisors\n        for (int j = 0; j < divisors.size(); j++) {\n\
    \            for (int k = divisors.get(j); k < n; k += divisors.get(j)) {\n  \
    \              if (n % k == 0) {\n                    divisors.add(k, j + 1);\n\
    \                    break;\n                }\n            }\n        }\n\n \
    \       // Third loop finds the divisor that divides n evenly, smaller\n     \
    \   // than n\n        for (Integer divisor : divisors) {\n            if (divisor\
    \ > n) {\n                return divisor;\n            }\n        }\n        return\
    \ n;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010806
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest = n;\n        int i\
    \ = 9;\n        do {\n            int div = n/div;\n            if(div == 1) largest\
    \ = div;\n            else if(div > largest) largest = div;\n            n = i*i;\n\
    \            i++;\n        } while(n > 1);\n        return largest;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1pn1_fkb.java:16: error: variable div might not have been initialized\n\
    \            int div = n/div;\n                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660010801
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Use memoization, since this method\
    \ is called many times with the same input\n        Map<Integer, Integer> cache\
    \ = new HashMap<>();\n        List<Integer> divisors = new ArrayList<>();\n\n\
    \        int value = n;\n        while (value != 1) {\n            int divisor\
    \ = value % 2;\n            divisors.add(divisor);\n            value = value\
    \ / 2;\n        }\n\n        for (int i = 0; i < divisors.size(); ++i) {\n   \
    \         Integer divisor = divisors.get(i);\n            if (divisors.contains(divisor))\
    \ {\n                if (cache.containsKey(divisor)) {\n                    Integer\
    \ max = cache.get(divisor);\n                    cache.put(divisor, Math.max(value,\
    \ max));\n                } else {\n                    cache.put(divisor, value);\n\
    \                }\n            }\n        }\n\n        int max = 0;\n       \
    \ for (Integer key : cache.keySet()) {\n            max = Math.max(max, cache.get(key));\n\
    \        }\n        return max;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqwr8m8h.java:45)\n"
  stdout: ''
  timestamp: 1660010801
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int[] arr = new int[n];\n      \
    \  Arrays.fill(arr, 0);\n        Arrays.fill(arr, 1);\n        for(int i=2; i<n;\
    \ i++) {\n            int count = 0;\n            for(int j=1; j<=n; j++) {\n\
    \                if(n%j==0) {\n                    count++;\n                \
    \    arr[count] = j;\n                    break;\n                }\n        \
    \    }\n        }\n        int index = Arrays.stream(arr).filter(i -> i==1).findFirst().getAsInt();\n\
    \        if(index>=0)\n            return arr[index];\n        else\n        \
    \    return -1;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwf7zfq_e.java:35)\n"
  stdout: ''
  timestamp: 1660010801
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int max_divisor = 1;\n        int\
    \ max_divisor_size = n;\n        for (int i = 1; i < n; i++) {\n            if\
    \ (n % i == 0) {\n                max_divisor = i;\n                max_divisor_size\
    \ = n;\n            }\n        }\n        return max_divisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010801
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Create a list to store all numbers\
    \ smaller than n\n        List<Integer> smallerList = new ArrayList<>();\n   \
    \     // Create a list to store all numbers divisible by n\n        List<Integer>\
    \ divisorList = new ArrayList<>();\n        // For every number smaller than n\n\
    \        while (smallerList.size() < n) {\n            // If n is divisible by\
    \ any number smaller than n, then add it to the divisor list\n            if (divisorList.contains(n))\
    \ {\n                divisorList.add(n);\n            }\n            // Else,\
    \ add it to the smaller list\n            else {\n                smallerList.add(n);\n\
    \            }\n        }\n        // Return the largest number in the divisor\
    \ list\n        return Collections.max(divisorList);\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.ArrayList$Itr.next(ArrayList.java:970)\n\
    \tat java.base/java.util.Collections.max(Collections.java:674)\n\tat Problem.largestDivisor(tmpuc8r20a8.java:29)\n\
    \tat Problem.main(tmpuc8r20a8.java:32)\n"
  stdout: ''
  timestamp: 1660010801
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Set<Integer> nSet = new HashSet<>();\n\
    \n        for (int divisor = 2; divisor < n; divisor++) {\n            if (n %\
    \ divisor == 0) {\n                nSet.add(divisor);\n            }\n       \
    \ }\n\n        Set<Integer> largestDivisors = nSet.stream().filter(divisor ->\
    \ n % divisor == 0).collect(Collectors.toSet());\n\n        return largestDivisors.isEmpty()\
    \ ? 0 : largestDivisors.iterator().next();\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp32scuqsp.java:26)\n"
  stdout: ''
  timestamp: 1660010801
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        final int MAX_DIVISIONS = 10000;\n\
    \        int divisor = n;\n        int maximum = n;\n        boolean found = false;\n\
    \        int counter = 0;\n        List<Integer> divisors = new ArrayList<>();\n\
    \n        while (divisor != 1) {\n            divisors.add(divisor);\n       \
    \     if (found) {\n                divisor = divisors.stream().distinct().filter(d\
    \ -> d % divisor == 0).count() + 1;\n            } else {\n                divisor\
    \ = divisors.stream().distinct().filter(d -> d % divisor == 0).count();\n    \
    \        }\n            counter++;\n            if (divisor == 1) {\n        \
    \        found = true;\n            }\n            if (counter > MAX_DIVISIONS)\
    \ {\n                return maximum;\n            }\n            maximum = divisor;\n\
    \        }\n        return maximum;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5vdfr2b.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n                divisor = divisors.stream().distinct().filter(d\
    \ -> d % divisor == 0).count() + 1;\n                                        \
    \                                                     ^\n/tmp/tmpe5vdfr2b.java:25:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \            divisor = divisors.stream().distinct().filter(d -> d % divisor ==\
    \ 0).count();\n                                                              \
    \                            ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010801
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDivisor = 0;\n        for\
    \ (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                if\
    \ (maxDivisor < i) maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3axuac2s.java:22)\n"
  stdout: ''
  timestamp: 1660010801
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Set<Integer> divisors = new HashSet<>();\n\
    \        for (int divisor = 1; divisor <= n; divisor++) {\n            if (n %\
    \ divisor == 0) {\n                divisors.add(divisor);\n            }\n   \
    \     }\n        if (divisors.isEmpty()) {\n            return 0;\n        }\n\
    \        Collections.sort(divisors);\n        return divisors.get(divisors.size()\
    \ - 1);\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxbb3udj.java:22: error: no suitable method found for sort(Set<Integer>)\n\
    \        Collections.sort(divisors);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<Integer> cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmplxbb3udj.java:23: error: cannot find symbol\n        return\
    \ divisors.get(divisors.size() - 1);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable divisors of type Set<Integer>\n2 errors\n"
  stdout: ''
  timestamp: 1660010801
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        List<Integer> list = new ArrayList<>();\n\
    \        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n      \
    \          list.add(i);\n            }\n        }\n        int max = list.get(0);\n\
    \        for (int i = 1; i < list.size(); i++) {\n            if (list.get(i)\
    \ > max) {\n                max = list.get(i);\n            }\n        }\n   \
    \     return max;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.largestDivisor(tmpi8se4psa.java:19)\n\tat Problem.main(tmpi8se4psa.java:28)\n"
  stdout: ''
  timestamp: 1660010802
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Iterate through all divisors\
    \ until finding the one that's smaller than n\n        for (int i = 1; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                n = n / i;\n        \
    \        return i;\n            }\n        }\n\n        // No divisors exist smaller\
    \ than n evenly\n        return -1;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpan9fcpnf.java:27)\n"
  stdout: ''
  timestamp: 1660010802
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = n;\n      \
    \  if (n <= 0) {\n            return largestDivisor;\n        }\n        // If\
    \ n is evenly divisible by 1, return it directly\n        if (n%2 == 0) {\n  \
    \          return n;\n        }\n        // Start searching from the second divisor\
    \ of n\n        for (int i = 3; i <= Math.sqrt(n); i++) {\n            if (n%i\
    \ == 0) {\n                largestDivisor = i;\n                break;\n     \
    \       }\n        }\n        return largestDivisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5uyb52kw.java:31)\n"
  stdout: ''
  timestamp: 1660010802
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return (int) Math.ceil(Math.sqrt(n)\
    \ / 2);\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxv0l0l6j.java:17)\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // TODO: Implement me\n        return\
    \ 1;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkvklc5ht.java:19)\n"
  stdout: ''
  timestamp: 1660010802
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return Collections.max(Arrays.stream(factors(n)).map(Integer::intValue).filter(i\
    \ -> i % 2 == 0).collect(Collectors.toList()));\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqkfcl0yl.java:13: error: cannot find symbol\n        return Collections.max(Arrays.stream(factors(n)).map(Integer::intValue).filter(i\
    \ -> i % 2 == 0).collect(Collectors.toList()));\n                            \
    \                 ^\n  symbol:   method factors(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010802
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // TODO Complete me!\n        int\
    \ largestNumber = 0;\n        for(int i = 1; i < n; i++) {\n            if(n%i\
    \ == 0) {\n                largestNumber = i;\n                break;\n      \
    \      }\n        }\n        return largestNumber;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ckdx7ql.java:26)\n"
  stdout: ''
  timestamp: 1660010802
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Using a LinkedList to track our\
    \ divisors\n        LinkedList<Integer> divisors = new LinkedList<>();\n\n   \
    \     // Keep looping till we haven't found any divisors\n        // We start\
    \ by looping up to the largest number that can divide n\n        // It starts\
    \ at n and ends at 1 and adds 1 to each time\n        for (int i = Integer.MIN_VALUE;\
    \ i <= n; i++) {\n            // If n is divisible by the current number in the\
    \ loop, add it to our list of divisors\n            // If it's not, add n - i\
    \ to our list of divisors\n            if (i % n == 0) {\n                divisors.add(i);\n\
    \            }\n\n            // Check if we can find the next bigger divisor\n\
    \            // If it is, we end the loop (we already found the next biggest divisor)\n\
    \            // Otherwise, we increment n by 1\n            int nextBiggerDivisor\
    \ = n + i;\n            if (nextBiggerDivisor > divisors.size()) {\n         \
    \       break;\n            }\n        }\n\n        // If no divisors were found,\
    \ we return the largest number\n        // that divides n evenly, smaller than\
    \ n\n        if (divisors.isEmpty()) {\n            return n;\n        } else\
    \ {\n            return Math.max(divisors.lastElement(), n);\n        }\n}\n \
    \   public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_656jwj.java:40: error: cannot find symbol\n            return\
    \ Math.max(divisors.lastElement(), n);\n                                    ^\n\
    \  symbol:   method lastElement()\n  location: variable divisors of type LinkedList<Integer>\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010802
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 0;\n      \
    \  for (int divisor = 2; divisor < n; divisor++) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        }\n\
    \        return largestDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1oxm3xes.java:22)\n"
  stdout: ''
  timestamp: 1660010802
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Using Arrays.asList to eliminate\
    \ need to specify size of array\n        List<Integer> divisors = Arrays.asList(2,\
    \ 3, 5, 7);\n        int[] dividend = new int[n];\n        Arrays.fill(dividend,\
    \ 1);\n        int maxDivisor = divisors.get(0);\n        int index = 0;\n   \
    \     boolean isDivisible = true;\n        for (int d : divisors) {\n        \
    \    for (int i = dividend.length - 1; i >= 0; i--) {\n                if (dividend[i]\
    \ % d == 0) {\n                    dividend[i] = dividend[i] / d;\n          \
    \          isDivisible = false;\n                    break;\n                }\n\
    \            }\n            if (isDivisible) {\n                maxDivisor = Math.max(maxDivisor,\
    \ dividend[0]);\n            }\n            index++;\n        }\n        return\
    \ maxDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpox8kazi4.java:36)\n"
  stdout: ''
  timestamp: 1660010802
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        List<Integer> divs = List.of(1,\
    \ 2, 5, 7);\n        \n        Integer largest = Integer.MIN_VALUE;\n        for\
    \ (int d : divs) {\n            if (n % d == 0) {\n                largest = d;\n\
    \            }\n        }\n        \n        return largest;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpggff_vzw.java:26)\n"
  stdout: ''
  timestamp: 1660010802
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int i = 2;\n        int max = i;\n\
    \        while (i < n && n % i == 0) {\n            max = i;\n            i++;\n\
    \        }\n        return max;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcu5hng6b.java:22)\n"
  stdout: ''
  timestamp: 1660010802
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return Arrays.stream(new int[] {n})\n\
    \                .filter(i -> i%2 == 0 && i%3 == 0)\n                .max()\n\
    \                .getAsInt();\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No value\
    \ present\n\tat java.base/java.util.OptionalInt.getAsInt(OptionalInt.java:130)\n\
    \tat Problem.largestDivisor(tmpdhvdg9nf.java:16)\n\tat Problem.main(tmpdhvdg9nf.java:19)\n"
  stdout: ''
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // find divisor for n\n        for(int\
    \ divisor : divisors(n)) {\n            if((n % divisor) == 0) {\n           \
    \     return divisor;\n            }\n        }\n\n        return -1;\n}\n   \
    \ public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpie66x2i3.java:14: error: cannot find symbol\n        for(int divisor\
    \ : divisors(n)) {\n                          ^\n  symbol:   method divisors(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010802
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 0) return 0;\n\n      \
    \  List<Integer> factors = Arrays.asList(new int[n]);\n        \n        for (int\
    \ i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n          \
    \      factors.set(0, i);\n                \n                while (n % i == 0)\
    \ {\n                    factors.set(0, i);\n                    n /= i;\n   \
    \             }\n            }\n        }\n\n        int max = 0;\n        int\
    \ index = 0;\n\n        for (int factor : factors) {\n            if (factor >\
    \ max)\n                max = factor;\n            else if (factor == max)\n \
    \               index = factor;\n        }\n\n        if (max == 0)\n        \
    \    return 0;\n        return index == 0 ? max : index + 1;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpikj4u4d7.java:15: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        List<Integer> factors = Arrays.asList(new\
    \ int[n]);\n                                             ^\n    equality constraints:\
    \ Integer\n    lower bounds: int[]\n  where T is a type-variable:\n    T extends\
    \ Object declared in method <T>asList(T...)\n1 error\n"
  stdout: ''
  timestamp: 1660010802
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest_divisor = 1;\n     \
    \   int last_divisor = 2;\n        while (last_divisor <= n / 2) {\n         \
    \   if (n % last_divisor == 0) {\n                if (last_divisor > largest_divisor)\
    \ {\n                    largest_divisor = last_divisor;\n                }\n\
    \            }\n            last_divisor++;\n        }\n        return largest_divisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int i = 1;\n        int d = 1;\n\
    \        while (n >= i) {\n            i++;\n            while (n % i == 0) {\n\
    \                d = i;\n                n = n / i;\n            }\n        }\n\
    \        return d;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6_862vgj.java:25)\n"
  stdout: ''
  timestamp: 1660010802
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        List<Integer> l = new ArrayList<>();\n\
    \        for (int i = 2; i < n; ++i) {\n            if (n % i == 0) {\n      \
    \          l.add(i);\n            }\n        }\n        return l.size() > 0 ?\
    \ Collections.max(l) : -1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpat0sb863.java:22)\n"
  stdout: ''
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n<=1) return 1;\n        if\
    \ (n%2==0) return largestDivisor(n/2);\n        return largestDivisor(3*n) + largestDivisor(n/2);\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:14)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:14)\n\tat Problem.largestDivisor(tmphzros370.java:14)\n\
    \tat Problem.largestDivisor(tmphzros370.java:14)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:14)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:14)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:15)\n\
    \tat Problem.largestDivisor(tmphzros370.java:15)\n\tat Problem.largestDivisor(tmphzros370.java:14)\n\
    \tat Problem.largestDivis"
  stdout: ''
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // return n / Math.max(1, n/2)\n\
    \        return (int) n / Math.max(Math.min((n/2), Math.sqrt(n)));\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfjzifbsv.java:14: error: no suitable method found for max(double)\n\
    \        return (int) n / Math.max(Math.min((n/2), Math.sqrt(n)));\n         \
    \                    ^\n    method Math.max(int,int) is not applicable\n     \
    \ (actual and formal argument lists differ in length)\n    method Math.max(long,long)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method Math.max(float,float) is not applicable\n      (actual and formal\
    \ argument lists differ in length)\n    method Math.max(double,double) is not\
    \ applicable\n      (actual and formal argument lists differ in length)\n1 error\n"
  stdout: ''
  timestamp: 1660010803
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int ld = 1;\n        while (n %\
    \ 2 == 0) {\n            n = n/2;\n            ld++;\n        }\n        while(n\
    \ > 1){\n            int d = 2;\n            while(d < n){\n                if(n\
    \ % d == 0){\n                    n = n/d;\n                    ld++;\n      \
    \              break;\n                }\n                d = d*2;\n         \
    \   }\n        }\n        return ld;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010808
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDivisor = 1;\n        int\
    \ nextDivisor = 1;\n        for (int i = 1; i < n; i++) {\n            while (nextDivisor\
    \ <= n / i) {\n                nextDivisor++;\n            }\n            if (nextDivisor\
    \ > n / i) {\n                nextDivisor = n / i;\n            }\n          \
    \  maxDivisor = Math.max(maxDivisor, nextDivisor);\n        }\n        return\
    \ maxDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3v4gofao.java:27)\n"
  stdout: ''
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest = 1;\n        for(int\
    \ i=1; (n%i)!=0;i++) {\n            if((n%i) == 0)\n                largest =\
    \ i;\n        }\n        return largest;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8l93vjpe.java:23)\n"
  stdout: ''
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return Arrays.stream(new int[]{1,2,4,6,8,10,16,20,24})\n\
    \            .filter(i -> n % i == 0)\n            .max((a, b) -> {\n        \
    \        int r = Math.min(a, b);\n                int l = Math.max(a, b);\n  \
    \              if (r / l > a) return r;\n                return l;\n         \
    \   });\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl2a7plpb.java:15: error: method max in interface IntStream cannot\
    \ be applied to given types;\n            .max((a, b) -> {\n            ^\n  required:\
    \ no arguments\n  found:    (a,b)->{ i[...] l; }\n  reason: actual and formal\
    \ argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // A map to map the divisors and\
    \ their count of division\n        Map<Integer, Long> divisorMap = new HashMap<>();\n\
    \n        // Initialize divisorMap with number 1 as key and its count as value\n\
    \        divisorMap.put(1, 1L);\n\n        // Get divisors of n starting from\
    \ 2\n        IntStream.range(1, (int) Math.sqrt(n) + 1).filter(x -> n % x == 0).forEach(x\
    \ -> divisorMap.put(x, divisorMap.get(x) + 1));\n\n        // Get the max value\
    \ from the map\n        int max = divisorMap.entrySet().stream().mapToInt(Map.Entry::getValue).max().orElse(0);\n\
    \n        // Find the max key in the map and return the value\n        return\
    \ divisorMap.entrySet().stream().filter(x -> x.getValue() == max).map(Map.Entry::getKey).max().get();\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi5fpj7r5.java:23: error: incompatible types: bad return type in\
    \ method reference\n        int max = divisorMap.entrySet().stream().mapToInt(Map.Entry::getValue).max().orElse(0);\n\
    \                                                          ^\n    Long cannot\
    \ be converted to int\n/tmp/tmpi5fpj7r5.java:26: error: method max in interface\
    \ Stream<T> cannot be applied to given types;\n        return divisorMap.entrySet().stream().filter(x\
    \ -> x.getValue() == max).map(Map.Entry::getKey).max().get();\n              \
    \                                                                            \
    \           ^\n  required: Comparator<? super Integer>\n  found:    no arguments\n\
    \  reason: actual and formal argument lists differ in length\n  where T is a type-variable:\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return Collections.max(Arrays.stream(new\
    \ int[]{n}).filter(i -> i % 2 == 0).boxed().collect(Collectors.toList()));\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.ArrayList$Itr.next(ArrayList.java:970)\n\
    \tat java.base/java.util.Collections.max(Collections.java:674)\n\tat Problem.largestDivisor(tmpd7m6papp.java:13)\n\
    \tat Problem.main(tmpd7m6papp.java:16)\n"
  stdout: ''
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int max = 0;\n        for (int i\
    \ = 1; i <= n; i++) {\n            if (n % i == 0) {\n                if (n >\
    \ max) {\n                    max = i;\n                }\n            }\n   \
    \     }\n        return max;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr3j8rxs1.java:24)\n"
  stdout: ''
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // TODO: write your code in Java\n\
    \        return -1;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa35upg6f.java:17)\n"
  stdout: ''
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int ld = Integer.MAX_VALUE;\n  \
    \      int ldIndex = 0;\n        int d = 0;\n        for(int i = 1; i <= n; i++)\
    \ {\n            if(n%i == 0) {\n                d = i;\n                if(n%d\
    \ == 0) d = n;\n                if(n%d == 0) d = n;\n                if(d > ld)\
    \ ld = d;\n                if(d > ld) ldIndex = i;\n            }\n        }\n\
    \        return ldIndex;\n}\n    public static void main(String[] args) {\n  \
    \  assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdudzdmr8.java:28)\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Using this instead of Math.pow(n,\
    \ 2) is a way to get around Math.pow overflow problems\n        double sqrt_n\
    \ = Math.sqrt(n);\n        return (int) Math.floor(Math.ceil(sqrt_n));\n}\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmsorm8fr.java:18)\n"
  stdout: ''
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        Set<Integer> divisors = new HashSet<>();\n\
    \        do {\n            divisors.add(n);\n            n /= 2;\n        } while\
    \ (n > 1);\n        return Math.max(divisors);\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7osmtsqm.java:18: error: no suitable method found for max(Set<Integer>)\n\
    \        return Math.max(divisors);\n                   ^\n    method Math.max(int,int)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method Math.max(long,long) is not applicable\n      (actual and formal argument\
    \ lists differ in length)\n    method Math.max(float,float) is not applicable\n\
    \      (actual and formal argument lists differ in length)\n    method Math.max(double,double)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int res = 0;\n        List<Integer>\
    \ nums = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n         \
    \   if((n % i == 0) && !(nums.contains(i))) {\n                nums.add(i);\n\
    \                if(i * nums.size() > n) res = i;\n            }\n        }\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8grjyuba.java:24)\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDivisor = n; //Set maxDivisor\
    \ to the input\n        //If n is even, maxDivisor will be equal to n\n      \
    \  if (n % 2 == 0) {\n            maxDivisor = n;\n        }\n        // Otherwise,\
    \ n is odd\n        else {\n            int smallestDivisor = 1;\n           \
    \ //Find the smallest number that divides n evenly\n            while (n % smallestDivisor\
    \ != 0) {\n                smallestDivisor *= 2;\n            }\n            maxDivisor\
    \ = smallestDivisor;\n        }\n        // Return the largest number that divides\
    \ n evenly, smaller than n\n        return maxDivisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe3nxvqgs.java:33)\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return Arrays.stream(new int[] {2,\
    \ n}).filter(x -> n % x == 0).max().getAsInt();\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkiplzhns.java:16)\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n % 2 == 0) {\n            return\
    \ 1;\n        } else {\n            int max_divisor = n/2;\n            while\
    \ (max_divisor > 1 && n%max_divisor == 0) {\n                --max_divisor;\n\
    \            }\n            return max_divisor;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcv7xcx10.java:25)\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n % 2 == 0) {\n            return\
    \ 2;\n        }\n        return largestDivisor(n / 2);\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp71cvaf5f.java:19)\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return largestDivisor(\n       \
    \     Arrays.asList(new Integer[]{n, n-1})).stream()\n            .filter(i ->\
    \ i % 2 == 0)\n            .max().getAsInt();\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj5gll_3a.java:13: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to int\n        return largestDivisor(\n\
    \               ^\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>asList(T...)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 1) return n;\n        if\
    \ (n % 2 == 0) return largestDivisor(n / 2); // 2 divides evenly\n        if (n\
    \ % 3 == 0) return largestDivisor(n / 3); // 3 divides evenly\n        int maxDivisor\
    \ = largestDivisor(n / 2);\n        if (maxDivisor > n) {\n            return\
    \ maxDivisor;\n        }\n        return maxDivisor + largestDivisor(n / 3);\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl4whmss4.java:24)\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n < 1) {\n            return\
    \ 0;\n        }\n        if (n & 1 == 0) {\n            return 1;\n        }\n\
    \        int res = 0;\n        for (int i = 1; i <= n; ++i) {\n            if\
    \ (n % i == 0) {\n                if (res == 0) {\n                    res = i;\n\
    \                } else {\n                    int new_res = i;\n            \
    \        if (res > new_res) {\n                        res = new_res;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxydscyw7.java:16: error: bad operand types for binary operator\
    \ '&'\n        if (n & 1 == 0) {\n              ^\n  first type:  int\n  second\
    \ type: boolean\n1 error\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return (n-1)/(n%(n-1));\n}\n   \
    \ public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjlhcbmd1.java:16)\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor = 0;\n        // loop\
    \ till the divisor is greater than n\n        while (true) {\n            divisor++;\n\
    \            // If n is not divisible by divisor, no need to increment it again\n\
    \            if (n / divisor == 0) {\n                break;\n            }\n\
    \        }\n        // If n is not divisible by any divisor from 1 to divisor,\
    \ divisor = largest divisor found\n        return divisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcb6e552k.java:26)\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = n;\n      \
    \  int counter = 2;\n        while (largestDivisor % 2 == 0 && counter <= n) {\n\
    \            largestDivisor = largestDivisor * 2 % n;\n            counter++;\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6pwuw5q.java:22)\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest_divisor = 0;\n     \
    \   for(int i=2; i<=n; i++) {\n            if(n%i==0) {\n                if(n%i==0)\
    \ largestDivisor = i;\n                if(largestDivisor<n) break;\n         \
    \   }\n        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvmn9ozfn.java:16: error: cannot find symbol\n                if(n%i==0)\
    \ largestDivisor = i;\n                           ^\n  symbol:   variable largestDivisor\n\
    \  location: class Problem\n/tmp/tmpvmn9ozfn.java:17: error: cannot find symbol\n\
    \                if(largestDivisor<n) break;\n                   ^\n  symbol:\
    \   variable largestDivisor\n  location: class Problem\n/tmp/tmpvmn9ozfn.java:20:\
    \ error: cannot find symbol\n        return largestDivisor;\n               ^\n\
    \  symbol:   variable largestDivisor\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        ArrayList < Integer > divisors =\
    \ new ArrayList < Integer > ();\n        while (n > 0) {\n            int remainder\
    \ = n % 10;\n            if (remainder != 0) {\n                divisors.add(remainder);\n\
    \            }\n            n /= 10;\n        }\n        if (divisors.size() >\
    \ 1) {\n            return Collections.max(divisors);\n        } else {\n    \
    \        return divisors.get(0);\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7xfvxnhw.java:28)\n"
  stdout: ''
  timestamp: 1660010805
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Create a list of divisors in\
    \ ascending order and get the first one.\n        // We will use this to remove\
    \ multiples of divisors later\n        List<Integer> divisors = Stream.iterate(n,\
    \ n -> n) // Stream of divisors\n                .limit(n + 1)\n             \
    \   .boxed() // Stream<Integer>\n                .filter(i -> n % i == 0) // Stream<Integer>\
    \ with divisors\n                .sorted()\n                .boxed() // Stream<Integer>\n\
    \                .collect(Collectors.toList());\n\n        // Return the first\
    \ element from the list\n        return divisors.get(0);\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmel18ajr.java:15: error: variable n is already defined in method\
    \ largestDivisor(int)\n        List<Integer> divisors = Stream.iterate(n, n ->\
    \ n) // Stream of divisors\n                                                 \
    \  ^\n/tmp/tmpmel18ajr.java:17: error: cannot find symbol\n                .boxed()\
    \ // Stream<Integer>\n                ^\n  symbol:   method boxed()\n  location:\
    \ interface Stream<Integer>\n2 errors\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDivisor = 0;\n        for\
    \ (int i=1; i<=n; i++) {\n            int divisor = i;\n            while (n %\
    \ divisor == 0) {\n                divisor++;\n            }\n            if (divisor\
    \ > maxDivisor) {\n                maxDivisor = divisor;\n            }\n    \
    \    }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_dtc5hyb.java:26)\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // The divisor will be one more\
    \ than the largest divisor larger than n\n        int divisor = n + 1;\n     \
    \   while (true) {\n            // While the divisor is larger than n\n      \
    \      if (divisor > n) {\n                // Then increment it by one to find\
    \ the next largest divisor\n                divisor = divisor + 1;\n         \
    \   }\n            // If n is divisible by the current divisor\n            if\
    \ (n % divisor == 0) {\n                // Then the divisor is what we want\n\
    \                return divisor;\n            }\n            // Increase the divisor\
    \ to the next larger one\n            divisor = divisor + 2;\n        }\n}\n \
    \   public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010809
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest_divisor = 0;\n     \
    \   while (n > 1) {\n            if (n % 2 == 0) {\n                n = n/2;\n\
    \                largest_divisor++;\n            } else {\n                n =\
    \ n-1;\n            }\n        }\n        return largest_divisor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfph921bp.java:26)\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return Arrays.stream(new int[] {2,\
    \ 5, 10, 15, 20, 25, 30, 35, 40, 45, 50})\n                .filter(i -> n % i\
    \ == 0)\n                .max(Comparator.naturalOrder()).orElse(-1);\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppb130mvh.java:15: error: method max in interface IntStream cannot\
    \ be applied to given types;\n                .max(Comparator.naturalOrder()).orElse(-1);\n\
    \                ^\n  required: no arguments\n  found:    Comparator<T>\n  reason:\
    \ actual and formal argument lists differ in length\n  where T is a type-variable:\n\
    \    T extends Comparable<? super T>\n1 error\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n <= 0)\n            return\
    \ 0;\n        if (n % 2 == 0)\n            return 2;\n        return largestDivisor(n\
    \ - 1);\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd2b83m93.java:20)\n"
  stdout: ''
  timestamp: 1660010805
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDivisor = -1;\n        for\
    \ (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                if\
    \ (maxDivisor == -1 || maxDivisor > i) {\n                    maxDivisor = i;\n\
    \                }\n            }\n        }\n        return maxDivisor;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4wogq4bt.java:26)\n"
  stdout: ''
  timestamp: 1660010805
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        final int LARGE_NUMBER = Integer.MAX_VALUE;\n\
    \        int max_divisor = LARGE_NUMBER;\n        for (;;) {\n            if (n\
    \ % 2 == 0) {\n                n /= 2;\n                continue;\n          \
    \  }\n            int next_max_divisor = max_divisor;\n            int next_max_divisor2\
    \ = next_max_divisor;\n            for (;;) {\n                if (n % next_max_divisor2\
    \ == 0) {\n                    n = n / next_max_divisor2;\n                  \
    \  next_max_divisor2 = next_max_divisor;\n                    max_divisor = next_max_divisor2;\n\
    \                    continue;\n                }\n                next_max_divisor\
    \ = next_max_divisor2;\n                next_max_divisor2 = next_max_divisor2\
    \ * 2;\n            }\n            if (max_divisor == LARGE_NUMBER)\n        \
    \        return n;\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0nuhlboa.java:32: error: unreachable statement\n            if\
    \ (max_divisor == LARGE_NUMBER)\n            ^\n1 error\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int max_divisor = 0;\n        for\
    \ (int divisor = 1; divisor <= n; divisor++) {\n            if (n % divisor ==\
    \ 0) {\n                // If n is divisible by divisor, update max_divisor to\
    \ the new value\n                max_divisor = divisor;\n            }\n     \
    \   }\n        return max_divisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsozol2ul.java:23)\n"
  stdout: ''
  timestamp: 1660010805
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return (int) Math.ceil(n/Math.sqrt(n));\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpadvk4o4p.java:16)\n"
  stdout: ''
  timestamp: 1660010805
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 0;\n      \
    \  int div = 1;\n        while (n >= div) {\n            largestDivisor = Math.max(largestDivisor,\
    \ div);\n            ++div;\n        }\n        return largestDivisor;\n}\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp80oj4ns0.java:22)\n"
  stdout: ''
  timestamp: 1660010805
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        HashMap<Integer, Integer> counts\
    \ = new HashMap<>();\n        for (int i = 2; i <= n; i++) {\n            int\
    \ count = 0;\n            while (n % i == 0) {\n                count++;\n   \
    \             n /= i;\n            }\n            if (count > counts.containsKey(i)\
    \ ? counts.containsKey(i) : 0) {\n                counts.put(i, count);\n    \
    \        } else {\n                counts.put(i, 1);\n            }\n        }\n\
    \        return counts.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey();\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdd231cx2.java:20: error: bad operand types for binary operator\
    \ '>'\n            if (count > counts.containsKey(i) ? counts.containsKey(i) :\
    \ 0) {\n                      ^\n  first type:  int\n  second type: boolean\n\
    /tmp/tmpdd231cx2.java:20: error: incompatible types: INT#1 cannot be converted\
    \ to boolean\n            if (count > counts.containsKey(i) ? counts.containsKey(i)\
    \ : 0) {\n                                              ^\n  where INT#1,INT#2\
    \ are intersection types:\n    INT#1 extends Object,Serializable,Comparable<?\
    \ extends INT#2>,Constable\n    INT#2 extends Object,Serializable,Comparable<?>,Constable\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660010805
