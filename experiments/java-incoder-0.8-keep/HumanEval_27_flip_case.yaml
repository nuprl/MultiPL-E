name: HumanEval_27_flip_case
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n \
  \   public static String flipCase(String string) {\n"
tests: "return \"\";\n    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
  \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
  \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        String flipped = \"\";\n        for(char c: string.toCharArray())\
    \ {\n            if(Character.isLowerCase(c)) {\n                flipped += Character.toUpperCase(c);\n\
    \            } else {\n                flipped += Character.toLowerCase(c);\n\
    \            }\n        }\n        return flipped;", '        return string.chars().mapToObj(i
    -> (char) i == (char)65 ? (char)0 : (char) i).map(String::toLowerCase).collect(Collectors.joining());',
  "        return string.replaceAll(\"[a-z]\", s -> s.toUpperCase())\n           \
    \     .replaceAll(\"[A-Z]\", s -> s.toLowerCase());", "        int len = string.length();\n\
    \        StringBuilder sb = new StringBuilder(len);\n        for (int i = 0; i\
    \ < len; i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n\
    \                sb.append(Character.toUpperCase(string.charAt(i)));\n       \
    \     } else {\n                sb.append(string.charAt(i));\n            }\n\
    \        }\n        return sb.toString();", '        return string.toLowerCase().replaceAll("[\\W]",
    string -> string.toUpperCase());', "        String result = \"\";\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            result += (char) (string.charAt(i)\
    \ + 32 - (string.charAt(i) + 32) % 32);\n        }\n        return result;", " \
    \       StringBuilder sb = new StringBuilder();\n        char[] charArray = string.toCharArray();\n\
    \        for (int i = 0; i < charArray.length; ++i) {\n            if (Character.isLowerCase(charArray[i]))\
    \ {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n   \
    \         } else {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n\
    \            }\n            sb.append(charArray[i]);\n        }\n        return\
    \ sb.toString();", "        String flipped = \"\";\n        for (int i = 0; i\
    \ < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i)))\
    \ {\n                flipped += Character.toUpperCase(string.charAt(i));\n   \
    \         } else {\n                flipped += Character.toLowerCase(string.charAt(i));\n\
    \            }\n        }\n        return flipped;", "        // Write your code\
    \ here.\n        char[] a = string.toCharArray();\n        boolean flipped = false;\n\
    \        for (int i = 0; i < a.length; i++){\n            if (Character.isUpperCase(a[i])){\n\
    \                flipped = true;\n                a[i] = Character.toLowerCase(a[i]);\n\
    \            }\n            else if (Character.isLowerCase(a[i])){\n         \
    \       flipped = false;\n                a[i] = Character.toUpperCase(a[i]);\n\
    \            }\n        }\n        return new String(a);", "        String toReturn\
    \ = \"\";\n        for(int i=0; i<string.length(); i++) {\n            char curChar\
    \ = string.charAt(i);\n            toReturn += curChar;\n            if(curChar\
    \ == 'a' || curChar == 'A')\n                toReturn = toReturn.toUpperCase();\n\
    \            if(curChar == 'b' || curChar == 'B')\n                toReturn =\
    \ toReturn.toLowerCase();\n        }\n        return toReturn;", "        Map<Character,\
    \ Character> map = new HashMap<>();\n        for(char c : string.toCharArray())\
    \ {\n            map.put(c, map.getOrDefault(c, c).toUpperCase());\n        }\n\
    \        return map;", "        String s = \"\";\n        char[] array = string.toCharArray();\n\
    \        for(int i = 0; i < array.length; i++){\n            if(Character.isLowerCase(array[i])){\n\
    \                s += Character.toUpperCase(array[i]);\n            }else if(Character.isUpperCase(array[i])){\n\
    \                s += Character.toLowerCase(array[i]);\n            }\n      \
    \  }\n        return s;", "        char[] arr = string.toCharArray();\n      \
    \  for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == ' ') {\n\
    \                continue;\n            }\n            if (Character.isLowerCase(arr[i]))\
    \ {\n                arr[i] = Character.toUpperCase(arr[i]);\n            } else\
    \ {\n                arr[i] = Character.toLowerCase(arr[i]);\n            }\n\
    \        }\n        return new String(arr);", "        string = string.toLowerCase();\n\
    \        string = string.toUpperCase();\n        string = string.toLowerCase();\n\
    \        return string;", "        StringBuilder newStringBuilder = new StringBuilder();\n\
    \        for (char ch : string.toCharArray()) {\n            if (Character.isLowerCase(ch))\
    \ {\n                newStringBuilder.append(Character.toUpperCase(ch));\n   \
    \         } else {\n                newStringBuilder.append(Character.toLowerCase(ch));\n\
    \            }\n        }\n        return newStringBuilder.toString();", "   \
    \     char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            if (Character.isLowerCase(chars[i])) {\n               \
    \ chars[i] = Character.toUpperCase(chars[i]);\n            }\n            if (Character.isUpperCase(chars[i]))\
    \ {\n                chars[i] = Character.toLowerCase(chars[i]);\n           \
    \ }\n        }\n        return new String(chars);", "        String result = \"\
    \";\n        for (char ch : string.toCharArray()) {\n            if (Character.isLowerCase(ch))\
    \ {\n                result += Character.toUpperCase(ch);\n            } else\
    \ {\n                result += Character.toLowerCase(ch);\n            }\n   \
    \     }\n        return result;", "        return string.chars().map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))\n                .collect(Collectors.joining());",
  "        string = string.toLowerCase().toUpperCase();\n        string = string.toUpperCase().toLowerCase();\n\
    \        return string;", "        char[] charArray = string.toCharArray();\n\
    \        char[] newCharArray = new char[charArray.length];\n        for(int i\
    \ = 0; i < charArray.length; i++) {\n            char character = charArray[i];\n\
    \            if(Character.isLowerCase(character)) {\n                newCharArray[i]\
    \ = Character.toUpperCase(character);\n            } else {\n                newCharArray[i]\
    \ = Character.toLowerCase(character);\n            }\n        }\n        return\
    \ new String(newCharArray);", '        return string.chars().mapToObj(c -> Character.toUpperCase(c)).collect(Collectors.joining()).toLowerCase();',
  "        return string.chars().map(ch -> Character.toUpperCase(ch)).map(ch -> Character.toLowerCase(ch))\n\
    \                .collect(Collectors.joining(\"\"));", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).forEach(character\
    \ -> {\n            if (character >= 'A' && character <= 'Z') {\n            \
    \    charArray[charArray.length - 1] ^= (character - 'A' + 'a');\n           \
    \ } else if (character >= 'a' && character <= 'z') {\n                charArray[charArray.length\
    \ - 1] ^= (character - 'a' + 'A');\n            }\n        });\n        return\
    \ new String(charArray);", "        StringBuilder sb = new StringBuilder(string);\n\
    \        for( int i = 0; i < sb.length(); i++ ) {\n            char ch = sb.charAt(i);\n\
    \            if( Character.isLowerCase(ch) ) {\n                sb.setCharAt(i,\
    \ Character.toUpperCase(ch));\n            }\n            if( Character.isUpperCase(ch)\
    \ ) {\n                sb.setCharAt(i, Character.toLowerCase(ch));\n         \
    \   }\n        }\n        return sb.toString();", '        return string.toUpperCase().replaceAll("([a-z])",
    "$U$1").toUpperCase();', "        return string.toLowerCase().replaceAll(\"[a-z]\"\
    ,\n                    m -> Character.toUpperCase(m.charValue())).\n         \
    \           replaceAll(\"[A-Z]\",\n                    m -> Character.toLowerCase(m.charValue()));",
  "        return string.chars().mapToObj(c -> Character.toUpperCase(c))\n       \
    \                   .collect(joining(\"\"));", "        StringBuilder builder\
    \ = new StringBuilder(string);\n        for (char c: builder.toCharArray()) {\n\
    \            if (Character.isLowerCase(c)) {\n                builder.setCharAt(c,\
    \ Character.toUpperCase(c));\n            } else {\n                builder.setCharAt(c,\
    \ Character.toLowerCase(c));\n            }\n        }\n        return builder.toString();",
  '        return string.replaceAll("[a-z]", "[A-Z]").replaceAll("[A-Z]", "[a-z]");',
  "        String flipped = \"\";\n        for(int i = 0; i < string.length(); i++)\
    \ {\n            flipped += Character.toUpperCase(string.charAt(i)) + \n     \
    \               (i < string.length() -1 ? \"\" : Character.toLowerCase(string.charAt(i)));\n\
    \        }\n        return flipped;", '        return string.chars().mapToObj(c
    -> (char) ((int) c + 32)).map(c -> Character.toLowerCase(c)).collect(Collectors.joining(""));',
  "        return string.toLowerCase().replaceAll(\"[a-z]\", \"[A-Z]\")\n        \
    \    .replaceAll(\"[A-Z]\", \"[a-z]\");", "        return string.chars()\n   \
    \         .mapToObj(c -> (char) ('A' + c - 'a'))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        return string.replaceAll(\"(?!^)([A-Z])\", \"$1_$2\")\n            .replaceAll(\"\
    (?!$)(.)\", \"_$1_\")\n            .toLowerCase();", '        return string.chars().mapToObj(c
    -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c)).collect(Collectors.joining());',
  '        return string.chars().map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)
    : Character.toLowerCase(c)).collect(StringBuilder::new, (buf, c) -> buf.append((char)
    c), StringBuilder::append).toString();', "        // TODO: Complete this function\n\
    \        // Hint: Use an EnumMap to do the mappings\n        // For each character\
    \ in the string, if it is a lowercase letter, set it to be uppercase; otherwise\
    \ set it to be lowercase\n        // Return the flipped string\n        return\
    \ \"\";", "        Set<Character> upper = string.codePoints().filter(c -> c <=\
    \ 'Z' && c >= 'A').collect(Collectors.toSet());\n        Set<Character> lower\
    \ = string.codePoints().filter(c -> c <= 'z' && c >= 'a').collect(Collectors.toSet());\n\
    \        StringBuilder flipped = new StringBuilder(string);\n        flipped.replaceAll(c\
    \ -> upper.contains(c) ? Character.toUpperCase(c) : Character.toLowerCase(c),\
    \ c -> lower.contains(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n\
    \        return flipped.toString();", "        char[] chars = string.toCharArray();\n\
    \        for (int i = 0; i < chars.length; ++i) {\n            if (Character.isLowerCase(chars[i]))\
    \ {\n                chars[i] = Character.toUpperCase(chars[i]);\n           \
    \ }\n            if (Character.isUpperCase(chars[i])) {\n                chars[i]\
    \ = Character.toLowerCase(chars[i]);\n            }\n        }\n        return\
    \ new String(chars);", "        if (string.isEmpty()) {\n            return string;\n\
    \        }\n        char[] chars = string.toCharArray();\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = 0; i < chars.length; i++)\
    \ {\n            char c = chars[i];\n            if (Character.isLowerCase(c))\
    \ {\n                builder.append(Character.toUpperCase(c));\n            }\
    \ else {\n                builder.append(Character.toLowerCase(c));\n        \
    \    }\n        }\n        return builder.toString();", "        StringBuilder\
    \ builder = new StringBuilder();\n        for(Character character : string.toCharArray())\
    \ {\n            if(Character.isLowerCase(character)) {\n                builder.append(Character.toUpperCase(character));\n\
    \            } else {\n                builder.append(Character.toLowerCase(character));\n\
    \            }\n        }\n        return builder.toString();", "        return\
    \ string.chars().mapToObj(c -> Character.toUpperCase(c))\n            .collect(Collectors.joining(\"\
    \"));", "        char[] charArr = string.toCharArray();\n        for (int i =\
    \ 0; i < charArr.length; i++) {\n            if (charArr[i] >= 'a' && charArr[i]\
    \ <= 'z') {\n                charArr[i] = (char) (charArr[i] - 32);\n        \
    \    } else if (charArr[i] >= 'A' && charArr[i] <= 'Z') {\n                charArr[i]\
    \ = (char) (charArr[i] + 32);\n            }\n        }\n        return new String(charArr);",
  "        StringBuilder result = new StringBuilder(string.length());\n        for\
    \ (char c : string.toCharArray()) {\n            boolean isLowercaseLetter = c\
    \ == (char) ('a');\n            result.append((char) (isLowercaseLetter ? (char)\
    \ ('A') : (char) ('a')));\n        }\n        return result.toString();", '        return
    string.chars().mapToObj(String::valueOf).map(s -> (s.length() == 1) ? s.toUpperCase()
    : s.toLowerCase()).collect(Collectors.joining(""));', "        // Create an array\
    \ out of the string.\n        char[] charArray = string.toCharArray();\n\n   \
    \     // Iterate through each character in the string.\n        for (int i = 0;\
    \ i < charArray.length; i++) {\n            if (Character.isLowerCase(charArray[i]))\
    \ {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n   \
    \         } else {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n\
    \            }\n        }\n\n        // Create a new string from the character\
    \ array.\n        return new String(charArray);", "        char[] array = string.toCharArray();\n\
    \        for (int i = 0; i < array.length; ++i) {\n            if (Character.isLowerCase(array[i])\
    \ || Character.isUpperCase(array[i])) {\n                array[i] ^= (array[i]\
    \ & 0xDF);\n                array[i] ^= (array[i] & 0xE0);\n                array[i]\
    \ ^= (array[i] & 0xF0);\n            }\n        }\n        return new String(array);",
  "        return string.chars().mapToObj(i -> i == 0 ? \"a\" : (char) ('a' + ((i\
    \ - 'a') % 26))).collect(Collectors.joining()).toUpperCase();", "        return\
    \ string.toUpperCase().replaceAll(\"[a-z]\", \"[A-Z]\")\n                .replaceAll(\"\
    [A-Z]\", \"[a-z]\");", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).forEach(System.out::print);\n        return string.toCharArray().toString();",
  "        return string\n                .toUpperCase()\n                .replaceAll(\"\
    (?i)[A-Z]\", \"[a-z]\")\n                .replaceAll(\"(?i)[a-z]\", \"[A-Z]\"\
    )\n                .toLowerCase();", "        return new StringBuilder()\n   \
    \         .append(Character.toLowerCase(string.charAt(0))).append(string.substring(1))\n\
    \            .toString();", "        return string\n            .chars()\n   \
    \         .mapToObj(c -> (char) c.toUpperCase())\n            .collect(joining());",
  '        return string.toLowerCase();', "        String flipped = \"\";\n      \
    \  for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isUpperCase(c))\n                flipped += Character.toLowerCase(c);\n\
    \            else\n                flipped += Character.toUpperCase(c);\n    \
    \    }\n        return flipped;", "        \n        char[] chars = string.toCharArray();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            switch (c) {\n            case 'a':\n                c = 'A';\n \
    \               break;\n            case 'b':\n                c = 'B';\n    \
    \            break;\n            case 'c':\n                c = 'C';\n       \
    \         break;\n            case 'd':\n                c = 'D';\n          \
    \      break;\n            case 'e':\n                c = 'E';\n             \
    \   break;\n            case 'f':\n                c = 'F';\n                break;\n\
    \            case 'g':\n                c = 'G';\n                break;\n   \
    \         case 'h':\n                c = 'H';\n                break;\n      \
    \      case 'i':\n                c = 'I';\n                break;\n         \
    \   case 'j':\n                c = 'J';\n                break;\n            case\
    \ 'k':\n                c = 'K';\n                break;\n            case 'l':\n\
    \                c = 'L';\n                break;\n            case 'm':\n   \
    \             c = 'M';\n                break;\n            case 'n':\n      \
    \          c = 'N';\n                break;\n            case 'o':\n         \
    \       c = 'O';\n                break;\n            case 'p':\n            \
    \    c = 'P';\n                break;\n            case 'q':\n               \
    \ c = 'Q';\n                break;\n            case 'r':\n                c =\
    \ 'R';\n                break;\n            case 's':\n                c = 'S';\n\
    \                break;\n            case 't':\n                c = 'T';\n   \
    \             break;\n            case 'u':\n                c = 'U';\n      \
    \          break;\n            case 'v':\n                c = 'V';\n         \
    \       break;\n            case 'w':\n                c = 'W';\n            \
    \    break;\n            case 'x':\n                c = 'X';\n               \
    \ break;\n            case 'y':\n                c = 'Y';\n                break;\n\
    \            case 'z':\n                c = 'Z';\n                break;\n   \
    \         case 'A':\n                c = 'a';\n                break;\n      \
    \      case 'B':\n                c = 'b';\n                break;\n         \
    \   case 'C':\n                c = 'c';\n                break;\n            case\
    \ 'D':\n                c = 'd';\n                break;\n            case 'E':\n\
    \                c = 'e';\n                break;\n            case 'F':\n   \
    \             c = 'f';\n                break;\n            case 'G':\n      \
    \          c = 'g';\n                break;\n            case 'H':\n         \
    \       c = 'h';\n                break;\n            case 'I':\n            \
    \    c = 'i';\n                break;\n            case 'J':\n               \
    \ c = 'j';\n                break;\n            case 'K':\n                c =\
    \ 'k';\n                break;\n            case 'L':\n                c = 'l';\n\
    \                break;\n            case 'M':\n                c = 'm';\n   \
    \             break;\n            case 'N':\n                c = 'n';\n      \
    \          break;\n            case 'O':\n                c = 'o';\n         \
    \       break;\n            case 'P':\n                c = 'p';\n            \
    \    break;\n            case 'Q':\n                c = 'q';\n               \
    \ break;\n            case 'R':\n                c = 'r';\n                break;\n\
    \            case 'S", "        StringBuilder newString = new StringBuilder();\n\
    \        for(int i=0; i<string.length(); i++) {\n            char currentChar\
    \ = string.charAt(i);\n            if(currentChar >= 'a' && currentChar <= 'z')\
    \ {\n                newString.append((char)currentChar - 32);\n            }\n\
    \            else if(currentChar >= 'A' && currentChar <= 'Z') {\n           \
    \     newString.append((char)currentChar + 32);\n            }\n            else\
    \ {\n                newString.append(currentChar);\n            }\n        }\n\
    \        return newString.toString();", "        char[] chars = string.toCharArray();\n\
    \        char[] flippedChars = new char[chars.length];\n\n        for (int i =\
    \ 0; i < chars.length; i++) {\n            char c = chars[i];\n            if\
    \ (Character.isLowerCase(c)) {\n                flippedChars[flippedChars.length\
    \ - 1 - i] = c;\n            } else {\n                flippedChars[i] = c;\n\
    \            }\n        }\n\n        return new String(flippedChars);", "    \
    \    return string\n                .chars()\n                .mapToObj(c -> c\
    \ == Character.toLowerCase(c) ? Character.toUpperCase(c) : c)\n              \
    \  .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \                .toString();", '        return string.chars().mapToObj(x -> (char)
    (x == (char) x ? Character.toLowerCase(x) : Character.toUpperCase(x))).collect(Collectors.joining(""));',
  "        Map<Character, Character> upperMap = new HashMap<>();\n        Map<Character,\
    \ Character> lowerMap = new HashMap<>();\n\n        for (char ch : string.toCharArray())\
    \ {\n            lowerMap.put(ch,ch);\n            upperMap.put(Character.toLowerCase(ch),Character.toUpperCase(ch));\n\
    \        }\n\n        return string.replace(new String(string.toCharArray()),\
    \ new String(new Object[]{\n            lowerMap.get(string.toCharArray()),\n\
    \            upperMap.get(string.toCharArray())\n        }));", "        StringBuilder\
    \ builder = new StringBuilder();\n\n        for (char ch : string.toCharArray())\
    \ {\n            if (Character.isUpperCase(ch)) {\n                builder.append(Character.toLowerCase(ch));\n\
    \            } else {\n                builder.append(ch);\n            }\n  \
    \      }\n\n        return builder.toString();", "        return string.chars().mapToObj(i\
    \ -> (char) (i == Character.toLowerCase(String.valueOf((char) i))) ?\n       \
    \ Character.toUpperCase((char) i) : Character.toLowerCase((char) i)).collect(Collectors.joining());",
  "        // Write your code here\n        string = string.toLowerCase();\n     \
    \   string = string.toUpperCase();\n        return string;", '        return string.toUpperCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', '        return string.chars().mapToObj(c
    -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c)).collect(Collectors.joining());',
  "        return string.toUpperCase().replaceAll(\"(?i)([a-z])\",\n             \
    \   m -> m.group().toUpperCase());", "        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            int value =\
    \ string.charAt(i);\n            if (value >= 'a' && value <= 'z')\n         \
    \       builder.append((char) value - 'a' + 'A');\n            else if (value\
    \ >= 'A' && value <= 'Z')\n                builder.append((char) value - 'A' +\
    \ 'a');\n            else\n                builder.append(value);\n        }\n\
    \        return builder.toString();", "        return string.chars().map(c ->\
    \ Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))\n\
    \                .collect(Collectors.joining(\"\"));", '        return string.toLowerCase();',
  '        return string.chars().mapToObj(i -> (char) (i + 32)).collect(Collectors.joining());',
  "        // The map stores the current state for each character in the string.\n\
    \        Map<Character, Boolean> state = new HashMap<Character, Boolean>();\n\
    \        // Set initial state\n        state.put('a', true);\n        // Process\
    \ the string character-by-character\n        for (int i = 0; i < string.length();\
    \ ++i) {\n            Character c = string.charAt(i);\n            // Check for\
    \ state\n            if (state.containsKey(c)) {\n                Boolean b =\
    \ state.get(c);\n                state.put(c, !b);\n                // If state\
    \ changed, return new string\n                if (b)\n                    return\
    \ string.replace(c, Character.toUpperCase(c));\n                else\n       \
    \             return string.replace(c, Character.toLowerCase(c));\n          \
    \  }\n            // If character is new state, map it\n            state.put(c,\
    \ true);\n        }\n        return string;", "        StringBuilder sb = new\
    \ StringBuilder(string);\n        sb.replace(0,1, Character.toLowerCase(string.charAt(0)));\n\
    \        sb.replace(1,2, Character.toUpperCase(string.charAt(1)));\n        sb.replace(2,3,\
    \ Character.toLowerCase(string.charAt(2)));\n        return sb.toString();", '        return
    string.chars().mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)
    : Character.toLowerCase(c)).collect(Collectors.joining());', "        string +=\
    \ \"\";\n        return string.chars()\n                .mapToObj(i -> {\n   \
    \                 if ((char) i >= 'A' && char) i <='Z'\n                     \
    \   (char) i ^= 'a'\n                    if ((char) i >='A' && char) i <='Z'\n\
    \                        (char) i ^= 'A'\n                    return char) i\n\
    \                })\n                .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n                .toString();", "        return new StringBuilder()\n\
    \                .append(Character.toLowerCase(string.charAt(0)))\n          \
    \      .append(Character.toUpperCase(string.charAt(1)))\n                .append(Character.toLowerCase(string.charAt(2)))\n\
    \                .toString();", "        String newString = \"\";\n        for\
    \ (char ch : string.toCharArray()) {\n            if (Character.isLowerCase(ch))\
    \ {\n                newString += Character.toUpperCase(ch);\n            } else\
    \ {\n                newString += Character.toLowerCase(ch);\n            }\n\
    \        }\n        return newString;", "        return string.chars().map(c ->\
    \ Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))\n\
    \                .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append).toString();", "        return string.toUpperCase(Locale.US)\n\
    \                .toLowerCase(Locale.US);", '        return string.toLowerCase().replace("",
    string.toUpperCase());', '        return string.toUpperCase().replaceAll("([a-z])",
    s -> s.toUpperCase());', '        return string.chars().mapToObj(c -> (char) (c
    == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  '        return string.toLowerCase().replaceAll("[\\w]", Character.toUpperCase).replaceAll("[\\W]",
    Character.toLowerCase);', "        String result = \"\";\n        \n        for\
    \ (int i = 0; i<string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i)))\
    \ {\n                result += Character.toLowerCase(string.charAt(i));\n    \
    \        }\n            if (Character.isLowerCase(string.charAt(i))) {\n     \
    \           result += Character.toUpperCase(string.charAt(i));\n            }\n\
    \        }\n        return result;", "        // Complete the method below.\n\
    \        \n        ArrayList<String> lowerCase = new ArrayList<String>();\n  \
    \      lowerCase.add(\"a\");\n        lowerCase.add(\"b\");\n        lowerCase.add(\"\
    c\");\n        lowerCase.add(\"d\");\n        lowerCase.add(\"e\");\n        lowerCase.add(\"\
    f\");\n        lowerCase.add(\"g\");\n        lowerCase.add(\"h\");\n        lowerCase.add(\"\
    i\");\n        lowerCase.add(\"j\");\n        lowerCase.add(\"k\");\n        lowerCase.add(\"\
    l\");\n        lowerCase.add(\"m\");\n        lowerCase.add(\"n\");\n        lowerCase.add(\"\
    o\");\n        lowerCase.add(\"p\");\n        lowerCase.add(\"q\");\n        lowerCase.add(\"\
    r\");\n        lowerCase.add(\"s\");\n        lowerCase.add(\"t\");\n        lowerCase.add(\"\
    u\");\n        lowerCase.add(\"v\");\n        lowerCase.add(\"w\");\n        lowerCase.add(\"\
    x\");\n        lowerCase.add(\"y\");\n        lowerCase.add(\"z\");\n        \n\
    \        ArrayList<String> upperCase = new ArrayList<String>();\n        upperCase.add(\"\
    A\");\n        upperCase.add(\"B\");\n        upperCase.add(\"C\");\n        upperCase.add(\"\
    D\");\n        upperCase.add(\"E\");\n        upperCase.add(\"F\");\n        upperCase.add(\"\
    G\");\n        upperCase.add(\"H\");\n        upperCase.add(\"I\");\n        upperCase.add(\"\
    J\");\n        upperCase.add(\"K\");\n        upperCase.add(\"L\");\n        upperCase.add(\"\
    M\");\n        upperCase.add(\"N\");\n        upperCase.add(\"O\");\n        upperCase.add(\"\
    P\");\n        upperCase.add(\"Q\");\n        upperCase.add(\"R\");\n        upperCase.add(\"\
    S\");\n        upperCase.add(\"T\");\n        upperCase.add(\"U\");\n        upperCase.add(\"\
    V\");\n        upperCase.add(\"W\");\n        upperCase.add(\"X\");\n        upperCase.add(\"\
    Y\");\n        upperCase.add(\"Z\");\n        \n        String result = string;\n\
    \        \n        int i = 0;\n        while (i<string.length()){\n          \
    \  if (lowerCase.contains(string.substring(i, i+1))) {\n                result\
    \ = result.substring(0, i) + String.valueOf(Character.toUpperCase(string.charAt(i))\
    \ + result.substring(i+1, i+2)) + String.valueOf(Character.toLowerCase(string.charAt(i))\
    \ + result.substring", "        char[] chars = string.toCharArray();\n       \
    \ Arrays.sort(chars);\n        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            builder.append(chars[i\
    \ + chars.length - i - 1]);\n        }\n        return builder.toString();", " \
    \       return new StringBuilder()\n                .append(string.toLowerCase())\n\
    \                .append(Character.toUpperCase(string\n                      \
    \  .charAt(0)))\n                .toString();", '        return new StringBuilder(string.toLowerCase()).reverse().toString();',
  "        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i\
    \ < string.length(); i++) {\n            char c = string.charAt(i);\n        \
    \    if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();", '        return
    string.chars().map(e -> Character.isLowerCase(e) ? Character.toUpperCase(e) :
    Character.toLowerCase(e)).collect(Collectors.joining());', "        return string.chars().mapToObj(i\
    \ -> (char) ('a' + (i - (char) 'a'))).map(String::valueOf).collect(Collectors.joining());",
  "        return string.chars().mapToObj(c -> Character.isLowerCase(c) ?\n      \
    \      Character.toUpperCase(c) : Character.toLowerCase(c)).collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append).toString();", "     \
    \   return string.chars()\n                .mapToObj(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n                .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).forEach(s\
    \ -> {\n            int index = string.toLowerCase().indexOf(s);\n           \
    \ if (index != -1) {\n                charArray[index] = Character.toUpperCase(s);\n\
    \            }\n        });\n        return new String(charArray);", "       \
    \ return string.chars()\n                .mapToObj(i -> (char) ('A' + (Character.toLowerCase(i)\
    \ - 'a')))\n                .collect(joining(\"\"));", "        char[] chars =\
    \ string.toCharArray();\n        Arrays.stream(chars).mapToObj(c -> Character.toUpperCase(c)).collect(Collectors.toList());\n\
    \        StringBuilder sb = new StringBuilder();\n        for (char c : chars)\
    \ {\n            if (c > 'z') {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();", '        return string.replaceAll("[a-z]", "A-Z").replaceAll("[A-Z]",
    "a-z");', "        return string.toUpperCase().replaceAll(\"[a-z]\", \"[\" + string.charAt(0).toUpperCase()\
    \ + \"]\")\n                .replaceAll(\"[\" + string.charAt(0).toUpperCase()\
    \ + \"]\", \"[a-z]\");", "        char[] chars = string.toCharArray();\n     \
    \   for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i]))\
    \ {\n                chars[i] = Character.toUpperCase(chars[i]);\n           \
    \ } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n\
    \            }\n        }\n        return new String(chars);", '        return
    string.toLowerCase().replaceAll("([a-z])", "$U$1").toUpperCase();', "        string\
    \ = string.toLowerCase();\n        StringBuilder sb = new StringBuilder();\n \
    \       for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", '        return string.chars().map(c
    -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());',
  "        return string.chars().mapToObj(c -> (char) (c == 'a' ? 'A' : c == 'A' ?\
    \ 'a' : c)).collect(Collectors.joining(\"\"));", "        return string.toLowerCase().replace(\n\
    \                string.toUpperCase(),\n                string.toLowerCase());",
  "        String res = \"\";\n        for (char c : string.toCharArray()) {\n   \
    \         if (Character.isLowerCase(c)) {\n                res += Character.toUpperCase(c);\n\
    \            } else if (Character.isUpperCase(c)) {\n                res += Character.toLowerCase(c);\n\
    \            } else {\n                res += c;\n            }\n        }\n \
    \       return res;", "        char[] charArray = string.toCharArray();\n    \
    \    StringBuilder builder = new StringBuilder();\n        for (int i = 0; i <\
    \ charArray.length; i++) {\n            builder.append(Character.toUpperCase(charArray[i]));\n\
    \            if (i == charArray.length - 1) {\n                builder.append(Character.toLowerCase(charArray[i]));\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++)\n            if (charArray[i] >= 'A' && charArray[i] <= 'Z')\n        \
    \        charArray[i] -= 32;\n            else if (charArray[i] >= 'a' && charArray[i]\
    \ <= 'z')\n                charArray[i] += 32;\n        return String.valueOf(charArray);",
  "        return string.toLowerCase().replaceAll(\"[a-z]\", Character.toString(string.charAt(0))\
    \ + \n                        Character.toLowerCase(string.charAt(string.length()\
    \ - 1)));", "        return string.toUpperCase().replaceAll(\"([a-z])\", \n  \
    \          m -> Character.toUpperCase(m.charAt(0)) + m.substring(1).toLowerCase());",
  "        return string.chars()\n                .mapToObj(i -> i == Character.toLowerCase(i)\
    \ ? Character.toUpperCase(i) : Character.toLowerCase(i))\n                .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n                .toString();",
  "        return string.chars().mapToObj(c -> (char) (c == (char) c ? 'a' : 'A')).collect(Collectors.joining());",
  "        return string.chars()\n            .mapToObj(c -> (char) (c == (char) c))\n\
    \            .collect(Collectors.joining(\"\", \"\"));", "        StringBuilder\
    \ sb = new StringBuilder(string);\n        for(char c: sb.toCharArray()){\n  \
    \          if(c>='a' && c<='z'){\n                sb.setCharAt(c,'A');\n     \
    \       }\n            if(c>='A' && c<='Z'){\n                sb.setCharAt(c,'a');\n\
    \            }\n        }\n        return sb.toString();", "        char[] characters\
    \ = string.toCharArray();\n        \n        for(char c : characters) {\n    \
    \        if(Character.isLowerCase(c))\n                c = Character.toUpperCase(c);\n\
    \            else\n                c = Character.toLowerCase(c);\n           \
    \ \n            characters[characters.indexOf(c)] = c;\n        }\n        \n\
    \        return new String(characters);", '        return string.toLowerCase();',
  '        return new String(string.toLowerCase().chars().mapToObj(c -> (char) c ==
    Character.toLowerCase(c) ? (char) Character.toUpperCase(c) : (char) c).collect(Collectors.toList()));',
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \                    .mapToObj(String::valueOf)\n                    .map(c ->\
    \ c.equals('z') ? 'a' : c.equals('Z') ? 'A' : c)\n                    .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n                   \
    \ .toString();", "        int len = string.length();\n        StringBuilder builder\
    \ = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n          \
    \  char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n \
    \               builder.append(Character.toUpperCase(c));\n            } else\
    \ {\n                builder.append(Character.toLowerCase(c));\n            }\n\
    \        }\n        return builder.toString();", '        return string.chars().map(c
    -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).toArray((char[])
    new String("")).collect(Collectors.joining(""));', "        return string.toUpperCase().replaceAll(\"\
    [a-z]\",\n                m -> {\n                    if(m.equals(\"A\")) {\n\
    \                        return \"a\";\n                    } else if(m.equals(\"\
    B\")) {\n                        return \"b\";\n                    } else if(m.equals(\"\
    C\")) {\n                        return \"c\";\n                    } else if(m.equals(\"\
    D\")) {\n                        return \"d\";\n                    } else if(m.equals(\"\
    E\")) {\n                        return \"e\";\n                    } else if(m.equals(\"\
    F\")) {\n                        return \"f\";\n                    } else if(m.equals(\"\
    G\")) {\n                        return \"g\";\n                    } else if(m.equals(\"\
    H\")) {\n                        return \"h\";\n                    } else if(m.equals(\"\
    I\")) {\n                        return \"i\";\n                    } else if(m.equals(\"\
    J\")) {\n                        return \"j\";\n                    } else if(m.equals(\"\
    K\")) {\n                        return \"k\";\n                    } else if(m.equals(\"\
    L\")) {\n                        return \"l\";\n                    } else if(m.equals(\"\
    M\")) {\n                        return \"m\";\n                    } else if(m.equals(\"\
    N\")) {\n                        return \"n\";\n                    } else if(m.equals(\"\
    O\")) {\n                        return \"o\";\n                    } else if(m.equals(\"\
    P\")) {\n                        return \"p\";\n                    } else if(m.equals(\"\
    Q\")) {\n                        return \"q\";\n                    } else if(m.equals(\"\
    R\")) {\n                        return \"r\";\n                    } else if(m.equals(\"\
    S\")) {\n                        return \"s\";\n                    } else if(m.equals(\"\
    T\")) {\n                        return \"t\";\n                    } else if(m.equals(\"\
    U\")) {\n                        return \"u\";\n                    } else if(m.equals(\"\
    V\")) {\n                        return \"v\";\n                    } else if(m.equals(\"\
    W\")) {\n                        return \"w\";\n                    } else if(m.equals(\"\
    X\")) {\n                        return \"x\";\n                    } else if(m.equals(\"\
    Y\")) {\n                        return \"y\";\n                    } else if(m.equals(\"\
    Z\")) {\n                        return \"z\";\n                    } else {\n\
    \                        return m;\n                    }\n                }).toLowerCase();",
  "        boolean upper = false;\n        boolean lower = false;\n        char[]\
    \ chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++)\
    \ {\n            if (chars[i].toUpperCase() == chars[i]) {\n                upper\
    \ = true;\n                chars[i] = chars[i].toLowerCase();\n            } else\
    \ {\n                lower = true;\n                chars[i] = chars[i].toUpperCase();\n\
    \            }\n        }\n        return String.valueOf(chars);", '        return
    string.chars().mapToObj(i -> (char) (i == 0 ? i : Character.toUpperCase((char)
    i))).collect(Collectors.joining());', "        return string.chars()\n       \
    \     .mapToObj(c -> c == Character.toLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", '        return string.toLowerCase();',
  "        // your code here\n        Map<Character, Character> map = new HashMap<>();\n\
    \        for (char c : string.toCharArray()) {\n            map.put(c, Character.toUpperCase(c));\n\
    \        }\n        char[] flipped = new char[string.length()];\n        map.keySet().stream().forEach((c)\
    \ -> flipped[string.toCharArray().indexOf(c)] = map.get(c));\n        return new\
    \ String(flipped);", "        int length = string.length();\n        StringBuilder\
    \ result = new StringBuilder(length);\n\n        for (int i = 0; i < length; i++)\
    \ {\n            char c = string.charAt(i);\n            int code = Character.toUpperCase(c);\n\
    \            if (code < A) {\n                result.append(c);\n            }\
    \ else if (code > z) {\n                result.append(Character.toLowerCase(c));\n\
    \            } else {\n                result.append(c);\n            }\n    \
    \    }\n\n        return result.toString();", '        return string.replaceAll("[a-z]",
    "\u$1"+"A"+"\u$1").replaceAll("[A-Z]", "\u$1"+"a"+"\u$1");', "        return string.chars()\n\
    \            .mapToObj(c -> Character.toUpperCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        char[] arr = string.toCharArray();\n        Arrays.fill(arr, 'a');\n  \
    \      Arrays.fill(arr, 'A');\n        return String.valueOf(arr);", "       \
    \ \n        StringBuilder sb = new StringBuilder();\n        \n        for(char\
    \ c : string.toCharArray()) {\n            \n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \         else {\n                sb.append(Character.toUpperCase(c));\n     \
    \       }\n            \n        }\n        \n        return sb.toString();\n\
    \        ", "        StringBuilder builder = new StringBuilder();\n        for\
    \ (char ch : string.toCharArray()) {\n            builder.append(isLowerCase(ch)\
    \ ? Character.toUpperCase(ch) : Character.toLowerCase(ch));\n        }\n     \
    \   return builder.toString();", "        return string.chars()\n            .mapToObj(c\
    \ -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c)))\n\
    \            .collect(Collectors.joining(\"\"));", '        return string.toLowerCase().replace("
    ", "");', "        if (string == null || string.isEmpty()) {\n            throw\
    \ new IllegalArgumentException(\"input string cannot be null or empty.\");\n \
    \       }\n        StringBuilder builder = new StringBuilder();\n        char\
    \ c;\n        for (int i = 0; i < string.length(); i++) {\n            c = string.charAt(i);\n\
    \            if (Character.isUpperCase(c)) {\n                builder.append(Character.toLowerCase(c));\n\
    \            } else {\n                builder.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.sort(charArray);\n       \
    \ return new String(charArray);", "        return string.chars()\n           \
    \ .mapToObj(c -> (char) c)\n            .map(i -> Character.isLowerCase(i) ? Character.toUpperCase(i)\
    \ : Character.toLowerCase(i))\n            .collect(Collectors.joining(\"\"));",
  '        return string.toUpperCase().replace(" ", "");', "        char[] charArr\
    \ = string.toCharArray();\n        StringBuilder newString = new StringBuilder();\n\
    \        for (char c : charArr) {\n            int i = Character.getType(c);\n\
    \            if(i == Character.LOWER_CASE_LETTER ) {\n                newString.append(Character.toUpperCase(c));\n\
    \            } else {\n                newString.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return newString.toString();", "        return\
    \ string.toLowerCase()\n                .replaceAll(\"(.)([a-z])\", $1 + $1.toUpperCase())\n\
    \                .replaceAll(\"([a-z])(.)\", $1 + $2.toLowerCase());", '        return
    string.toLowerCase().replace(string.toUpperCase(), string.toLowerCase());', " \
    \       char[] arr = string.toCharArray();\n        Arrays.fill(arr, ' ', String.toLowerCase());\n\
    \        Arrays.fill(arr, ' ', String.toUpperCase());\n        return new String(arr);",
  "        return string.toLowerCase().chars().mapToObj(Character::toUpperCase)\n\
    \            .collect(Collectors.joining(\"\"));", "        return string.chars()\n\
    \                .mapToObj(i -> (char) i)\n                .map(Character::isLowerCase)\n\
    \                .map(i -> i > 0 ? 'A' + ((i - 1) % 26) + 'a' : Character.toLowerCase(i))\n\
    \                .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n                .toString();", "        return string.chars()\n\
    \            .mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))\n            .reduce(\"\", String::concat);", '        return
    string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c)
    : Character.toLowerCase(c))).collect(Collectors.joining());', "        return\
    \ string.toLowerCase()\n                .replaceAll(\"([a-z])\", s -> s.toUpperCase())\n\
    \                .replaceAll(\"([A-Z])\", s -> s.toLowerCase());", "        char[]\
    \ charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n    \
    \            charArray[i] = (char)(charArray[i] - 'A' + 'a');\n            }\n\
    \            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n             \
    \   charArray[i] = (char)(charArray[i] - 'a' + 'A');\n            }\n        }\n\
    \        return new String(charArray);", "        StringBuilder sb = new StringBuilder(string);\n\
    \        Collections.reverse(sb.chars());\n        return sb.toString();", '        return
    string.toLowerCase().replaceAll("\\b(\\w)", m -> Character.toUpperCase(m.group(1))
    + m.group(2)).replaceAll("\\b([A-Z])", m -> Character.toLowerCase(m.group(1))
    + m.group(1));', "        return string.toLowerCase()\n                .chars()\n\
    \                .mapToObj(c -> c == 'a' ? 'A' : 'a')\n                .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n                .toString();",
  "        // Initialize a new StringBuilder object\n        StringBuilder sb = new\
    \ StringBuilder(string);\n        // Iterate through each character and switch\
    \ case\n        for (char ch : string.toCharArray()) {\n            if (Character.isLowerCase(ch))\
    \ {\n                sb.append(Character.toUpperCase(ch));\n            } else\
    \ if (Character.isUpperCase(ch)) {\n                sb.append(Character.toLowerCase(ch));\n\
    \            }\n        }\n        // Return the string with the new case transformation\n\
    \        return sb.toString();", '        return string.chars().mapToObj(c ->
    (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        final StringBuilder flipped = new StringBuilder(string);\n        for(char\
    \ c : flipped.toCharArray()) {\n            if(c>='a'&&c<='z') {\n           \
    \     flipped.setCharAt(c, (char) ('A'+(char)c-'a'));\n            }\n       \
    \     else if(c>='A'&&c<='Z') {\n                flipped.setCharAt(c, (char) ('a'+(char)c-'A'));\n\
    \            }\n        }\n        return flipped.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            charArray[i] = (char) Character.toUpperCase(charArray[i]);\n\
    \        }\n        String flippedString = new String(charArray);\n        return\
    \ flippedString;", "        // Return the string in lowercase.\n        return\
    \ string.toLowerCase();", "        return string.chars()\n            .mapToObj(c\
    \ -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))\n\
    \            .collect(Collectors.joining());", "        \n        // Replace each\
    \ character in string with the opposite case character.\n        \n        //\
    \ For each character in the string\n        for (char c : string.toCharArray())\
    \ {\n            // If the character is lowercase, flip it.\n            if (Character.isLowerCase(c))\
    \ {\n                c = Character.toUpperCase(c);\n            }\n          \
    \  // Otherwise, flip it.\n            else if (Character.isUpperCase(c)) {\n\
    \                c = Character.toLowerCase(c);\n            }\n        }\n   \
    \     // Return the string.\n        return string.toString();", "        return\
    \ string.chars().mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))\n                           .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n                   \
    \        .toString();", '        return string.toLowerCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', "        String flipped = \"\";\n   \
    \     // flip each character\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            // get current character\n            char character = string.charAt(i);\n\
    \            // flip current character \n            if (Character.isLowerCase(character))\
    \ {\n                flipped += Character.toUpperCase(character);\n          \
    \  } else {\n                flipped += Character.toLowerCase(character);\n  \
    \          }\n        }\n        return flipped;", '        return string.toUpperCase().replaceAll("[a-z]",
    c -> c.toUpperCase());', "        return string.chars()\n                .mapToObj(i\
    \ -> String.valueOf((char) i + ((char) ('a' <= i && i <= 'z') ? 'A' : (char) ('A'\
    \ <= i && i <= 'Z') ? 'a' : ' ')))\n                .collect(Collectors.joining(\"\
    \"));", "        return string.chars().map(Character::isLowerCase).filter(c ->\
    \ !c).map(c -> c ? 'A' + 'a' : Character.toUpperCase(c)).collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append).toString();", '        return
    string.toLowerCase().replaceAll("[a-z]", s -> s.toUpperCase());', "        StringBuilder\
    \ result = new StringBuilder();\n        \n        for(int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            \n            if(c\
    \ == ' ') continue;\n            \n            if((c >= 'a' && c <= 'z') || (c\
    \ >= 'A' && c <= 'Z')) \n                result.append(Character.toUpperCase(c));\n\
    \            else\n                result.append(Character.toLowerCase(c));\n\
    \        }\n        \n        return result.toString();", "        return string.chars().mapToObj(c\
    \ -> (char) (((char) c) + 32))\n                .collect(Collectors.joining());",
  "        String flipped = \"\";\n        for(char c : string.toCharArray()) {\n\
    \            if('A' == c || ('a' == c)) {\n                flipped += Character.toUpperCase(c);\n\
    \            } else {\n                flipped += Character.toLowerCase(c);\n\
    \            }\n        }\n        return flipped;", "        char[] charArray\
    \ = string.toCharArray();\n        for (char c : charArray) {\n            if\
    \ (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n\
    \            } else if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n\
    \            }\n        }\n        return new String(charArray);", "        String\
    \ result = \"\";\n        for (char c : string.toCharArray()) {\n            if\
    \ (Character.isLowerCase(c))\n                result += Character.toUpperCase(c);\n\
    \            else if (Character.isUpperCase(c))\n                result += Character.toLowerCase(c);\n\
    \            else\n                result += c;\n        }\n        return result;",
  "        char[] arr = string.toCharArray();\n        Arrays.fill(arr,arr.length,0,arr.length-1,Character.toUpperCase(arr[arr.length-1]),Character.toLowerCase(arr[arr.length-1]));\n\
    \        return new String(arr);", '        return string.chars().map(c -> Character.isLowerCase(c)
    ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());',
  '        return string.toLowerCase();', "        return string.toLowerCase()\n \
    \           .replaceAll(\"([a-z])\", String::toUpperCase)\n            .replaceAll(\"\
    ([A-Z])\", String::toLowerCase);", "        return string.toUpperCase()\n    \
    \        .chars()\n            .mapToObj(c -> c == ' ' ? ' ' : Character.toUpperCase(c))\n\
    \            .toArray(String[]::new);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        return new String(charArray);", "  \
    \      StringBuilder result = new StringBuilder(string);\n        for (int i =\
    \ 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n   \
    \         if (Character.isLowerCase(c)) {\n                result.setCharAt(i,\
    \ Character.toUpperCase(c));\n            } else {\n                result.setCharAt(i,\
    \ Character.toLowerCase(c));\n            }\n        }\n        return result.toString();",
  "        return string.replaceAll(\"[a-z]\", i -> Character.toUpperCase(i))\n  \
    \                  .replaceAll(\"[A-Z]\", i -> Character.toLowerCase(i));", '        return
    string.chars().map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c) :
    Character.toUpperCase(c)).collect(Collectors.joining());', "        char[] chars\
    \ = string.toCharArray();\n        StringBuilder result = new StringBuilder(string.length());\n\
    \        for (char c : chars) {\n            int newChar = Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c);\n            result.append(newChar);\n\
    \        }\n        return result.toString();", "        char[] chars = string.toCharArray();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            char ch = chars[i];\n\
    \            if (Character.isUpperCase(ch)) {\n                chars[i] = Character.toLowerCase(ch);\n\
    \            } else if (Character.isLowerCase(ch)) {\n                chars[i]\
    \ = Character.toUpperCase(ch);\n            }\n        }\n        return new String(chars);",
  '        return string.chars().mapToObj(c -> Character.toUpperCase(c)).collect(Collectors.joining());',
  "        // Write your code here\n        String res = \"\";\n        for (int i\
    \ = 0; i < string.length(); i++) {\n            char ch = string.charAt(i);\n\
    \            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n\
    \            }\n            else if (Character.isLowerCase(ch)) {\n          \
    \      ch = Character.toUpperCase(ch);\n            }\n            res = res +\
    \ ch;\n        }\n        return res;", "        return string.replaceAll(\"([a-z])\"\
    , string::toUpperCase)\n                .replaceAll(\"([A-Z])\", string::toLowerCase);",
  '        return string.toUpperCase().replaceAll("(?i)[A-Z]", c -> c.toLowerCase());',
  "        StringBuilder builder = new StringBuilder();\n        char[] chars = string.toCharArray();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if (Character.isUpperCase(c)) {\n                builder.append(Character.toLowerCase(c));\n\
    \            } else {\n                builder.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            if (Character.isLowerCase(charArray[i]))\n             \
    \   charArray[i] = Character.toUpperCase(charArray[i]);\n            else if (Character.isUpperCase(charArray[i]))\n\
    \                charArray[i] = Character.toLowerCase(charArray[i]);\n       \
    \ }\n        return String.valueOf(charArray);", "        // Declare a variable\
    \ to store the result string.\n        String result = \"\";\n        // Iterate\
    \ through the string character-by-character.\n        for (int i = 0; i < string.length();\
    \ i++) {\n            // Store the character-as-is if the character is lower case.\n\
    \            if (Character.toLowerCase(string.charAt(i)) == string.charAt(i))\
    \ {\n                result += string.charAt(i);\n            }\n            //\
    \ Store the character converted to uppercase if the character is upper case.\n\
    \            else if (Character.toUpperCase(string.charAt(i)) == string.charAt(i))\
    \ {\n                result += Character.toUpperCase(string.charAt(i));\n    \
    \        }\n        }\n        // Return the converted string.\n        return\
    \ result;", "        string = string.toLowerCase();\n        string = string.toUpperCase();\n\
    \        return string;", "        return string.chars()\n            .mapToObj(c\
    \ -> (char) (c == ' ' ? 'a' : (char) ('A' + (c - 'a'))))\n            .collect(Collectors.joining(\"\
    \"));", "        return string.chars()\n            .mapToObj(c -> (char) isUpper(c)\
    \ ? isLower(c) ? c : toUpper(c) : toLower(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        char[] charArray = string.toCharArray();\n        for (char c : charArray)\
    \ {\n            String upper = Character.toString((char) Character.toUpperCase(c));\n\
    \            String lower = Character.toString((char) Character.toLowerCase(c));\n\
    \            string = string.replace(c, upper + lower);\n        }\n        return\
    \ string;", "        char[] charArray = string.toCharArray();\n        for (int\
    \ i = 0; i < charArray.length; i++) {\n            if (charArray[i] >= 'a' &&\
    \ charArray[i] <= 'z') {\n                charArray[i] ^= 0x5c;\n            }\n\
    \            else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n        \
    \        charArray[i] ^= 0x5c;\n            }\n        }\n        return new String(charArray);",
  "        StringBuilder newString = new StringBuilder();\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            char c = string.charAt(i);\n      \
    \      if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n              \
    \  newString.append(Character.toLowerCase(c));\n            } else if((c >= '0'\
    \ && c <= '9')) {\n                newString.append(c);\n            } else {\n\
    \                newString.append(Character.toUpperCase(c));\n            }\n\
    \        }\n        return newString.toString();", "        // Only change characters\
    \ if they are uppercase or lowercase\n        String res = string;\n        for\
    \ (int i = 0; i < res.length(); ++i) {\n            char c = res.charAt(i);\n\
    \            if (Character.isUpperCase(c)) {\n                res = res.substring(0,\
    \ i) + res.substring(i, i + 1) + Character.toLowerCase(c) + res.substring(i +\
    \ 1);\n            }\n            else if (Character.isLowerCase(c)) {\n     \
    \           res = res.substring(0, i) + res.substring(i, i + 1) + Character.toUpperCase(c)\
    \ + res.substring(i + 1);\n            }\n        }\n        return res;", " \
    \       return string.toLowerCase(Locale.ROOT).replaceAll(\"(?!^)([a-z])\", m\
    \ -> {\n            String upper = Character.toUpperCase(m.codePointAt(0));\n\
    \            return upper != m.codePointAt(0) ? upper : \"\";\n        });", " \
    \       return string.chars()\n                .mapToObj(String::valueOf)\n  \
    \              .collect(Collectors.joining(\"\", \"\"));", "        StringBuilder\
    \ sb = new StringBuilder(string);\n        for (char c : sb.toCharArray()) {\n\
    \            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n\
    \            }\n            else if (Character.isLowerCase(c)) {\n           \
    \     c = Character.toUpperCase(c);\n            }\n            sb.setCharAt(c,\
    \ c);\n        }\n        return sb.toString();", "        return string.chars()\n\
    \                .mapToObj(c -> (char) c)\n                .mapToObj(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n                .collect(joining());",
  "        return string.chars().mapToObj(c -> {\n            char c1 = Character.toLowerCase(c);\n\
    \            char c2 = Character.toUpperCase(c);\n            if (c1 == c2)\n\
    \                return c1;\n            return c2;\n        }).collect(Collectors.joining(\"\
    \"));"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
