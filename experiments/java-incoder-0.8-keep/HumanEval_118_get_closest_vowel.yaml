completions:
- "        Set<Character> vowels = Sets.newHashSet(new HashSet<>(Arrays.asList('a',\
  \ 'e', 'i', 'o', 'u'));\n        Set<Character> consonants = Sets.newHashSet(new\
  \ HashSet<>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
  \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'));\n        Set<Character> vowelsAtEnds\
  \ = Sets.newHashSet(new HashSet<>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j',\
  \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'));\n    \
  \    Set<Character> vowelsAtBeginning = Sets.newHashSet(new HashSet<>(Arrays.asList('a',\
  \ 'e', 'i', 'o', 'u'));\n        Set<Character> vowelsOnLeft = Sets.newHashSet(new\
  \ HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        Set<Character> vowelsOnRight\
  \ = Sets.newHashSet(new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n   \
  \     Set<Character> vowelsOnLeft = Sets.newHashSet(new HashSet<>(Arrays.asList('a',\
  \ 'e', 'i', 'o', 'u'));\n        for (char letter : word.toCharArray()) {\n    \
  \        if (vowels.contains(letter)) {\n                vowelsOnLeft.add(letter);\n\
  \            } else if (consonants.contains(letter)) {\n                vowelsOnRight.add(letter);\n\
  \            } else if (vowelsAtEnds.contains(letter)) {\n                vowelsAtEnds.add(letter);\n\
  \            } else if (vowelsAtBeginning.contains(letter)) {\n                vowelsAtBeginning.add(letter);\n\
  \            } else if (vowelsOnLeft.contains(letter)) {\n                vowelsOnLeft.add(letter);\n\
  \            } else if (vowelsOnRight.contains(letter)) {\n                vowelsOnRight.add(letter);\n\
  \            } else {\n                return \"\";\n            }\n        }\n\
  \        Set<Character> allVowels = new HashSet<>(vowels);\n        allVowels.addAll(vowelsAtEnds);\n\
  \        allVowels.addAll(vowelsAtBeginning);\n        allVowels.addAll(vowelsOnLeft);\n\
  \        allVowels.addAll(vowelsOnRight);\n        if (allVowels.containsAll(vowels))\
  \ {\n            vowelsOnLeft = new HashSet<>(vowelsOnLeft);\n            vowelsOnRight\
  \ = new HashSet"
- "        Set<Character> vowels = Sets.newHashSet(\"a\",\"e\",\"i\",\"o\",\"u\");\n\
  \        return word.replaceAll(\"[aeiou]\", \"\").substring(word.length()-1, word.length()).stream()\n\
  \                .map(c -> Character.toLowerCase(c))\n                .filter(Character.isLetter)\n\
  \                .filter(vowels::contains)\n                .sorted((c1, c2) ->\
  \ Math.abs(c1-c2).toInt())\n                .findFirst()\n                .map(c\
  \ -> String.valueOf(c))\n                .orElse(\"\");"
- "        Set<Character> set = new HashSet<Character>();\n        for (int i = 0;\
  \ i < word.length(); i++) {\n            if (set.contains(word.charAt(i))) {\n \
  \               set.add(word.charAt(i));\n            } else {\n               \
  \ set.add(word.charAt(i));\n                String newWord = \"\";\n           \
  \     for (int j = i; j < word.length(); j++) {\n                    newWord = newWord\
  \ + word.charAt(j);\n                }\n                newWord = newWord + word.charAt(i);\n\
  \                Set<Character> set2 = new HashSet<Character>();\n             \
  \   for (int j = i; j < word.length(); j++) {\n                    set2.add(word.charAt(j));\n\
  \                }\n                String newWord2 = \"\";\n                for\
  \ (int k = i; k < word.length(); k++) {\n                    newWord2 = newWord2\
  \ + word.charAt(k);\n                }\n                newWord2 = newWord2 + word.charAt(i);\n\
  \                if (newWord2.equals(newWord)) {\n                    if (newWord2.toUpperCase().equals(newWord))\
  \ {\n                        for (int j = i; j < word.length(); j++) {\n       \
  \                     set2.add(word.charAt(j));\n                        }\n   \
  \                     newWord2 = \"\";\n                        for (int k = i;\
  \ k < word.length(); k++) {\n                            newWord2 = newWord2 + word.charAt(k);\n\
  \                        }\n                    }\n                }\n         \
  \       for (int j = i; j < word.length(); j++) {\n                    set2.add(word.charAt(j));\n\
  \                }\n                String newWord3 = \"\";\n                for\
  \ (int k = i; k < word.length(); k++) {\n                    newWord3 = newWord3\
  \ + word.charAt(k);\n                }\n                newWord3 = newWord3 + word.charAt(i);\n\
  \                if (newWord3.equals(newWord)) {\n                    if (newWord3.toUpperCase().equals(newWord))\
  \ {\n                        for (int j = i; j < word.length(); j++) {\n       \
  \                     set2.add(word.charAt(j));\n                        }\n   \
  \                     newWord3 = \"\";\n                        for (int k = i;\
  \ k < word.length(); k++) {\n                            newWord3 = newWord3 + word.charAt(k);\n\
  \                        }\n                    }\n                }\n         \
  \       for (int j = i; j < word.length(); j++) {\n                    set2.add(word.charAt(j));\n\
  \                }\n                String newWord4 = \"\";\n                for\
  \ (int k = i; k < word.length(); k++) {\n                    newWord4 = newWord4\
  \ + word.charAt(k);\n                }\n                newWord4 = newWord4 + word.charAt(i);\n\
  \                if (newWord4.equals(newWord)) {\n                    if (newWord4.toUpperCase().equals(newWord))\
  \ {\n                        for (int j = i; j < word.length(); j++) {\n       \
  \                     set2.add(word.charAt(j));\n                        }\n   \
  \                     newWord4 = \"\";\n                        for (int k = "
- "        // Your code goes here\n        String vowels = \"AEIOUaeiou\";\n     \
  \   char[] vowels_array = vowels.toCharArray();\n\n        char[] word = word.toCharArray();\n\
  \n        int start = 0;\n        int end = word.length - 1;\n\n        int min_idx\
  \ = Math.min(start, end);\n\n        while(start < end) {\n\n            int idx\
  \ = word[start] - 'A';\n            if (idx < 0 || idx > 2)\n                continue;\n\
  \            int idx = word[end] - 'A';\n            if (idx < 0 || idx > 2)\n \
  \               continue;\n\n            if (idx >= vowels_array.length) {\n   \
  \             end--;\n                continue;\n            }\n\n            String\
  \ substr = String.valueOf(word.subarray(start, end + 1));\n            if (substr.contains(vowels_array[idx]))\n\
  \                return vowels_array[idx];\n            start++;\n            end--;\n\
  \        }\n        return \"\";"
- "        boolean firstConsonant = true;\n        boolean secondConsonant = true;\n\
  \        StringBuilder result = new StringBuilder();\n        int len = 0;\n   \
  \     List<String> vowels = new ArrayList<>();\n        for(char c : word.toCharArray())\
  \ {\n            if(!Character.isLetter(c)) {\n                len--;\n        \
  \    } else {\n                if(firstConsonant && secondConsonant) {\n       \
  \             vowels.add(\"a\");\n                    vowels.add(\"e\");\n     \
  \               vowels.add(\"i\");\n                    vowels.add(\"o\");\n   \
  \                 vowels.add(\"u\");\n                    vowels.add(\"A\");\n \
  \                   vowels.add(\"E\");\n                    vowels.add(\"I\");\n\
  \                    vowels.add(\"O\");\n                    vowels.add(\"U\");\n\
  \                }\n                firstConsonant = false;\n                secondConsonant\
  \ = false;\n                if(Character.isLetter(c)) {\n                    if(vowels.contains(String.valueOf(c)))\
  \ {\n                        firstConsonant = true;\n                    } else\
  \ {\n                        secondConsonant = true;\n                    }\n  \
  \              }\n            }\n        }\n\n        for(int i = len; i >= 0; i--)\
  \ {\n            boolean match = false;\n            for(int j = 0; j < vowels.size();\
  \ j++) {\n                String vowel = vowels.get(j);\n                if(vowel.contains(String.valueOf(word.charAt(i))))\
  \ {\n                    match = true;\n                    result.append(vowel);\n\
  \                }\n            }\n            if(match == false) {\n          \
  \      result.append(\"\");\n            }\n        }\n        return result.toString();"
- "        String vowels = \"aaiiiiu\";\n        String consonants = \"bcdghjklmnpqrstvwxz\"\
  ;\n        int lastvowel = word.lastIndexOf(vowels, 0);\n        if (lastvowel ==\
  \ -1) {\n            return \"\";\n        }\n        int firstvowel = word.indexOf(consonants,\
  \ lastvowel);\n        if (firstvowel == -1) {\n            return \"\";\n     \
  \   }\n        int index = firstvowel;\n        while (index != -1) {\n        \
  \    int pos = word.lastIndexOf(consonants, index);\n            String vowel =\
  \ word.substring(lastvowel, pos);\n            if (vowels.contains(vowel)) {\n \
  \               return vowel;\n            }\n            lastvowel = pos;\n   \
  \         index = word.indexOf(consonants, pos);\n        }\n        return \"\"\
  ;"
- "        Set<String> vowels = new HashSet<>();\n        for (char i : word.toCharArray())\
  \ {\n            if (Character.isLetterOrDigit(i)) {\n                vowels.add(i);\n\
  \            }\n        }\n\n        char left = word.charAt(0);\n        char right\
  \ = word.charAt(word.length() - 1);\n\n        String result = \"\";\n        while\
  \ (left <= right) {\n            if (vowels.contains((char)left)) {\n          \
  \      String sub = word.substring(0,word.length() - 1);\n                left =\
  \ word.charAt(word.length() - 1);\n                if (sub.equals(\"\")) {\n   \
  \                 return result;\n                } else {\n                   \
  \ result += word.charAt(word.length() - 1) + \" \";\n                }\n       \
  \     }\n            left++;\n        }\n        return result;"
- "        String result=\"\";\n        int startIndex = 0;\n        int endIndex\
  \ = word.length() - 1;\n        while(startIndex < endIndex) {\n            if (word.charAt(startIndex)\
  \ == word.charAt(endIndex)) {\n                return word;\n            } else\
  \ if (word.charAt(startIndex) < word.charAt(endIndex)) {\n                result+=\
  \ word.charAt(startIndex++);\n            } else {\n                result+= word.charAt(endIndex--);\n\
  \            }\n        }\n        return result;"
- "        String[] arr = word.split(\" \");\n        Arrays.sort(arr);\n        for(String\
  \ s: arr) {\n            if(s.matches(\".*\\\\p{InCombiningDiacriticalMarks}.*\"\
  )) continue;\n            int index = Arrays.binarySearch(arr, s);\n           \
  \ if(index < 0) {\n                return \"\";\n            } else if(index ==\
  \ 0) {\n                if(s.matches(\".*[aeiou].*\")) {\n                    return\
  \ s;\n                }\n            } else if(index == arr.length-1) {\n      \
  \          if(s.matches(\".*[^aeiou].*\")) {\n                    return s;\n  \
  \              }\n            }\n        }\n        return \"\";"
- "        char start = 0;\n        char end = 0;\n        String vowel = \"\";\n\
  \        ArrayList<String> vowels = new ArrayList<String>();\n        // Loop through\
  \ the word\n        for (int i = 0; i < word.length(); i++) {\n            // Get\
  \ current char\n            char current = word.charAt(i);\n\n            // Get\
  \ previous char\n            if (i > 0 && word.charAt(i - 1) == word.charAt(i -\
  \ 2)) {\n                end = current - 1;\n            }\n            else {\n\
  \                end = current - 1;\n                start = current + 1;\n    \
  \        }\n            // Get next char\n            char next = word.charAt(i\
  \ + 1);\n\n            // Check if the previous char and next char is a vowel\n\
  \            if (vowels.contains(\"\" + current + next)) {\n                vowel\
  \ = current + next;\n                break;\n            }\n            vowels.add(\"\
  \" + current + next);\n        }\n\n        return vowel;"
- "        \n        \n        List<String> vowels = new ArrayList<>();\n        vowels.add(\"\
  a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"u\");\n        \n        \n        \n        for (String\
  \ vowel : vowels) {\n            if (word.contains(\"[\" + vowel + \"]\")) {\n \
  \               int index = word.lastIndexOf(vowel);\n                if (index\
  \ > 0) {\n                    word = word.substring(index + 1);\n              \
  \  }\n            }\n        }\n        \n        \n        return word;"
- "        String vowels = \"aeiouAEIOU\";\n        String vowelsArray[] = vowels.split(\"\
  \");\n        String vowelsString = \"\";\n        String restString = word;\n \
  \       for(String vowel : vowelsArray) {\n            String substr = restString.substring(0,restString.lastIndexOf(vowel));\n\
  \            restString = substr;\n            vowelsString += vowel;\n        }\n\
  \        return vowelsString;"
- "        List<Character> list = Arrays.stream(word.chars()).map(Character::toLowerCase).collect(Collectors.toList());\n\
  \        for (int i = word.length() - 1; i >= 0; i--) {\n            if (list.get(list.size()\
  \ - 1) != list.get(i) && list.get(i) != 'a' && list.get(i) != 'e' && list.get(i)\
  \ != 'i' && list.get(i) != 'o' && list.get(i) != 'u')\n                return \"\
  \";\n        }\n        List<Character> list1 = Arrays.stream(word.chars()).map(Character::toLowerCase).collect(Collectors.toList());\n\
  \        for (int i = word.length() - 1; i >= 0; i--) {\n            if (list1.get(list.size()\
  \ - 1) != list1.get(i) && list1.get(i) != 'a' && list1.get(i) != 'e' && list1.get(i)\
  \ != 'i' && list1.get(i) != 'o' && list1.get(i) != 'u')\n                return\
  \ \"\";\n        }\n        List<Character> list2 = Arrays.stream(word.chars()).map(Character::toLowerCase).collect(Collectors.toList());\n\
  \        for (int i = word.length() - 1; i >= 0; i--) {\n            if (list2.get(list.size()\
  \ - 1) != list2.get(i) && list2.get(i) != 'a' && list2.get(i) != 'e' && list2.get(i)\
  \ != 'i' && list2.get(i) != 'o' && list2.get(i) != 'u')\n                return\
  \ \"\";\n        }\n        return \"\";"
- "        String result = \"\";\n        if (word == null || word.length() < 1) {\n\
  \            return result;\n        }\n        char[] arr = word.toCharArray();\n\
  \        int pos = 1;\n        for (int i = pos - 1; i >= 0; i--) {\n          \
  \  if (Character.isLetter(arr[pos])) {\n                char c = arr[pos];\n   \
  \             pos = i;\n                char prev;\n                String s;\n\
  \                if (prev == null && i == 0) {\n                    s = \"a\";\n\
  \                } else if (prev == null) {\n                    s = \"a\";\n  \
  \              } else if (i == 0) {\n                    s = \"a\";\n          \
  \      } else {\n                    s = \"b\";\n                }\n           \
  \     pos = i;\n                while (Character.isLetter(arr[pos])) {\n       \
  \             prev = c; // update previous char\n                    pos++;\n  \
  \              }\n                StringBuilder sb = new StringBuilder();\n    \
  \            int j = i + 1;\n                if (j < arr.length - 1) {\n       \
  \             while (j < arr.length && Character.isLetter(arr[j])) {\n         \
  \               sb.append(arr[pos]);\n                        j++;\n           \
  \         }\n                    sb.append(arr[pos]);\n                }\n     \
  \           result = sb.toString().substring(i - 1, i);\n            }\n       \
  \ }\n        return result;"
- "        Map<Character, Integer> map = new TreeMap<>();\n        // Iterate over\
  \ all the characters in the string\n        for (char c : word.toCharArray()) {\n\
  \            // Get the current map value\n            Integer i = map.get(c);\n\
  \            // If we already added a key to the map\n            if (i == null)\
  \ {\n                // Add the character to the map\n                map.put(c,\
  \ 1);\n            } else {\n                // Increment the counter\n        \
  \        map.put(c, i + 1);\n            }\n        }\n        // Get the maximum\
  \ value of the map\n        Integer max = Collections.max(map.values());\n     \
  \   // Iterate over all the characters in the string\n        for (char c : word.toCharArray())\
  \ {\n            // Get the current map value\n            Integer i = map.get(c);\n\
  \            // If we already added a key to the map\n            if (i == null)\
  \ {\n                // If the maximum value is 0 \n                // No vowel\
  \ was found\n                // Return empty string\n                if (max ==\
  \ 0) {\n                    return \"\";\n                }\n                //\
  \ Increment the counter\n                map.put(c, 1);\n            } else if (i\
  \ == max) {\n                // If the maximum value is equal to the current map\
  \ value\n                // Return the character\n                return c;\n  \
  \          }\n        }\n        // Return empty string if we didn't find any vowel\n\
  \        return \"\";"
- "        // write your code here\n        int index = word.length()-1;\n       \
  \ while (index >= 0) {\n            if (word.substring(index).matches(\"[aeiouAEIOU]\"\
  )) {\n                index -= 1;\n            } else {\n                index -=\
  \ 1;\n                break;\n            }\n        }\n        return \"\";"
- "        if(word == null || word.isEmpty()) return \"\";\n        List<String> vowels\
  \ = new ArrayList<>();\n        for(int i = word.length() - 1; i >= 0; i--) {\n\
  \            String currChar = word.substring(0, i + 1);\n            if(vowels.contains(currChar))\
  \ {\n                return currChar;\n            }\n            vowels.add(i +\
  \ 1, currChar);\n        }\n        for(int i = 0; i < word.length(); i++) {\n \
  \           String currChar = word.substring(i, i + 1);\n            if(vowels.contains(currChar))\
  \ {\n                return currChar;\n            }\n            vowels.add(i +\
  \ 1, currChar);\n        }\n        return \"\";"
- "        // write your code here\n        char vowel = ' ';\n        StringBuilder\
  \ result = new StringBuilder();\n        for(int i = word.length()-1; i >= 0; i--)\
  \ {\n            char c = word.charAt(i);\n            if (c == 'a'||c == 'e' ||\
  \ c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\
  \ || c == 'U') {\n                vowel = c;\n                break;\n         \
  \   }\n        }\n        for (int i = word.length()-1; i >= 0; i--) {\n       \
  \     char c = word.charAt(i);\n            if (vowel != ' ') {\n              \
  \  if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c\
  \ == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                    result.append(vowel);\n\
  \                    break;\n                }\n            }\n        }\n     \
  \   return result.toString();"
- "        // write your code here\n        LinkedList<Character> chars = new LinkedList<Character>();\n\
  \        LinkedList<Character> restOfWord = new LinkedList<Character>();\n     \
  \   LinkedList<Character> restOfWord2 = new LinkedList<Character>();\n        LinkedList<Character>\
  \ restOfWord3 = new LinkedList<Character>();\n        int j=0;\n        int k=0;\n\
  \        for(int i=0;i<word.length();i++){\n            char c = word.charAt(i);\n\
  \            if(c!='A' && c!='E' && c!='I' && c!='O' && c!='U' && c!='Y'){\n   \
  \             chars.add(c);\n            }else{\n                j=i;\n        \
  \    }\n        }\n        for(int i=0;i<word.length();i++){\n            char c\
  \ = word.charAt(i);\n            if(c!='A' && c!='E' && c!='I' && c!='O' && c!='U'\
  \ && c!='Y'){\n                restOfWord.add(c);\n            }else{\n        \
  \        k=i;\n            }\n        }\n        for(int i=0;i<restOfWord.size();i++){\n\
  \            char c = restOfWord.get(i);\n            if(c=='A' || c=='E' || c=='I'\
  \ || c=='O' || c=='U' || c=='Y'){\n                restOfWord2.add(c);\n       \
  \     }\n        }\n        for(int i=0;i<restOfWord2.size();i++){\n           \
  \ char c = restOfWord2.get(i);\n            if(c=='A' || c=='E' || c=='I' || c=='O'\
  \ || c=='U' || c=='Y'){\n                restOfWord3.add(c);\n            }\n  \
  \      }\n        if(j>k){\n            int temp=j;\n            j=k;\n        \
  \    k=temp;\n        }\n        for(int i=0;i<restOfWord3.size();i++){\n      \
  \      char c = restOfWord3.get(i);\n            if(c=='A' || c=='E' || c=='I' ||\
  \ c=='O' || c=='U' || c=='Y'){\n                return c;\n            }\n     \
  \   }\n        return \"\";"
- "        // Solution 1: use regex match to get consonant and vowel string \n   \
  \     // find all vowel in word\n        // find all consonant in word\n       \
  \ // find closest vowel\n        // find closest consonant"
- "        List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n\
  \        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
  );\n        vowels.add(\"u\");\n        if (word.isEmpty())\n            return\
  \ \"\";\n        for (Character letter : word.toCharArray()) {\n            for\
  \ (String vowel : vowels) {\n                if (letter.equals(vowel)) {\n     \
  \               int index = vowels.indexOf(vowel);\n                    if (index\
  \ > 0 && index != vowels.size() - 1) {\n                        int i = index;\n\
  \                        while (i < vowels.size() - 1) {\n                     \
  \       if (vowels.get(i).equalsIgnoreCase(vowels.get(++i)))\n                 \
  \               break;\n                        }\n                        if (i\
  \ == vowels.size() - 1)\n                            return vowels.get(vowels.size()\
  \ - 1);\n                    }\n                }\n            }\n        }\n  \
  \      return \"\";"
- "        ArrayList vowels = new ArrayList();\n        vowels.add(\"a\");\n     \
  \   vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n\
  \        vowels.add(\"u\");\n        vowels.add(\"y\");\n        char[] chars =\
  \ word.toCharArray();\n        char currentChar;\n        char lastChar = chars[chars.length\
  \ - 1];\n        for(char c : chars) {\n            currentChar = c;\n         \
  \   int pos;\n            if(vowels.contains(currentChar)) {\n                pos\
  \ = vowels.indexOf(currentChar);\n                if(pos != -1) {\n            \
  \        vowels.remove(pos);\n                }\n            }\n            if(currentChar\
  \ != lastChar) {\n                if(vowels.contains(currentChar)) {\n         \
  \           pos = vowels.indexOf(currentChar);\n                    if(pos != -1)\
  \ {\n                        vowels.remove(pos);\n                    }\n      \
  \          }\n            }\n        }\n        return vowels.isEmpty() ? \"\" :\
  \ vowels.get(vowels.size()-1);"
- "        // Your code goes here\n        StringBuilder result = new StringBuilder();\n\
  \        for(int i = word.length()-2; i > 0; i--) {\n            if(Character.isLetter(word.charAt(i)))\
  \ {\n                String leftVowel = word.substring(i,i+2);\n               \
  \ String rightVowel = word.substring(i+1,i+3);\n                if(leftVowel.equals(\"\
  a\") || leftVowel.equals(\"e\") || leftVowel.equals(\"i\") || leftVowel.equals(\"\
  o\") || leftVowel.equals(\"u\")) {\n                    if(rightVowel.equals(\"\
  a\") || rightVowel.equals(\"e\") || rightVowel.equals(\"i\") || rightVowel.equals(\"\
  o\") || rightVowel.equals(\"u\")) {\n                        String finalString\
  \ = leftVowel + rightVowel;\n                        result.insert(i,finalString);\n\
  \                        break;\n                    }\n                }\n    \
  \        }\n        }\n        return result.toString();"
- "        List<Character> vowels = new ArrayList<>();\n        vowels.add('a');\n\
  \        vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n\
  \        vowels.add('u');\n        vowels.add('y');\n\n        for(int i = word.length()\
  \ - 1; i > 0; i--) {\n            if(vowels.contains(word.charAt(i))) {\n      \
  \          return word.charAt(i);\n            }\n        }\n        return \"\"\
  ;"
- "        int index = 0;\n        int i = 0;\n        int length = word.length();\n\
  \        int rightIndex = length - 1;\n        while (index < length && word.charAt(index)\
  \ == 'a') {\n            index++;\n        }\n        while (rightIndex >= 0 &&\
  \ word.charAt(rightIndex) == 'a') {\n            rightIndex--;\n        }\n    \
  \    while (i < index) {\n            if (word.charAt(i) != word.charAt(index +\
  \ i)) {\n                i = index - 1;\n            } else {\n                i++;\n\
  \            }\n            index++;\n            rightIndex--;\n        }\n   \
  \     if (index >= 0) {\n            return word.charAt(index);\n        }\n   \
  \     return \"\";"
- "        // return empty string if word doesn't contain any vowel\n        if (word.indexOf('a')\
  \ >= 0) {\n            return \"\";\n        }\n        if (word.indexOf('e') >=\
  \ 0) {\n            return \"\";\n        }\n        if (word.indexOf('i') >= 0)\
  \ {\n            return \"\";\n        }\n        if (word.indexOf('o') >= 0) {\n\
  \            return \"\";\n        }\n        if (word.indexOf('u') >= 0) {\n  \
  \          return \"\";\n        }\n        // return empty string if word doesn't\
  \ contain any vowel\n        if (word.indexOf('A') >= 0) {\n            return \"\
  \";\n        }\n        if (word.indexOf('E') >= 0) {\n            return \"\";\n\
  \        }\n        if (word.indexOf('I') >= 0) {\n            return \"\";\n  \
  \      }\n        if (word.indexOf('O') >= 0) {\n            return \"\";\n    \
  \    }\n        if (word.indexOf('U') >= 0) {\n            return \"\";\n      \
  \  }\n        // return empty string if word doesn't contain any vowel\n       \
  \ if (word.indexOf('a') >= 0) {\n            return \"\";\n        }\n        if\
  \ (word.indexOf('e') >= 0) {\n            return \"\";\n        }\n        if (word.indexOf('i')\
  \ >= 0) {\n            return \"\";\n        }\n        if (word.indexOf('o') >=\
  \ 0) {\n            return \"\";\n        }\n        if (word.indexOf('u') >= 0)\
  \ {\n            return \"\";\n        }\n        // return empty string if word\
  \ doesn't contain any vowel\n        if (word.indexOf('A') >= 0) {\n           \
  \ return \"\";\n        }\n        if (word.indexOf('E') >= 0) {\n            return\
  \ \"\";\n        }\n        if (word.indexOf('I') >= 0) {\n            return \"\
  \";\n        }\n        if (word.indexOf('O') >= 0) {\n            return \"\";\n\
  \        }\n        if (word.indexOf('U') >= 0) {\n            return \"\";\n  \
  \      }\n        // return empty string if word doesn't contain any vowel\n   \
  \     if (word.indexOf('a') >= 0) {\n            return \"\";\n        }\n     \
  \   if (word.indexOf('e') >= 0) {\n            return \"\";\n        }\n       \
  \ if (word.indexOf('i') >= 0) {\n            return \"\";\n        }\n        if\
  \ (word.indexOf('o') >= 0) {\n            return \"\";\n        }\n        if (word.indexOf('u')\
  \ >= 0) {\n            return \"\";\n        }\n        // return empty string if\
  \ word doesn't contain any vowel\n        if (word.indexOf('A') >= 0) {\n      \
  \      return \"\";\n        }\n        if (word.indexOf('E') >= 0) {\n        \
  \    return \"\";\n        }\n        if (word.indexOf('I') >= 0) {\n          \
  \  return \"\";\n        }\n        if (word.indexOf('O') >= 0) {\n            return\
  \ \"\";\n        }\n        if (word.indexOf('U') >= 0) {\n            return \"\
  \";\n        }\n        // return empty string if word doesn't contain any vowel\n\
  \        if (word.indexOf('A') >= 0) {\n            return \"\";\n        }\n  \
  \      if (word.indexOf('E') >= 0) {\n            return \"\";\n        }\n    \
  \    if (word.indexOf('I') >= 0) {\n            return \"\";\n        }\n      \
  \  if (word.indexOf('O') >= 0) {\n            return "
- "        // Your code here\n        if(word.length()<2){\n            return \"\"\
  ;\n        }\n        Set<Character> vowels = Arrays.stream(\"aeiouAEIOU\".toCharArray())\n\
  \                .filter(Character::isVowel)\n                .collect(Collectors.toSet());\n\
  \        for(char vowel : vowels.toArray()){\n            int pos = word.indexOf(vowel);\n\
  \            String suffix = word.substring(pos+1);\n            if(!suffix.isEmpty()){\n\
  \                Set<Character> consonants = Arrays.stream(\"bcdfghjklmnpqrstvwxyz\"\
  .toCharArray())\n                        .filter(Character::isLetter)\n        \
  \                .collect(Collectors.toSet());\n                for(char c : consonants.toArray()){\n\
  \                    String suffix = suffix.substring(0, suffix.length()-1);\n \
  \                   if(suffix.startsWith(c+\"\") && suffix.length()>=1){\n     \
  \                   String suffix = suffix.substring(1);\n                     \
  \   if(vowels.contains(c+\"\") || vowels.contains(suffix)){\n                  \
  \          String result = String.valueOf(vowel);\n                            int\
  \ index = result.indexOf(c);\n                            if(index>=0){\n      \
  \                          return result.substring(0, index);\n                \
  \            }\n                        }\n                    }\n             \
  \   }\n            }\n        }\n        return \"\";"
- "        Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n  \
  \      vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
  \      vowels.add('u');\n        vowels.add('y');\n        vowels.add('\xF3');\n\
  \        vowels.add('\xFA');\n        vowels.add('\u011B');\n        vowels.add('\u016F\
  ');\n        vowels.add('\u017E');\n\n        StringBuilder builder = new StringBuilder();\n\
  \        builder.append(word);\n        for (int i = word.length() - 1; i >= 0;\
  \ i--) {\n            String vowel = word.substring(i).replaceAll(\"(.)\\\\1+\"\
  , match -> {\n                StringBuilder sb = new StringBuilder();\n        \
  \        sb.append(Character.toLowerCase(match.group(0)));\n                for\
  \ (char c : match.group(0).toCharArray()) {\n                    if (vowels.contains(c))\
  \ {\n                        sb.append(c);\n                        break;\n   \
  \                 }\n                    sb.append(c);\n                }\n    \
  \            return sb.toString();\n            });\n            if (vowel.length()\
  \ > 0 && vowel.charAt(0) != '^') {\n                builder.setCharAt(i, vowel.charAt(0));\n\
  \                break;\n            }\n        }\n        return builder.toString();"
- "        char firstLetter = word.charAt(word.length() - 1);\n        char lastLetter\
  \ = word.charAt(word.length() - 2);\n\n        return getClosestVowel(word, 0, firstLetter,\
  \ lastLetter);"
- "        // Your code goes here\n        char str[] = word.toCharArray();\n    \
  \    Arrays.sort(str);\n        for(int i=str.length-1; i>=0; i--){\n          \
  \  if(str[i]== 'a' || str[i]== 'e' || str[i]== 'i' || str[i]== 'o' || str[i]== 'u'){\n\
  \                return \"\"+str[i];\n            }\n        }\n        return \"\
  \";"
- "        // write your code here\n        if (word == null || word.isEmpty() ||\
  \ word.charAt(0) == '\\'') {\n            return \"\";\n        }\n        Set<Character>\
  \ vowels = new HashSet<>();\n        vowels.add('a', 'e', 'i', 'o', 'u');\n    \
  \    vowels.add('a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y');\n \
  \       vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i',\
  \ 'o', 'u', 'y');\n        vowels.add('a', 'e', 'i', 'o', 'u', 'y');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a',\
  \ 'e', 'i', 'o', 'u');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add"
- "        String vowels = \"AEIOUaeiou\";\n        word = word.toUpperCase();\n \
  \       if (word.charAt(word.length() - 1) != word.charAt(word.length() - 1).toLowerCase())\n\
  \            word = word.substring(0, word.length() - 1);\n        int index = word.lastIndexOf('E');\n\
  \        if (index != -1) {\n            String endString = word.substring(index\
  \ + 1, word.length());\n            word = word.substring(0, index);\n         \
  \   char endChar = endString.charAt(0);\n            int endIndex = endString.lastIndexOf('e');\n\
  \            if (endIndex != -1) {\n                endString = endString.substring(endIndex\
  \ + 1);\n                int index = endString.lastIndexOf('u');\n             \
  \   if (index != -1)\n                    return String.valueOf(endString.charAt(index\
  \ - 1));\n            }\n        }\n        int index = word.lastIndexOf('U');\n\
  \        if (index != -1) {\n            String endString = word.substring(index\
  \ + 1, word.length());\n            word = word.substring(0, index);\n         \
  \   char endChar = endString.charAt(0);\n            int endIndex = endString.lastIndexOf('u');\n\
  \            if (endIndex != -1) {\n                endString = endString.substring(endIndex\
  \ + 1);\n                int index = endString.lastIndexOf('a');\n             \
  \   if (index != -1)\n                    return String.valueOf(endString.charAt(index\
  \ - 1));\n            }\n        }\n        int index = word.lastIndexOf('e');\n\
  \        if (index != -1) {\n            String endString = word.substring(index\
  \ + 1, word.length());\n            word = word.substring(0, index);\n         \
  \   char endChar = endString.charAt(0);\n            int endIndex = endString.lastIndexOf('e');\n\
  \            if (endIndex != -1) {\n                endString = endString.substring(endIndex\
  \ + 1);\n                int index = endString.lastIndexOf('i');\n             \
  \   if (index != -1)\n                    return String.valueOf(endString.charAt(index\
  \ - 1));\n            }\n        }\n        int index = word.lastIndexOf('i');\n\
  \        if (index != -1) {\n            String endString = word.substring(index\
  \ + 1, word.length());\n            word = word.substring(0, index);\n         \
  \   char endChar = endString.charAt(0);\n            int endIndex = endString.lastIndexOf('i');\n\
  \            if (endIndex != -1) {\n                endString = endString.substring(endIndex\
  \ + 1);\n                int index = endString.lastIndexOf('o');\n             \
  \   if (index != -1)\n                    return String.valueOf(endString.charAt(index\
  \ - 1));\n            }\n        }\n        int index = word.lastIndexOf('o');\n\
  \        if (index != -1) {\n            String endString = word.substring(index\
  \ + 1, word.length());\n            word = word.substring(0, index);\n         \
  \   char endChar = endString.charAt(0);\n            int endIndex = endString.lastIndexOf('o');\n\
  \            if (endIndex != -1) {\n                endString = endString.substring(endIndex\
  \ + 1);\n                int index = end"
- "        Map<Character, String> vowels = new HashMap<Character, String>();\n   \
  \     vowels.put('a', \"A\");\n        vowels.put('e', \"E\");\n        vowels.put('i',\
  \ \"I\");\n        vowels.put('o', \"O\");\n        vowels.put('u', \"U\");\n  \
  \      vowels.put('y', \"Y\");\n        vowels.put('r', \"R\");\n        vowels.put('t',\
  \ \"T\");\n        vowels.put('h', \"H\");\n        vowels.put('l', \"L\");\n  \
  \      vowels.put('s', \"S\");\n        vowels.put('d', \"D\");\n        vowels.put('f',\
  \ \"F\");\n        vowels.put('p', \"P\");\n        vowels.put('c', \"C\");\n  \
  \      vowels.put('w', \"W\");\n        vowels.put('b', \"B\");\n        vowels.put('n',\
  \ \"N\");\n        vowels.put('x', \" X\");\n        vowels.put('z', \"Z\");\n\n\
  \        String result = \"\";\n        boolean result = false;\n\n        for (int\
  \ i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n\n\
  \            if (vowels.containsKey(c)) {\n                result += vowels.get(c);\n\
  \                if (i == word.length() - 1) {\n                    result = result.substring(0,\
  \ result.length() - 1);\n                }\n            }\n        }\n\n       \
  \ if (result.length() == 0) {\n            return \"\";\n        } else {\n    \
  \        return result;\n        }"
- "        String vowel = \"AEIOUaeiou\";\n        int i = 0;\n        int j = word.length()\
  \ - 1;\n        boolean found = false;\n        do {\n            found = false;\n\
  \            String left = word.substring(0, i);\n            String right = word.substring(j);\n\
  \            if (left.toLowerCase().contains(vowel.toLowerCase())) {\n         \
  \       found = true;\n            } else if (right.toLowerCase().contains(vowel.toLowerCase()))\
  \ {\n                found = true;\n            }\n            if (found) {\n  \
  \              return word.substring(i, j);\n            }\n            i++;\n \
  \           j--;\n        } while (i <= j);\n        return \"\";"
- "        ArrayList<Character> vowels = new ArrayList<>();\n        vowels.add('a');\n\
  \        vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n\
  \        vowels.add('u');\n        vowels.add('y');\n        vowels.add('u');\n\
  \        vowels.add('r');\n        vowels.add('l');\n        vowels.add('s');\n\
  \        vowels.add('t');\n        vowels.add('h');\n        vowels.add('z');\n\
  \        vowels.add('p');\n        vowels.add('q');\n        vowels.add('k');\n\
  \        vowels.add('j');\n        vowels.add('x');\n        vowels.add('w');\n\
  \        vowels.add('c');\n        vowels.add('f');\n        vowels.add('v');\n\
  \        vowels.add('b');\n\n        boolean flag = false;\n        boolean vowelFound\
  \ = false;\n        int minIndex = 0;\n        int maxIndex = 0;\n        int minDistance\
  \ = Integer.MAX_VALUE;\n        int maxDistance = Integer.MIN_VALUE;\n        int\
  \ totalLength = 0;\n        int index = -1;\n        int i = 0;\n        \n    \
  \    while (index < word.length() - 1 && i < vowels.size() && i < word.length())\
  \ {\n            int j = i + 1;\n            int k = 0;\n            while (j <\
  \ word.length() && k < vowels.size() && k < word.length()) {\n                if\
  \ (word.charAt(i) == vowels.get(k)) {\n                    index++;\n          \
  \          i = j;\n                    flag = true;\n                    vowelFound\
  \ = true;\n                    break;\n                }\n                else {\n\
  \                    if (word.charAt(j) == vowels.get(k)) {\n                  \
  \      index++;\n                        j = k;\n                        flag =\
  \ true;\n                        vowelFound = true;\n                        break;\n\
  \                    }\n                    else {\n                        k++;\n\
  \                    }\n                }\n            }\n            if (flag)\
  \ {\n                totalLength++;\n                if (i < word.length() - 1)\
  \ {\n                    i++;\n                }\n            }\n            else\
  \ {\n                totalLength++;\n                minIndex = i;\n           \
  \     if (j < word.length() - 1) {\n                    j = j + 1;\n           \
  \     }\n                else {\n                    k = 0;\n                }\n\
  \                i = k;\n            }\n        }\n        if (!vowelFound) {\n\
  \            return \"\";\n        }\n        if (totalLength < minDistance) {\n\
  \            return \"\";\n        }\n        if (totalLength > maxDistance) {\n\
  \            return \"\";\n        }\n        String vowelToReturn = \"\";\n   \
  \     boolean flag = false;\n        for (int i = minIndex; i < (maxIndex + 1);\
  \ i++) {\n            if (word.charAt(i) == vowels.get(minIndex)) {\n          \
  \      flag = true;\n                vowelToReturn = vowels.get(minIndex);\n   \
  \         }\n            if (flag) {\n                break;\n            }\n  \
  \      }\n        return vowelToReturn;\n"
- "        Set<Character> vowels = \n            Arrays.stream(word.toCharArray()).filter(x\
  \ -> x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u').collect(Collectors.toSet());\n\
  \        \n        int low = 0;\n        int high = word.length() - 1;\n       \
  \ while(low <= high) {\n            int mid = (low + high) / 2;\n            int\
  \ leftConsonant = Character.getNumericValue(word.charAt(mid));\n            int\
  \ rightConsonant = Character.getNumericValue(word.charAt(mid + 1));\n          \
  \  if(vowels.contains(leftConsonant) && vowels.contains(rightConsonant)) {\n   \
  \             low = mid + 1;\n            } else {\n                high = mid -\
  \ 1;\n            }\n        }\n        \n        if(low == high) {\n          \
  \  return \"\";\n        }\n        \n        int mid = (low + high) / 2;\n    \
  \    int leftConsonant = Character.getNumericValue(word.charAt(mid));\n        int\
  \ rightConsonant = Character.getNumericValue(word.charAt(mid + 1));\n        \n\
  \        if(vowels.contains(leftConsonant) && vowels.contains(rightConsonant)) {\n\
  \            return word.toLowerCase().charAt(mid);\n        } else {\n        \
  \    return \"\";\n        }"
- "        char firstChar = word.charAt(0);\n        char lastChar = word.charAt(word.length()\
  \ - 1);\n        char closeVowel = null;\n        if (firstChar == 'a' && lastChar\
  \ == 'z') {\n            closeVowel = 'A';\n        } else if (firstChar == 'A'\
  \ && lastChar == 'Z') {\n            closeVowel = 'a';\n        }\n        return\
  \ closeVowel;"
- "        String closeVowel = \"\";\n\n        // TODO: Complete the implementation\
  \ of this method here!\n        \n        return closeVowel;"
- '        return findVowelInRight(word).map(x -> x.toLowerCase()).collect(Collectors.toList()).stream().findFirst().get();'
- "        char[] arr = word.toCharArray();\n        Arrays.sort(arr);\n        boolean\
  \ flag = false;\n        \n        for(int i = arr.length-1; i>=0; i--) {\n    \
  \        \n            if(arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i]\
  \ == 'o' || arr[i] == 'u') {\n                flag = true;\n                break;\n\
  \            }\n        }\n        if(flag)\n            return \"\"; \n       \
  \ for(int i = arr.length-2; i>=0; i--) {\n            \n            if(arr[i] ==\
  \ 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n \
  \               flag = true;\n                break;\n            }\n        }\n\
  \        if(flag)\n            return \"\"; \n        \n        for(int i = arr.length-1;\
  \ i>=0; i--) {\n            \n            if(arr[i] == 'a' || arr[i] == 'e' || arr[i]\
  \ == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                flag = true;\n  \
  \              break;\n            }\n        }\n        if(flag)\n            return\
  \ \"\"; \n        \n        for(int i = arr.length-2; i>=0; i--) {\n           \
  \ \n            if(arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] ==\
  \ 'o' || arr[i] == 'u') {\n                flag = true;\n                break;\n\
  \            }\n        }\n        if(flag)\n            return \"\"; \n       \
  \ \n        \n        for(int i = arr.length-3; i>=0; i--) {\n            \n   \
  \         if(arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' ||\
  \ arr[i] == 'u') {\n                flag = true;\n                break;\n     \
  \       }\n        }\n        if(flag)\n            return \"\"; \n        \n  \
  \      for(int i = arr.length-4; i>=0; i--) {\n            \n            if(arr[i]\
  \ == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n\
  \                flag = true;\n                break;\n            }\n        }\n\
  \        if(flag)\n            return \"\"; \n        \n        for(int i = arr.length-5;\
  \ i>=0; i--) {\n            \n            if(arr[i] == 'a' || arr[i] == 'e' || arr[i]\
  \ == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                flag = true;\n  \
  \              break;\n            }\n        }\n        if(flag)\n            return\
  \ \"\"; \n        \n        for(int i = arr.length-6; i>=0; i--) {\n           \
  \ \n            if(arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] ==\
  \ 'o' || arr[i] == 'u') {\n                flag = true;\n                break;\n\
  \            }\n        }\n        if(flag)"
- "        //  Your code goes here\n        Set<String> vowels = new HashSet<>();\n\
  \        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\"\
  );\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  y\");\n        vowels.add(\"A\");\n        vowels.add(\"E\");\n        vowels.add(\"\
  I\");\n        vowels.add(\"O\");\n        vowels.add(\"U\");\n        vowels.add(\"\
  Y\");\n        word = word.replaceAll(\"[^aeiouAEIOUY]\", \"\");\n        int l\
  \ = word.length();\n        for (int i = l-1; i >= 0; i--) {\n            int flag\
  \ = 0;\n            char c = word.charAt(i);\n            vowels.stream().forEach(vowel\
  \ -> {\n                if (vowel == c) {\n                    flag++;\n       \
  \         }\n            });\n            if (flag == 2) {\n                return\
  \ word.substring(i + 1, l-1);\n            }\n        }\n        return \"\";"
- "        \n        String vowels = \"aeiouAEIOU\";\n        \n        ArrayList<String>\
  \ list = new ArrayList<String>();\n        \n        for(int i=0; i<word.length()-1;\
  \ i++) {\n            if(vowels.contains(word.substring(i, i+1)))\n            \
  \    list.add(word.substring(i, i+1));\n        }\n        \n        if(list.size()==0)\
  \ {\n            return \"\";\n        }\n        \n        Collections.sort(list);\n\
  \        \n        if(list.size()==1) {\n            return list.get(0);\n     \
  \   }\n        \n        Collections.reverse(list);\n        \n        return list.get(list.size()-1);"
- "        List<String> list = new ArrayList<>(Arrays.asList(word.split(\"\")));\n\
  \        String firstLetter = list.get(list.size()-1);\n        String secondLetter\
  \ = list.get(list.size()-2);\n        list.stream().filter(w->w.equals(firstLetter)).findFirst().ifPresent(s->list.remove(s));\n\
  \        list.stream().filter(w->w.equals(secondLetter)).findFirst().ifPresent(s->list.remove(s));\n\
  \        list.stream().filter(w->w.equals(\"a\")).findFirst().ifPresent(s->list.remove(s));\n\
  \        list.stream().filter(w->w.equals(\"e\")).findFirst().ifPresent(s->list.remove(s));\n\
  \        list.stream().filter(w->w.equals(\"i\")).findFirst().ifPresent(s->list.remove(s));\n\
  \        list.stream().filter(w->w.equals(\"o\")).findFirst().ifPresent(s->list.remove(s));\n\
  \        list.stream().filter(w->w.equals(\"u\")).findFirst().ifPresent(s->list.remove(s));\n\
  \        list.removeIf(w->w.equals(\"A\"));\n        list.removeIf(w->w.equals(\"\
  E\"));\n        list.removeIf(w->w.equals(\"I\"));\n        list.removeIf(w->w.equals(\"\
  O\"));\n        list.removeIf(w->w.equals(\"U\"));\n        list.removeIf(w->w.equals(\"\
  a\"));\n        list.removeIf(w->w.equals(\"e\"));\n        list.removeIf(w->w.equals(\"\
  i\"));\n        list.removeIf(w->w.equals(\"o\"));\n        list.removeIf(w->w.equals(\"\
  u\"));\n        String vowel=\"\";\n        for (String v : list) {\n          \
  \  vowel+=v;\n        }\n        return vowel;"
- "        try{\n            //get the first character from the string\n         \
  \   char firstChar = word.charAt(0);\n            //get the first character of the\
  \ word\n            char secondChar = word.charAt(1);\n            //get all the\
  \ vowels from the string\n            Set<Character> vowels = Arrays.stream(word.toCharArray()).filter(Character::isVowel).collect(Collectors.toSet());\n\
  \            //get the distance between the two characters\n            int distance\
  \ = getDistance(firstChar, secondChar);\n            String vowel;\n           \
  \ //check if the vowels are in the right order\n            if (distance == 1) {\n\
  \                //check if one of the consonants in the middle of the vowel is\
  \ in the right order\n                boolean consonantInMiddle = vowels.contains(Character.toString(secondChar));\n\
  \                //if the consonant is in the middle of the vowel, check whether\
  \ the second character is a vowel\n                if (consonantInMiddle) {\n  \
  \                  vowel = vowels.stream()\n                            .filter(vowel\
  \ -> vowel.charAt(0) == secondChar)\n                            .findFirst()\n\
  \                            .orElse(\"\");\n                }\n               \
  \ else {\n                    vowel = vowels.stream()\n                        \
  \    .filter(vowel -> vowel.charAt(0) == Character.toString(secondChar))\n     \
  \                       .findFirst()\n                            .orElse(\"\");\n\
  \                }\n            }\n            else {\n                //check if\
  \ the second character is a vowel\n                boolean secondCharIsVowel = vowels.contains(Character.toString(secondChar));\n\
  \                vowel = vowels.stream()\n                        .filter(vowel\
  \ -> vowel.charAt(0) == Character.toString(firstChar))\n                       \
  \ .findFirst()\n                        .orElse(\"\");\n                //if the\
  \ second character is a vowel, check whether the second character is before the\
  \ first\n                if (secondCharIsVowel) {\n                    vowel = vowels.stream()\n\
  \                            .filter(vowel -> vowel.charAt(0) == Character.toString(secondChar))\n\
  \                            .findFirst()\n                            .orElse(\"\
  \");\n                }\n            }\n            return vowel;\n        }\n \
  \       catch (NullPointerException e){\n            return \"\";\n        }\n \
  \       catch (Exception e){\n            System.out.println(e);\n            return\
  \ \"\";\n        }"
- "        int left = word.length() - 1;\n        int right = word.length() - 1;\n\
  \        boolean isLeft = true;\n\n        while (isLeft) {\n            isLeft\
  \ = false;\n            String leftConsonant = findConsonant(word);\n          \
  \  int leftVowel = findVowel(leftConsonant);\n            isLeft = !isLeft;\n\n\
  \            if (leftVowel >= 0 && leftVowel <= 1 && leftVowel == left + 1) {\n\
  \                right = leftVowel;\n            } else {\n                left\
  \ = leftVowel;\n            }\n        }\n        int leftVowel = findVowel(findConsonant(word));\n\
  \        String vowel = findConsonant(findVowel(findConsonant(word)));\n       \
  \ return vowel;"
- "        Optional<String> vowelsOption = Optional.of(word);\n        List<String>\
  \ vowelsList = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        StringBuilder\
  \ sb = new StringBuilder();\n        vowelsOption.ifPresent(s -> {\n           \
  \ for (int i = s.length() - 1; i >= 0; i--) {\n                String word = s.substring(0,\
  \ i);\n                if (vowelsList.contains(word)) {\n                    sb.append(word);\n\
  \                }\n            }\n        });\n        return sb.toString();"
- "        // Your code goes here\n        Arrays.sort(word.split(\"\"));\n      \
  \  String vowel = \"\";\n        char firstVowel = word.charAt(word.length() - 1);\n\
  \        \n        for(int i = word.length() - 2; i > -1; i--) {\n            char\
  \ current = word.charAt(i);\n            if(current == firstVowel) {\n         \
  \       vowel = vowel + current;\n            }\n        }\n        return vowel;"
- "        // Your code here\n        // Write your code here\n        if (word.length()\
  \ <= 2) {\n            return \"\";\n        }\n        boolean isFirstChar = true;\n\
  \        boolean isLastChar = true;\n        boolean isVowel = false;\n        boolean\
  \ isConsonant = false;\n        boolean isLetter = false;\n        boolean isLetterOrDigit\
  \ = false;\n        boolean isConsonantOrDigit = false;\n        char currentChar\
  \ = word.charAt(word.length() - 1);\n        // first letter is vowel\n        if\
  \ (isVowel(word, 0, 1) == true) {\n            isVowel = true;\n        }\n    \
  \    if (currentChar == 'a' || currentChar == 'A') {\n            isFirstChar =\
  \ true;\n        }\n        if (currentChar == 'e' || currentChar == 'E') {\n  \
  \          isLastChar = true;\n        }\n        if (isFirstChar && isLastChar)\
  \ {\n            isVowel = false;\n        }\n        // second letter is a vowel\n\
  \        if (isVowel(word, 0, 2) == true) {\n            isVowel = true;\n     \
  \   }\n        if (currentChar == 'a' || currentChar == 'A') {\n            isFirstChar\
  \ = true;\n        }\n        if (currentChar == 'e' || currentChar == 'E') {\n\
  \            isLastChar = true;\n        }\n        if (isFirstChar && isLastChar)\
  \ {\n            isVowel = false;\n        }\n        // third letter is a vowel\n\
  \        if (isVowel(word, 0, 3) == true) {\n            isVowel = true;\n     \
  \   }\n        if (currentChar == 'a' || currentChar == 'A') {\n            isFirstChar\
  \ = true;\n        }\n        if (currentChar == 'e' || currentChar == 'E') {\n\
  \            isLastChar = true;\n        }\n        if (isFirstChar && isLastChar)\
  \ {\n            isVowel = false;\n        }\n        // forth letter is a vowel\n\
  \        if (isVowel(word, 0, 4) == true) {\n            isVowel = true;\n     \
  \   }\n        if (currentChar == 'a' || currentChar == 'A') {\n            isFirstChar\
  \ = true;\n        }\n        if (currentChar == 'e' || currentChar == 'E') {\n\
  \            isLastChar = true;\n        }\n        if (isFirstChar && isLastChar)\
  \ {\n            isVowel = false;\n        }\n        // fifth letter is a vowel\n\
  \        if (isVowel(word, 0, 5) == true) {\n            isVowel = true;\n     \
  \   }\n        if (currentChar == 'a' || currentChar == 'A') {\n            isFirstChar\
  \ = true;\n        }\n        if (currentChar == 'e' || currentChar == 'E') {\n\
  \            isLastChar = true;\n        }\n        if (isFirstChar && isLastChar)\
  \ {\n            isVowel = false;"
- "        List<Character> list = new ArrayList<>();\n        for (char ch : word.toCharArray())\
  \ {\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\
  \ {\n                list.add(ch);\n            }\n        }\n        if (list.size()\
  \ < 2) {\n            return \"\";\n        }\n        list.add(list.get(0));\n\
  \        list.remove(list.size() - 1);\n        List<Character> sortedList = list.stream().sorted().collect(Collectors.toList());\n\
  \        return list.stream().filter((ch) -> sortedList.contains(ch)).findFirst().get();"
- "        int length = word.length();\n        // get the right side\n        String\
  \ right = word.substring(length - 2, length);\n        // get the left side\n  \
  \      String left = word.substring(0, length - 2);\n        // get the vowel\n\
  \        String vowel = right.chars().filter(c -> c == 'a' || c == 'e' || c == 'i'\
  \ || c == 'o' || c == 'u') \n            .mapToObj(i -> String.valueOf((char)i)).collect(Collectors.joining());\n\
  \        // get the consonants\n        String consonants = right.chars().filter(c\
  \ -> c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n            .mapToObj(i\
  \ -> String.valueOf((char)i)).collect(Collectors.joining());\n        // return\
  \ the closest vowel between the left and right sides\n        return vowel.startsWith(consonants)\
  \ ? vowel : \"\";"
- "        Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n  \
  \      vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
  \      vowels.add('u'); \n\n        Iterator<Character> itr = vowels.iterator();\n\
  \        while(itr.hasNext()) {\n            char vowel = itr.next().toString();\n\
  \            if(word.contains(vowel)) {\n                int index = word.length()\
  \ - vowel.length();\n                return word.substring(index + 1);\n       \
  \     }\n        }\n        return \"\";"
- "        if(word.matches(\"[a-zA-Z]+\") || word.equals(\"\")) {\n            return\
  \ \"\";\n        }\n        \n        String[] vowels = {\"a\", \"e\", \"i\", \"\
  o\", \"u\"};\n        \n        char[] chars = word.toCharArray();\n        \n \
  \       int startIndex = Arrays.stream(chars).findFirstIndex(c1 -> (c1 >= 'a' &&\
  \ c1 <= 'z') ||\n                                 (c1 >= 'A' && c1 <= 'Z'));\n \
  \       \n        int endIndex = Arrays.stream(chars).findFirstIndex(c2 -> (c1 >=\
  \ 'a' && c1 <= 'z') ||\n                (c1 >= 'A' && c1 <= 'Z'));\n        \n \
  \       String result = \"\";\n        if(startIndex != -1 && endIndex != -1 &&\
  \ startIndex < endIndex) {\n            String middle = word.substring(startIndex,\
  \ endIndex);\n            \n            int vowelIndex = Arrays.asList(vowels).indexOf(middle.charAt(0));\n\
  \            if(vowelIndex >= 0) {\n                result = vowels[vowelIndex];\n\
  \            }\n        }\n        \n        return result;"
- "        String vowel = \"[aeiouAEIOU]+\";\n        char[] chars = word.toCharArray();\n\
  \        char[] c1 = new char[chars.length];\n        Arrays.fill(c1, 0);\n    \
  \    char[] c2 = new char[chars.length];\n        Arrays.fill(c2, 0);\n        int\
  \ k = 0;\n        for (int i = chars.length - 1; i >= 0; i--) {\n            if\
  \ (Character.isLetter(chars[i])) {\n                if (Character.isUpperCase(chars[i]))\
  \ {\n                    c1[chars.length - i] = Character.toUpperCase(chars[i]);\n\
  \                }\n                else {\n                    c1[chars.length\
  \ - i] = Character.toLowerCase(chars[i]);\n                }\n            }\n  \
  \      }\n        for (int i = chars.length - 1; i >= 0; i--) {\n            if\
  \ (Character.isLetter(chars[i])) {\n                if (Character.isUpperCase(chars[i]))\
  \ {\n                    c2[chars.length - i] = Character.toUpperCase(chars[i]);\n\
  \                }\n                else {\n                    c2[chars.length\
  \ - i] = Character.toLowerCase(chars[i]);\n                }\n            }\n  \
  \      }\n        for (int i = 0; i < chars.length; i++) {\n            if (c1[i]\
  \ != c2[i]) {\n                if (k < i) {\n                    k = i;\n      \
  \          }\n            }\n        }\n        if (k == 0) {\n            return\
  \ \"\";\n        }\n        for (int i = k - 1; i >= 0; i--) {\n            if (Character.isUpperCase(word.charAt(k)))\
  \ {\n                word.replaceAll(c1[k], Character.toUpperCase(c1[k]));\n   \
  \         }\n            else {\n                word.replaceAll(c1[k], Character.toLowerCase(c1[k]));\n\
  \            }\n        }\n        char[] c1b = word.toCharArray();\n        for\
  \ (int i = 0; i < chars.length; i++) {\n            if (c1[i] != c2[i]) {\n    \
  \            if (k < i) {\n                    k = i;\n                }\n     \
  \       }\n        }\n        if (k == 0) {\n            return \"\";\n        }\n\
  \        for (int i = k - 1; i >= 0; i--) {\n            if (Character.isUpperCase(word.charAt(k)))\
  \ {\n                word.replaceAll(c1b[k], Character.toUpperCase(c1b[k]));\n \
  \           }\n            else {\n                word.replaceAll(c1b[k], Character.toLowerCase(c1b[k]));\n\
  \            }\n        }\n        char[] c2b = word.toCharArray();\n        for\
  \ (int i = 0; i < chars.length; i++) {\n            if (c1[i] != c2[i]) {\n    \
  \            if (k < i) {\n                    k = i;\n                }\n     \
  \       }\n        }\n        if (k == 0) {\n            return \"\";\n        }\n\
  \        for (int i = k - 1; i >= 0; i--) {\n            if (Character.isUpperCase(word.charAt(k)))\
  \ {\n                word.replaceAll(c2b[k], Character.toUpperCase(c2b[k]));\n \
  \           }\n            else {\n                word.replaceAll(c2b[k], Charact"
- "        List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
  \        StringBuilder sb = new StringBuilder();\n        if (word.length() <= 1)\
  \ {\n            return word;\n        }\n        int firstIndex = 0, secondIndex\
  \ = word.length() - 1;\n        while (firstIndex < secondIndex) {\n           \
  \ int tempIndex = firstIndex++;\n            if (tempIndex >= word.length()) {\n\
  \                break;\n            }\n            int tempIndex2 = secondIndex--;\n\
  \            if (tempIndex2 >= word.length()) {\n                break;\n      \
  \      }\n            if (vowels.contains(word.charAt(tempIndex)) && vowels.contains(word.charAt(tempIndex2)))\
  \ {\n                sb.append(word.charAt(tempIndex));\n            }\n       \
  \ }\n        return sb.toString();"
- "        int start = 0, end = word.length();\n        for(; start < end; start++)\
  \ {\n            char c = word.charAt(start);\n            if (isVowel(c)) {\n \
  \               end--;\n                if (end == start) {\n                  \
  \  return \"\";\n                }\n                char nextChar = word.charAt(end);\n\
  \                if (!isVowel(nextChar)) {\n                    char prevChar =\
  \ word.charAt(start - 1);\n                    return \"\".equals(getClosestVowel(word.substring(0,\
  \ start)) + getClosestVowel(word.substring(end - 1))) ?\n                      \
  \      getClosestVowel(word.substring(start, end)) + prevChar :\n              \
  \              getClosestVowel(word.substring(start, end)) + prevChar;\n       \
  \         }\n            }\n        }\n        return \"\";"
- "        // Your code here\n        int lenght = word.length();\n        List<Integer>\
  \ vowels = new ArrayList<>();\n        for(int i=0; i<lenght; i++) {\n         \
  \   char c = word.charAt(i);\n            if (Character.isLetter(c)) {\n       \
  \         if(Character.isUpperCase(c))\n                    vowels.add(i);\n   \
  \         }\n        }\n        int lowerVowel = Collections.max(vowels);\n    \
  \    lowerVowel += 1;\n        int upperVowel = Collections.min(vowels);\n     \
  \   upperVowel -= 1;\n        boolean vowelInBetween = lowerVowel < upperVowel;\n\
  \        if(vowelInBetween) {\n            if(lowerVowel < word.length()-1 && word.charAt(lowerVowel+1)\
  \ == 'a') {\n                if(upperVowel == word.length()-1) {\n             \
  \       return \"\";\n                }\n                return word.substring(lowerVowel,\
  \ upperVowel);\n            }\n            else if(lowerVowel > 0 && word.charAt(lowerVowel-1)\
  \ == 'a') {\n                if(upperVowel == word.length()-1) {\n             \
  \       return \"\";\n                }\n                return word.substring(lowerVowel,\
  \ upperVowel);\n            }\n        }\n        return \"\";"
- "        boolean flag = false;\n        String result = \"\";\n        String vowels\
  \ = \"aeiouAEIOU\";\n        String[] splits = word.split(\"\");\n        for (String\
  \ s : splits) {\n            for (String v : vowels) {\n                if (s.toLowerCase().contains(v))\
  \ {\n                    flag = true;\n                    result = v;\n       \
  \             break;\n                }\n            }\n            if (!flag) {\n\
  \                break;\n            }\n        }\n        return result;"
- "        List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n\
  \        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
  );\n        vowels.add(\"u\");\n        vowels.add(\"A\");\n        vowels.add(\"\
  E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
  U\");\n        \n        char[] charArray = word.toCharArray();\n        for(int\
  \ i = charArray.length-1; i>=0; i--) {\n            char currentChar = charArray[i];\n\
  \            if(vowels.contains(currentChar)) {\n                char[] leftSideArray\
  \ = new char[i+1];\n                char[] rightSideArray = new char[i+1];\n   \
  \             System.arraycopy(charArray, 0, leftSideArray, 0, i+1);\n         \
  \       System.arraycopy(charArray, i+1, rightSideArray, 0, i+1);\n            \
  \    if(currentChar=='a' || currentChar=='A') {\n                    char[] leftSideArrayUppercase\
  \ = new char[i+1];\n                    char[] rightSideArrayUppercase = new char[i+1];\n\
  \                    System.arraycopy(charArray, 0, leftSideArrayUppercase, 0, i+1);\n\
  \                    System.arraycopy(charArray, i+1, rightSideArrayUppercase, 0,\
  \ i+1);\n                    String vowel = leftSideArrayUppercase[0]+rightSideArrayUppercase[0];\n\
  \                    char[] leftSideArrayLowerCase = new char[i+1];\n          \
  \          char[] rightSideArrayLowerCase = new char[i+1];\n                   \
  \ System.arraycopy(vowel, 0, leftSideArrayLowerCase, 0, i+1);\n                \
  \    System.arraycopy(vowel, i+1, rightSideArrayLowerCase, 0, i+1);\n          \
  \          String vowelLower = leftSideArrayLowerCase[0]+rightSideArrayLowerCase[0];\n\
  \                    \n                    if(vowelLower.equals(\"a\") || vowelLower.equals(\"\
  A\")) {\n                        return vowel;\n                    }\n        \
  \            if(vowelLower.equals(\"e\") || vowelLower.equals(\"E\")) {\n      \
  \                  return vowel;\n                    }\n                    if(vowelLower.equals(\"\
  i\") || vowelLower.equals(\"I\")) {\n                        return vowel;\n   \
  \                 }\n                    if(vowelLower.equals(\"o\") || vowelLower.equals(\"\
  O\")) {\n                        return vowel;\n                    }\n        \
  \            if(vowelLower.equals(\"u\") || vowelLower.equals(\"U\")) {\n      \
  \                  return vowel;\n                    }\n                }\n   \
  \             if(currentChar=='e' || currentChar=='E') {\n                    char[]\
  \ leftSideArrayUppercase = new char[i+1];\n                    char[] rightSideArrayUppercase\
  \ = new char[i+1];\n                    System.arraycopy(charArray, 0, leftSideArrayUppercase,\
  \ 0, i+1);\n                    System."
- "        \n        // Create a String array for vowel characters and another for\
  \ consonants\n        char[] vowel = new char[]{'a','e','i','o','u'};\n        char[]\
  \ consonants = new char[]{'b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','x','z'};\n\
  \        \n        // Iterate over each character to find the closest vowel\n  \
  \      int startIndex = word.length() - 1;\n        int endIndex = word.length();\n\
  \        \n        while(startIndex > 0 && endIndex > 0) {\n            int vowelIndex\
  \ = 0;\n            int consonantsIndex = 0;\n            \n            // Find\
  \ the index of closest vowel\n            while(vowelIndex < vowel.length && consonantsIndex\
  \ < consonants.length && \n                    word.charAt(startIndex) == vowel[vowelIndex]\
  \ && word.charAt(startIndex) != consonants[consonantsIndex]) {\n               \
  \ vowelIndex++;\n                consonantsIndex++;\n            }\n           \
  \ \n            // Check if found a vowel\n            if(vowelIndex < vowel.length)\
  \ {\n                // Reset the start and end index\n                startIndex--;\n\
  \                endIndex--;\n            }\n            else {\n              \
  \  // Reset the start and end index\n                startIndex--;\n           \
  \     endIndex++;\n            }\n        }\n        \n        // Return an empty\
  \ string if didn't find any vowel\n        if(startIndex == endIndex) {\n      \
  \      return \"\";\n        }\n        \n        // Return the closest vowel\n\
  \        return word.charAt(startIndex) == vowel[vowelIndex] ? word.charAt(startIndex)\
  \ : \"\";"
- '        return Arrays.stream(word.split("")).filter(p->vowel(p)).findFirst().orElse("");'
- "        List<String> vowels = new ArrayList<String>();\n        vowels.add(\"a\"\
  );\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"u\");\n\n        String vowel = \"e\";\n        boolean\
  \ found = false;\n        for(int i = word.length() - 1; i >= 0; i--) {\n      \
  \      if(vowels.contains(word.toLowerCase().charAt(i))) {\n                found\
  \ = true;\n                vowel = word.toLowerCase().charAt(i);\n             \
  \   break;\n            }\n        }\n        \n        if(!found) return \"\";\n\
  \        \n        String left = word.substring(0, word.length() - 1);\n       \
  \ String right = word.substring(word.length() - 1);\n        \n        Collections.sort(new\
  \ ArrayList<String>(Arrays.asList(left.split(\"\"))));\n        Collections.sort(new\
  \ ArrayList<String>(Arrays.asList(right.split(\"\"))));\n        \n        Collections.sort(vowels);\n\
  \        \n        String result = \"\";\n        \n        for(int i = left.length()\
  \ - 1; i >= 0; i--) {\n            for(int j = right.length() - 1; j >= 0; j--)\
  \ {\n                if(left.charAt(i) == vowels.get(j)) {\n                   \
  \ result += right.charAt(j);\n                    break;\n                }\n  \
  \          }\n        }\n        \n        return result;"
- "        \n        if (word.length() == 0) {\n            return \"\";\n       \
  \ }\n        \n        char vowels[] = {'a','e','i','o','u','A','E','I','O','U'};\n\
  \        \n        boolean isVowel = false;\n        int consonantIndex = word.indexOf('a');\n\
  \        \n        if (isVowel) {\n            word = word.substring(0,consonantIndex);\n\
  \        }\n        \n        String consonantWord = \"\";\n        \n        for\
  \ (int i = 0; i < word.length(); i++) {\n            \n            char character\
  \ = word.charAt(i);\n            if (Character.isLetter(character)) {\n        \
  \        consonantWord += character;\n                \n                if (Character.isUpperCase(character))\
  \ {\n                    isVowel = true;\n                }\n                else\
  \ {\n                    isVowel = false;\n                }\n            }\n  \
  \      }\n        \n        boolean found = false;\n        \n        for (int i\
  \ = consonantIndex; i > 0; i--) {\n            \n            char c = consonantWord.charAt(i);\n\
  \            if (Character.isLetter(c)) {\n                String newWord = word.substring(0,i)\
  \ + word.substring(i+1);\n                char newCharacter = newWord.charAt(0);\n\
  \                \n                if (Character.isLowerCase(newCharacter)) {\n\
  \                    found = true;\n                    break;\n               \
  \ }\n            }\n        }\n        \n        if (found) {\n            return\
  \ Character.toLowerCase(consonantWord.charAt(0));\n        }\n        \n       \
  \ return \"\";"
- "        int i=word.indexOf(\"u\")+1; \n        String vowel=\"u\";\n        if(word.indexOf(\"\
  A\")<word.length()-1) vowel=\"A\";\n        if(word.indexOf(\"a\")<word.length()-1)\
  \ vowel=\"a\";\n        if(word.indexOf(\"e\")<word.length()-1) vowel=\"e\";\n \
  \       if(word.indexOf(\"i\")<word.length()-1) vowel=\"i\";\n        if(word.indexOf(\"\
  o\")<word.length()-1) vowel=\"o\";\n        if(word.indexOf(\"u\")<word.length()-1)\
  \ vowel=\"u\";\n\n        return word.replaceAll(\"[a-z]\", \"\").replaceAll(\"\
  [A-Z]\", \"\").replaceAll(vowel, \"\").replaceAll(\"[^aAeEiIoU]\", \"\");"
- "        char vowels[] = {'a', 'e', 'i', 'o', 'u'};\n        int count = 0;\n  \
  \      for(char c : word.toCharArray()) {\n            if((c == Character.toUpperCase(c))\
  \ || vowels.contains(c))\n                count++;\n        }\n        if(count\
  \ < 2) return \"\";\n        else if(count == 2) {\n            if(word.charAt(word.length()-1)\
  \ == Character.toUpperCase(word.charAt(word.length()-1)))\n                return\
  \ word.charAt(word.length()-1);\n            else if(vowels.contains(word.charAt(word.length()-2)))\n\
  \                return word.charAt(word.length()-2);\n            else if(word.charAt(word.length()-1)\
  \ == Character.toUpperCase(word.charAt(word.length()-2)))\n                return\
  \ word.charAt(word.length()-2);\n            else\n                return \"\";\n\
  \        }\n        else {\n            for(int i = word.length()-1; i >= 1; i--)\
  \ {\n                if(word.charAt(i) == Character.toUpperCase(word.charAt(i-1)))\
  \ {\n                    if(word.charAt(i-1) == Character.toUpperCase(word.charAt(i-2)))\
  \ {\n                        if(word.charAt(i-2) == Character.toUpperCase(word.charAt(i-3)))\
  \ {\n                            if(word.charAt(i-3) == Character.toUpperCase(word.charAt(i-4)))\
  \ {\n                                return word.charAt(i-1);\n                \
  \            }\n                            else\n                             \
  \   return \"\";\n                        }\n                        else\n    \
  \                        return \"\";\n                    }\n                 \
  \   else\n                        return \"\";\n                }\n            }\n\
  \            return \"\";\n        }"
- "        String result = \"\";\n        Vowel[] vowels = { 'a', 'e', 'i', 'o', 'u',\
  \ 'A', 'E', 'I', 'O', 'U' };\n        for (int i = word.length() - 1; i >= 0; i--)\
  \ {\n            String subString = word.substring(i, i + 1);\n            for (int\
  \ j = 0; j < vowels.length; j++) {\n                if (subString.startsWith(vowels[j]))\
  \ {\n                    if (result == \"\" || result.length() < vowels[j].length())\
  \ {\n                        result = vowels[j];\n                    }\n      \
  \          }\n            }\n        }\n        return result;"
- '        List<Character> vowels = Arrays.asList(''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'', ''a'',
  ''a'', ''a'', ''a'', ''a'', '''
- "        char[] array = word.toCharArray();\n        Arrays.sort(array);\n     \
  \   int i = array.length;\n        while (i-- > 1) {\n            char a = array[i\
  \ - 1];\n            char b = array[--i];\n            if (isVowel(a, b))\n    \
  \            return Character.toString(a);\n        }\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        StringBuilder vowel = new StringBuilder();\n        for(int i=word.length()-1;i>0;i--)\
  \ {\n            String temp=word.substring(0,i);\n            if(temp.equals(\"\
  a\")||temp.equals(\"e\")||temp.equals(\"i\")||temp.equals(\"o\")||temp.equals(\"\
  u\")) {\n                vowel.append(temp);\n            }\n        }\n       \
  \ return vowel.toString();"
- "        List<Character> chars = word.chars().mapToObj(x -> String.valueOf(x)).collect(Collectors.toList());\n\
  \        \n        Collections.sort(chars, (x, y) -> {\n            // The first\
  \ character of x is always >= the second of y.\n            int i = Character.compare(x.charAt(1),\
  \ y.charAt(1));\n            if(i == 0) {\n                // Case 1: x is larger\
  \ than y, so return y.\n                return y;\n            } else {\n      \
  \          // Case 2: x is smaller than y, so return x.\n                return\
  \ x;\n            }\n        });\n\n        for(Character c: chars) {\n        \
  \    if(isVowel(c.charAt(0))) {\n                String left = word.substring(0,\
  \ word.length() - 1);\n                String right = word.substring(word.length()\
  \ - 1, word.length());\n                return isVowel(c.charAt(1)) ? right : left;\n\
  \            }\n        }\n        \n        return \"\";"
- "        int startIndex = 0;\n        int endIndex = 0;\n        int currentIndex\
  \ = 0;\n        char currentLetter = 0;\n        while (currentIndex < word.length())\
  \ {\n            currentLetter = word.charAt(currentIndex);\n            currentIndex\
  \ = currentIndex + 1;\n            if (currentIndex > word.length() - 1) {\n   \
  \             return \"\";\n            }\n            if (currentLetter == 'a'\
  \ || currentLetter == 'e' || currentLetter == 'i' || currentLetter == 'o' || currentLetter\
  \ == 'u' || currentLetter == 'A' || currentLetter == 'E' || currentLetter == 'I'\
  \ || currentLetter == 'O' || currentLetter == 'U') {\n                startIndex\
  \ = currentIndex;\n                endIndex = currentIndex - 1;\n              \
  \  if (endIndex == word.length() - 1 || word.length() <= 2) {\n                \
  \    return \"\";\n                }\n            }\n            if (currentLetter\
  \ == 'b' || currentLetter == 'c' || currentLetter == 'd' || currentLetter == 'f'\
  \ || currentLetter == 'g' || currentLetter == 'h' || currentLetter == 'j' || currentLetter\
  \ == 'k' || currentLetter == 'l' || currentLetter == 'm' || currentLetter == 'n'\
  \ || currentLetter == 'p' || currentLetter == 'q' || currentLetter == 'r' || currentLetter\
  \ == 's' || currentLetter == 't' || currentLetter == 'v' || currentLetter == 'B'\
  \ || currentLetter == 'C' || currentLetter == 'D' || currentLetter == 'F' || currentLetter\
  \ == 'G' || currentLetter == 'H' || currentLetter == 'J' || currentLetter == 'K'\
  \ || currentLetter == 'L' || currentLetter == 'M' || currentLetter == 'N' || currentLetter\
  \ == 'P' || currentLetter == 'Q' || currentLetter == 'R' || currentLetter == 'S'\
  \ || currentLetter == 'T' || currentLetter == 'V' || currentLetter == 'F' || currentLetter\
  \ == 'G' || currentLetter == 'H' || currentLetter == 'J' || currentLetter == 'K'\
  \ || currentLetter == 'L' || currentLetter == 'M' || currentLetter == 'N' || currentLetter\
  \ == 'P' || currentLetter == 'Q' || currentLetter == 'R' || currentLetter == 'S'\
  \ || currentLetter == 'T' || currentLetter == 'V' || currentLetter == 'B' || currentLetter\
  \ == 'C' || currentLetter == 'D' || currentLetter == 'F' || currentLetter == 'G'\
  \ || currentLetter == 'H' || currentLetter == 'J' || currentLetter == 'K' || currentLetter\
  \ == 'L' || currentLetter == 'M' || currentLetter == 'N' || currentLetter == 'P'\
  \ || currentLetter == 'Q' || currentLetter == 'R' || currentLetter == 'S' || currentLetter\
  \ == 'T' || currentLetter == 'V') {\n                startIndex = currentIndex;\n\
  \                endIndex = currentIndex - 1;\n                if (endIndex == word.length()\
  \ - 1 || word.length() <= 2) {\n                    return \"\";\n             \
  \   }\n            }\n            if (currentLetter == '"
- "        int vowelCount = 0;\n        String vowel = null;\n        for (Character\
  \ c : word.toLowerCase().toCharArray()) {\n            int code = c.charValue();\n\
  \            if (Character.isLetter(code)) {\n                vowelCount++;\n  \
  \              if (vowel == null) {\n                    vowel = String.valueOf(code);\n\
  \                } else if (vowel != null && vowel.equals(String.valueOf(code)))\
  \ {\n                    vowelCount++;\n                }\n            }\n     \
  \   }\n        if (vowelCount == 0 || vowelCount == word.length()) {\n         \
  \   return \"\";\n        }\n        int left = word.lastIndexOf('b', word.length()\
  \ - 1);\n        if (left >= 0) {\n            return findClosestVowel(word, left,\
  \ vowel);\n        }\n        return findClosestVowel(word, word.length() - 1, vowel);"
- "        Set<String> vowels = new HashSet<>();\n        vowels.add(\"a\");\n   \
  \     vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n\
  \        vowels.add(\"u\");\n        Collections.sort(vowels);\n        \n     \
  \   String firstVowel = \"\";\n        String secondVowel = \"\";\n        String\
  \ thirdVowel = \"\";\n        for (String vowel : vowels) {\n            if (vowel.equals(word.substring(word.length()\
  \ - 1).toLowerCase())) {\n                if (firstVowel.length() > 0) {\n     \
  \               return firstVowel;\n                } else {\n                 \
  \   firstVowel = vowel;\n                }\n            }\n            if (vowel.equals(word.substring(0,word.length()\
  \ - 1).toLowerCase())) {\n                if (secondVowel.length() > 0) {\n    \
  \                return secondVowel;\n                } else {\n               \
  \     secondVowel = vowel;\n                }\n            }\n            if (vowel.equals(word.substring(word.length()\
  \ - 1, word.length()).toLowerCase())) {\n                if (thirdVowel.length()\
  \ > 0) {\n                    return thirdVowel;\n                } else {\n   \
  \                 thirdVowel = vowel;\n                }\n            }\n      \
  \  }\n        if (firstVowel.length() > 0) {\n            return firstVowel;\n \
  \       } else {\n            return secondVowel;\n        }"
- "        String vowel = \"aAiIiOo\";\n        int len = word.length();\n       \
  \ char ch;\n        boolean isVowel;\n        int i, j, k;\n        String[] vowels\
  \ = new String[]{\n                \"a\",\n                \"e\",\n            \
  \    \"i\",\n                \"o\",\n                \"u\",\n                \"\
  A\",\n                \"E\",\n                \"I\",\n                \"O\",\n \
  \               \"U\"\n        };\n        for (i = 0, j = len - 1, k = -1; (ch\
  \ = word.charAt(i)) != '\\0'; i++) {\n            isVowel = vowel.contains(String.valueOf(ch));\n\
  \            if (k == -1 && isVowel) {\n                k = i;\n            } else\
  \ if (k > -1 && !isVowel) {\n                break;\n            } else if (k ==\
  \ -1 && isVowel) {\n                k = i;\n            }\n        }\n        if\
  \ (k == -1 && isVowel) {\n            return \"\" + ch;\n        }\n        while\
  \ (k != -1 && k < len) {\n            if (isVowel) {\n                k = -1;\n\
  \            } else {\n                for (j = 0, k = len - 1; j < len; j++, k--)\
  \ {\n                    if (vowel.contains(String.valueOf(word.charAt(k)))) {\n\
  \                        break;\n                    }\n                }\n    \
  \        }\n            if (k == -1) {\n                return \"\" + ch;\n    \
  \        }\n        }\n        return \"\";"
- '        '
- "        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"};\n       \
  \ String vowelsToUse = \"\";\n        for (int i = word.length() - 1; i >= 0; i--)\
  \ {\n            char lastChar = word.charAt(i);\n            if (vowels.contains(Character.toLowerCase(lastChar)))\n\
  \                vowelsToUse = vowelsToUse + lastChar;\n            else\n     \
  \           break;\n        }\n        for (int i = 0; i < vowelsToUse.length();\
  \ i++) {\n            if (vowelsToUse.substring(i, i + 1).equals(\"y\")) {\n   \
  \             for (int j = i + 1; j < vowelsToUse.length(); j++) {\n           \
  \         if (vowelsToUse.substring(j, j + 1).equals(\"y\")) {\n               \
  \         String vowelToUse = vowelsToUse.substring(0, i) + vowelsToUse.substring(j,\
  \ j + 1);\n                        if (vowelToUse.equals(\"u\") || vowelToUse.equals(\"\
  y\")) {\n                            return vowelToUse;\n                      \
  \  }\n                    }\n                }\n            }\n        }\n     \
  \   return \"\";"
- "        word = word.toUpperCase();\n        char ch;\n        char[] vowels = new\
  \ char[]{'a','e','i','o','u','A','E','I','O','U'};\n        int idx = 0;\n     \
  \   int[] offsets = new int[vowels.length];\n        offsets[0] = 0;\n        int\
  \ cnt = 0;\n        for (int i = 0; i < word.length(); i++) {\n            ch =\
  \ word.charAt(i);\n            if (ch == 'A' || ch == 'E' || ch == 'I' || ch ==\
  \ 'O' || ch == 'U') {\n                offsets[cnt++] = i;\n            }\n    \
  \    }\n        for (int i = 0; i < vowels.length; i++) {\n            int leftIdx\
  \ = offsets[i] - 1;\n            if (leftIdx >= 0) {\n                int rightIdx\
  \ = offsets[i+1];\n                int idx = word.indexOf(vowels[i], leftIdx, rightIdx);\n\
  \                if (idx != -1) {\n                    offsets[idx] = i;\n     \
  \               break;\n                }\n            }\n        }\n        if\
  \ (offsets.length == 0) {\n            return \"\";\n        } else {\n        \
  \    int bestScore = Integer.MAX_VALUE;\n            int bestIndex = -1;\n     \
  \       for (int i = 0; i < offsets.length; i++) {\n                int leftIdx\
  \ = offsets[i] - 1;\n                int rightIdx = offsets[i+1];\n            \
  \    int idx = word.indexOf(vowels[offsets[i]], leftIdx, rightIdx);\n          \
  \      boolean found = true;\n                for (int j = 0; j < offsets.length;\
  \ j++) {\n                    if (i == j) {\n                        continue;\n\
  \                    } else {\n                        char ch = word.charAt(idx);\n\
  \                        if (ch != vowels[offsets[j]]) {\n                     \
  \       found = false;\n                        }\n                    }\n     \
  \           }\n                if (found) {\n                    int score = Math.abs(idx-offsets[i-1]);\n\
  \                    if (score > bestScore) {\n                        bestScore\
  \ = score;\n                        bestIndex = i;\n                    }\n    \
  \            }\n            }\n            return vowels[bestIndex];\n        }"
- "        Map<Character, Integer> map = new TreeMap<>();\n        for (char c : word.toCharArray())\
  \ {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        map.put('\\\
  0', 1);\n        Integer maxKey = Collections.max(map.keySet());\n        String\
  \ vowel = map.get(maxKey).toString();\n        int index = maxKey;\n        while\
  \ ((index = word.lastIndexOf(vowel, index + 1)) >= 0) {\n            vowel = word.charAt(index);\n\
  \        }\n        if (vowel.length() > 0) {\n            return vowel;\n     \
  \   }\n        return \"\";"
- "        String[] vowels = { \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
  I\", \"O\", \"U\" };\n        word = word.toLowerCase();\n        String vowel =\
  \ null;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            vowel\
  \ = word.substring(i, i + 1).trim();\n            int len = vowels.length - 1;\n\
  \            for (int j = 0; j < len; j++) {\n                if (vowel.equals(vowels[j]))\
  \ {\n                    return vowel;\n                }\n            }\n     \
  \   }\n        return \"\";"
- "        String vowelsArray[] = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        List<String>\
  \ vowels = new ArrayList<>();\n        for (String vowel : vowelsArray) {\n    \
  \        vowels.add(vowel);\n        }\n        Collections.sort(vowels, (a, b)\
  \ -> {\n            boolean a1 = a.toLowerCase().startsWith(\"a\");\n          \
  \  boolean a2 = a.toLowerCase().startsWith(\"i\");\n            boolean a3 = a.toLowerCase().startsWith(\"\
  u\");\n            boolean a4 = a.toLowerCase().startsWith(\"e\");\n           \
  \ boolean b1 = b.toLowerCase().startsWith(\"a\");\n            boolean b2 = b.toLowerCase().startsWith(\"\
  i\");\n            boolean b3 = b.toLowerCase().startsWith(\"u\");\n           \
  \ boolean b4 = b.toLowerCase().startsWith(\"e\");\n            if (a1 && b2) {\n\
  \                return -1;\n            }\n            if (a2 && b1) {\n      \
  \          return 1;\n            }\n            if (a3 && b2) {\n             \
  \   return 1;\n            }\n            if (a4 && b2) {\n                return\
  \ -1;\n            }\n            if (b1 && a2) {\n                return -1;\n\
  \            }\n            if (b2 && a1) {\n                return 1;\n       \
  \     }\n            if (b3 && a1) {\n                return 1;\n            }\n\
  \            if (b4 && a1) {\n                return -1;\n            }\n      \
  \      return 0;\n        });\n        if (vowels.isEmpty()) {\n            return\
  \ \"\";\n        }\n        Set<Character> charSet = new HashSet<>(Arrays.asList(word.split(\"\
  \")));\n        for (char c : charSet) {\n            if (!vowels.contains(Character.toLowerCase(c)))\
  \ {\n                return \"\";\n            }\n        }\n        if (word.startsWith(\"\
  a\") || word.startsWith(\"i\") || word.startsWith(\"e\") || word.startsWith(\"o\"\
  ) || word.startsWith(\"u\")) {\n            return word.charAt(word.length() - 1);\n\
  \        }\n        if (word.endsWith(\"a\") || word.endsWith(\"i\") || word.endsWith(\"\
  e\") || word.endsWith(\"o\") || word.endsWith(\"u\")) {\n            return word.charAt(0);\n\
  \        }\n        return \"\";"
- "        Set<Character> vowels = Arrays.stream(new Character[]{'A','a','E','e','I','i','O','o','U','u','A','a','E','e','I','i','O','o','U','u'}).collect(Collectors.toSet());\n\
  \        String vowelString = \"\";\n        for(int i = word.length() - 1; i >=\
  \ 0; i--) {\n            char ch = word.charAt(i);\n            if(vowels.contains(ch))\
  \ {\n                if(vowelString.isEmpty()) {\n                    vowelString\
  \ = ch;\n                } else {\n                    if(vowelString.equalsIgnoreCase(ch))\
  \ {\n                        vowelString = ch;\n                    }\n        \
  \        }\n            }\n        }\n        return vowelString;"
- "        Set<String> vowels = new HashSet<String>();\n        vowels.add(\"a\");\n\
  \        vowels.add(\"i\");\n        vowels.add(\"u\");\n        vowels.add(\"e\"\
  );\n        vowels.add(\"o\");\n        vowels.add(\"y\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"u\");\n        vowels.add(\"e\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"u\");\n        vowels.add(\"e\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"u\");\n        vowels.add(\"e\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"u\");\n        vowels.add(\"e\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"y\");\n\n        int index1 = vowels.lastIndexOf(\"\
  a\");\n        int index2 = vowels.lastIndexOf(\"i\");\n        int index3 = vowels.lastIndexOf(\"\
  u\");\n        int index4 = vowels.lastIndexOf(\"e\");\n        int index5 = vowels.lastIndexOf(\"\
  o\");\n        int index6 = vowels.lastIndexOf(\"y\");\n        int index7 = vowels.lastIndexOf(\"\
  i\");\n        int index8 = vowels.lastIndexOf(\"u\");\n        int index9 = vowels.lastIndexOf(\"\
  e\");\n        int index10 = vowels.lastIndexOf(\"o\");\n        int index11 = vowels.lastIndexOf(\"\
  y\");\n        int index12 = vowels.lastIndexOf(\"a\");\n        int index13 = vowels.lastIndexOf(\"\
  i\");\n        int index14 = vowels.lastIndexOf(\"u\");\n        int index15 = vowels.lastIndexOf(\"\
  e\");\n        int index16 = vowels.lastIndexOf(\"o\");\n        int index17 = vowels.lastIndexOf(\"\
  y\");\n        int index18 = vowels.lastIndexOf(\"a\");\n        int index19 = vowels.lastIndexOf(\"\
  i\");\n        int index20 = vowels.lastIndexOf(\"u\");\n        int index21 = vowels.lastIndexOf(\"\
  e\");\n        int index22 = vowels.lastIndexOf(\"o\");\n        int index23 = vowels.lastIndexOf(\"\
  y\");\n        int index24 = vowels.lastIndexOf(\"a\");\n        int index25 = vowels.lastIndexOf(\"\
  i\");\n        int index26 = vowels.lastIndexOf(\"u\");\n        int index27 = vowels."
- "        \n        String vowels = \"AEIOUaeiou\";\n        int consonants = word.length()\
  \ - word.replaceAll(\"[^\" + vowels + \"]\", \"\").length();\n        int firstIndex\
  \ = consonants;\n        int secondIndex = consonants + 1;\n        \n        //First\
  \ condition \n        if(word.charAt(firstIndex) >= 'A' && word.charAt(firstIndex)\
  \ <= 'Z') {\n            firstIndex--;\n        }\n        //Second condition\n\
  \        if(word.charAt(secondIndex) >= 'A' && word.charAt(secondIndex) <= 'Z')\
  \ {\n            secondIndex++;\n        }\n        \n        int vowelIndex = 0;\n\
  \        while(firstIndex >= 0) {\n            if(word.charAt(firstIndex) >= 'A'\
  \ && word.charAt(firstIndex) <= 'Z') {\n                vowelIndex = firstIndex;\n\
  \                firstIndex--;\n            } else break;\n        }\n        \n\
  \        if(secondIndex < word.length() - (word.length() - word.replaceAll(\"[^\"\
  \ + vowels + \"]\", \"\").length())) {\n            vowelIndex++;\n            while(secondIndex\
  \ < word.length() - (word.length() - word.replaceAll(\"[^\" + vowels + \"]\", \"\
  \").length())) {\n                if(word.charAt(secondIndex) >= 'A' && word.charAt(secondIndex)\
  \ <= 'Z') {\n                    vowelIndex = secondIndex;\n                   \
  \ secondIndex++;\n                } else break;\n            }\n        }\n    \
  \    return word.substring(vowelIndex + 1, word.length() - word.replaceAll(\"[^\"\
  \ + vowels + \"]\", \"\").length());"
- "        boolean bConsonant = false;\n        boolean bUpper = false;\n        boolean\
  \ bVowel = false;\n        boolean bCapital = false;\n        String vowels = \"\
  aeiouAEIOU\";\n        String vowelsCapital = \"AEIOU\";\n        String vowelsAll\
  \ = \"AEIOUaeiou\";\n        for(Character ch:word.toCharArray()) {\n          \
  \  if(Character.isUpperCase(ch)) {\n                bUpper = true;\n           \
  \ } else if(Character.isLowerCase(ch)) {\n                bConsonant = true;\n \
  \           } else if(Character.isLetter(ch)) {\n                bVowel = true;\n\
  \            } else if(Character.isUpperCase(ch)&&!bCapital) {\n               \
  \ bCapital = true;\n            } else if(!bVowel) {\n                bVowel = true;\n\
  \            }\n        }\n        if(bVowel) {\n            int j = 0;\n      \
  \      for(int i = word.length()-1;i>=0;i--) {\n                char ch = word.charAt(i);\n\
  \                if(vowels.indexOf(ch) != -1) {\n                    int k = word.indexOf(\"\
  AEIOU\", j);\n                    if((k>=0)&&(k<word.length())) {\n            \
  \            String s = word.substring(j, k);\n                        if(s.equals(vowelsCapital))\
  \ {\n                            return s.toUpperCase();\n                     \
  \   }\n                    }\n                    j=k;\n                }\n    \
  \        }\n        }\n        return \"\";"
- "        List<Integer> consonantIndices = getIndicesOfConsonants(word);\n      \
  \  if (consonantIndices.size() < 2) {\n            return \"\";\n        }\n   \
  \     List<Integer> vowelIndices = getIndicesOfVowels(word);\n        if (vowelIndices.size()\
  \ < 2) {\n            return \"\";\n        }\n        int shortestDistance = Integer.MAX_VALUE;\n\
  \        for (int i = consonantIndices.size() - 2; i >= 0; i--) {\n            if\
  \ (vowelIndices.get(i) < consonantIndices.get(i + 1)) {\n                continue;\n\
  \            }\n            int distance = Integer.MAX_VALUE;\n            int vowel\
  \ = vowelIndices.get(i);\n            for (int j = consonantIndices.size() - 1;\
  \ j >= 0; j--) {\n                if (vowelIndices.get(j) > consonantIndices.get(j\
  \ + 1)) {\n                    continue;\n                }\n                int\
  \ newDistance = distance(consonantIndices.get(j), vowel);\n                if (distance\
  \ > newDistance) {\n                    distance = newDistance;\n              \
  \      vowel = vowelIndices.get(j);\n                }\n            }\n        \
  \    if (distance < shortestDistance) {\n                shortestDistance = distance;\n\
  \            }\n        }\n        char vowel = word.charAt(vowelIndices.get(vowelIndices.size()\
  \ - 1));\n        if (vowel == 'a' || vowel == 'e' || vowel == 'i' || vowel == 'o'\
  \ || vowel == 'u') {\n            return vowel;\n        } else {\n            return\
  \ \"\";\n        }"
- "        \n        // Write your code here\n        String vowels[] = {\"a\", \"\
  e\", \"i\", \"o\", \"u\"};\n        if (vowels.contains(word.substring(word.length()\
  \ - 1, word.length()))) {\n            String vowelBefore = word.substring(word.length()\
  \ - 1, word.length());\n            return vowelBefore;\n        } else {\n    \
  \        return \"\";\n        }"
- "        for(int i=0; i<word.length(); i++) {\n            boolean isVowel = Character.isLetter(word.charAt(i));\n\
  \            if(isVowel) {\n                for(int j=i+1; j<word.length(); j++)\
  \ {\n                    boolean isConsonant = Character.isLetter(word.charAt(j));\n\
  \                    if(isConsonant) {\n                        boolean isBetween\
  \ = word.charAt(i) == 'a' && word.charAt(j) == 'u';\n                        if(isBetween)\
  \ {\n                            return word.charAt(j);\n                      \
  \  }\n                    }\n                }\n            }\n        }\n     \
  \   return \"\";"
- "        // Write your code here\n        List<Character> list = new ArrayList<>();\n\
  \        for(char c:word.toCharArray()){\n            if(c=='a' || c=='e' || c=='i'\
  \ || c=='o' || c=='u') list.add(c);\n        }\n        Character right = list.get(list.size()-1);\n\
  \        Character left = list.get(0);\n        String output = \"\";\n        boolean\
  \ isVowel = false;\n        for(char c:word.toCharArray()){\n            if(c==right){\n\
  \                isVowel = true;\n                break;\n            }\n      \
  \  }\n        if(isVowel) output+=right;\n        for(char c:word.toCharArray()){\n\
  \            if(c==left){\n                isVowel = true;\n                break;\n\
  \            }\n        }\n        if(isVowel) output+=left;\n        return output;"
- "        List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n\
  \        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
  );\n        vowels.add(\"u\");\n\n        // Find all consonants in the right side\n\
  \        List<String> consonants = Arrays.stream(word.substring(word.length() -\
  \ 1).split(\"\")).filter(s -> !vowels.contains(s.toLowerCase())).collect(Collectors.toList());\n\
  \n        // Find out which vowel has the closest distance with each consonant\n\
  \        List<Double> distances = new ArrayList<>();\n        for (String c : consonants)\
  \ {\n            double distance = Double.MAX_VALUE;\n            int min = 0;\n\
  \            for (int i = 0; i < vowels.size(); i++) {\n                double d\
  \ = vowels.get(i).indexOf(word.charAt(word.length() - 1 - i)) - vowels.get(i).indexOf(c);\n\
  \                if (d > 0) {\n                    if (d < distance) {\n       \
  \                 distances.set(min, d);\n                        distance = d;\n\
  \                        min = i;\n                    }\n                }\n  \
  \          }\n        }\n\n        // Return the vowel with the smallest distance\n\
  \        return distances.get(0);"
- "        Set<String> vowels = Arrays.stream(word.split(\"\")).filter(s -> \"aeiou\"\
  .contains(s)).collect(Collectors.toSet());\n        String vowel = null;\n     \
  \   word = word.toLowerCase(); // We need to make sure the input is lower case\n\
  \        word = word.replaceAll(\"[^a-z]\", \"\"); // We need to make sure the input\
  \ contains only letter\n        word = word.replaceAll(\"^[a-z]\", \"\"); // We\
  \ need to make sure the input starts with letter\n        word = word.replaceAll(\"\
  ^[^a-z]\", \"\"); // We need to make sure the input doesn't start with letter\n\
  \        \n        word = word.replaceAll(\"(?i)^a\", \"\");\n        word = word.replaceAll(\"\
  (?i)^b\", \"\");\n        word = word.replaceAll(\"(?i)^c\", \"\");\n        word\
  \ = word.replaceAll(\"(?i)^d\", \"\");\n        word = word.replaceAll(\"(?i)^e\"\
  , \"\");\n        word = word.replaceAll(\"(?i)^f\", \"\");\n        word = word.replaceAll(\"\
  (?i)^g\", \"\");\n        word = word.replaceAll(\"(?i)^h\", \"\");\n        word\
  \ = word.replaceAll(\"(?i)^i\", \"\");\n        word = word.replaceAll(\"(?i)^j\"\
  , \"\");\n        word = word.replaceAll(\"(?i)^k\", \"\");\n        word = word.replaceAll(\"\
  (?i)^l\", \"\");\n        word = word.replaceAll(\"(?i)^m\", \"\");\n        word\
  \ = word.replaceAll(\"(?i)^n\", \"\");\n        word = word.replaceAll(\"(?i)^o\"\
  , \"\");\n        word = word.replaceAll(\"(?i)^p\", \"\");\n        word = word.replaceAll(\"\
  (?i)^q\", \"\");\n        word = word.replaceAll(\"(?i)^r\", \"\");\n        word\
  \ = word.replaceAll(\"(?i)^s\", \"\");\n        word = word.replaceAll(\"(?i)^t\"\
  , \"\");\n        word = word.replaceAll(\"(?i)^u\", \"\");\n        word = word.replaceAll(\"\
  (?i)^v\", \"\");\n        word = word.replaceAll(\"(?i)^w\", \"\");\n        word\
  \ = word.replaceAll(\"(?i)^x\", \"\");\n        word = word.replaceAll(\"(?i)^y\"\
  , \"\");\n        word = word.replaceAll(\"(?i)^z\", \"\");\n        word = word.replaceAll(\"\
  (?i)^A\", \"\");\n        word = word.replaceAll(\"(?i)^B\", \"\");\n        word\
  \ = word.replaceAll(\"(?i)^C\", \"\");\n        word = word.replaceAll(\"(?i)^D\"\
  , \"\");\n        word = word.replaceAll(\"(?i)^E\", \"\");\n        word = "
- "        if(word.endsWith(\"y\") && !word.startsWith(\"a\") && !word.startsWith(\"\
  i\")) {\n            return \"y\";\n        }\n        if(word.endsWith(\"g\") &&\
  \ !word.startsWith(\"a\") && !word.startsWith(\"i\")) {\n            return \"g\"\
  ;\n        }\n        if(word.endsWith(\"r\") && !word.startsWith(\"a\") && !word.startsWith(\"\
  i\")) {\n            return \"r\";\n        }\n        if(word.endsWith(\"u\") &&\
  \ !word.startsWith(\"a\") && !word.startsWith(\"i\")) {\n            return \"u\"\
  ;\n        }\n        if(word.endsWith(\"t\") && !word.startsWith(\"a\") && !word.startsWith(\"\
  i\")) {\n            return \"t\";\n        }\n        if(word.endsWith(\"o\") &&\
  \ !word.startsWith(\"a\") && !word.startsWith(\"i\")) {\n            return \"o\"\
  ;\n        }\n        if(word.endsWith(\"m\") && !word.startsWith(\"a\") && !word.startsWith(\"\
  i\")) {\n            return \"m\";\n        }\n        if(word.endsWith(\"p\") &&\
  \ !word.startsWith(\"a\") && !word.startsWith(\"i\")) {\n            return \"p\"\
  ;\n        }\n        return \"\";"
- "        char[] vowels = new char[]{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
  \ 'U'};\n        char[] rightSide = word.toCharArray();\n        Arrays.sort(rightSide);\n\
  \        for(int i = rightSide.length - 1; i >= 0; i--){\n            boolean flag\
  \ = false;\n            for(int j = 0; j < vowels.length; j++){\n              \
  \  if(rightSide[i] == vowels[j]){\n                    flag = true;\n          \
  \          break;\n                }\n            }\n            if(flag){\n   \
  \             String result = \"\";\n                for(int j = 0; j < vowels.length;\
  \ j++){\n                    if(vowels[j] == rightSide[i]){\n                  \
  \      result = String.valueOf(vowels[j]);\n                    }\n            \
  \    }\n                return result;\n            }\n        }\n        return\
  \ \"\";"
- "        Map<Character, Integer> map = new HashMap<>();\n\n        for (char c :\
  \ word.toCharArray()) {\n            Integer count = map.get(c);\n            if\
  \ (count == null) {\n                map.put(c, 1);\n            } else {\n    \
  \            map.put(c, count + 1);\n            }\n        }\n\n        Map<Character,\
  \ Integer> sortedMap = new TreeMap<>(map);\n\n        int index = sortedMap.values().stream()\n\
  \                .map(Integer::intValue)\n                .max((a, b) -> b - a)\n\
  \                .orElse(0);\n\n        return index == 0 ? \"\" : sortedMap.get(String.valueOf(index));"
- "        List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n\
  \        vowels.add(\"i\");\n        vowels.add(\"e\");\n        vowels.add(\"o\"\
  );\n        vowels.add(\"u\");\n\n        List<String> consonants = new ArrayList<>();\n\
  \        consonants.add(\"b\");\n        consonants.add(\"c\");\n        consonants.add(\"\
  d\");\n        consonants.add(\"f\");\n        consonants.add(\"g\");\n        consonants.add(\"\
  h\");\n        consonants.add(\"j\");\n        consonants.add(\"k\");\n        consonants.add(\"\
  l\");\n        consonants.add(\"m\");\n        consonants.add(\"n\");\n        consonants.add(\"\
  p\");\n        consonants.add(\"q\");\n        consonants.add(\"r\");\n        consonants.add(\"\
  s\");\n        consonants.add(\"t\");\n        consonants.add(\"v\");\n        consonants.add(\"\
  w\");\n        consonants.add(\"x\");\n        consonants.add(\"y\");\n        consonants.add(\"\
  z\");\n        for (String vowel : vowels) {\n            for (int i = word.length()\
  \ - 1; i >= 0; i--) {\n                if (vowel.equals(word.substring(i, i + 1)))\
  \ {\n                    int j = i;\n                    do {\n                \
  \        int k = j;\n                        do {\n                            if\
  \ (consonants.get(k).equals(vowel)) {\n                                return vowel;\n\
  \                            }\n                            k--;\n             \
  \           } while (k > 0);\n                        j--;\n                   \
  \ } while (j > 0);\n                }\n            }\n        }\n        return\
  \ \"\";"
- "        final String[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        int startIndex\
  \ = word.lastIndexOf(\"a\");\n        int endIndex = word.lastIndexOf(\"z\");\n\
  \        int index = -1;\n        if (startIndex != -1 && endIndex != -1) {\n  \
  \          for (int i = startIndex; i <= endIndex; i++) {\n                if (vowels.contains(word.charAt(i)))\n\
  \                    index = i;\n            }\n        }\n        if (index < 0)\
  \ {\n            return \"\";\n        }\n        String result = \"\";\n      \
  \  for (int i = index + 1; i <= endIndex; i++) {\n            result = word.charAt(i)\
  \ + result;\n        }\n        return result;"
- '        return "";'
- "        char[] charArray = word.toCharArray();\n        Arrays.sort(charArray);\n\
  \        int index = 0;\n        for (int i = charArray.length; i > 0; i--) {\n\
  \            if (charArray[i] == Character.toUpperCase(charArray[index])) {\n  \
  \              index++;\n            }\n            else {\n                break;\n\
  \            }\n        }\n        char[] sortedCharArray = charArray.clone();\n\
  \        Arrays.sort(sortedCharArray);\n        char resultArray[] = sortedCharArray.clone();\n\
  \        resultArray[index] = Character.toUpperCase(resultArray[index]);\n     \
  \   return new String(resultArray);"
- "        //Find two consonants from the right side\n        String[] consonants\
  \ = word.substring(2, word.length()).split(\"\");\n        \n        //Find all\
  \ the vowels\n        Set<Character> vowels = Set.of('a', 'e', 'i', 'o', 'u');\n\
  \        \n        //Find all combinations\n        List<String> combinations =\
  \  Stream.of(consonants).flatMap(c -> vowels.stream().map(v -> Arrays.asList(c,\
  \ v)).collect(Collectors.toList())).collect(Collectors.toList());\n        \n  \
  \      //Find the closest one\n        List<String> result = combinations.stream().sorted((lhs,\
  \ rhs) -> Math.abs(lhs.get(0).compareTo(rhs.get(0))) - (Math.abs(lhs.get(1).compareTo(rhs.get(1)))\
  \ > 0 ? 1 : 0))\n                                                .map(s -> String.join(\"\
  \", s))\n                                                .collect(Collectors.toList());\n\
  \        if (result.isEmpty()) return \"\";\n        return result.get(0);"
- "        Set<String> vowelsSet = new HashSet<String>();\n        vowelsSet.add(\"\
  a\");\n        vowelsSet.add(\"e\");\n        vowelsSet.add(\"i\");\n        vowelsSet.add(\"\
  o\");\n        vowelsSet.add(\"u\");\n        vowelsSet.add(\"A\");\n        vowelsSet.add(\"\
  E\");\n        vowelsSet.add(\"I\");\n        vowelsSet.add(\"O\");\n        vowelsSet.add(\"\
  U\");\n        // If the given string is empty return empty string\n        if(word.isEmpty())\
  \ return \"\";\n        // Use a loop to iterate through word\n        // If word\
  \ length not even, there should be no vowel in the string\n        if(word.length()%2\
  \ != 0) return \"\";\n        int leftConsonantIndex = 0;\n        int rightConsonantIndex\
  \ = word.length()-1;\n        // Iterate through each letter of word\n        for(int\
  \ i=0; i<word.length()-1; i++) {\n            // Check if the current letter is\
  \ a vowel from the set\n            String vowel = \"\";\n            if(vowelsSet.contains(word.substring(i,\
  \ i+1))) {\n                // Check if we find any vowel\n                vowel\
  \ = word.substring(i, i+1);\n            }\n            // If vowel found, break\
  \ out of the loop\n            if(vowel.isEmpty()) break;\n            // Check\
  \ whether current letter is consonant or not\n            String consonant = \"\"\
  ;\n            if(Character.isLetter(word.charAt(i))) {\n                consonant\
  \ = word.substring(i, i+1);\n            }\n            // If current letter is\
  \ consonant, check if its left or right\n            if(consonant.equalsIgnoreCase(\"\
  a\") || consonant.equalsIgnoreCase(\"e\") || consonant.equalsIgnoreCase(\"i\") ||\
  \ consonant.equalsIgnoreCase(\"o\") || consonant.equalsIgnoreCase(\"u\")\n     \
  \               || consonant.equalsIgnoreCase(\"A\") || consonant.equalsIgnoreCase(\"\
  E\") || consonant.equalsIgnoreCase(\"I\") || consonant.equalsIgnoreCase(\"O\") ||\
  \ consonant.equalsIgnoreCase(\"U\")) {\n                if(consonant.equalsIgnoreCase(\"\
  a\") || consonant.equalsIgnoreCase(\"A\")) leftConsonantIndex = i;\n           \
  \     if(consonant.equalsIgnoreCase(\"e\") || consonant.equalsIgnoreCase(\"E\"))\
  \ rightConsonantIndex = i;\n            }\n        }\n        // If the string is\
  \ not empty\n        if(leftConsonantIndex != 0 && rightConsonantIndex != 0) {\n\
  \            // Calculate distance between "
- "        // Write your code here\n        int vowel_right = 0;\n        for (int\
  \ i = 0; i < word.length()-1; i++) {\n            char letter = word.charAt(i);\n\
  \            if (letter.matches(\"[aeiouyAEIOUY]\")) {\n                vowel_right\
  \ = i;\n                break;\n            }\n        }\n        int vowel_left\
  \ = 0;\n        for (int i = 0; i < word.length()-1; i++) {\n            char letter\
  \ = word.charAt(i);\n            if (letter.matches(\"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\"\
  )) {\n                vowel_left = i;\n                break;\n            }\n \
  \       }\n        String result = \"\";\n        if(vowel_right - vowel_left <\
  \ 0 || !(vowel_right - vowel_left > 1)) {\n            return \"\";\n        }\n\
  \        for (int i = vowel_right+1; i <= vowel_left; i++) {\n            char letter\
  \ = word.charAt(i);\n            if(letter.matches(\"[aeiouy]\")) {\n          \
  \      result = letter;\n                break;\n            }\n        }\n    \
  \    return result;"
- "        StringBuilder sb = new StringBuilder();\n        final int length = word.length();\n\
  \        final int vowelCount = 0;\n        for (int i = 0; i < length; i++) {\n\
  \            String s = word.substring(i, i + 1);\n            if (s.matches(\"\
  [aeiouAEIOU]\")) {\n                vowelCount++;\n                if (vowelCount\
  \ == 3) {\n                    sb.append(s);\n                }\n            }\n\
  \        }\n        return sb.toString();"
- "        int[] vowelsRight = new int[5];\n        int[] vowelsLeft = new int[5];\n\
  \        vowelsRight[0] = 2;\n        vowelsRight[1] = -1;\n        vowelsRight[2]\
  \ = -1;\n        vowelsRight[3] = -1;\n        vowelsRight[4] = -1;\n        vowelsLeft[0]\
  \ = -1;\n        vowelsLeft[1] = -1;\n        vowelsLeft[2] = -1;\n        vowelsLeft[3]\
  \ = -1;\n        vowelsLeft[4] = -1;\n        int count = 0;\n        for (char\
  \ c : word.toCharArray()) {\n            count += (c == 'a' || c == 'e' || c ==\
  \ 'i' || c == 'o' || c == 'u') ? 1 : 0;\n        }\n        count += word.trim().length()\
  \ % 5 != 0 ? 1 : 0;\n        count -= vowelsRight[4] - vowelsRight[3] - (vowelsLeft[3]\
  \ - vowelsLeft[2]) - (vowelsRight[2] - vowelsRight[1]) - (vowelsLeft[1] - vowelsLeft[0]);\n\
  \        if (count < 0) {\n            return \"\";\n        }\n        if (count\
  \ == 0) {\n            return \"\";\n        }\n        int[] vowelCountRight =\
  \ new int[5];\n        int[] vowelCountLeft = new int[5];\n        vowelCountRight[0]\
  \ = count;\n        vowelCountRight[1] = -1;\n        vowelCountRight[2] = -1;\n\
  \        vowelCountRight[3] = -1;\n        vowelCountRight[4] = -1;\n        vowelCountLeft[0]\
  \ = -1;\n        vowelCountLeft[1] = -1;\n        vowelCountLeft[2] = -1;\n    \
  \    vowelCountLeft[3] = -1;\n        vowelCountLeft[4] = -1;\n        count = 0;\n\
  \        int countRight = 0;\n        int countLeft = 0;\n        for (int i = word.length()\
  \ - 1; i >= 0; i--) {\n            if (word.charAt(i) == 'a' || word.charAt(i) ==\
  \ 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u')\
  \ {\n                count += 1;\n                countRight += vowelCountRight[count\
  \ - 1];\n            }\n            if (word.charAt(i) == 'a' || word.charAt(i)\
  \ == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) ==\
  \ 'u') {\n                countLeft += 1;\n                countLeft += vowelCountLeft[count\
  \ - 1];\n            }\n        }\n        if (count > countLeft) {\n          \
  \  return getClosestVowel(word.substring(0, i)).concat(getClosestVowel(word.substring(i,\
  \ word.length())));\n        }\n        if (count < countLeft) {\n            return\
  \ getClosestVowel(word.substring(0, word.length() - i)).concat(getClosestVowel(word.substring(word.length()\
  \ - i, word.length())));\n        }\n        return \"\";"
- "        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        // Initialize\
  \ two pointers, one pointing to the end of the word and another one to\n       \
  \ // the beginning of the word\n        int endIndex = 0;\n        int startIndex\
  \ = 0;\n        // Check each character\n        for (int i = 0; i < word.length();\
  \ i++) {\n            char ch = word.charAt(i);\n            // if character is\
  \ vowel, check whether we got to the end or beginning\n            if (vowels.contains(ch))\
  \ {\n                if (ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n \
  \                   endIndex = i;\n                } else {\n                  \
  \  startIndex = i;\n                }\n            } else {\n                if\
  \ (ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                    // If\
  \ the current character is the last character in the word, check whether we\n  \
  \                  // got to the beginning of the word or end without finding any\
  \ vowel\n                    if (i == word.length() - 1) {\n                   \
  \     if (startIndex == endIndex) {\n                            return \"\";\n\
  \                        } else {\n                            return word.substring(startIndex,\
  \ endIndex + 1);\n                        }\n                    } else {\n    \
  \                    if (endIndex == word.length() - 1) {\n                    \
  \        endIndex = i;\n                        } else {\n                     \
  \       return word.substring(startIndex, endIndex + 1);\n                     \
  \   }\n                    }\n                }\n            }\n        }\n    \
  \    // If we have reached this point, no vowel was found between the two consonants.\n\
  \        return \"\";"
- '        return "";'
- "        List<Character> letters = Arrays.stream(word.toCharArray()).collect(Collectors.toList());\n\
  \        letters.add(0, 'a');\n        letters.addAll(0, word.length() - 1, 'b');\n\
  \        letters.addAll(word.length(), 'z');\n        letters.sort(Comparator.comparing(c\
  \ -> c > 'z' ? c - 'a' + 1 : c - 'a'));\n        List<Character> vowels = new ArrayList<>();\n\
  \        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.addAll(vowels.stream().map(c\
  \ -> c - 'a' + 'a').collect(Collectors.toList()));\n        letters.stream().map(c\
  \ -> c == 'a' ? vowels.contains(c - 'a') : Character.isLetter(c)).reduce(Boolean::logicalOr).orElse(true))\n\
  \                ? \"\"\n                : letters.get(letters.size() - 1);"
- "        int cons = word.length() - 1;\n        ArrayList<Integer> vowels = new\
  \ ArrayList<Integer>();\n        for(int i = 0; i <= cons; i++){\n            if(Character.isLetter(word.charAt(i))){\n\
  \                int consonantIndex = word.charAt(i) - 'a';\n                if(consonantIndex\
  \ >= 0 && consonantIndex <= 1){\n                    vowels.add(i);\n          \
  \      }\n            }\n        }\n        \n        ArrayList result = new ArrayList();\n\
  \        for(Integer i : vowels){\n            int left = i;\n            int right\
  \ = i;\n            while(left >= 0 && right < cons && word.charAt(left) == word.charAt(right)){\n\
  \                if(left == right - 1){\n                    result.add(right);\n\
  \                }\n                left--;\n                right++;\n        \
  \    }\n        }\n        \n        String finalResult = \"\";\n        for(Integer\
  \ i : result){\n            if(i != 0){\n                finalResult += word.charAt(i);\n\
  \            }\n        }\n        return finalResult;"
- "        //Find vowel from the right side of the word\n        int lastVowel = findVowel(word,word.length()-2,word.length());\n\
  \        //Find consonant from the right side of the word\n        int firstConsonant\
  \ = findConsonant(word,word.length()-1,word.length());\n        //Find Vowel from\
  \ the left side of the word\n        int firstVowel = findVowel(word,0,word.length()-1);\n\
  \        //Find consonant from the left side of the word\n        int secondConsonant\
  \ = findConsonant(word,0,word.length()-1);\n        //Compare last vowel with first\
  \ consonant and first vowel with second consonant\n        if(lastVowel == firstConsonant\
  \ && firstVowel == secondConsonant) {\n            return \"U\";\n        }\n  \
  \      return \"\";"
- "        String[] vowels = {\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\"\
  ,\"U\"};\n        HashSet<String> vowelSet = new HashSet<String>(Arrays.asList(vowels));\n\
  \        \n        boolean leftHasAny = vowelSet.stream().anyMatch(word -> word.charAt(0)\
  \ == 'a');\n        boolean rightHasAny = vowelSet.stream().anyMatch(word -> word.charAt(word.length()-1)\
  \ == 'a');\n        \n        if (leftHasAny && rightHasAny)\n        {\n      \
  \      char[] array = word.toCharArray();\n            int start = array.length;\n\
  \            int end = word.length()-1;\n            \n            while(start >=\
  \ 0 && end <= array.length)\n            {\n                char firstChar = array[start];\n\
  \                char lastChar = array[end];\n                if (firstChar == lastChar)\n\
  \                    return firstChar;\n                else if (firstChar >= 'a'\
  \ && firstChar <= 'z')\n                    start--;\n                else if (lastChar\
  \ >= 'a' && lastChar <= 'z')\n                    end++;\n                else\n\
  \                    return \"\";\n            }\n            return \"\";\n   \
  \     }\n        return \"\";"
- "        //write your code here\n        int len = word.length();\n        Map<Character,\
  \ Integer> vowelMap = new HashMap<>();\n        vowelMap.put('a', 1);\n        vowelMap.put('e',\
  \ 1);\n        vowelMap.put('i', 1);\n        vowelMap.put('o', 1);\n        vowelMap.put('u',\
  \ 1);\n        vowelMap.put('y', 1);\n        vowelMap.put('o', 1);\n        vowelMap.put('r',\
  \ 1);\n        vowelMap.put('s', 1);\n        int count = 0;\n        int lastVowel\
  \ = 0;\n        for (int i = len - 1; i >= 0; i--) {\n            char ch = word.charAt(i);\n\
  \            if (vowelMap.containsKey(ch)) {\n                int count = vowelMap.get(ch);\n\
  \                if (count > 1) {\n                    count += 1;\n           \
  \         vowelMap.put(ch, count);\n                } else {\n                 \
  \   vowelMap.put(ch, 1);\n                    count = 1;\n                }\n  \
  \          } else {\n                vowelMap.put(ch, 1);\n                count\
  \ = 1;\n            }\n            if (vowelMap.containsKey(word.charAt(len - i)))\
  \ {\n                int count2 = vowelMap.get(word.charAt(len - i));\n        \
  \        if (count2 > 1) {\n                    count2 += 1;\n                 \
  \   vowelMap.put(word.charAt(len - i), count2);\n                } else {\n    \
  \                vowelMap.put(word.charAt(len - i), 1);\n                    count2\
  \ = 1;\n                }\n            } else {\n                vowelMap.put(word.charAt(len\
  \ - i), 1);\n                count2 = 1;\n            }\n            if (count >\
  \ lastVowel) {\n                lastVowel = count;\n            } else if (count2\
  \ > lastVowel) {\n                lastVowel = count2;\n            }\n        }\n\
  \        System.out.println(\"lastVowel\" + lastVowel);\n        if (lastVowel ==\
  \ 0) {\n            return \"\";\n        } else if (lastVowel == 1) {\n       \
  \     return \"a\";\n        } else if (lastVowel == 2) {\n            return \"\
  e\";\n        } else if (lastVowel == 3) {\n            return \"i\";\n        }\
  \ else if (lastVowel == 4) {\n            return \"o\";\n        } else if (lastVowel\
  \ == 5) {\n            return \"u\";\n        } else if (lastVowel == 6) {\n   \
  \         return \"y\";\n        } else if (lastVowel == 7) {\n            return\
  \ \"o\";\n        } else if (lastVowel == 8) {\n            return \"r\";\n    \
  \    } else if (lastVowel == 9) {\n            return \"s\";\n        }\n      \
  \  return \"\";"
- "        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        char firstChar =\
  \ word.charAt(word.length() - 1);\n        boolean firstCharIs = Character.isLetter(firstChar);\n\
  \        String firstCharCap = firstChar.toUpperCase();\n        String secondChar\
  \ = word.substring(word.length() - 1, word.length());\n        char secondCharCap\
  \ = secondChar.toUpperCase().charAt(0);\n        for (char letter : vowels) {\n\
  \            if (firstCharIs && letter == firstCharCap || letter == secondCharCap)\
  \ {\n                return letter;\n            }\n        }\n        return \"\
  \";"
- "        Map<Character, List<String>> map = new TreeMap<Character, List<String>>();\n\
  \        \n        map.put('e', Arrays.asList(\"e\", \"ie\", \"i\"));\n        map.put('a',\
  \ Arrays.asList(\"a\", \"e\", \"i\", \"ia\", \"ie\", \"ei\", \"ya\", \"yae\", \"\
  ye\", \"iy\", \"ey\"));\n        map.put('o', Arrays.asList(\"o\", \"oe\", \"oi\"\
  ));\n        map.put('u', Arrays.asList(\"u\", \"ee\", \"ue\"));\n        map.put('d',\
  \ Arrays.asList(\"d\", \"de\", \"di\", \"d\"));\n        map.put('k', Arrays.asList(\"\
  k\", \"ke\", \"ki\"));\n        map.put('q', Arrays.asList(\"q\", \"qu\", \"k\"\
  , \"k\", \"qu\", \"ku\"));\n        map.put('l', Arrays.asList(\"l\", \"le\", \"\
  li\"));\n        map.put('s', Arrays.asList(\"s\", \"se\", \"su\"));\n        map.put('t',\
  \ Arrays.asList(\"t\", \"te\", \"ti\", \"t\"));\n        map.put('b', Arrays.asList(\"\
  b\", \"be\", \"bi\", \"be\"));\n        map.put('n', Arrays.asList(\"n\", \"ne\"\
  , \"ni\", \"ne\"));\n        map.put('g', Arrays.asList(\"g\", \"ge\", \"gi\", \"\
  ge\"));\n        map.put('f', Arrays.asList(\"f\", \"fe\", \"fi\", \"fe\", \"fo\"\
  , \"fu\", \"fum\", \"fumm\"));\n        map.put('v', Arrays.asList(\"v\", \"ve\"\
  , \"vi\"));\n        map.put('j', Arrays.asList(\"j\", \"je\", \"ji\", \"je\"));\n\
  \        map.put('x', Arrays.asList(\"x\", \"xo\", \"xi\", \"xo\", \"xoe\", \"xoi\"\
  , \"xoya\", \"xoye\", \"xoiy\", \"xoey\"));\n        map.put('q', Arrays.asList(\"\
  q\", \"qu\", \"k\", \"k\", \"qu\", \"ku\"));\n        map.put('l', Arrays.asList(\"\
  l\", \"le\", \"li\"));\n        map.put('s', Arrays.asList(\"s\", \"se\", \"su\"\
  ));\n        map.put('t', Arrays.asList(\"t\", \"te\", \"ti\", \"t\"));\n      \
  \  map.put('b', Arrays.asList(\"b\", \"be\", \"bi\", \"be\"));\n        map.put('n',\
  \ Arrays.asList(\"n\", \"ne\", \"ni\", \"ne\"));\n        map.put('g', Arrays.asList(\"\
  g\", \"ge"
- "        int vowelIndex = word.length() - 2;\n        // If the last two character\
  \ in the word is not a vowel index, return empty string\n        if (word.length()\
  \ <= 2) {\n            return \"\";\n        }\n        // Loop through the string,\
  \ and find the index of the current char\n        for (int i = 0; i < word.length();\
  \ i++) {\n            if (vowelIndex >= 0 && word.charAt(vowelIndex) != 'A' && word.charAt(vowelIndex)\
  \ != 'E'\n                    && word.charAt(vowelIndex) != 'I' && word.charAt(vowelIndex)\
  \ != 'O'\n                    && word.charAt(vowelIndex) != 'U' && word.charAt(vowelIndex)\
  \ != 'Y') {\n                vowelIndex--;\n                continue;\n        \
  \    } else {\n                // If the vowel found, break out of the loop\n  \
  \              if (word.charAt(vowelIndex) == 'A' || word.charAt(vowelIndex) ==\
  \ 'E'\n                        || word.charAt(vowelIndex) == 'I' || word.charAt(vowelIndex)\
  \ == 'O'\n                        || word.charAt(vowelIndex) == 'U' || word.charAt(vowelIndex)\
  \ == 'Y') {\n                    break;\n                }\n                // Increase\
  \ the vowelIndex\n                vowelIndex++;\n            }\n        }\n    \
  \    // Return an empty string if there is no vowel found\n        if (vowelIndex\
  \ < 0 || vowelIndex >= word.length()) {\n            return \"\";\n        }\n \
  \       // If vowel is found, return the char\n        return word.charAt(vowelIndex\
  \ + 1);"
- "        List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n\
  \        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
  );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  a\");\n        vowels.add(\"e\");\n        vowel"
- "        \n        int i = 0;\n        int j = (word.length() - 1); // last index\
  \ of given string\n        char x;\n        int vowelStart = 0;\n        int vowelEnd\
  \ = 0;\n        while (j >= i) {\n            x = word.charAt(i); // current character\
  \ at index i\n            if ((x != 'a') && (x != 'e') && (x != 'i') && (x != 'o')\
  \ && (x != 'u') && (x != 'A') && (x != 'E') && (x != 'I') && (x != 'O') && (x !=\
  \ 'U')) // check if current character is vowel\n            {\n                if\
  \ (x == word.charAt(j)) { // check if next character at j is also same vowel\n \
  \                   j--;\n                    vowelStart = i;\n                \
  \    vowelEnd = j;\n                    break;\n                }\n            }\n\
  \            i++;\n            j--;\n        }\n\n        if (vowelStart == vowelEnd)\n\
  \            return \"\";\n        else {\n            String first = word.substring(vowelStart,\
  \ vowelEnd);\n            String second = word.substring(vowelEnd + 1, word.length());\n\
  \            return first.substring(0, 1).toUpperCase() + second.substring(second.length()\
  \ - 1, second.length()).toLowerCase();\n        }"
- "        \n        //Your code here\n        \n        return \"\";"
- "        String vowels = \"AEIOUaeiou\";\n        StringBuilder sb = new StringBuilder();\n\
  \        \n        int count = 0;\n        int maxCount = word.chars()\n       \
  \     .mapToObj(c -> Character.toUpperCase(c))\n            .filter(c -> vowels.indexOf(c)\
  \ != -1)\n            .mapToInt(c -> (char) c)\n            .max().getAsInt();\n\
  \        \n        for(char c : word.toCharArray()) {\n            if(c == word.charAt(maxCount\
  \ - 1) && vowels.indexOf(c) != -1) {\n                count++;\n            }\n\
  \        }\n        \n        String vowelsCount = String.valueOf(count);\n    \
  \    \n        boolean isCountUp = false;\n        \n        if(count < maxCount)\
  \ {\n            isCountUp = true;\n        }\n        \n        if(!isCountUp)\
  \ {\n            sb.deleteCharAt(sb.length() - 1);\n        }\n        \n      \
  \  return sb.toString();"
- "        ArrayList<String> vowels = Arrays.asList(new String[]{\"a\",\"e\",\"i\"\
  ,\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"});\n        ArrayList<String> consonants\
  \ = Arrays.asList(new String[]{\"B\",\"Bh\",\"C\",\"D\",\"F\",\"G\",\"H\",\"J\"\
  ,\"K\",\"L\",\"M\",\"N\",\"P\",\"R\",\"S\",\"T\",\"V\",\"W\",\"X\",\"Y\",\"Z\"});\n\
  \        StringBuilder result = new StringBuilder();\n        int idx = -1;\n  \
  \      int lastIdx = 0;\n        boolean found = false;\n        char lastChar =\
  \ word.charAt(word.length() - 1);\n        \n        for(int i = 0; i < word.length();\
  \ i++) {\n            char ch = word.charAt(i);\n            if(i == word.length()\
  \ - 1) {\n                if(ch == lastChar) {\n                    found = true;\n\
  \                }\n            } else {\n                char ch2 = word.charAt(i\
  \ + 1);\n                if((ch == consonants.indexOf(ch2)) && (!found)) {\n   \
  \                 found = true;\n                }\n            }\n        }\n \
  \       \n        if(found) {\n            idx = vowels.indexOf(word);\n       \
  \ }\n        \n        if(idx == -1) {\n            return \"\";\n        } else\
  \ {\n            return vowels.get(idx);\n        }"
- "        // Write your code here\n        int index = 0;\n        int end = word.length()\
  \ - 1;\n        while(index<end && word.charAt(index) != word.charAt(end)){\n  \
  \          index++;\n        }\n        int index_next = index;\n        int end_next\
  \ = end;\n        int start = index;\n        int start_next = index;\n        while(index_next<end_next){\n\
  \            if(word.charAt(index_next) == word.charAt(start_next)){\n         \
  \       start_next = index_next;\n            }\n            index_next++;\n   \
  \     }\n        if(word.charAt(start) != word.charAt(start_next)){\n          \
  \  start_next = start;\n        }\n        return \"\";"
- "        if (word == null || word.equals(\"\")) {\n            return \"\";\n  \
  \      }\n\n        // Get index of first vowel\n        int i = word.indexOf(\"\
  a\");\n        int j = word.indexOf(\"e\");\n        int k = word.indexOf(\"i\"\
  );\n        int l = word.indexOf(\"o\");\n        int m = word.indexOf(\"u\");\n\
  \n        long upper = word.substring(0, i).chars().mapToObj(c -> (char) c).sum()\
  \ - 1; // Count from right to left\n        long lower = word.substring(j).chars().mapToObj(c\
  \ -> (char) c).sum() - 1; // Count from left to right\n\n        if (upper <= lower)\
  \ {\n            return word.substring(i).charAt(0);\n        }\n\n        long\
  \ min = upper;\n        long max = lower;\n\n        // Find max and min based on\
  \ current word\n        while (upper >= lower) {\n            upper = word.substring(i).chars().mapToObj(c\
  \ -> (char) c).sum() - 1;\n            lower = word.substring(j).chars().mapToObj(c\
  \ -> (char) c).sum() - 1;\n            if (upper <= lower) {\n                min\
  \ = upper;\n                max = lower;\n            }\n        }\n        if (word.charAt(j)\
  \ == 'a') {\n            return word.substring(j, j + 1).charAt(0);\n        }\n\
  \        if (word.charAt(j) == 'e') {\n            return word.substring(j, j +\
  \ 1).charAt(0);\n        }\n        if (word.charAt(j) == 'i') {\n            return\
  \ word.substring(j, j + 1).charAt(0);\n        }\n        if (word.charAt(j) ==\
  \ 'o') {\n            return word.substring(j, j + 1).charAt(0);\n        }\n  \
  \      if (word.charAt(j) == 'u') {\n            return word.substring(j, j + 1).charAt(0);\n\
  \        }\n        return \"\";"
- "        int beginIndex = findConsonantIndex(word);\n        int endIndex = findConsonantIndex(word,\
  \ word.length(), 0);\n        if (beginIndex != -1 && endIndex != -1) {\n      \
  \      return word.substring(beginIndex, endIndex + 1).charAt(0);\n        }\n \
  \       return \"\";"
- "        //System.out.println(\"word:\"+word);\n        Set<Character> vowels =\
  \ Set.of('a', 'e', 'i', 'o', 'u');\n        String vowelsStr = String.valueOf(vowels);\n\
  \        List<Character> vowelsArray = Arrays.asList(vowelsStr.split(\"\"));\n\n\
  \        char[] word = word.toCharArray();\n        for (int i = word.length - 1;\
  \ i >= 0; i--) {\n            if (vowelsArray.stream().noneMatch(vowels::contains))\
  \ {\n                return \"\";\n            }\n\n            // Find right and\
  \ left index\n            int right = i;\n            int left = 0;\n          \
  \  while (right < word.length && vowelsArray.stream().noneMatch(vowels::contains))\
  \ {\n                right++;\n                while (vowelsArray.stream().noneMatch(vowels::contains))\
  \ {\n                    right++;\n                }\n                left++;\n\
  \                while (vowelsArray.stream().noneMatch(vowels::contains)) {\n  \
  \                  left--;\n                }\n            }\n\n            // Find\
  \ the closest vowel using two conditions\n            int closestVowel = (right\
  \ - left <= 1)\n                    ? right\n                    : Math.abs(right\
  \ - left);\n            int index = Math.abs(right - left) - 1;\n            char\
  \ closestVowelChar = vowelsArray.get(index);\n\n            // If the index is -1\
  \ then there is no vowel met in the given word\n            if (index == -1) {\n\
  \                return \"\";\n            }\n\n            String vowelStr = String.valueOf(vowelsArray.get(index));\n\
  \            if (closestVowelChar == vowelStr) {\n                return vowelStr;\n\
  \            }\n        }\n\n        return \"\";"
- "        String vowel = \"\";\n        String v1 = \"\";\n        String v2 = \"\
  \";\n        int count = -1;\n        String s1 = \"\";\n        String s2 = \"\"\
  ;\n\n        word = word.toUpperCase();\n        if (word.startsWith(\"A\")) count++;\n\
  \        if (word.startsWith(\"E\")) count++;\n        if (word.startsWith(\"I\"\
  )) count++;\n        if (word.startsWith(\"O\")) count++;\n        if (word.startsWith(\"\
  U\")) count++;\n        if (word.startsWith(\"A\")) {\n            count++;\n  \
  \          v1 = \"A\";\n        }\n        if (word.startsWith(\"E\")) {\n     \
  \       count++;\n            v1= \"E\";\n        }\n        if (word.startsWith(\"\
  I\")) {\n            count++;\n            v1= \"I\";\n        }\n        if (word.startsWith(\"\
  O\")) {\n            count++;\n            v1= \"O\";\n        }\n        if (word.startsWith(\"\
  U\")) {\n            count++;\n            v1= \"U\";\n        }\n\n        if (count\
  \ > -1) {\n            word = word.substring(count);\n            if (word.endsWith(\"\
  A\")) count--;\n            if (word.endsWith(\"E\")) count--;\n            if (word.endsWith(\"\
  I\")) count--;\n            if (word.endsWith(\"O\")) count--;\n            if (word.endsWith(\"\
  U\")) count--;\n\n            if (count < -1) {\n                word = word.substring(0,\
  \ word.length() - count);\n                if (word.endsWith(\"A\")) count++;\n\
  \                if (word.endsWith(\"E\")) count++;\n                if (word.endsWith(\"\
  I\")) count++;\n                if (word.endsWith(\"O\")) count++;\n           \
  \     if (word.endsWith(\"U\")) count++;\n            }\n\n            if (count\
  \ > -1) {\n                if (word.endsWith(\"A\")) {\n                    count--;\n\
  \                    v1 = \"A\";\n                }\n                if (word.endsWith(\"\
  E\")) {\n                    count--;\n                    v1= \"E\";\n        \
  \        }\n                if (word.endsWith(\"I\")) {\n                    count--;\n\
  \                    v1= \"I\";\n                }\n                if (word.endsWith(\"\
  O\")) {\n                    count--;\n                    v1= \"O\";\n        \
  \        }\n                if (word.endsWith(\"U\")) {\n                    count--;\n\
  \                    v1= \"U\";\n                }\n            }\n\n          \
  \  if (count > -1) {\n                if (word.endsWith(\"A\")) {\n            \
  \        count++;\n                    v1 = \"A\";\n                }\n        \
  \        if (word.endsWith(\"E\")) {\n                    count++;\n           \
  \         v1= \"E\";\n                }\n                if (word.endsWith(\"I\"\
  )) {\n                    count++;\n                    v1= \"I\";\n           \
  \     }\n                if (word.endsWith(\"O\")) {\n                    count++;\n\
  \                    v1= \"O"
- "        char[] vowelsArr = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowelsArr2\
  \ = {'A', 'E', 'I', 'O', 'U'};\n        char[] consonantsArr = {'b', 'c', 'd', 'f',\
  \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n\
  \        Set<Character> consonantsSet = new HashSet<Character>(Arrays.asList(consonantsArr));\n\
  \        char[] wordArray = word.toCharArray();\n        Set<Character> wordSet\
  \ = new HashSet<Character>(Arrays.asList(wordArray));\n        Set<Character> vowelsSet\
  \ = new HashSet<Character>(Arrays.asList(vowelsArr));\n        Set<Character> vowelsSet2\
  \ = new HashSet<Character>(Arrays.asList(vowelsArr2));\n        List<Character>\
  \ vowels = new ArrayList<>(vowelsSet);\n        List<Character> vowels2 = new ArrayList<>(vowelsSet2);\n\
  \        List<Character> consonants = new ArrayList<>(consonantsSet);\n        List<Character>\
  \ consonants2 = new ArrayList<>(consonantsSet);\n        int vowelsCount = 0;\n\
  \        int consonantsCount = 0;\n        int count1 = 0;\n        int count2 =\
  \ 0;\n        boolean found = false;\n        boolean found2 = false;\n        for(int\
  \ i = 0; i < word.length(); i++) {\n            found = false;\n            found2\
  \ = false;\n            for(int j = 0; j < vowelsArr.length; j++) {\n          \
  \      char c = word.charAt(i);\n                if(Character.toUpperCase(c) ==\
  \ vowelsArr[j]) {\n                    vowelsCount++;\n                    found\
  \ = true;\n                    break;\n                }\n            }\n      \
  \      if(found) {\n                break;\n            }\n            found2 =\
  \ false;\n            for(int j = 0; j < vowelsArr2.length; j++) {\n           \
  \     char c = word.charAt(i);\n                if(Character.toUpperCase(c) == vowelsArr2[j])\
  \ {\n                    vowelsCount++;\n                    found2 = true;\n  \
  \                  break;\n                }\n            }\n            if(found2)\
  \ {\n                break;\n            }\n            found = false;\n       \
  \     for(int j = 0; j < consonantsArr.length; j++) {\n                char c =\
  \ word.charAt(i);\n                if(Character.toUpperCase(c) == consonantsArr[j])\
  \ {\n                    consonantsCount++;\n                    found = true;\n\
  \                    break;\n                }\n            }\n            if(found)\
  \ {\n                break;\n            }\n            found2 = false;\n      \
  \      for(int j = 0; j < consonantsArr2.length; j++) {\n                char c\
  \ = word.charAt(i);\n                if(Character.toUpperCase(c) == consonantsArr2[j])\
  \ {\n                    consonantsCount++;\n                    found2 = true;\n"
- "        if (word.isEmpty()) return \"\";\n\n        String str = word.substring(word.length()\
  \ - 1);\n        String vowels = str.replaceAll(\"([aeiou])\", \"\");\n        String\
  \ consonants = str.replaceAll(\"([bcdfghjklmnpqrstvwxyz])\", \"\");\n\n        boolean\
  \ leftVowel = vowels.matches(\"^[aeiou]\");\n        boolean rightVowel = consonants.matches(\"\
  ^[bcdfghjklmnpqrstvwxyz]$\");\n\n        boolean startVowel = vowels.matches(\"\
  ^[aeiou]\");\n        boolean endVowel = consonants.matches(\"^[bcdfghjklmnpqrstvwxyz]$\"\
  );\n\n        boolean startRightVowel = rightVowel && endVowel;\n        boolean\
  \ startLeftVowel = leftVowel && endVowel;\n\n        boolean bothVowel = startVowel\
  \ && endVowel;\n\n        boolean startBothVowel = startVowel && startRightVowel;\n\
  \        boolean startLeftVowel = startLeftVowel && startRightVowel;\n\n       \
  \ boolean endBothVowel = endVowel && startRightVowel;\n        boolean endLeftVowel\
  \ = endLeftVowel && startRightVowel;\n\n        boolean bothVowels = startBothVowel\
  \ && endBothVowel;\n\n        String vowel = null;\n\n        if (startLeftVowel\
  \ && endBothVowel) {\n            vowel = vowels.substring(0, 1);\n        } else\
  \ if (startLeftVowel && endLeftVowel) {\n            vowel = vowels.substring(0,\
  \ 2);\n        } else if (startBothVowel && endLeftVowel) {\n            vowel =\
  \ vowels.substring(0, 3);\n        } else if (startBothVowel && endBothVowel) {\n\
  \            vowel = vowels.substring(0, 4);\n        } else {\n            return\
  \ \"\";\n        }\n\n        return vowel;"
- "        Set<Character> vowels = Arrays.asList('a','e','i','o','u','A','E','I','O','U');\n\
  \        Set<Character> consonants = Arrays.asList('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z');\n\
  \        String[] vowelsArr = vowels.stream().toArray(String[]::new);\n        String[]\
  \ consonantsArr = consonants.stream().toArray(String[]::new);\n        String[]\
  \ wordArr = word.split(\"\");\n        int startIndex = 0;\n        int endIndex\
  \ = 0;\n        double minDiff = Double.POSITIVE_INFINITY;\n        for (int i =\
  \ 0; i < wordArr.length; i++) {\n            if (vowelsArr.contains(wordArr[i]))\
  \ {\n                endIndex = i;\n            }\n            if (consonantsArr.contains(wordArr[i]))\
  \ {\n                startIndex = i;\n            }\n        }\n        double diff\
  \ = Math.abs(word.length() - endIndex);\n        if (diff < minDiff) {\n       \
  \     minDiff = diff;\n        }\n        StringBuilder vowel = new StringBuilder();\n\
  \        vowel.append(vowelsArr[(int)Math.ceil(minDiff/2)]);\n        return vowel.toString();"
- "        String vowel = \"AEIOUaeiou\";\n        String vowel2 = vowel.toUpperCase();\n\
  \        int count = 0;\n        int end = 0;\n        int index = 0;\n        for(int\
  \ i = word.length() - 1; i > -1; i--) {\n            if(vowel.contains(word.substring(index\
  \ + 1, i + 1)))\n                count++;\n            if(vowel2.contains(word.substring(index\
  \ + 1, i + 1)))\n                count++;\n            end = i;\n            index++;\n\
  \            if(count > 1) {\n                break;\n            }\n        }\n\
  \        if(word.charAt(end) == word.charAt(end - 1)) {\n            return word.substring(end\
  \ + 1);\n        }\n        return \"\";"
- "        \n        // 1. Check whether the given word is of length 0 or 1.\n   \
  \     // If it's empty or of length 1, return empty string.\n        // Otherwise,\
  \ convert the string to an array of chars, ignore the case and \n        // convert\
  \ it to an array of strings.\n        // Example: getClosestVowel(\"\") ==> \"\"\
  \n        // Example: getClosestVowel(\"a\") ==> \"\"\n        // Example: getClosestVowel(\"\
  abc\") ==> \"\"\n        if (word.length() <= 1) {\n            return \"\";\n \
  \       }\n        \n        // 2. Convert each character of the word to char array.\n\
  \        char[] charArray = word.toCharArray();\n        \n        // 3. Sort each\
  \ character array in descending order (ignore case)\n        Arrays.sort(charArray,\
  \ (o1, o2) -> o2.compareToIgnoreCase(o1));\n\n        // 4. Iterate through each\
  \ character of the word and compare with each other\n        // and if the first\
  \ character doesn't match return first character else return\n        // second\
  \ character.\n        String vowel = \"\";\n        for (int i = 0; i < charArray.length;\
  \ i++) {\n            if (charArray[i] != charArray[charArray.length - i - 1]) {\n\
  \                vowel = charArray[i];\n            }\n        }\n        return\
  \ vowel;"
- "        List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n\
  \        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
  );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
  \xF8\");\n        vowels.add(\"\xE5\");\n\n        int start = 0;\n        int end\
  \ = 0;\n        int diff = 0;\n        String[] words = word.split(\"\");\n    \
  \    for (String w : words) {\n            if (vowels.contains(w)) {\n         \
  \       start = end;\n                diff = -1;\n            } else if (vowels.contains(w.toLowerCase()))\
  \ {\n                end = end - 1;\n                diff = 1;\n            } else\
  \ {\n                diff = 0;\n            }\n            if (diff < 0) {\n   \
  \             end = end - 1;\n            }\n            if (start > end) {\n  \
  \              return \"\";\n            }\n        }\n        if (diff > 0) {\n\
  \            return \"\";\n        }\n        int startVowel = start / words.length;\n\
  \        int endVowel = end / words.length;\n        if (startVowel < endVowel)\
  \ {\n            return String.valueOf(words[startVowel]);\n        }\n        return\
  \ String.valueOf(words[endVowel]);"
- "        // write your code in Java 7\n        String vowel = \"AEIOUaeiou\";\n\
  \        String firstVowel = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\";\n   \
  \     String secondVowel = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAE"
- "        if(word.isEmpty()) return \"\";\n        \n        StringBuilder sb = new\
  \ StringBuilder();\n        \n        for(int i=word.length(); i>0; i--){\n    \
  \        char c = word.charAt(i-1);\n            \n            // find the first\
  \ vowel \n            int vowelIndex = Arrays.asList(\"AEIOUaeiou\".split(\"\")).indexOf(c);\
  \ // search from the right\n            \n            String pre = word.substring(0,\
  \ i); // get the word before the vowel\n            String post = word.substring(i+1);\
  \ // get the word after the vowel\n            \n            // if the first vowel\
  \ is found\n            if(vowelIndex >= 0){\n                // get the first vowel\
  \ before the current one in the word\n                char vowelBefore = pre.charAt(vowelIndex-1);\n\
  \                // if the vowel before is a consonant, then the previous vowel\
  \ is a vowel\n                if(Character.isLetter(vowelBefore))\n            \
  \        sb.append(vowelBefore);\n                else{\n                    //\
  \ get the last vowel before the current one in the word\n                    char\
  \ vowelBeforeLast = post.charAt(vowelIndex-1);\n                    // if the vowel\
  \ before the last one is a consonant, then the previous vowel is a vowel\n     \
  \               if(Character.isLetter(vowelBeforeLast))\n                      \
  \  sb.append(vowelBeforeLast);\n                }\n                // get the first\
  \ vowel after the current one in the word\n                char vowelAfter = post.charAt(vowelIndex);\n\
  \                // if the vowel after is a consonant, then the previous vowel is\
  \ a vowel\n                if(Character.isLetter(vowelAfter))\n                \
  \    sb.append(vowelAfter);\n                else{\n                    // get the\
  \ last vowel after the current one in the word\n                    char vowelAfterLast\
  \ = pre.charAt(vowelIndex);\n                    // if the vowel after the last\
  \ one is a consonant, then the previous vowel is a vowel\n                    if(Character.isLetter(vowelAfterLast))\n\
  \                        sb.append(vowelAfterLast);\n                }\n       \
  \     }\n        }\n        return sb.toString();"
- "        char[] vowels = {'A','a','E','e','I','i','O','o','U','u'};\n        char[]\
  \ consonants = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
  \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        char[] consonantEnds = { 'p',\
  \ 'q', 'r', 's', 't' };\n        char[] consonantBegins = { 'b', 'c', 'd', 'f',\
  \ 'h', 'g', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't' };\n        \n    \
  \    Set<Character> consonants = new HashSet<>();\n        for(Character c : word.toCharArray())\
  \ {\n            consonants.add(c);\n        }\n        \n        char lastChar\
  \ = word.charAt(word.length()-1);\n        char firstChar = word.charAt(0);\n  \
  \      \n        //if last char and first char are consonants and \n        //consonants\
  \ end and begin\n        if(Character.isLetter(lastChar) && Character.isLetter(firstChar)\
  \ && consonants.contains(lastChar) && consonants.contains(firstChar) && consonantEnds.contains(lastChar)\
  \ && consonantEnds.contains(firstChar) && consonantBegins.contains(lastChar) &&\
  \ consonantBegins.contains(firstChar)) {\n            return \"\";\n        }\n\
  \        \n        //if last char is vowel and first char isn't vowel\n        if(Character.isLetter(lastChar)\
  \ && vowels.contains(firstChar) && !vowels.contains(lastChar)) {\n            return\
  \ \"\";\n        }\n        \n        //if first char is vowel and last char isn't\
  \ vowel\n        if(Character.isLetter(firstChar) && vowels.contains(lastChar) &&\
  \ !vowels.contains(firstChar)) {\n            return \"\";\n        }\n        \n\
  \        //if first char is vowel and last char is vowel\n        if(Character.isLetter(firstChar)\
  \ && vowels.contains(lastChar) && vowels.contains(firstChar)) {\n            String\
  \ vowel = vowels.stream().filter(vowel -> vowel.equals(firstChar)).findFirst().orElse(\"\
  \");\n            return vowel;\n        }\n        \n        return \"\";"
- "        // write your code here\n        if(word.length()<3){\n            return\
  \ \"\";\n        }\n        Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n\
  \        vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n\
  \        vowels.add('u');\n        vowels.add('y');\n        Character firstChar\
  \ = word.charAt(word.length()-2);\n        if(firstChar.equals('A')||firstChar.equals('a')||firstChar.equals('E')||firstChar.equals('e')||firstChar.equals('I')||firstChar.equals('i')||firstChar.equals('O')||firstChar.equals('o')||firstChar.equals('U')||firstChar.equals('u')){\n\
  \            vowels.add('A');\n            vowels.add('a');\n            vowels.add('E');\n\
  \            vowels.add('e');\n            vowels.add('I');\n            vowels.add('i');\n\
  \            vowels.add('O');\n            vowels.add('o');\n            vowels.add('U');\n\
  \            vowels.add('u');\n        }\n        for(Character i : word.toCharArray()){\n\
  \            if(!vowels.contains(i) && !vowels.contains(firstChar)){\n         \
  \       return \"\";\n            }\n        }\n        return vowels.stream().findFirst().get();"
- "        Set<Character> vowels = Stream.of(word.charAt(word.length() - 1),\n   \
  \             word.charAt(word.length() - 2),\n                word.charAt(word.length()\
  \ - 3))\n                .collect(Collectors.toSet());\n        return vowels.stream()\n\
  \                .map(c -> Character.isLetter(c) && !vowels.contains(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c))\n                .filter(vowel -> vowel == 'A' ||\
  \ vowel == 'E' || vowel == 'I' || vowel == 'O' || vowel == 'U')\n              \
  \  .sorted((c1, c2) -> (c1 >  c2) ? 1 :\n                        (c1 < c2) ? -1\
  \ :\n                        (c1 == c2) ? 0 : 0)\n                .findFirst()\n\
  \                .orElse(\"\");"
- "        List<Character> vowels = Arrays.asList('a','e','i','o','u');\n        List<Character>\
  \ consonants = Arrays.asList('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z');\n\
  \        List<Character> rest = Arrays.asList('x','z','x','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','z','y','"
- "        Stack<Character> stack = new Stack<>();\n        for( int i = 0; i < word.length();\
  \ i++ ) {\n            if( word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i)\
  \ == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u' ) {\n               \
  \ stack.push(word.charAt(i));\n            }\n        }\n\n        while (!stack.isEmpty())\
  \ {\n            char c = stack.pop();\n            if (c == 'a' || c == 'e' ||\
  \ c == 'i' || c == 'o' || c == 'u') {\n                if (c - 1 >=0 ) {\n     \
  \               stack.push(c - 1);\n                }\n                if (c + 1\
  \ <word.length() ) {\n                    stack.push(c + 1);\n                }\n\
  \            }\n        }\n        if( stack.isEmpty() ) {\n            return \"\
  \";\n        }\n        return stack.pop();"
- "        String vowels = \"AEIOUaeiou\";\n        Optional<String> result = word\n\
  \                .chars()\n                .mapToObj(ch -> Character.toString(ch))\n\
  \                .filter(s -> vowels.contains(s.toUpperCase()))\n              \
  \  .map(s -> s + Character.toString(vowels.charAt(vowels.indexOf(s.toUpperCase()))))\
  \ //+\n                .sorted((s1, s2) -> Math.abs(s1.compareTo(s2)) + 1) // +\n\
  \                .map(s -> s.substring(1)) // +\n                .findFirst();\n\
  \        if (result.isPresent()) {\n            return result.get();\n        }\
  \ else {\n            return \"\";\n        }"
- "        List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
  \        Collections.reverse(vowels);\n        return Collections.min(\n       \
  \         vowels.stream()\n                .map(v -> word.substring(word.length()\
  \ - 1 - v.length()))\n                .filter(v -> vowels.contains(v))\n       \
  \         .collect(Collectors.toList()));"
- "        // write your code here\n        return \"\";"
- "        String vowels = \"AEIOU\";\n        String[] parts = word.split(\"(?<=[^AEIOU])\"\
  );\n        List<String> parts_without_vowels = new ArrayList<String>();\n     \
  \   parts_without_vowels.add(parts[0]);\n        parts_without_vowels.addAll(Arrays.asList(parts).subList(1,\
  \ parts.length));\n        for(String part : parts_without_vowels) {\n         \
  \   String closest = part;\n            for(String vowel : vowels) {\n         \
  \       if( !part.contains(vowel) ) {\n                    closest = getClosestVowel(part);\n\
  \                    break;\n                }\n            }\n            if( closest\
  \ == null || closest.equals(\"\")) {\n                return \"\";\n           \
  \ }\n        }\n        return closest;"
- "        String leftVowels = \"\";\n        String rightVowels = \"\";\n       \
  \ for (char c : word.toCharArray()) {\n            if (Character.isLetter(c)) {\n\
  \                switch (c) {\n                case 'a':\n                    leftVowels\
  \ += \"a\";\n                    break;\n                case 'e':\n           \
  \         leftVowels += \"e\";\n                    break;\n                case\
  \ 'i':\n                    leftVowels += \"i\";\n                    break;\n \
  \               case 'o':\n                    leftVowels += \"o\";\n          \
  \          break;\n                case 'u':\n                    leftVowels +=\
  \ \"u\";\n                    break;\n                case 'y':\n              \
  \      leftVowels += \"i\";\n                    break;\n                case 'u':\n\
  \                    leftVowels += \"u\";\n                    break;\n        \
  \        case 'r':\n                    leftVowels += \"u\";\n                 \
  \   break;\n                case 'l':\n                    leftVowels += \"u\";\n\
  \                    break;\n                case 's':\n                    leftVowels\
  \ += \"s\";\n                    break;\n                default:\n            \
  \        break;\n                }\n            } else {\n                rightVowels\
  \ += c;\n            }\n        }\n        if (leftVowels.equals(rightVowels)) {\n\
  \            return leftVowels;\n        }\n        int leftVowelsLength = leftVowels.length();\n\
  \        int rightVowelsLength = rightVowels.length();\n        int index = (leftVowelsLength\
  \ > rightVowelsLength) ? leftVowelsLength : rightVowelsLength;\n        do {\n \
  \           if (Character.toUpperCase(leftVowels.charAt(index--)).equals(Character.toUpperCase(rightVowels.charAt(index--))))\
  \ {\n                if (index == 0) {\n                    return \"\";\n     \
  \           }\n            }\n        } while (index != 0);\n        return \"\"\
  ;"
- "        List<Character> vowels = new ArrayList<>();\n        for (char ch : word.toCharArray())\
  \ {\n            switch (ch) {\n                case 'a':\n                case\
  \ 'A':\n                case 'e':\n                case 'E':\n                case\
  \ 'i':\n                case 'I':\n                case 'o':\n                case\
  \ 'O':\n                case 'u':\n                case 'U':\n                 \
  \   vowels.add(ch);\n                    break;\n                default:\n    \
  \                break;\n            }\n        }\n\n        List<String> vowelStrings\
  \ = new ArrayList<>(vowels);\n        Collections.sort(vowelStrings);\n\n      \
  \  return vowelStrings.get(vowels.size() -1);"
- "        char firstConsonant = (char) word.charAt(word.length() - 1);\n        char\
  \ secondConsonant = (char) word.charAt(word.length() - 2);\n\n        List<Character>\
  \ vowels = new ArrayList<>();\n        vowels.add('a');\n        vowels.add('e');\n\
  \        vowels.add('i');\n        vowels.add('o');\n        vowels.add('u');\n\n\
  \        double minimumDistance = Double.MAX_VALUE;\n        char closestVowel =\
  \ '\\0';\n\n        for (char c : word.substring(word.length() - 1).chars()) {\n\
  \            if (vowels.contains(c)) {\n                char vowel = (char) c;\n\
  \                double distance = Character.getNumericValue(vowel - firstConsonant);\n\
  \                minimumDistance = Math.min(minimumDistance, distance);\n      \
  \          closestVowel = vowel;\n            }\n        }\n\n        return closestVowel;"
- "        // Write your code here\n        int l = word.length();\n        Map<Character,Integer>\
  \ vowelMap = new HashMap<Character,Integer>();\n        vowelMap.put('a',0);\n \
  \       vowelMap.put('e',0);\n        vowelMap.put('i',0);\n        vowelMap.put('o',0);\n\
  \        vowelMap.put('u',0);\n        vowelMap.put('y',0);\n        vowelMap.put('i',0);\n\
  \        vowelMap.put('u',0);\n        for(int i = l-1; i >= 0; i--) {\n       \
  \     char c = word.charAt(i);\n            Character c2 = word.charAt(i+1);\n \
  \           \n            if((c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
  \ == 'u') && c2 != 'a' && c2 != 'e' && c2 != 'i' && c2 != 'o' && c2 != 'u' && c2\
  \ != 'y') {\n                vowelMap.put(c,1);\n                vowelMap.put(c2,1);\n\
  \            }\n        }\n        char prevChar = word.charAt(l-1);\n        int\
  \ vowelCount = 0;\n        for(Character c : vowelMap.keySet()) {\n            Character\
  \ c2 = word.charAt(l);\n            if((c == 'a' || c == 'e' || c == 'i' || c ==\
  \ 'o' || c == 'u') && c2 != 'a' && c2 != 'e' && c2 != 'i' && c2 != 'o' && c2 !=\
  \ 'u' && c2 != 'y') {\n                vowelCount += vowelMap.get(c);\n        \
  \    }\n        }\n        \n        int currCount = vowelMap.get(prevChar);\n \
  \       \n        if(vowelCount > currCount) {\n            return word.charAt(l-1);\n\
  \        } else {\n            return \"\";\n        }"
- "        Set<String> vowels = getClosestVowels(word);\n        if (vowels == null)\
  \ {\n            return \"\";\n        }\n        return vowels.iterator().next();"
- "        ArrayList list = new ArrayList();\n        String vowels = \"AEIOUaeiouAEIOU\"\
  ;\n        char[] ch = word.toCharArray();\n        for (int i=ch[0]; i>=0; i--)\
  \ {\n            if (vowels.contains(\"\"+ch[i])) {\n                list.add(0,\
  \ i);\n            }\n        }\n        for (int i=ch[ch.length-1]; i>=0; i--)\
  \ {\n            if (vowels.contains(\"\"+ch[i])) {\n                list.add((int)ch.length-1,\
  \ i);\n            }\n        }\n        Arrays.sort(list);\n        System.out.println((int)ch[list.size()\
  \ - 1]);\n        String result = \"\";\n        int startIndex = (int)ch[list.size()\
  \ - 1];\n        int endIndex = startIndex + 1;\n        if (startIndex != 0 &&\
  \ startIndex < ch.length-1 && endIndex < ch.length-1) {\n            if (ch[startIndex]\
  \ == 'a') {\n                startIndex--;\n            }\n            if (ch[endIndex]\
  \ == 'e') {\n                endIndex++;\n            }\n            String final\
  \ = word.substring(startIndex, endIndex + 1);\n            if (final.equalsIgnoreCase(\"\
  a\") || final.equalsIgnoreCase(\"e\") || final.equalsIgnoreCase(\"i\") || final.equalsIgnoreCase(\"\
  o\")) {\n                result = final;\n            }\n        }\n        return\
  \ result;"
- "        int l = word.length();\n        int vowelCount = 0;\n        String vowel\
  \ = \"\";\n        int vowelEnd = 0;\n        String vowel2 = \"\";\n        int\
  \ vowel2End = 0;\n        for (int i = l - 1; i >= 0; i--) {\n            char c\
  \ = word.charAt(i);\n            vowelCount++;\n            if (Character.isLetter(c))\
  \ {\n                if (Character.isLowerCase(c)) {\n                    vowel\
  \ = Character.toLowerCase(c);\n                    vowelEnd = i;\n             \
  \   }\n                else if (Character.isUpperCase(c)) {\n                  \
  \  vowel2 = Character.toUpperCase(c);\n                    vowel2End = i;\n    \
  \            }\n            }\n        }\n        // case sensitive\n        if\
  \ (vowelCount == 0 || vowelCount == 1) {\n            return vowel;\n        }\n\
  \        boolean found = false;\n        int lastvowel = 0;\n        // find word\
  \ before the last vowel\n        int i = word.lastIndexOf(vowel);\n        if (i\
  \ > 0) {\n            lastvowel = i - 1;\n            int j = word.lastIndexOf(vowel2,\
  \ lastvowel);\n            if (j > 0) {\n                found = j > lastvowel;\n\
  \            }\n        }\n        // find word after the last vowel\n        i\
  \ = word.lastIndexOf(vowel2, lastvowel);\n        if (i > 0) {\n            lastvowel\
  \ = i;\n            int j = word.lastIndexOf(vowel, lastvowel);\n            if\
  \ (j > 0) {\n                found = j > lastvowel;\n            }\n        }\n\
  \        if (found) {\n            int l2 = word.length();\n            String s2\
  \ = \"\";\n            String vowel2 = word.substring(lastvowel + 1, l2);\n    \
  \        int i2 = 0;\n            while (Character.isLetter(word.charAt(i2))) {\n\
  \                s2+= word.charAt(i2);\n                i2++;\n            }\n \
  \           if (vowel.equals(vowel2)) {\n                return s2;\n          \
  \  }\n            boolean found2 = false;\n            // find word before the second\
  \ last vowel\n            i = word.lastIndexOf(vowel2, lastvowel - 1);\n       \
  \     if (i > 0) {\n                lastvowel = i - 1;\n                int j =\
  \ word.lastIndexOf(vowel, lastvowel);\n                if (j > 0) {\n          \
  \          found2 = j > lastvowel;\n                }\n            }\n         \
  \   // find word after the second last vowel\n            i = word.lastIndexOf(vowel,\
  \ lastvowel - 1);\n            if (i > 0) {\n                lastvowel = i;\n  \
  \              int j = word.lastIndexOf(vowel2, lastvowel);\n                if\
  \ (j > 0) {\n                    found2 = j > lastvowel;\n                }\n  \
  \          }\n            if (found2 && found) {\n                String firstVowel\
  \ = word.substring(lastvowel - 2, lastvowel);\n                String secondVowel\
  \ = word.substring(lastvowel + 1, lastvowel + 2);\n                int i3 = firstVowel.length();\n\
  \                String s3 = \"\";\n                String vowel"
- "        \n        int startIndex = word.lastIndexOf(\"a\");\n        if(startIndex\
  \ == -1) {\n            startIndex = word.lastIndexOf(\"A\");\n        }\n     \
  \   int endIndex = word.lastIndexOf(\"e\");\n        if(endIndex == -1) {\n    \
  \        endIndex = word.lastIndexOf(\"E\");\n        }\n        int middleIndex\
  \ = word.lastIndexOf(\"u\");\n        if(middleIndex == -1) {\n            middleIndex\
  \ = word.lastIndexOf(\"U\");\n        }\n        \n        int currentIndex = 0;\n\
  \        \n        if(startIndex > endIndex) {\n            currentIndex = startIndex;\n\
  \        }\n        else if(startIndex < middleIndex) {\n            currentIndex\
  \ = startIndex;\n        }\n        else if(endIndex > middleIndex) {\n        \
  \    currentIndex = endIndex;\n        }\n        else {\n            currentIndex\
  \ = middleIndex;\n        }\n        \n        \n        char[] vowels = new char[27];\n\
  \        vowels['a']='A';\n        vowels['e']='E';\n        vowels['u']='U';\n\
  \        vowels['o']='O';\n        vowels['A']='a';\n        vowels['E']='e';\n\
  \        vowels['U']='u';\n        vowels['O']='o';\n        vowels['a']='a';\n\
  \        vowels['e']='e';\n        vowels['u']='u';\n        vowels['o']='o';\n\
  \        vowels['A']='A';\n        vowels['E']='E';\n        vowels['U']='U';\n\
  \        vowels['O']='O';\n        \n        \n        for(int i = currentIndex;\
  \ i > startIndex && i <= endIndex; i++) {\n            if(word.charAt(i) == vowels['e']\
  \ || word.charAt(i) == vowels['a'] || word.charAt(i) == vowels['u'] || word.charAt(i)\
  \ == vowels['O']) {\n                return word.charAt(i);\n            }\n   \
  \     }\n        \n        return \"\";"
- "        Set<String> vowels = Stream.of(word.split(\"\")).filter(x -> x.matches(\"\
  [aeiouAEIOU]\")).collect(Collectors.toSet());\n        int startIndex = 0;\n   \
  \     int endIndex = word.length() - 1;\n        while(startIndex < endIndex) {\n\
  \            int index = Math.abs(startIndex) + Math.abs(endIndex);\n          \
  \  if (index == 0 || index == word.length() || index < word.length() || index >=\
  \ word.length()) {\n                return \"\";\n            }\n            String\
  \ vowel = word.substring(startIndex, endIndex).substring(index).toUpperCase();\n\
  \            if (!vowels.contains(vowel)) {\n                return \"\";\n    \
  \        }\n            startIndex = endIndex + 1;\n            endIndex = startIndex\
  \ + word.length() - 1;\n        }\n        return word.substring(startIndex + 1,\
  \ endIndex).substring(Math.abs(startIndex) + Math.abs(endIndex) - 1).toUpperCase();"
- "        List<String> vowels = new ArrayList<String>(); // put your vowels here\n\
  \        Optional<String> vowelOption = vowels.stream().filter(letter -> word.contains(letter)).findFirst();\n\
  \        return vowelOption.orElse(\"\");"
- "        List<String> vowels = getVowels(word);\n        int start = 0;\n      \
  \  int end = word.length();\n        for(String vowel : vowels) {\n            int\
  \ startIndex = word.lastIndexOf(vowel, end - 1);\n            int endIndex = word.lastIndexOf(vowel,\
  \ startIndex + 1);\n            if (startIndex < 0 || endIndex < 0) {\n        \
  \        break;\n            }\n            int vowelIndex = word.indexOf(vowel,\
  \ startIndex);\n            int nextVowelIndex = word.indexOf(vowel, endIndex +\
  \ 1);\n            if (vowelIndex < 0 || nextVowelIndex < 0) {\n               \
  \ break;\n            }\n            if (vowelIndex == nextVowelIndex) {\n     \
  \           start = startIndex;\n                end = endIndex;\n            }\n\
  \        }\n        if (start < 0) {\n            return \"\";\n        }\n    \
  \    return word.substring(start, end + 1);"
- "        if (word.equals(\"\")) {\n            return \"\";\n        }\n       \
  \ String result = \"u\";\n        if (word.charAt(0) > 'z') {\n            result\
  \ += getVowel(word.charAt(0)) + getVowel(word.charAt(1));\n        }\n        for\
  \ (int i = 2; i < word.length(); i++) {\n            result += getVowel(word.charAt(i))\
  \ + getVowel(word.charAt(i-1));\n        }\n        if (result.isEmpty()) {\n  \
  \          return \"\";\n        }\n        return result;"
- "        // Your code here\n        \n        return null;"
- "        int[] count = new int[26];\n        Arrays.fill(count, 0);\n        for\
  \ (char c : word.toCharArray()) {\n            for (int i = 0; i < 26; i++) {\n\
  \                if (Character.isLetter(c)) {\n                    if (count[i]\
  \ > 0)\n                        break;\n                    count[i]++;\n      \
  \          }\n            }\n        }\n        for (int i = 26; i > 0; i--) {\n\
  \            if (count[i] == 0)\n                return \"\";\n            if (count[i\
  \ - 1] > 0) {\n                if (Math.abs(count[i] - count[i - 1]) <= 1)\n   \
  \                 return (char)(i + 'A');\n            }\n        }\n        return\
  \ \"\";"
- "        //Your code goes here\n        word = word.trim();\n        if (word.isEmpty())\n\
  \            return \"\";\n\n        Set<String> vowels = new HashSet<>();\n   \
  \     Set<String> consonants = new HashSet<>();\n\n        word = word.toLowerCase().replaceAll(\"\
  [aeiouAEIOU]\", \"\");\n        for (char c : word.toCharArray()) {\n          \
  \  if (Character.isLetter(c)) {\n                vowels.add(c);\n            } else\
  \ {\n                consonants.add(c);\n            }\n        }\n        if (consonants.isEmpty())\
  \ {\n            return \"\";\n        }\n        List<String> list = Arrays.asList(word.toCharArray());\n\
  \        list.sort((c1, c2) -> {\n            int res = 0;\n            if (c1.equals(c2))\
  \ {\n                return 0;\n            }\n            if (Character.isLetter(c1))\
  \ {\n                char c = (char) (c1 + 32);\n                if (Character.isLetter(c))\
  \ {\n                    c = (char) (c2 + 32);\n                    res = Character.compare(c,\
  \ c);\n                } else {\n                    res = 1;\n                }\n\
  \            }\n            if (Character.isLetter(c2)) {\n                char\
  \ c = (char) (c2 + 32);\n                if (Character.isLetter(c)) {\n        \
  \            c = (char) (c1 + 32);\n                    res = Character.compare(c,\
  \ c);\n                } else {\n                    res = -1;\n               \
  \ }\n            }\n            return res;\n        });\n        boolean isVowel\
  \ = vowels.stream().anyMatch(c -> word.contains(String.valueOf(c)));\n        if\
  \ (list.get(list.size() - 1).equals(list.get(list.size() - 2))) {\n            return\
  \ isVowel ? list.get(list.size() - 1) : \"\";\n        } else {\n            return\
  \ isVowel ? list.get(list.size() - 2) : \"\";\n        }"
- "        String vowels = \"AEIOUaeiou\";\n        if(word.length() < 1) return \"\
  \";\n        char firstConsonant = word.charAt(0);\n        char lastConsonant =\
  \ word.charAt(word.length()-1);\n        String letters = getLetters(firstConsonant,\
  \ lastConsonant);\n        Set<String> vowelSet = Arrays.stream(vowels.split(\"\"\
  )).map(String::toLowerCase).toSet();\n        for(String vowel : vowelSet) {\n \
  \           int start = findFirstVowel(word, firstConsonant, lastConsonant, vowel);\n\
  \            int end = findLastVowel(word, firstConsonant, lastConsonant, vowel);\n\
  \            if(start != -1 && end != -1) {\n                return word.substring(start,end);\n\
  \            }\n        }\n        return \"\";"
- "        int vowelsFound = 0;\n        String vowel = null;\n        // Find out\
  \ how many vowels we found.\n        for (int i = word.length() - 1; i >= 0; i--)\
  \ {\n            char c = word.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                if (vowel != null && !vowel.equals(\"U\") && vowel.equals(\"\
  a\") || \n                    vowel.equals(\"i\") || vowel.equals(\"o\")) {\n  \
  \                      vowelsFound++;\n                }\n                vowel\
  \ = Character.toUpperCase(c);\n            } else if (vowel == null || !vowel.equals(\"\
  U\") && vowel.equals(\"a\") || \n                vowel.equals(\"i\") || vowel.equals(\"\
  o\")) {\n                vowel = Character.toUpperCase(c);\n            }\n    \
  \    }\n        if (vowelsFound == 0) {\n            return \"\";\n        } else\
  \ if (vowelsFound == 1) {\n            return vowel;\n        } else {\n       \
  \     return word.charAt(word.length() - vowelsFound - 1);\n        }"
- "        final String vowels = \"aAeEiIoOuUyYAO\";\n        return word.replaceAll(\"\
  [aeiouy]\", \"\").replaceAll(\"[aeouy]\", \"\").trim().replaceAll(\"[^\" + vowels\
  \ + \"]\", \"\").replaceAll(\"[aeiou]\", \"\").replaceAll(\"[^\" + vowels + \"]\"\
  , \"\").replaceAll(\"[^aeiouy]\", \"\");"
- "        if (word.length() == 0) {\n            return \"\";\n        }\n      \
  \  List<String> vowels = Arrays.asList(new String[]{\"a\", \"e\", \"i\", \"o\",\
  \ \"u\"});\n        Map<String, Integer> map = new HashMap<String, Integer>();\n\
  \        for (String vowel : vowels) {\n            int count = 0;\n           \
  \ boolean containsVowel = false;\n            for (int i = word.length() - 1; i\
  \ >= 0; i--) {\n                if (word.charAt(i) == vowel.charAt(0)) {\n     \
  \               containsVowel = true;\n                }\n                if (containsVowel)\
  \ {\n                    count++;\n                    if (count == 3) {\n     \
  \                   map.put(vowel, count);\n                        containsVowel\
  \ = false;\n                        count = 0;\n                    }\n        \
  \        }\n            }\n        }\n        if (map.size() > 0) {\n          \
  \  return Collections.min(map.entrySet(), Comparator.comparing(Map.Entry::getValue)).getKey();\n\
  \        }\n        return \"\";"
- "        if (word == null || word.isEmpty()) {\n            return \"\";\n     \
  \   }\n        List<String> vowels = Arrays.stream(word.split(\"\"))\n         \
  \       .filter(s -> s.equalsIgnoreCase(\"a\") || s.equalsIgnoreCase(\"e\") || s.equalsIgnoreCase(\"\
  i\") || s.equalsIgnoreCase(\"o\") || s.equalsIgnoreCase(\"u\"))\n              \
  \  .collect(Collectors.toList());\n        if (vowels.isEmpty()) {\n           \
  \ return \"\";\n        }\n\n        int firstIndex = vowels.indexOf(\"a\");\n \
  \       int lastIndex = vowels.lastIndexOf(\"a\");\n        String firstVowel =\
  \ vowels.get(firstIndex++);\n        if (firstIndex == lastIndex) {\n          \
  \  return \"\";\n        }\n        int firstConsonant = vowels.lastIndexOf(firstVowel)\
  \ + 1;\n        String secondVowel = vowels.get(firstIndex - 1);\n        int secondConsonant\
  \ = vowels.lastIndexOf(secondVowel) + 1;\n        if (firstConsonant == secondConsonant)\
  \ {\n            return firstVowel;\n        }\n        return firstVowel.substring(secondConsonant);"
- '        return "";'
- "        int len = (int) Math.sqrt(word.length());\n        char ch;\n        \n\
  \        List<Character> result = new ArrayList<Character>();\n        int i = len-1;\n\
  \        while (i >= 0) {\n            ch = word.charAt(i);\n            if (Character.isLetter(ch))\
  \ {\n                if (!(Character.isLowerCase(ch) || Character.isUpperCase(ch)))\
  \ {\n                    result.add(ch);\n                }\n            }\n   \
  \         i--;\n        }\n        if (result.isEmpty()) {\n            return \"\
  \";\n        }\n        char first = result.get(0);\n        char second = result.get(result.size()-1);\n\
  \        int pos = result.indexOf(second);\n        if (pos != -1) {\n         \
  \   String s = word;\n            s.replace(first, \"\");\n            s.replace(second,\
  \ \"\");\n            return s;\n        }\n        return \"\";"
- "        String[] split = word.split(\"\");\n        int left = 0;\n        int\
  \ right = split.length - 1;\n        Optional<String> vowel = split.stream().filter(v\
  \ -> vowelsContain(v)).findFirst();\n        if (!vowel.isPresent()) return \"\"\
  ;\n        char lastChar = vowel.orElse(\"\").charAt(0);\n        if (vowelsContain(lastChar))\
  \ {\n            left = split.length - 2;\n            right = split.length - 1;\n\
  \        }\n        Optional<String> vowel2 = split.stream().filter(v -> vowelsContain(v)).findFirst();\n\
  \        if (!vowel2.isPresent()) return \"\";\n        char firstChar = vowel2.orElse(\"\
  \").charAt(0);\n        Optional<String> vowel3 = split.stream().filter(v -> vowelsContain(v)).findFirst();\n\
  \        if (!vowel3.isPresent()) return \"\";\n        char secondChar = vowel3.orElse(\"\
  \").charAt(0);\n        if (vowelsContain(firstChar) && vowelsContain(secondChar))\
  \ {\n            left = split[0];\n            right = split[split.length - 1];\n\
  \        }\n        if (vowelsContain(lastChar) && vowelsContain(firstChar)) {\n\
  \            right = split[split.length - 1];\n        }\n        if (vowelsContain(lastChar)\
  \ && vowelsContain(secondChar)) {\n            left = split[0];\n        }\n   \
  \     if (vowelsContain(firstChar) && vowelsContain(secondChar)) {\n           \
  \ right = split[split.length - 1];\n        }\n        return vowel.orElse(\"\"\
  ).charAt(0);"
- "        List<String> vowels = new ArrayList<String>();\n        vowels.add(\"a\"\
  );\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
  u\");\n        vowels.add(\"r\");\n        vowels.add(\"s\");\n        vowels.add(\"\
  d\");\n        vowels.add(\"h\");\n        vowels.add(\"t\");\n        vowels.add(\"\
  g\");\n        vowels.add(\"v\");\n        vowels.add(\"k\");\n        vowels.add(\"\
  x\");\n        vowels.add(\"p\");\n        vowels.add(\"b\");\n        vowels.add(\"\
  c\");\n        vowels.add(\"m\");\n        vowels.add(\"k\");\n        vowels.add(\"\
  q\");\n        vowels.add(\"z\");\n        vowels.add(\"k\");\n        vowels.add(\"\
  l\");\n        vowels.add(\"g\");\n        vowels.add(\"m\");\n        vowels.add(\"\
  n\");\n        vowels.add(\"j\");\n        vowels.add(\"m\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"i\");\n        vowels.add(\"a\");\n        vowels.add(\"\
  e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
  u\");\n        vowels.add(\"y\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  r\");\n        vowels.add(\"s\");\n        vowels.add(\"d\");\n        vowels.add(\"\
  h\");\n        vowels.add(\"t\");\n        vowels.add(\"g\");\n        vowels.add(\"\
  v\");\n        vowels.add(\"k\");\n        vowels.add(\"x\");\n        vowels.add(\"\
  p\");\n        vowels.add(\"b\");\n        vowels.add(\"c\");\n        vowels.add(\"\
  m\");\n        vowels.add(\"k\");\n        vowels.add(\"q\");\n        vowels.add(\"\
  z\");\n        vowels.add(\"k\");\n        vowels.add(\"l\");\n        vowels.add(\"\
  g\");\n        vowels.add(\"m\");\n        vowels.add(\"n\");\n        vowels.add(\"\
  j\");\n        vowels.add(\"m\");\n        vowels.add(\"o\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  y\");\n        vowels.add(\"u\");\n        vowels.add(\"r\");\n        vowels.add(\"\
  s\");\n        vowel"
- "        char [] array = word.toCharArray();\n        Arrays.sort(array);\n    \
  \    return String.valueOf(array[array.length-2]);"
- "        // Your code goes here\n        List<String> list = new ArrayList<>();\n\
  \        boolean isVowel = false;\n        for (int i = 0; i < word.length(); i++)\
  \ {\n            char ch = word.charAt(i);\n            if (Character.isLetter(ch))\
  \ {\n                list.add(Character.toString(ch));\n            } else if (Character.isVowel(ch))\
  \ {\n                list.add(Character.toString(ch));\n                isVowel\
  \ = true;\n            }\n        }\n        if (list.size() < 2)\n            return\
  \ \"\";\n        ArrayList<String> newList = new ArrayList<>();\n        for (String\
  \ str : list) {\n            int length = str.length();\n            for (int j\
  \ = length - 1; j > 0; j--) {\n                for (int k = 0; k < list.size();\
  \ k++) {\n                    if (str.indexOf(list.get(k), j) == -1) {\n       \
  \                 newList.add(str);\n                        break;\n          \
  \          }\n                }\n            }\n        }\n        if (newList.size()\
  \ < 1)\n            return \"\";\n        Collections.sort(newList);\n        newList.remove(0);\n\
  \        String vowels = newList.get(0);\n        if (isVowel)\n            return\
  \ vowels;\n        else\n            return \"\";"
- "        List<Integer> vowels = Arrays.stream(word.split(\"\")).filter(s -> {\n\
  \            String lowerCase = s.toLowerCase();\n            int length = lowerCase.length();\n\
  \            boolean startsWithVowel = word.startsWith(vowels);\n            boolean\
  \ endsWithVowel = word.endsWith(vowels);\n            return startsWithVowel &&\
  \ endsWithVowel;\n        }).map(s -> {\n            int index = word.length() -\
  \ s - 1;\n            return word.charAt(index);\n        }).collect(Collectors.toList());\n\
  \        Collections.sort(vowels);\n        int index = vowels.size() - 1;\n   \
  \     if (vowels.get(index) == word.charAt(word.length() - 1)) {\n            return\
  \ word.charAt(word.length() - 1);\n        }\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n  \
  \      vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n  \
  \      vowels.add('u');\n        vowels.add('y');\n        vowels.add('\xE6');\n\
  \        vowels.add('\xF8');\n\n        if (vowels.isEmpty()) {\n            return\
  \ \"\";\n        }\n        Set<Character> consonants = new HashSet<>();\n     \
  \   consonants.add('b');\n        consonants.add('c');\n        consonants.add('d');\n\
  \        consonants.add('f');\n        consonants.add('g');\n        consonants.add('j');\n\
  \        consonants.add('k');\n        consonants.add('l');\n        consonants.add('m');\n\
  \        consonants.add('n');\n        consonants.add('p');\n        consonants.add('q');\n\
  \        consonants.add('r');\n        consonants.add('s');\n        consonants.add('t');\n\
  \        consonants.add('v');\n        consonants.add('x');\n        consonants.add('z');\n\
  \n        if (consonants.isEmpty()) {\n            return \"\";\n        }\n   \
  \     String vowel = \"\";\n        char[] c = word.toCharArray();\n        int\
  \ len = word.length();\n        for (int i = len - 1; i >= 0; i--) {\n         \
  \   vowel = getClosestVowel(word.substring(i, len), vowel, consonants, vowels);\n\
  \        }\n        return vowel;"
- "        List<String> vowels = new ArrayList<>();\n        vowels.add(\"a\");\n\
  \        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\"\
  );\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
  ai\");\n        vowels.add(\"ei\");\n        vowels.add(\"ou\");\n        vowels.add(\"\
  yi\");\n        vowels.add(\"ui\");\n        vowels.add(\"yi\");\n        vowels.add(\"\
  yi\");\n        vowels.add(\"yi\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"u\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"o\");\n        vowels.add(\"o\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"i\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  u\");\n        vowels.add(\"i\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  e\");\n        vowels.add(\"e\");\n        vowels.add(\"e\");\n        vowels.add(\"\
  e\");\n        vowels.add(\"i\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"i\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  u\");\n        vowels.add(\"i\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"i\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"i\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"i\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"i\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"i\");\n        vowels.add(\"u\");\n        vowels.add(\"\
  u\");\n        vowels.add(\"u\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"i\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"i\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"i\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"i\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"i\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"i\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowels.add(\"i\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  i\");\n        vowel"
- "        char[] vowels = \"aeiou\".toCharArray();\n        if (word.length() <=\
  \ 1) {\n            return \"\";\n        }\n\n        List<Integer> closest = IntStream.range(0,\
  \ vowels.length)\n            .filter(i -> word.charAt(word.length() - 1) >= vowels[i])\n\
  \            .filter(i -> word.charAt(word.length() - 1) <= vowels[vowels.length\
  \ - 1 - i])\n            .boxed()\n            .sorted(Comparator.comparing(i ->\
  \ Math.abs(word.charAt(word.length() - 1) - vowels[i])))\n            .collect(Collectors.toList());\n\
  \n        if (closest.size() <= 1) {\n            return \"\";\n        }\n\n  \
  \      Optional<Integer> firstVowel = closest.stream().filter(i -> word.charAt(word.length()\
  \ - 1) >= vowels[i]).findFirst();\n        Optional<Integer> lastVowel = closest.stream().filter(i\
  \ -> word.charAt(word.length() - 1) <= vowels[vowels.length - 1 - i]).findFirst();\n\
  \        if (firstVowel.isPresent() && lastVowel.isPresent()) {\n            return\
  \ word.substring(firstVowel.get() - 1, lastVowel.get());\n        }\n        return\
  \ \"\";"
- "        String[] letters = word.split(\"\");\n        int low = 0;\n        int\
  \ high = letters.length - 1;\n        String vowel = \"\";\n\n        while(low\
  \ <= high) {\n            int mid = (low + high)/2;\n            int leftCons =\
  \ Character.getNumericValue(letters[mid].charAt(0));\n            int rightCons\
  \ = Character.getNumericValue(letters[mid].charAt(letters[mid].length() - 1));\n\
  \            int currentVowel = 0;\n            if (leftCons >= 'a' && leftCons\
  \ <= 'z') {\n                currentVowel = 'a';\n            } else if (rightCons\
  \ >= 'a' && rightCons <= 'z') {\n                currentVowel = 'z';\n         \
  \   } else if (rightCons >= 'A' && rightCons <= 'Z') {\n                currentVowel\
  \ = 'A';\n            } else if (leftCons >= 'A' && leftCons <= 'Z') {\n       \
  \         currentVowel = 'Z';\n            }\n\n            if (currentVowel !=\
  \ vowel) {\n                vowel = currentVowel;\n                low = mid + 1;\n\
  \            } else {\n                high = mid - 1;\n            }\n        }\n\
  \        return vowel;"
- "        return Arrays.stream(word.split(\"\"))\n                .map(s -> word.contains(s)\
  \ ? \"Y\" : \"N\")\n                .collect(Collectors.joining());"
- "        ArrayList<String> vowels = new ArrayList<>();\n        vowels.add(\"a\"\
  );\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"u\");\n        vowels.add(\"A\");\n        vowels.add(\"\
  E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
  U\");\n        Arrays.sort(vowels);\n        String vowelsString = \"\";\n     \
  \   int index = vowels.lastIndexOf(word);\n        while (index != -1) {\n     \
  \       vowelsString += vowels.get(index);\n            index = vowels.lastIndexOf(word,\
  \ index+1);\n        }\n        return vowelsString;"
- "        String vowels = \"AEIOUaeiou\";\n        String vowelsArr[] = vowels.split(\"\
  \");\n        \n        HashSet<Character> vowelsSet = new HashSet<>();\n      \
  \  for(char c: vowelsArr){\n            vowelsSet.add(c);\n        }\n        \n\
  \        HashSet<Character> consonantsSet = new HashSet<>();\n        for(char c:\
  \ word.toCharArray()){\n            consonantsSet.add(c);\n        }\n        \n\
  \        Arrays.sort(consonantsSet);\n        \n        int low = consonantsSet.size()\
  \ - 1;\n        int high = consonantsSet.size() - 2;\n        \n        while(low>=0\
  \ && high>=0 && low<high){\n            char c = consonantsSet.higher() + consonantsSet.lower();\n\
  \            \n            int index = vowelsSet.indexOf(c);\n            if(index\
  \ >= 0){\n                low = index - 1;\n            }\n            else{\n \
  \               high = index;\n            }\n        }\n        \n        return\
  \ \"\";"
- '        return "";'
- "        Arrays.sort(word.chars());\n        char leftChar = word.charAt(word.length()\
  \ - 1);\n        char rightChar = word.charAt(word.length() - 2);\n        if (Character.isLowerCase(leftChar)\
  \ && Character.isLowerCase(rightChar)) {\n            if (word.equals(\"quick\"\
  )) {\n                return \"\";\n            } else {\n                return\
  \ \"\";\n            }\n        }\n        if (Character.isUpperCase(leftChar) &&\
  \ Character.isUpperCase(rightChar)) {\n            if (word.equals(\"Quick\")) {\n\
  \                return \"\";\n            } else {\n                return \"\"\
  ;\n            }\n        }\n        int l = word.indexOf(leftChar, 1);\n      \
  \  int r = word.indexOf(rightChar, 1);\n        if (l < 0 || r < 0 || l == r) {\n\
  \            return \"\";\n        } else {\n            int diff = l - r;\n   \
  \         int mindiff = Integer.MAX_VALUE;\n            int index = 0;\n       \
  \     for (int i = l; i < r; i++) {\n                if (word.charAt(i) == leftChar)\
  \ {\n                    if (diff < 0) {\n                        return word.substring(0,\
  \ i);\n                    } else {\n                        diff = diff - 1;\n\
  \                        index = i;\n                    }\n                }\n\
  \            }\n            if (diff > mindiff) {\n                return word.substring(0,\
  \ index);\n            }\n            return word.substring(0, r + 1);\n       \
  \ }"
- "        String res = \"\";\n        if (word.length() <= 1) {\n            return\
  \ res;\n        }\n        char[] charArr = word.toCharArray();\n        Arrays.sort(charArr);\n\
  \        char[] charArr2 = new char[charArr.length];\n        for (int i = 0; i\
  \ < charArr.length - 1; i++) {\n            charArr2[i] = (char) charArr[i];\n \
  \       }\n        Arrays.sort(charArr2);\n        charArr2[charArr.length - 1]\
  \ = (char) charArr2[charArr.length - 1];\n        charArr2[charArr.length - 2] =\
  \ (char) charArr2[charArr.length - 2];\n        for (int i = 0; i < charArr.length\
  \ - 1; i++) {\n            if (charArr2[i] == 'a' || charArr2[i] == 'e' || charArr2[i]\
  \ == 'i' \n                    || charArr2[i] == 'o' || charArr2[i] == 'u') {\n\
  \                res = res + charArr[i];\n            }\n        }\n        return\
  \ res;"
- "        String vowels = \"\";\n        Set<String> vowelSet = Arrays.stream(vowels).toSet();\n\
  \        word = word.toLowerCase();\n        if (word.contains(vowels)) {\n    \
  \        return \"\";\n        }\n\n        int len = word.length();\n        int\
  \ start = 0;\n        int end = 0;\n        for (int i = 0; i < len; i++) {\n  \
  \          char c = word.charAt(i);\n            if (Character.isLetter(c)) {\n\
  \                if (start == i) {\n                    start = i;\n           \
  \         end = i + 1;\n                }\n            } else {\n              \
  \  if (end == i) {\n                    end = i;\n                }\n          \
  \  }\n        }\n\n        String result = \"\";\n        Set<Character> vowelsSet\
  \ = Arrays.stream(vowels).toSet();\n        if (end + 1 < len) {\n            String\
  \ firstLetter = word.substring(start, end + 1);\n            for (char ch : firstLetter.toCharArray())\
  \ {\n                if (vowelsSet.contains(ch)) {\n                    if (result.isEmpty())\
  \ {\n                        result = ch;\n                    } else {\n      \
  \                  if (result.length() < 2) {\n                            result\
  \ = result;\n                        } else if (result.length() > 1) {\n       \
  \                     result = result + \"-\";\n                        }\n    \
  \                    result = result + ch;\n                    }\n            \
  \    }\n            }\n        }\n        return result;"
- "        if(word == null || word.length() < 2){\n            return \"\";\n    \
  \    }\n        \n        HashSet<Character> vowels = new HashSet<>();\n       \
  \ for(int i = word.length() - 1; i >= 0; i--){\n            char c = word.charAt(i);\n\
  \            \n            if (Character.isLetter(c)) {\n                vowels.add(c);\n\
  \            }\n        }\n        \n        for(Character c : vowels){\n      \
  \      if(word.charAt(word.length() - 1 - c) == 'a' || word.charAt(word.length()\
  \ - 1 - c) == 'e' || \n               word.charAt(word.length() - 1 - c) == 'i'\
  \ || word.charAt(word.length() - 1 - c) == 'o' || \n               word.charAt(word.length()\
  \ - 1 - c) == 'u' || word.charAt(word.length() - 1 - c) == 'y'){\n             \
  \   return String.valueOf(c);\n            }\n        }\n        \n        return\
  \ \"\";"
- "        List<Character> vowelsBefore = Arrays.asList('a', 'e', 'i', 'o', 'u');\n\
  \        List<Character> vowelsAfter = Arrays.asList('a', 'e', 'i', 'o', 'u');\n\
  \        vowelsBefore.add(Character.MIN_VALUE);\n        vowelsBefore.add(Character.MAX_VALUE);\n\
  \        int vowelIndex = 0;\n        boolean found = false;\n        for (int i\
  \ = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n  \
  \          vowelIndex = vowelsBefore.lastIndexOf(c);\n            if (vowelIndex\
  \ < 0 || vowelIndex > word.length() - 1) {\n                vowelIndex = 0;\n  \
  \          }\n            char vowelBefore = word.charAt(vowelIndex);\n        \
  \    vowelIndex = vowelsAfter.lastIndexOf(vowelBefore);\n            if (vowelIndex\
  \ < 0 || vowelIndex > word.length() - 1) {\n                vowelIndex = 0;\n  \
  \          }\n            char vowelAfter = word.charAt(vowelIndex);\n         \
  \   boolean validVowel = vowelBefore < c && vowelAfter >= c;\n            if (!validVowel)\
  \ {\n                return \"\";\n            }\n            found = true;\n  \
  \      }\n        return found ? word.substring(0, vowelIndex + 1) : \"\";"
- "        \n        String result=null;\n        \n        Set<Character> vowels=new\
  \ HashSet<Character>();\n        for(char c:word.toCharArray()){\n            if(c=='a'\
  \ || c=='e' || c=='i' || c=='o' || c=='u' || c=='y'){\n                vowels.add(c);\n\
  \            }\n        }\n        \n        Set<Character> consonants=new HashSet<Character>();\n\
  \        for(char c:word.toCharArray()){\n            if(c!='a' && c!='e' && c!='i'\
  \ && c!='o' && c!='u' && c!='y'){\n                consonants.add(c);\n        \
  \    }\n        }\n        \n        for(char c:word.toCharArray()){\n         \
  \   if(c=='a' || c=='e' || c=='i' || c=='o' || c=='u' || c=='y'){\n            \
  \    vowels.add(c);\n            }\n            \n            if(c=='a' || c=='e'\
  \ || c=='i' || c=='o' || c=='u' || c=='y'){\n                vowels.add(c);\n  \
  \          }\n            \n            if(c=='a' || c=='e' || c=='i' || c=='o'\
  \ || c=='u' || c=='y'){\n                vowels.add(c);\n            }\n       \
  \ }\n        \n        for(char c:word.toCharArray()){\n            if(c=='a' ||\
  \ c=='e' || c=='i' || c=='o' || c=='u' || c=='y'){\n                vowels.add(c);\n\
  \            }\n            \n            if(c=='a' || c=='e' || c=='i' || c=='o'\
  \ || c=='u' || c=='y'){\n                vowels.add(c);\n            }\n       \
  \     \n            if(c=='a' || c=='e' || c=='i' || c=='o' || c=='u' || c=='y'){\n\
  \                vowels.add(c);\n            }\n        }\n        \n        for(char\
  \ c:word.toCharArray()){\n            if(c=='a' || c=='e' || c=='i' || c=='o' ||\
  \ c=='u' || c=='y'){\n                vowels.add(c);\n            }\n          \
  \  \n            if(c=='a' || c=='e' || c=='i' || c=='o' || c=='u' || c=='y'){\n\
  \                vowels.add(c);\n            }\n            \n            if(c=='a'\
  \ || c=='e' || c=='i' || c=='o' || c=='u' || c=='y'){\n                vowels.add(c);\n\
  \            }\n        }\n        \n        for(char c:"
- "        char[] vowels = {'a', 'i', 'o', 'u'};\n        char[] consonants = {'b',\
  \ 'c', 'd', 'f', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
  \ 'x', 'z'};\n        if(word.length() <= 1 && !word.contains(\"i\")) {\n      \
  \      return \"\";\n        }\n        char[] charArray = word.toCharArray();\n\
  \        Arrays.sort(charArray);\n        for(int i = 0; i < charArray.length; i++)\
  \ {\n            boolean found = false;\n            for(int j = 0; j < vowels.length;\
  \ j++) {\n                if(charArray[i] == vowels[j]) {\n                    found\
  \ = true;\n                    break;\n                }\n            }\n      \
  \      if(!found) {\n                continue;\n            }\n            for(int\
  \ k = charArray.length - 2; k >= 0; k--) {\n                if(charArray[k] == consonants[i])\
  \ {\n                    return String.valueOf(charArray[k]);\n                }\n\
  \            }\n        }\n        return \"\";"
- "        \n        int len= word.length();\n        String vowels=\"aeiou\";\n \
  \       \n        for(int i=len-1; i>=0; i--) {\n            String s=word.substring(i,i+1);\n\
  \            String search=vowels.contains(s)?s:\"\";\n            if(search.equals(\"\
  \")){\n                break;\n            }\n            int start = word.length()-word.length()-i;\n\
  \            int end = word.length()-i;\n            int index = word.indexOf('.',start);\n\
  \            String a = word.substring(0,index-1);\n            String b = word.substring(end+1,len);\n\
  \            \n            String searchString=a+\". \"+b;\n            if(searchString.equals(search)){\n\
  \                return search;\n            }\n        }\n        return \"\";"
- "        String vowel_before = \"\", vowel_after = \"\";\n        int c = 0;\n \
  \       for (int i = word.length() - 1; i >= 0; i--) {\n            c = word.charAt(i);\n\
  \            if ((Character.isLetterOrDigit(c) && Character.isLetter(word.charAt(i\
  \ - 1))) ||\n                ((c == ' ') && Character.isLetter(word.charAt(i + 1))))\n\
  \                break;\n        }\n        if (c != 0) {\n            vowel_before\
  \ = word.substring(0, i);\n            vowel_after = word.substring(i + 1);\n  \
  \      }\n        String vowel_before_reversed = vowel_before.toLowerCase().replaceAll(\"\
  [aeiou]\", \"\");\n        String vowel_after_reversed = vowel_after.toLowerCase().replaceAll(\"\
  [aeiou]\", \"\");\n        String vowel_before_reversed_1 = vowel_before_reversed\
  \ + vowel_after_reversed + vowel_before_reversed.substring(0, 1) + vowel_before_reversed.substring(1);\n\
  \        String vowel_before_reversed_2 = vowel_before_reversed + vowel_after_reversed\
  \ + vowel_before_reversed.substring(0, 2) + vowel_before_reversed.substring(2);\n\
  \        String vowel_before_reversed_3 = vowel_before_reversed + vowel_after_reversed\
  \ + vowel_before_reversed.substring(0, 3) + vowel_before_reversed.substring(3);\n\
  \        String vowel_before_reversed_4 = vowel_before_reversed + vowel_after_reversed\
  \ + vowel_before_reversed.substring(0, 4) + vowel_before_reversed.substring(4);\n\
  \        String vowel_before_reversed_5 = vowel_before_reversed + vowel_after_reversed\
  \ + vowel_before_reversed.substring(0, 5) + vowel_before_reversed.substring(5);\n\
  \        String vowel_before_reversed_6 = vowel_before_reversed + vowel_after_reversed\
  \ + vowel_before_reversed.substring(0, 6) + vowel_before_reversed.substring(6);\n\
  \        String vowel_before_reversed_7 = vowel_before_reversed + vowel_after_reversed\
  \ + vowel_before_reversed.substring(0, 7) + vowel_before_reversed.substring(7);\n\
  \        String vowel_before_reversed_8 = vowel_before_reversed + vowel_after_reversed\
  \ + vowel_before_reversed.substring(0, 8) + vowel_before_reversed.substring(8);\n\
  \        String vowel_before_reversed_9 = vowel_before_reversed + vowel_after_reversed\
  \ + vowel_before_reversed.substring(0, 9) + vowel_before_reversed.substring(9);\n\
  \        String vowel_before_reversed_10 = vowel"
- "        if (word == null || word.length() < 2)\n            return \"\";\n\n  \
  \      HashSet<Character> vowels = new HashSet<>();\n        vowels.add('a');\n\
  \        vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n\
  \        vowels.add('u');\n\n        Set<Character> vowelsSet = new HashSet<>();\n\
  \        vowelsSet.add('a');\n        vowelsSet.add('e');\n        vowelsSet.add('i');\n\
  \        vowelsSet.add('o');\n        vowelsSet.add('u');\n\n        int endIndex\
  \ = word.length();\n        for (int i = word.length() - 1; i >= 0; i--) {\n   \
  \         char currChar = word.charAt(i);\n            boolean isVowel = vowelsSet.contains(currChar);\n\
  \            if (!isVowel) {\n                return \"\";\n            }\n    \
  \    }\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char\
  \ currChar = word.charAt(i);\n            boolean isVowel = vowels.contains(currChar);\n\
  \            if (isVowel) {\n                return word.substring(0, i);\n    \
  \        }\n        }\n        return \"\";"
- "        List<String> list = new ArrayList<>();\n        for(int i=word.length()-1;i>=0;i--)\n\
  \            list.add(word.substring(i, i+1));\n        List<Integer> index = list.stream().map(Integer::valueOf).collect(Collectors.toList());\n\
  \        Set<String> set = new HashSet<>(index);\n        if (list.size() > 0) {\n\
  \            String vowels = \"aeiouAEIOU\";\n            String lastVowel = null;\n\
  \            for (int i : index)\n                lastVowel = list.contains(vowels.charAt(i))\
  \ ? vowels.charAt(i) : \"\";\n            return lastVowel;\n        }\n       \
  \ return \"\";"
- "        ArrayList vowels = new ArrayList();\n        vowels.add(\"a\");\n     \
  \   vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n\
  \        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\"\
  );\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
  O\");\n        vowels.add(\"U\");\n        vowels.add(\"Y\");\n        vowels.add(\"\
  a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
  o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        ArrayList\
  \ vowels_reverse = new ArrayList();\n        vowels_reverse.add(\"a\");\n      \
  \  vowels_reverse.add(\"A\");\n        vowels_reverse.add(\"e\");\n        vowels_reverse.add(\"\
  E\");\n        vowels_reverse.add(\"i\");\n        vowels_reverse.add(\"I\");\n\
  \        vowels_reverse.add(\"o\");\n        vowels_reverse.add(\"O\");\n      \
  \  vowels_reverse.add(\"u\");\n        vowels_reverse.add(\"U\");\n        vowels_reverse.add(\"\
  y\");\n        vowels_reverse.add(\"Y\");\n        vowels_reverse.add(\"y\");\n\
  \        word = word.toUpperCase();\n        for (int i = word.length() - 1; i >=\
  \ 0; i--) {\n            if (word.contains(vowels.get(i))) {\n                for\
  \ (int j = 1; j < vowels.size(); j++) {\n                    if (vowels_reverse.contains(word.substring(i,\
  \ i + j))) {\n                        return word.substring(i, i + j);\n       \
  \             }\n                }\n            }\n        }\n        return \"\"\
  ;"
- "        List<String> vowel = new ArrayList<String>();\n        vowel.add(\"a\"\
  );\n        vowel.add(\"e\");\n        vowel.add(\"i\");\n        vowel.add(\"o\"\
  );\n        vowel.add(\"u\");\n        word = word.toLowerCase();\n        for(int\
  \ i=word.length()-1;i>=0;i--) {\n            boolean found = false;\n          \
  \  for(int j=0;j<vowel.size();j++) {\n                if(word.contains(vowel.get(j)))\
  \ {\n                    found = true;\n                    break;\n           \
  \     }\n            }\n            if(found) {\n                break;\n      \
  \      }\n        }\n        if(word.contains(\"a\") || word.contains(\"e\") ||\
  \ word.contains(\"i\") || word.contains(\"o\") || word.contains(\"u\")) {\n    \
  \        return word;\n        }\n        return \"\";"
- "        Set<String> vowels = new HashSet<>();\n        vowels.addAll(Arrays.asList(new\
  \ String[]{\n            \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
  , \"O\", \"U\"\n        }));\n        vowels.addAll(Arrays.asList(new String[]{\n\
  \            \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
  , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\n\
  \        }));\n\n        String[] splits = word.split(\"\"); \n        List<String>\
  \ results = new ArrayList<>();\n        for (String s :  splits) {\n           \
  \ int j = vowels.indexOf(s.toLowerCase());\n            if (j >= 0) {\n        \
  \        results.add(s);\n            }\n        }\n\n        return results.get(0).toLowerCase();"
- "        Set<Character> set = new HashSet<Character>();\n        char currentLetter;\n\
  \        char nextLetter;\n        int currentIndex = 0;\n        int nextIndex\
  \ = 0;\n        int minDiff = Integer.MAX_VALUE;\n        int diff = 0;\n      \
  \  for (char c : word.toCharArray()) {\n            currentLetter = Character.toLowerCase(c);\n\
  \            nextLetter = Character.toLowerCase(word.charAt(nextIndex));\n     \
  \       set.add(currentLetter);\n            set.add(nextLetter);\n            diff\
  \ = getVowelDiff(currentLetter, nextLetter);\n            if (diff < minDiff) {\n\
  \                minDiff = diff;\n            }\n            currentIndex++;\n \
  \           nextIndex++;\n        }\n        for (char c : set) {\n            diff\
  \ = c - 'a';\n            if (diff < minDiff) {\n                minDiff = diff;\n\
  \            }\n        }\n        diff = -minDiff;\n        if (diff < 0) {\n \
  \           return \"\";\n        }\n        while (diff != 0) {\n            int\
  \ index = word.lastIndexOf('a') - 1;\n            if (index < 0) {\n           \
  \     return \"\";\n            }\n            char firstLetter = Character.toLowerCase(word.charAt(index));\n\
  \            diff = getVowelDiff(firstLetter, currentLetter);\n            if (diff\
  \ < minDiff) {\n                minDiff = diff;\n            }\n            index\
  \ = word.lastIndexOf('u', index - 1);\n            if (index < 0) {\n          \
  \      return \"\";\n            }\n            char secondLetter = Character.toLowerCase(word.charAt(index));\n\
  \            diff = getVowelDiff(secondLetter, currentLetter);\n            if (diff\
  \ < minDiff) {\n                minDiff = diff;\n            }\n            index\
  \ = word.lastIndexOf('o', index - 1);\n            if (index < 0) {\n          \
  \      return \"\";\n            }\n            char thirdLetter = Character.toLowerCase(word.charAt(index));\n\
  \            diff = getVowelDiff(thirdLetter, currentLetter);\n            if (diff\
  \ < minDiff) {\n                minDiff = diff;\n            }\n            index\
  \ = word.lastIndexOf('i', index - 1);\n            if (index < 0) {\n          \
  \      return \"\";\n            }\n            char fourthLetter = Character.toLowerCase(word.charAt(index));\n\
  \            diff = getVowelDiff(fourthLetter, currentLetter);\n            if (diff\
  \ < minDiff) {\n                minDiff = diff;\n            }\n            index\
  \ = word.lastIndexOf('e', index - 1);\n            if (index < 0) {\n          \
  \      return \"\";\n            }\n            char fifthLetter = Character.toLowerCase(word.charAt(index));\n\
  \            diff = getVowelDiff(fifthLetter, currentLetter);\n            if (diff\
  \ < minDiff) {"
- "        HashMap<Character, String> map = new HashMap<>();\n        map.put('A',\
  \ \"a\");\n        map.put('E', \"e\");\n        map.put('I', \"i\");\n        map.put('O',\
  \ \"o\");\n        map.put('U', \"u\");\n        map.put('Y', \"ya\");\n       \
  \ map.put('Ya', \"ya\");\n        map.put('Ya', \"y\");\n        map.put('Ya', \"\
  y\");\n        map.put('Ya', \"ya\");\n        map.put('Ya', \"y\");\n        map.put('Ya',\
  \ \"ya\");\n        map.put('Ya', \"y\");\n        map.put('Ya', \"ya\");\n    \
  \    map.put('Ya', \"y\");\n        map.put('Ya', \"ya\");\n        map.put('Ya',\
  \ \"y\");\n        map.put('Ya', \"ya\");\n        map.put('Ya', \"y\");\n     \
  \   map.put('Ya', \"ya\");\n        map.put('Ya', \"y\");\n        map.put('Ya',\
  \ \"ya\");\n        map.put('Ya', \"y\");\n        map.put('Ya', \"ya\");\n    \
  \    map.put('Ya', \"y\");\n        map.put('Ya', \"ya\");\n        map.put('Ya',\
  \ \"y\");\n        map.put('Ya', \"ya\");\n        map.put('Ya', \"y\");\n     \
  \   map.put('Ya', \"ya\");\n        map.put('Ya', \"y\");\n        map.put('Ya',\
  \ \"ya\");\n        map.put('Ya', \"y\");\n        map.put('Ya', \"ya\");\n    \
  \    map.put('Ya', \"y\");\n        map.put('Ya', \"ya\");\n        map.put('Ya',\
  \ \"y\");\n        map.put('Ya', \"ya\");\n        map.put('Ya', \"y\");\n     \
  \   map.put('Ya', \"ya\");\n        map.put('Ya', \"y\");\n        map.put('Ya',\
  \ \"ya\");\n        map.put('Ya', \"y\");\n        map.put('Ya', \"ya\");\n    \
  \    map.put('Ya', \"y\");\n        map.put('Ya', \"ya\");\n        map.put('Ya',\
  \ \"y\");\n        map.put('Ya', \"ya\");\n        map.put('Ya', \"y\");\n     \
  \   map.put('Ya', \"ya\");\n        map.put('Ya', \"y"
- "        final String vowels = \"AEIOUaeiou\";\n        return findClosestVowel(word,\
  \ vowels);"
- "        Set<Character> vowels = new HashSet<>();\n        for (char c : word.toCharArray())\
  \ {\n            if (c >= 'a' && c <= 'z') {\n                vowels.add(c);\n \
  \           }\n        }\n        if (vowels.size() <= 0) {\n            return\
  \ \"\";\n        }\n        Set<Character> consonants = new HashSet<>();\n     \
  \   for (char c : word.toCharArray()) {\n            if (c >= 'A' && c <= 'Z') {\n\
  \                consonants.add(c);\n            }\n        }\n        ConsecutiveVowels<Character>\
  \ consecutiveVowels = new ConsecutiveVowels<>(vowels);\n        ConsecutiveVowels<Character>\
  \ consecVowels = consecutiveVowels.stream()\n                .filter(consecutiveVowels::isConsecutiveVowel)\n\
  \                .collect(Collectors.toSet());\n        List<Character> vowelsLeft\
  \ = new ArrayList<>();\n        vowelsLeft.addAll(consecVowels.vowels);\n      \
  \  vowelsLeft.addAll(vowels);\n        vowelsLeft.sort(Comparator.naturalOrder());\n\
  \        String result = \"\";\n        for (int i = 0; i < vowelsLeft.size() -\
  \ 1; i++) {\n            char c = vowelsLeft.get(i);\n            char c1 = vowelsLeft.get(i\
  \ + 1);\n            if (c == 'u' && c1 != 'u') {\n                result = Character.toLowerCase(result);\n\
  \            }\n            if (c == 'U' && c1 != 'U') {\n                result\
  \ = Character.toUpperCase(result);\n            }\n        }\n        return result;"
- "        String leftSide = word.substring(word.length() - 1, word.length());\n \
  \       String rightSide = word.substring(0, word.length() - 1);\n        List<String>\
  \ vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        int vowelPosition\
  \ = vowels.indexOf(leftSide.charAt(leftSide.length() - 1));\n        int vowelIndex\
  \ = 0;\n        while (vowelIndex < vowels.size() && vowels.get(vowelIndex).equals(rightSide.charAt(0)))\
  \ {\n            vowelIndex++;\n        }\n        if (vowelIndex == vowels.size())\n\
  \            return \"\";\n        return vowels.get(vowelPosition + 1);"
- '        return null;'
- "        String vowel = \"AEIOUaeiou\";\n        int length = word.length();\n \
  \       int count = (int) Math.ceil(Math.pow(vowel.length(), length)/2);\n     \
  \   for(int i = length - 1; i >= 0; i--){\n            String cur = word.substring(0,\
  \ i+1);\n            if(vowel.contains(cur.toLowerCase())){\n                return\
  \ cur;\n            }\n        }\n        return \"\";"
- "        Set<Character> set = new HashSet<Character>(Arrays.asList(\"uAEIOU\"));\n\
  \        for (char c : word.toCharArray()) {\n            if (set.contains(c)) {\n\
  \                return c;\n            }\n        }\n        return \"\";"
- "        // Write your code here\n        List<Integer> consonants = new ArrayList<>();\n\
  \        for(int i = word.length()-1; i >= 0; i--) {\n            if(Character.isUpperCase(word.charAt(i)))\
  \ {\n                consonants.add(word.charAt(i));\n            }\n        }\n\
  \        \n        List<Integer> vowels = new ArrayList<>();\n        for(int i\
  \ = 0; i < consonants.size(); i++) {\n            char c = consonants.get(i);\n\
  \            if(Character.isUpperCase(c)) {\n                vowels.add((int)c);\n\
  \            }\n        }\n        \n        \n        int min = Integer.MAX_VALUE;\n\
  \        \n        for(int i = vowels.size()-1; i >= 0; i--) {\n            if(vowels.get(i)\
  \ <= word.length()-1 && vowels.get(i) >= 0) {\n                if(vowels.get(i)\
  \ < min) {\n                    min = vowels.get(i);\n                }\n      \
  \      }\n        }\n        \n        if(min == Integer.MAX_VALUE) {\n        \
  \    return \"\";\n        }\n        else {\n            char[] consonantArray\
  \ = consonants.toArray(new char[consonants.size()]);\n            char[] vowelArray\
  \ = vowels.toArray(new char[vowels.size()]);\n            \n            String vowel\
  \ = new String(vowelArray);\n            \n            for(int i = vowel.length()-1;\
  \ i >= 0; i--) {\n                if(vowel.charAt(i) == consonantArray[i]) {\n \
  \                   vowel = vowel.substring(0,i)+vowel.substring(i+1);\n       \
  \             break;\n                }\n            }\n            \n         \
  \   return vowel;\n        }"
- "        Map<Character, String> vowelMap = new HashMap<>();\n        vowelMap.put('a',\
  \ 'a');\n        vowelMap.put('e', 'i');\n        vowelMap.put('o', 'o');\n    \
  \    vowelMap.put('u', 'u');\n        vowelMap.put('i', 'i');\n        vowelMap.put('u',\
  \ 'i');\n        vowelMap.put('a', 'a');\n        vowelMap.put('e', 'i');\n    \
  \    vowelMap.put('o', 'o');\n        vowelMap.put('u', 'u');\n        vowelMap.put('i',\
  \ 'i');\n        vowelMap.put('a', 'a');\n        vowelMap.put('e', 'i');\n    \
  \    vowelMap.put('o', 'o');\n        vowelMap.put('u', 'u');\n        vowelMap.put('i',\
  \ 'i');\n        vowelMap.put('a', 'a');\n        vowelMap.put('e', 'i');\n    \
  \    vowelMap.put('o', 'o');\n        vowelMap.put('u', 'u');\n        vowelMap.put('i',\
  \ 'i');\n        vowelMap.put('a', 'a');\n        vowelMap.put('e', 'i');\n    \
  \    vowelMap.put('o', 'o');\n        vowelMap.put('u', 'u');\n        vowelMap.put('i',\
  \ 'i');\n        vowelMap.put('a', 'a');\n        vowelMap.put('e', 'i');\n    \
  \    vowelMap.put('o', 'o');\n        vowelMap.put('u', 'u');\n        vowelMap.put('i',\
  \ 'i');\n        vowelMap.put('a', 'a');\n        vowelMap.put('e', 'i');\n    \
  \    vowelMap.put('o', 'o');\n        vowelMap.put('u', 'u');\n        vowelMap.put('i',\
  \ 'i');\n        vowelMap.put('a', 'a');\n        vowelMap.put('e', 'i');\n    \
  \    vowelMap.put('o', 'o');\n        vowelMap.put('u', 'u');\n        vowelMap.put('i',\
  \ 'i');\n        vowelMap.put('a', 'a');\n        vowelMap.put('e', 'i');\n    \
  \    vowelMap.put('o', 'o');\n        vowelMap.put('u', 'u');\n        vowelMap.put('i',\
  \ 'i');\n        vowelMap.put('a', 'a');\n        vowelMap.put('e', 'i');\n    \
  \    vowelMap.put('o', 'o');\n        vowelMap.put('u', 'u');\n        vowelMap.put('i',\
  \ 'i');\n        vowelMap.put('a', 'a');\n        vowelMap.put('e', 'i');\n    \
  \    vowelMap.put('o', 'o"
- "        Optional<Character> vowel = getVowel(word);\n        if (vowel.isPresent()\
  \ && vowel.get().isUpperCase()) {\n            return getVowel(word).get();\n  \
  \      }\n        return \"\";"
language: java
name: HumanEval_118_get_closest_vowel
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a word. Your task is to find the closest vowel\
  \ that stands between \n    // two consonants from the right side of the word (case\
  \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty\
  \ string if you didn't\n    // find any vowel met the above condition. \n    //\
  \ You may assume that the given string contains English letter only.\n    // Example:\n\
  \    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"FULL\"\
  ) ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
  ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
  yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
  u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
  most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\"\
  )));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  Above\")).equals((\"o\")));\n    }\n\n}\n"
