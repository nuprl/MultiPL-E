completions:
- '        return ((x >= 0 && y >= 0 && x < y && x >= y && x % 2 == 0 && y % 2 ==
  0) ? x : -1);'
- "        if (x > y) {\n            return -1;\n        }\n        int n = ((x +\
  \ y) / 2) % 2;\n        while ((x + y) % 2 != 0) {\n            x = (x + y) / 2;\n\
  \            n = ((x + y) / 2) % 2;\n        }\n        return n;"
- "        int start = (int) Math.floor((Math.sqrt(x)-1));\n        int end = (int)\
  \ Math.ceil((Math.sqrt(y)-1));\n        if(start >= end) return -1;\n        if(x\
  \ > y) return chooseNum(x, start);\n        if(x < y) return chooseNum(y, end);\n\
  \        for(int i = start; i <= end; i++) {\n            if(x%i==0 || y%i==0) return\
  \ i;\n        }\n        return -1;"
- "        if (x > y)\n            return -1;\n        if (x <= y)\n            return\
  \ x > y ? x : y;\n        int big = x;\n        int small = y;\n        while (big\
  \ <= small) {\n            if (big % 2 == 0) {\n                big += 1;\n    \
  \            continue;\n            }\n            big += 3;\n        }\n      \
  \  while (big >= small) {\n            if (big % 2 == 0) {\n                big\
  \ -= 1;\n                continue;\n            }\n            big -= 3;\n     \
  \   }\n        if (big == small)\n            return big;\n        return -1;"
- "        if (x < y && x >= 0) {\n            int start = Math.min(x, y);\n     \
  \       int end = Math.max(x, y);\n            int mid = (start + end) / 2;\n  \
  \          if (start % 2 == 0) {\n                return mid;\n            }\n \
  \           else {\n                return -1;\n            }\n        }\n     \
  \   return -1;"
- "        int result = -1;\n        if (x == 0 || y == 0) return -1;\n        if\
  \ (x <= y) {\n            while (x <= y) {\n                if (x % 2 == 0) {\n\
  \                    if (result < x) {\n                        result = x;\n  \
  \                  }\n                    x++;\n                } else {\n     \
  \               if (result > y) {\n                        result = y;\n       \
  \             }\n                    y--;\n                }\n            }\n  \
  \      } else {\n            while (y <= x) {\n                if (y % 2 == 0) {\n\
  \                    if (result < y) {\n                        result = y;\n  \
  \                  }\n                    y++;\n                } else {\n     \
  \               if (result > x) {\n                        result = x;\n       \
  \             }\n                    x--;\n                }\n            }\n  \
  \      }\n        return result;"
- "        if (x > y)\n            return -1;\n        int xx = ((x >> 1) & 1);\n\
  \        int yy = ((y >> 1) & 1);\n        if (xx > yy)\n            return y;\n\
  \        return x;"
- "        int result;\n        if (x >= y && x >= x) {\n            result = (x +\
  \ y + 1) / 2;\n        } else if (y >= x && y >= y) {\n            result = (x +\
  \ y + 1) / 2;\n        } else {\n            return -1;\n        }\n        return\
  \ result;"
- "        if (x < y) {\n            return -1;\n        }\n        int max_num =\
  \ x;\n        for (int i = x; i <= y; i++) {\n            if ((x % 2) == 0) {\n\
  \                max_num = x;\n            }\n            if ((y % 2) == 0) {\n\
  \                max_num = y;\n            }\n            x /= 2;\n            y\
  \ /= 2;\n        }\n        return max_num;"
- "        int a = y;\n        int b = x;\n        while (a > 0 && a < y) {\n    \
  \        b--;\n            a *= 2;\n        }\n        if (b > y) {\n          \
  \  return -1;\n        }\n        while (a > 0 && b < y) {\n            a--;\n \
  \           b *= 2;\n        }\n        if (a == 0 && b == y) {\n            return\
  \ x;\n        }\n        if (a == 0 && b < y) {\n            return -1;\n      \
  \  }\n        return a + 1;"
- "        if (x == y || x <= 0 || x >= y) {\n            return -1;\n        }\n\n\
  \        // Using Java 8 streams:\n        BigInteger first = new BigInteger(String.valueOf(x));\n\
  \        BigInteger second = new BigInteger(String.valueOf(y));\n\n        BigInteger\
  \ even = evens.stream().filter(x -> x.compareToIgnoreCase(first) <= 0).findAny().orElse(null);\n\
  \n        if (even != null) {\n            return even.compareTo(second);\n    \
  \    }\n\n        BigInteger odd = odds.stream().filter(x -> x.compareToIgnoreCase(first)\
  \ <= 0).findAny().orElse(null);\n\n        if (odd != null) {\n            return\
  \ odd.compareTo(second);\n        }\n\n        throw new IllegalArgumentException();"
- "        if (x >= y)\n            return -1;\n        int max_even = 1;\n      \
  \  for (int i = x + 1; i <= y; ++i) {\n            if (i % 2 == 0)\n           \
  \     max_even = i;\n        }\n        if (max_even % 2 == 0)\n            return\
  \ max_even;\n        else\n            return -1;"
- "        // Write your code here\n        \n        \n        \n        \n     \
  \   \n        \n        \n        return -1;"
- "        int min = (x < y) ? (x < 0) ? -x : x : y;\n        int max = (x > y) ?\
  \ (x > 0) ? -x : x : y;\n\n        if (min > max) {\n            int temp = max;\n\
  \            max = min;\n            min = temp;\n        }\n        int mid = (max\
  \ + min) / 2;\n        int even = (mid % 2 == 0);\n\n        if ((even && mid !=\
  \ min) || (!even && mid != max)) {\n            return mid;\n        } else if (mid\
  \ == min) {\n            return min;\n        }\n        return -1;"
- "        Stream<Integer> xStream = Stream.of(x);\n        Stream<Integer> yStream\
  \ = Stream.of(y);\n        Stream<Integer> evenStream = xStream.filter(x -> x %\
  \ 2 == 0);\n        Stream<Integer> oddStream = yStream.filter(y -> y % 2 == 1);\n\
  \        Stream<Integer> evenOrOddStream = evenStream.or(oddStream);\n        Optional<Integer>\
  \ maxEven = evenOrOddStream.max(Comparator.naturalOrder());\n        if (maxEven.isPresent())\
  \ {\n            return maxEven.get();\n        } else {\n            return -1;\n\
  \        }"
- "        List<Integer> result = new ArrayList<>();\n        for (int i = x; i <=\
  \ y; i++) {\n            if (isEven(i)) {\n                result.add(i);\n    \
  \        }\n        }\n        if (result.isEmpty()) {\n            return -1;\n\
  \        }\n        return Collections.max(result);"
- '        return Math.max(Math.min(findOddNum(x), findOddNum(y)), -1);'
- "        if ((x >= y) || (x <= -y))\n            return -1;\n        int result\
  \ = (int) Math.ceil(x / y) * y;\n        int remainder = x % y;\n        if (remainder\
  \ != 0) {\n            result = result + 1;\n        }\n        return result;"
- '        return IntStream.rangeClosed(x, y).filter(x -> x%2 == 0? x : -1).max();'
- "        if(x < y && x > 0 && y < 0)\n            return -1;\n        if(x < y)\n\
  \            return y;\n        if(x > y)\n            return x;\n        if(x ==\
  \ y)\n            return x;\n        if(x > 0 && y > 0)\n            if((x % 2 ==\
  \ 0) && (y % 2 == 0))\n                return x;\n            else\n           \
  \     return y;\n        else\n            return x;"
- "        if (x < y) {\n            return chooseNum(y, x);\n        }\n        if\
  \ (x <= 0) {\n            return -1;\n        }\n        int biggest_even = x +\
  \ (y / 2);\n        int big_number = 1;\n        while (biggest_even <= y) {\n \
  \           big_number = (biggest_even < y) ? (big_number + 1) : (biggest_even -\
  \ 1);\n            biggest_even += 2;\n        }\n        return big_number;"
- "        if (x >= y)\n            return -1;\n\n        int ans = 0;\n        while\
  \ (x < y) {\n            ans = Integer.max(ans, x + 2);\n            x += 2;\n \
  \       }\n\n        return ans;"
- "        long lx = ((long)x);\n        long ly = ((long)y);\n        boolean even\
  \ = true;\n        for(int i = lx; i >= ly; i--) {\n            if(i % 2 == 0) {\n\
  \                even = false;\n                break;\n            }\n        }\n\
  \        if (even) {\n            return x;\n        } else {\n            return\
  \ -1;\n        }"
- "        if((x == y) == false) {\n            return -1;\n        }\n        \n\
  \        ArrayList even = new ArrayList();\n        ArrayList odd = new ArrayList();\n\
  \n        for(int i = x; i <= y; i++) {\n            if((i % 2 == 0)) {\n      \
  \          even.add(i);\n            } else {\n                odd.add(i);\n   \
  \         }\n        }\n        int biggestEven = -1;\n        int biggestOdd =\
  \ -1;\n\n        for(int i = 0; i < even.size(); i++) {\n            int currentEven\
  \ = (int) even.get(i);\n            int currentOdd = (int) odd.get(i);\n\n     \
  \       if(biggestEven < 0) {\n                biggestEven = currentEven;\n    \
  \        }\n            if(biggestOdd < 0) {\n                biggestOdd = currentOdd;\n\
  \            }\n            \n            if(currentEven > biggestEven) {\n    \
  \            biggestEven = currentEven;\n            }\n            if(currentOdd\
  \ > biggestOdd) {\n                biggestOdd = currentOdd;\n            }\n   \
  \     }\n        if(biggestEven > biggestOdd) {\n            return biggestEven;\n\
  \        }\n        return biggestOdd;"
- "        ArrayList<Integer> evens = new ArrayList<>();\n        for (int i = x;\
  \ i <= y; i++) {\n            if (i % 2 == 0) {\n                evens.add(i);\n\
  \            }\n        }\n        if (evens.size() > 0) {\n            int biggest\
  \ = Collections.max(evens);\n            if (biggest % 2 != 0) {\n             \
  \   return biggest;\n            }\n        }\n        return -1;"
- "        // We want to find the even number that \n        // satisfies x >= y <\
  \ x && y >= x >= y \n        int even = -1;\n        if (x >= y) {\n           \
  \ even = x;\n        } else {\n            even = y;\n        }\n\n        // Now\
  \ we have the even number in even variable. \n        // We just need to check if\
  \ it is in the range.\n        if (even >= 0 && even <= y) {\n            // If\
  \ it's in the range, just return it\n            return even;\n        } else {\n\
  \            // If it's not in the range we return the biggest even number \n  \
  \          // that can satisfy it (even >= x >= even && even <= y).\n          \
  \  int smaller = x;\n            while (smaller <= y) {\n                even =\
  \ even * 2 + smaller;\n                smaller = smaller * 2 + 1;\n            }\n\
  \            return even;\n        }"
- "        if ((x >= y) && (x == y)) {\n            return x;\n        }\n       \
  \ int xstart = x;\n        int xend = x;\n        int ystart = y;\n        int yend\
  \ = y;\n        int xstep = 1;\n        int ystep = 1;\n        boolean eveneven\
  \ = false;\n        boolean evenodd = false;\n        boolean oddodd = false;\n\
  \        boolean xeven = false;\n        boolean xodd = false;\n        boolean\
  \ yeven = false;\n        boolean yodd = false;\n        while (xend < y) {\n  \
  \          if (xend % 2 == 0) {\n                xeven = true;\n               \
  \ xend = xend + xstep;\n            }\n            else {\n                xodd\
  \ = true;\n                xend = xend + xstep;\n            }\n            if (yend\
  \ % 2 == 0) {\n                yeven = true;\n                yend = yend + ystep;\n\
  \            }\n            else {\n                yodd = true;\n             \
  \   yend = yend + ystep;\n            }\n        }\n        if (xeven && yeven)\
  \ {\n            if (xend > yend) {\n                return xend;\n            }\n\
  \            else {\n                return yend;\n            }\n        }\n  \
  \      if (xodd && yodd) {\n            if (xend > yend) {\n                return\
  \ yend;\n            }\n            else {\n                return xend;\n     \
  \       }\n        }\n        if (xeven && !yeven) {\n            return yend;\n\
  \        }\n        if (xodd && !yodd) {\n            return xend;\n        }\n\
  \        if (!xeven && !yeven) {\n            return -1;\n        }\n        if\
  \ (!xodd && !yodd) {\n            return -1;\n        }\n        if (yeven && !xeven)\
  \ {\n            return xend;\n        }\n        if (yodd && !xodd) {\n       \
  \     return yend;\n        }\n        return -1;"
- "        int max_so_far = x;\n        int min_so_far = y;\n        if (x < y)\n\
  \            max_so_far = y;\n        if (y > x)\n            min_so_far = x;\n\n\
  \        int range_x = max_so_far - min_so_far;\n        int range_y = max_so_far\
  \ - min_so_far;\n        while (range_x <= range_y) {\n            int diff = max_so_far\
  \ - min_so_far;\n            int divisor = 1;\n            if (diff % 2 == 0)\n\
  \                divisor = 2;\n            if (diff % 3 == 0)\n                divisor\
  \ = 3;\n            if (diff % 5 == 0)\n                divisor = 5;\n         \
  \   if (diff % 7 == 0)\n                divisor = 7;\n            if (diff % 11\
  \ == 0)\n                divisor = 11;\n            if (diff % 13 == 0)\n      \
  \          divisor = 13;\n            if (diff % 17 == 0)\n                divisor\
  \ = 17;\n            if (diff % 19 == 0)\n                divisor = 19;\n      \
  \      if (diff % 23 == 0)\n                divisor = 23;\n            if (diff\
  \ % 29 == 0)\n                divisor = 29;\n            if (diff % 31 == 0)\n \
  \               divisor = 31;\n            if (diff % 37 == 0)\n               \
  \ divisor = 37;\n            if (diff % 41 == 0)\n                divisor = 41;\n\
  \            if (diff % 43 == 0)\n                divisor = 43;\n            if\
  \ (diff % 47 == 0)\n                divisor = 53;\n            if (diff % 53 ==\
  \ 0)\n                divisor = 53;\n            if (diff % 59 == 0)\n         \
  \       divisor = 59;\n            if (diff % 61 == 0)\n                divisor\
  \ = 61;\n            if (diff % 67 == 0)\n                divisor = 67;\n      \
  \      if (diff % 71 == 0)\n                divisor = 71;\n            if (diff\
  \ % 73 == 0)\n                divisor = 73;\n            if (diff % 79 == 0)\n \
  \               divisor = 79;\n            if (diff % 83 == 0)\n               \
  \ divisor = 83;\n            if (diff % 89 == 0)\n                divisor = 89;\n\
  \            if (diff % 97 == 0)\n                divisor = 99;\n            if\
  \ (diff % 101 == 0)\n                divisor = 101;\n            if (diff % 103\
  \ == 0)\n                divisor = 103;\n            if (diff % 109 == 0)\n    \
  \            divisor = 109; \n            if (diff % 113 == 0)\n               \
  \ divisor = 113;\n            if (diff % 121 == 0)\n                divisor = 121;\n\
  \            if (diff % 127 == 0)\n                divisor = 127;\n            if\
  \ (diff % 131 == 0)\n                divisor = 131;\n            if (diff % 137\
  \ == 0)\n                divisor = 137;\n            if (diff % 141 == 0)\n    \
  \            divisor = 141;\n            if (diff "
- "        int maxEven = -1;\n        int minEven = -1;\n        if(x <= y) {\n  \
  \          minEven = x;\n            maxEven = y;\n        } else {\n          \
  \  minEven = y;\n            maxEven = x;\n        }\n        for(int i = minEven;\
  \ i != maxEven; i++) {\n            if(maxEven % i == 0) {\n                maxEven\
  \ = maxEven / i;\n            }\n        }\n        return maxEven;"
- "        // Create a BigInteger: num = x and den = y\n        BigInteger num = BigInteger.valueOf(x);\n\
  \        BigInteger den = BigInteger.valueOf(y);\n\n        // Find the lowest common\
  \ denominator using Euclid's algorithm\n        BigInteger gcd = num.gcd(den);\n\
  \n        // Check if the gcd equals one: gcd(x, y) == 1\n        if (gcd.compareTo(BigInteger.ONE)\
  \ == 0) {\n            // Return x if gcd equals one\n            return x;\n  \
  \      } else {\n            // Return y if gcd equals one\n            return y;\n\
  \        }"
- "        if (x >= y) {\n            return -1;\n        }\n        int small = x;\n\
  \        int smallNum = 1;\n        int big = y;\n        int bigNum = 1;\n    \
  \    int even = 1;\n        while (even <= x) {\n            while (even <= y &&\
  \ even <= x) {\n                even *= 2;\n                bigNum++;\n        \
  \    }\n            if (bigNum == big) {\n                return small;\n      \
  \      }\n            while (even <= y && even >= x) {\n                even *=\
  \ 2;\n                smallNum++;\n            }\n            if (smallNum == small)\
  \ {\n                return big;\n            }\n            big = bigNum;\n   \
  \         bigNum = smallNum;\n            small = smallNum;\n            smallNum\
  \ = bigNum;\n        }\n        return -1;"
- "        // Write your code here\n        int max_num;\n        if(x <= 0 || y <=\
  \ 0){\n            max_num = 0;\n        }\n        else if(x > y ){\n         \
  \   max_num = -1;\n        }\n        else if(x % 2 == 0 && y % 2 == 0){\n     \
  \       int num = (x + y) / 2;\n            if(num % 2 == 0){\n                max_num\
  \ = num;\n            }\n        }\n        else if(x % 2 != 0 && y % 2 != 0){\n\
  \            max_num = -1;\n        }\n        else if(x % 2 != 0 && y % 2 != 0){\n\
  \            max_num = -1;\n        }\n        else if(x % 2 == 0 && y % 2 != 0){\n\
  \            max_num = -1;\n        }\n        return max_num;"
- "        int maxNum = -1;\n        for (int i = x; i <= y; i++) {\n            if\
  \ ((i / 2) != 0) {\n                if ((i & 1) == 0) {\n                    maxNum\
  \ = i;\n                }\n            }\n        }\n        return maxNum;"
- "        int z = 0; \n        // For a positive integer n between x and y inclusive,\
  \ \n        // we can just divide it by 2 and see if the remainder is 0\n      \
  \  // If it is, then that means n is even.\n        // If it is not, then n is odd\
  \ and we should add 1 to z\n        for (int i = x; i <= y; i++) {\n           \
  \ if (i % 2 != 0) {\n                z = z + 1;\n            } else {\n        \
  \        z = z - 1;\n            }\n        }\n        // If z is 0, then no even\
  \ numbers are between x and y.\n        if (z == 0) {\n            return -1;\n\
  \        } else {\n            return z;\n        }"
- "        int maxEven = 1;\n        for (int i = x; i <= y; i++) {\n            if\
  \ ((i & 1) == 1) {\n                maxEven = i;\n            }\n        }\n   \
  \     return maxEven;"
- "        if (x > y) {\n            int temp = y;\n            y = x;\n         \
  \   x = temp;\n        }\n\n        int ans = x + y - 1;\n        while (ans > x\
  \ && ans % 2 == 0) {\n            ans -= 2;\n        }\n        while (ans > y &&\
  \ ans % 2 != 0) {\n            ans -= 1;\n        }\n\n        if (ans == x) return\
  \ x;\n        if (ans == y) return y;\n        if (ans < x) return -1;\n       \
  \ return ans;"
- "        // Write your code here\n        if(x > y){\n            if((x % 2) ==\
  \ 0){\n                if(x < y){\n                    return x;\n             \
  \   }\n                else{\n                    return y - 1;\n              \
  \  }\n            }\n        }\n        else{\n            if((y % 2) == 0){\n \
  \               if(x > y){\n                    return y;\n                }\n \
  \               else{\n                    return x - 1;\n                }\n  \
  \          }\n        }\n        \n        return -1;"
- "        int result = 0;\n        for (int i = 0; i <= y; i++) {\n            if\
  \ (i % 2 == 0) {\n                int result = i;\n            }\n        }\n  \
  \      return result;"
- "        if(x>y) {\n            int temp=x;\n            x=y;\n            y=temp;\n\
  \        }\n        int ans = -1;\n        for(int i=x;i<=y;i++) {\n           \
  \ if((x%i)==0 && (y%i)==0) {\n                ans=i;\n            }\n        }\n\
  \        return ans;"
- '        return Math.min(Math.max(x + y - 2*x, 0), x);'
- '        return Math.max(Math.min(x, y), Math.max(x, y));'
- "        Map<Integer, Integer> evens = new HashMap<>();\n        for (int i = x;\
  \ i <= y; i++) {\n            if (i % 2 == 0) {\n                if (evens.containsKey(i))\
  \ {\n                    evens.put(i, evens.get(i) + 1);\n                } else\
  \ {\n                    evens.put(i, 1);\n                }\n            } else\
  \ {\n                if (evens.containsKey(i)) {\n                    evens.put(i,\
  \ evens.get(i) - 1);\n                } else {\n                    evens.put(i,\
  \ -1);\n                }\n            }\n        }\n        int max = -1;\n   \
  \     boolean found = false;\n        for (Map.Entry<Integer, Integer> entry : evens.entrySet())\
  \ {\n            int val = entry.getValue();\n            if (val > 0) {\n     \
  \           if (val > max) {\n                    max = val;\n                 \
  \   found = true;\n                }\n            } else if (val < 0) {\n      \
  \          if (!found) {\n                    return -1;\n                }\n  \
  \          }\n        }\n        return max;"
- "        int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        int\
  \ range = max - min + 1;\n        System.out.println(\"range: \" + range);\n\n \
  \       for(int i = min + 1; i <= max; i++) {\n            System.out.println(\"\
  i: \" + i);\n            for(int j = 1; j <= range; j++) {\n                System.out.println(\"\
  j: \" + j);\n                if(i % 2 == 0 && j % 2 == 0) {\n                  \
  \  return i;\n                }\n            }\n        }\n\n        return -1;"
- "        if (x > y) {\n            return -1;\n        }\n        int max = x;\n\
  \        while (true) {\n            max = max * x + y;\n            if (max > y)\
  \ {\n                return -1;\n            }\n            int remainder = max\
  \ % y;\n            if (remainder == 0) {\n                return max;\n       \
  \     }\n            x = x + 1;\n        }"
- "        // If y > x, then swap them\n        if (y > x) {\n            int temp\
  \ = x;\n            x = y;\n            y = temp;\n        }\n        // Initialize\
  \ max with x and y \n        int max = x;\n        // Go through all even numbers\
  \ one by one starting from max and \n        // increment it by one until it becomes\
  \ greater or equal to y\n        for (int i = max; i != y; i = i + 2)\n        \
  \    max = i;\n        // If max is greater than or equal to y, then return it\n\
  \        if (max >= y)\n            return max;\n        // Else return -1\n   \
  \     return -1;"
- "        if (x >= 0 && y >= 0) {\n            if (x >= y) {\n                return\
  \ x;\n            } else {\n                return y;\n            }\n        }\
  \ else {\n            return -1;\n        }"
- "        Set<Integer> nums = new HashSet<>();\n        int result = -1;\n\n    \
  \    // Find out how many even numbers are in the range\n        for (int i = x;\
  \ i <= y; i++) {\n            if (i % 2 == 0) {\n                nums.add(i);\n\
  \            }\n        }\n\n        // If no even numbers in range were found,\
  \ return -1\n        if (nums.isEmpty()) {\n            return -1;\n        }\n\n\
  \        // Sort the numbers and try to find the one that is even\n        nums.stream().sorted().forEach(i\
  \ -> {\n            if (i % 2 == 0) {\n                result = i;\n           \
  \ }\n        });\n\n        // Return the result value\n        return result;"
- "        // Declare and initialize your variables:\n        int result = 0;\n  \
  \      // Declare and initialize your ArrayList:\n        ArrayList<Integer> list\
  \ = new ArrayList<>();\n        // Insert values into list:\n        for (int i\
  \ = x; i <= y; i++) {\n            list.add(i);\n        }\n        // Iterate through\
  \ the ArrayList\n        for (int i = 0; i < list.size(); i++) {\n            //\
  \ If number is even, increase result by 1 and remove it from the\n            //\
  \ ArrayList:\n            if (list.get(i) % 2 == 0) {\n                result +=\
  \ list.get(i);\n                list.remove(i);\n            }\n        }\n    \
  \    // If list is not empty, return -1\n        if (list.size() > 0) {\n      \
  \      return -1;\n        }\n        // Return result\n        return result;"
- "        if (x > y) {\n            int temp = x;\n            x = y;\n         \
  \   y = temp;\n        }\n        if (x > y) {\n            return -1;\n       \
  \ }\n        // Initialize result to -1, the biggest even number that is\n     \
  \   // smaller than or equal to x and larger than or equal to y\n        int result\
  \ = -1;\n        // Loop over all even numbers [x, y] inclusive\n        for (int\
  \ i = x; i <= y; i += 2) {\n            // If this is the biggest even number smaller\
  \ or equal to x and bigger\n            // than or equal to y, then update result\
  \ to i\n            if (result == -1 || i > result) {\n                result =\
  \ i;\n            }\n        }\n        return result;"
- "        \n        int max = -1;\n        int xMax = x;\n        int yMax = y;\n\
  \n        for (int i = x; i <= y; i++) {\n            if ((i&1) == 0) {\n      \
  \          if (max < i) {\n                    max = i;\n                }\n   \
  \             xMax = i;\n                yMax = y;\n            }\n\n          \
  \  int tempMax = i;\n            if (tempMax > y) {\n                yMax = tempMax;\n\
  \            }\n\n            int tempX = x;\n            if (tempX > y) {\n   \
  \             xMax = tempX;\n            }\n\n            int tempY = y;\n     \
  \       if (tempY > x) {\n                yMax = tempY;\n            }\n       \
  \ }\n\n        if (max > 0) {\n            return max;\n        }\n\n        if\
  \ (xMax < y) {\n            return xMax;\n        }\n\n        return yMax;"
- "        int max = x;\n        int min = y;\n        while (max < min) {\n     \
  \       int m = min + (max - min) / 2;\n            if (m % 2 == 0) {\n        \
  \        max = m;\n            }\n            else {\n                min = m;\n\
  \            }\n        }\n        return max;"
- "        List<Integer> list = new ArrayList<>();\n        for (int i = x; i <= y;\
  \ i++) {\n            list.add(i);\n        }\n        // sort array in ascending\
  \ order\n        Collections.sort(list);\n        // return largest even number\n\
  \        for(int i = 1; i < list.size(); i++) {\n            if(list.get(i) % 2\
  \ == 0) {\n                return list.get(i);\n            }\n        }\n     \
  \   return -1;"
- "        // Your code here\n        if((x<y) && (y<x)) {\n            int temp =\
  \ Math.max(x,y);\n            return temp;\n        }\n        return -1;"
- "        // Write your code here\n        if(x > y){\n            int xTemp = x;\n\
  \            x = y;\n            y = xTemp;\n        }\n        if(x == y || x ==\
  \ 0 || y == 0){\n            return x;\n        }\n        int evenX = (int) Math.pow(2,x);\n\
  \        int evenY = (int) Math.pow(2,y);\n        for(int i = 2; i <= Math.max(evenX,\
  \ evenY); i++){\n            if((evenX%i == 0) && (evenY%i == 0)){\n           \
  \     if(i == evenX && i == evenY){\n                    return i;\n           \
  \     }\n            }\n        }\n        return -1;"
- "        int[] arr = new int[2];\n        arr[0] = Math.min(x, y);\n        arr[1]\
  \ = Math.max(x, y);\n        for (int i = 0; i < 2; ++i) {\n            if (arr[i]\
  \ == arr[0]) {\n                return arr[1];\n            }\n        }\n     \
  \   return -1;"
- "        if (x >= y) {\n            return -1;\n        }\n        List<Integer>\
  \ evenInts = new ArrayList<>();\n        for (int i = x; i <= y; i++) {\n      \
  \      if (i % 2 == 0) {\n                evenInts.add(i);\n            }\n    \
  \    }\n        int highestEvenInt = Collections.max(evenInts);\n        return\
  \ highestEvenInt;"
- "        int biggestEvenNum = -1;\n        for (int i = x; i <= y; i++) {\n    \
  \        if (i%2 == 0 && i != biggestEvenNum) {\n                biggestEvenNum\
  \ = i;\n            }\n        }\n        return biggestEvenNum;"
- "        int maxEven = 0;\n        if (x < 0 || y < 0)\n            return -1;\n\
  \        else if(x > y)\n            return -1;\n        else if(x > 0 && y > 0){\n\
  \            if(x%2==0 && y%2==0)\n                maxEven = x;\n            else\n\
  \                maxEven = y;\n        }\n        else if(x > 0 && y == 0)\n   \
  \         return -1; //y is not bigger than x\n        return maxEven;"
- "        if (x % 2 == 0 && y % 2 == 0) {\n            if (y > x) {\n           \
  \     System.out.println(x + \" \" + y);\n                return x;\n          \
  \  }\n            if (x < y) {\n                System.out.println(y + \" \" + x);\n\
  \                return y;\n            }\n        }\n        if (x % 2 == 0) {\n\
  \            System.out.println(x + \" \" + y);\n            return x;\n       \
  \ }\n        if (y % 2 == 0) {\n            System.out.println(y + \" \" + x);\n\
  \            return y;\n        }\n        return -1;"
- "        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n\
  \        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n\
  \        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n\
  \        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n\
  \        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n\
  \        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n\
  \        int y = 0;\n        int z = 0;\n        ArrayList arrayList = new ArrayList();\n\
  \        // The first loop checks each digit of the two numbers \n        // to\
  \ see whether they're even or odd.\n        for(int i = 0; i < x; i++){\n      \
  \      int a = Math.abs(x - i);\n            if (a > 0)\n            {\n       \
  \         arrayList.add(i);\n            }\n            else if(a < 0)\n       \
  \     {\n                arrayList.add(-i);\n            }\n        }\n        for(int\
  \ i = 0; i < y; i++){\n            int b = Math.abs(y - i);\n            if (b >\
  \ 0)\n            {\n                arrayList.add(i);\n            }\n        \
  \    else if(b < 0)\n            {\n                arrayList.add(-i);\n       \
  \     }\n        }\n        // The second loop picks an even number from the even\
  \ list \n        // and an odd number from the odd list.\n        // Then, the third\
  \ loop checks whether one or the other of the \n        // two numbers is greater\
  \ than the other and returns the biggest\n        // number of the two numbers.\n\
  \        for(int i = 0; i < arrayList.size(); i++){\n            int a = (int)arrayList.get(i);\n\
  \            if((a % 2 == 0) && (a > y) || (a < y) && (a % 2 == 1)){\n         \
  \       a = Math.abs(a - y);\n            }\n            int b = (int)arrayList.get(i);\n\
  \            if((b % 2 == 0) && (b > x) || (b < x) && (b % 2 == 1)){\n         \
  \       b = Math.abs(b - x);\n            }\n            if((a > b) && (a % 2 ==\
  \ 1)){\n                a = Math.abs(a - b);\n            }\n            if((b >\
  \ a) && (b % 2 == 1)){\n                b = Math.abs(b - a);\n            }\n  \
  \          if((a % 2 == 0) && (b > x)){\n                a = Math.abs(a - x);\n\
  \            }\n            if((b > 0) && (b % 2 == 1)){\n                b = Math.abs(b\
  \ - x);\n            }\n            if((a % 2 == 0) && (b > y)){\n             \
  \   a = Math.abs(a - y);\n            }\n            if((b > 0) && (b % 2 == 1)){\n\
  \                b = Math.abs(b - y);\n            }\n            if((a % 2 == 0)\
  \ && (b > x)){\n                "
- "        int z = (x ^ y);\n        int w = (z / x);\n        int u = (z / y);\n\
  \        int v = u;\n        int w = w;\n        int u = u;\n        if (w > 1)\
  \ {\n            v = v;\n            u++;\n        }\n        if (u > 1) {\n   \
  \         w = w;\n            v++;\n        }\n        if (v > 1) {\n          \
  \  v = v;\n            w++;\n        }\n        if (w > 1) {\n            w = w;\n\
  \        }\n        if (v > 1) {\n            v = v;\n        }\n        if (u >\
  \ 1) {\n            u = u;\n        }\n        if (w > 1) {\n            w = w;\n\
  \        }\n        if (v > 1) {\n            v = v;\n        }\n        if (u >\
  \ 1) {\n            u = u;\n        }\n        if (w > 1) {\n            w = w;\n\
  \        }\n        if (v > 1) {\n            v = v;\n        }\n        if (u >\
  \ 1) {\n            u = u;\n        }\n        if (w > 1) {\n            w = w;\n\
  \        }\n        if (v > 1) {\n            v = v;\n        }\n        if (u >\
  \ 1) {\n            u = u;\n        }\n        if (w > 1) {\n            w = w;\n\
  \        }\n        if (v > 1) {\n            v = v;\n        }\n        if (u >\
  \ 1) {\n            u = u;\n        }\n        if (w > 1) {\n            w = w;\n\
  \        }\n        if (v > 1) {\n            v = v;\n        }\n        if (u >\
  \ 1) {\n            u = u;\n        }\n        if (w > 1) {\n            w = w;\n\
  \        }\n        if (v > 1) {\n            v = v;\n        }\n        if (u >\
  \ 1) {\n            u = u;\n        }\n        if (w > 1) {\n            w = w;\n\
  \        }\n        if (v > 1) {\n            v = v;\n        }\n        if (u >\
  \ 1) {\n            u = u;\n        }\n        if (w > 1) {\n            w = w;\n\
  \        }\n        if (v > 1) {\n            v = v;\n        }\n        if (u >\
  \ 1) {\n            u = u;\n        }\n        if (w > 1) {\n            w = w;\n\
  \        }\n        if (v > 1) {\n            v = v;\n        }\n        if (u >\
  \ 1) {\n            u = u;\n        }\n        if (w > 1) {\n            w = w;\n\
  \        }\n        if (v > 1) {\n            v = v;\n        }\n        if (u >\
  \ 1) {\n            u = u;\n        }\n        if (w > 1) {\n            w = w;\n\
  \        }\n        if (v > 1) {\n            v = v;\n        }\n        if (u >\
  \ 1) {\n            u = u;\n        }\n        if (w > 1) {\n            w = w;\n\
  \        }\n"
- "        int evens = 0;\n        int odds = 1;\n        while (evens < y && odds\
  \ < y) {\n            if (evens % x == 0 && odds % x == 0)\n                return\
  \ evens;\n            evens += 2;\n            odds += 2;\n        }\n        return\
  \ -1;"
- "        int even = 0;\n        int high = Integer.MAX_VALUE;\n        for (int\
  \ i = x; i <= y; i++) {\n            if (x % 2 == 0 && y % 2 == 1) {\n         \
  \       even++;\n            } else if (x % 2 == 1 && y % 2 == 0) {\n          \
  \      even++;\n            } else {\n                if (even > high) {\n     \
  \               high = even;\n                }\n                even = 0;\n   \
  \         }\n        }\n        if (even > high) {\n            return -1;\n   \
  \     }\n        return high;"
- "        int m = x;\n        int n = y;\n        int p = -1;\n        while (m !=\
  \ n) {\n            if (m % 2 == 0) {\n                m = m / 2;\n            }\
  \ else {\n                n = n / 2;\n            }\n        }\n        if (m ==\
  \ n) {\n            p = m;\n        }\n        return p;"
- "        int res = Math.max(x, y);\n        if (res > x) {\n            res = -res;\n\
  \        }\n        \n        for (int i = res; i > 0; i--) {\n            if (res\
  \ / i % 2 == 0) {\n                return i;\n            }\n        }\n       \
  \ return -1;"
- "        int result = 0;\n        int n = Math.min(x, y);\n        int m = Math.max(x,\
  \ y);\n        do {\n            int rem = n % 2 == 0 ? 0 : 2;\n            int\
  \ temp = (n - rem) / 2;\n            if (temp > m)\n                result += temp;\n\
  \            n = temp;\n        } while (temp < m);\n        return result;"
- "        int xNum = x - 2;\n        int yNum = y - 2;\n        int xEven = x - xNum;\n\
  \        int yEven = y - yNum;\n        boolean isEven = true;\n        if (yEven\
  \ > xEven) {\n            if (yEven == xEven) {\n                isEven = false;\n\
  \            } else {\n                int tmpNum = y - yEven;\n               \
  \ while (tmpNum < xEven) {\n                    tmpNum += y;\n                }\n\
  \                yEven = tmpNum;\n            }\n        }\n\n        int evenNum\
  \ = (int) ((yEven * yNum) + xEven * xNum);\n        int maxEven = 1;\n        boolean\
  \ maxEvenSet = false;\n        while(isEven) {\n            int tmpEven = evenNum;\n\
  \            evenNum -= evenNum / 2;\n            if (evenNum == 0) {\n        \
  \        maxEvenSet = true;\n            }\n            if (tmpEven > maxEven) {\n\
  \                maxEven = tmpEven;\n            }\n            isEven = !isEven;\n\
  \        }\n        if(!maxEvenSet) {\n            return -1;\n        } else {\n\
  \            return maxEven;\n        }"
- "        // Write your code here\n        return Math.max(Math.min(x, y), Math.max(x\
  \ % y, y % x));"
- "        int lower = Math.min(x, y);\n        int upper = Math.max(x, y);\n\n  \
  \      if (upper < lower) return -1;\n        if (lower + 1 == upper) return lower;\n\
  \        return lower + chooseNum(lower + 1, upper);"
- '        return Math.max(Math.min(Math.max(x, y), x + y), x - y);'
- "        int n = (int)Math.pow(y, 2) - Math.pow(x, 2);\n        if (n == 0)\n  \
  \          return -1;\n        if (n == y)\n            return x;\n        if (n\
  \ == -y)\n            return x + y;\n        int z = (int)Math.pow(x, 2) + Math.pow(y,\
  \ 2) - 1;\n        if (z % 2 == 0)\n            return choose_num(x, y + 1);\n \
  \       if (z / 2 == y)\n            return x + choose_num(x, y - 1);\n        return\
  \ choose_num(x + 1, y + 1);"
- "        int n = ((x+y)/2) % 2 == 0 ? x+y+1 : (x+y-1)+1;\n        return n;"
- "        // Write your code here\n\n        int a = (int) Math.ceil( Math.log(x)\
  \ / Math.log(2) );\n        int b = (int) Math.ceil( Math.log(y) / Math.log(2) );\n\
  \        int c = x - Math.pow(2, a);\n        int d = y - Math.pow(2, b);\n    \
  \    return Math.max(a, b, c) + Math.max(d,e);"
- "        int i = 1;\n        int res = -1;\n        while (i <= x && i <= y) {\n\
  \            int rem = x % i;\n            if (rem == 0) {\n                res\
  \ = i;\n                x = x;\n            }\n            i++;\n        }\n   \
  \     return res;"
- "        int mid = (x + y) >>> 1;\n        if (mid < 0 || x > y)\n            return\
  \ -1;\n        if (mid > 0)\n            return mid;\n        else if (x == y)\n\
  \            return x;\n        else\n            return chooseNum(x - 1, y);"
- "        if(x<y) \n            return -1;\n\n        int m=((x-(y*y))/(Math.pow((x*x),(y*y))));\n\
  \        int b=y*y;\n        int r=x*x;\n        int a=0;\n        while(true){\n\
  \            int r=r-b;\n            int q=(int)(r/y);\n            int c=r-y*q;\n\
  \            if(c>0)\n                a+=c;\n            int p=y*y+q;\n        \
  \    if(m<p && p>=y && p>=x-y && p>=0)\n                return a;\n            else\n\
  \                m+=2;\n            b=y*m;\n        }"
- "        int result = -1;\n        if (x > y) {\n            int tmp = x;\n    \
  \        x = y;\n            y = tmp;\n        }\n        if (x % 2 == 0) {\n  \
  \          for (int i = x; i >= y; i--) {\n                if (i % 2 == 0 && i >\
  \ 0) {\n                    result = i;\n                    break;\n          \
  \      }\n            }\n        }\n        return result;"
- "        List<Integer> evens = IntStream.rangeClosed(2, x)\n                .filter(num\
  \ -> num % 2 == 0).boxed().collect(Collectors.toList());\n        List<Integer>\
  \ odds = IntStream.rangeClosed(2, y)\n                .filter(num -> num % 2 ==\
  \ 1).boxed().collect(Collectors.toList());\n        if (evens.size() > odds.size())\n\
  \            return evens.get(evens.size() - 1);\n        else\n            return\
  \ odds.size() > evens.size() ? evens.get(evens.size() - 1) : -1;"
- "        // Write your code here\n        long num = x-1;\n        long tempNum\
  \ = num;\n        while(tempNum>y) {\n            if(num%2==0){\n              \
  \  num--;\n            }\n            else{\n                num++;\n          \
  \  }\n        }\n        return num;"
- "        Optional<Integer> evenNum = Stream.range(x,y)\n            .filter(x ->\
  \ x % 2 == 0)\n            .filter(x -> x > 0 && x < y)\n            .filter(x ->\
  \ x < y && (x % 2 == 0 || x > y))\n            .findAny();\n        return evenNum.orElse(-1);"
- "        int[] arr1 = new int[]{x,y};\n        Arrays.sort(arr1);\n        int min\
  \ = 0;\n        int max = arr1[0]; \n        boolean flag = true;\n        while(max\
  \ != min) {\n            if((min+max)%2 == 0) {\n                if(arr1[0] > arr1[1])\
  \ {\n                    max = arr1[1];\n                    flag = true;\n    \
  \            }\n                if(arr1[0] < arr1[1]) {\n                    min\
  \ = arr1[0];\n                    flag = false;\n                }\n           \
  \ }\n            if(flag) {\n                if(arr1[0] < arr1[1]) {\n         \
  \           max = arr1[1];\n                }\n                if(arr1[0] > arr1[1])\
  \ {\n                    min = arr1[0];\n                }\n            }\n    \
  \    }\n        return max;"
- "        int ans = -1;\n        int m = 1;\n        while(m < y) {\n           \
  \ while(m <= y && m == y) {\n                ans = m;\n                m++;\n  \
  \          }\n        }\n        if(ans == -1) ans = m;\n        return ans;"
- "        if (y >= x)\n            return -1;\n\n        // Create a range [x, y]\
  \ and store it in a list\n        List<Integer> range = new ArrayList<Integer>();\n\
  \        for (int i = x; i <= y; i++)\n            range.add(i);\n        \n   \
  \     // Sort the list\n        Collections.sort(range);\n\n        // Return the\
  \ first even number from the sorted list\n        return range.get(0);"
- "        int higher = y;\n        int lower = x;\n        while(lower < higher){\n\
  \            lower = x + 1;\n            upper = y - 1;\n            while(lower\
  \ < higher){\n                while(lower < higher){\n                    lower\
  \ = x + 1;\n                    upper = y - 1;\n                    if(upper < lower){\n\
  \                        x = lower + 1;\n                        y = upper + 1;\n\
  \                        upper = y - 1;\n                        lower = x + 1;\n\
  \                        upper = y - 1;\n                    }\n               \
  \     lower = lower * 2;\n                    upper = lower * 2;\n             \
  \   }\n                if(lower < higher){\n                    x = lower + 1;\n\
  \                    y = upper + 1;\n                    upper = y - 1;\n      \
  \              lower = x + 1;\n                    upper = y - 1;\n            \
  \    }\n                lower = lower * 2;\n                upper = lower * 2;\n\
  \            }\n            if(lower < higher){\n                x = lower + 1;\n\
  \                y = upper + 1;\n                upper = y - 1;\n              \
  \  lower = x + 1;\n                upper = y - 1;\n            }\n            lower\
  \ = lower * 2;\n            upper = lower * 2;\n        }\n        if(lower > higher){\n\
  \            return -1;\n        }\n        return lower;"
- "        Set<Integer> evens = new HashSet<>();\n        for(int i = x; i <= y; i++){\n\
  \            int mod = i % 2 == 0 ? i : -1;\n            if(mod != -1){\n      \
  \          evens.add(mod);\n            }\n        }\n        int result = -1;\n\
  \        for(int i : evens){\n            result = i;\n            break;\n    \
  \    }\n        return result;"
- "        if (x == 0 || y == 0) {\n            return -1;\n        } else if (x >\
  \ y) {\n            int temp = x;\n            x = y;\n            y = temp;\n \
  \       }\n        int left = getNextNumber(x);\n        int right = getNextNumber(y);\n\
  \        int evens = 0;\n        int odds = 0;\n        while (left != -1 && right\
  \ != -1) {\n            if (left % 2 == 0 && right % 2 == 0) {\n               \
  \ evens = evens + 1;\n                left /= 2;\n                right /= 2;\n\
  \            } else if (left % 2 == 1 && right % 2 == 1) {\n                odds\
  \ = odds + 1;\n                left /= 2;\n                right /= 2;\n       \
  \     } else if (left % 2 == 1 && right % 2 != 1) {\n                odds = odds\
  \ + 1;\n                right /= 2;\n            } else if (left % 2 != 1 && right\
  \ % 2 != 1) {\n                evens = evens + 1;\n                left /= 2;\n\
  \            }\n        }\n        if (evens > odds) {\n            return evens;\n\
  \        } else {\n            return odds;\n        }"
- "        int result = 0;\n        for (int i = x; i <= y; i++) {\n            if\
  \ (x % 2 == 0 && y % 2 == 0) {\n                int temp = 0;\n                for\
  \ (int j = 1; j <= y / 2; j++) {\n                    temp = temp * j;\n       \
  \         }\n                if (temp == x && temp % 2 == 0)\n                 \
  \   result = i;\n            }\n        }\n        return result;"
- "        if (x == 0 || y == 0) {\n            return -1;\n        }\n        int\
  \ max_num = x;\n        int min_num = y;\n        while (max_num < min_num) {\n\
  \            max_num = max_num * 2 + 1;\n            int temp = max_num;\n     \
  \       if (temp % 2 == 0) {\n                max_num = temp;\n            }\n \
  \           temp = min_num;\n            if (temp % 2 == 0) {\n                min_num\
  \ = temp;\n            }\n        }\n        return max_num;"
- "        if (x > y || x < 0 || y < 0) {\n            return -1;\n        }\n   \
  \     int mid = (x + y) / 2;\n        int even = 1;\n        int odd = 0;\n    \
  \    while(even <= mid && odd <= mid) {\n            if (even % 2 == 1) {\n    \
  \            even = even + 1;\n            } else if (odd % 2 == 1) {\n        \
  \        odd = odd + 1;\n            } else {\n                if (even > odd) {\n\
  \                    return even;\n                } else {\n                  \
  \  return odd;\n                }\n            }\n        }\n        return -1;"
- "        if (x < y && x < y) {\n            return x;\n        }\n\n        if (x\
  \ >= y) {\n            return -1;\n        }\n\n        if (x == y) {\n        \
  \    return x;\n        }\n\n        int evenNum = x % 2;\n        int oddNum =\
  \ y % 2;\n\n        if (evenNum == 0 && oddNum != 0) {\n            return y;\n\
  \        }\n\n        if (evenNum != 0 && oddNum == 0) {\n            return x;\n\
  \        }\n\n        if (evenNum == 0) {\n            return chooseNum(x + 1, y);\n\
  \        }\n\n        if (oddNum == 0) {\n            return chooseNum(x, y + 1);\n\
  \        }\n\n        if (evenNum != 0) {\n            return chooseNum(x, y + 1);\n\
  \        }\n\n        if (oddNum != 0) {\n            return chooseNum(x + 1, y);\n\
  \        }"
- "        int result = -1;\n        while(x <= y) {\n            if(isEven(x) &&\
  \ isEven(y)) {\n                result = x;\n                break;\n          \
  \  }\n            else if(isEven(x) && !isEven(y)) {\n                result = y;\n\
  \                break;\n            }\n            else if(!isEven(x) && isEven(y))\
  \ {\n                result = x;\n                break;\n            }\n      \
  \      else {\n                result = y;\n                break;\n           \
  \ }\n            x++;\n            y--;\n        }\n        return result;"
- "        int maxNum = x;\n        if (y == maxNum) {\n            return maxNum;\n\
  \        }\n        for (int i = x + 1; i <= y; i++) {\n            if (i % 2 !=\
  \ 0) {\n                maxNum = i;\n            }\n        }\n        return maxNum;"
- "        if(x >= y) {\n            int tmp1 = x;\n            int tmp2 = y;\n  \
  \          x = tmp2;\n            y = tmp1;\n        }\n        if(x <= 0) {\n \
  \           return -1;\n        }\n        int min = x;\n        while(x <= y) {\n\
  \            int tmp = (x + y + 1)/2;\n            if(isPrime(tmp)) {\n        \
  \        min = tmp;\n                x = tmp;\n            } else {\n          \
  \      break;\n            }\n        }\n        int tmp1 = x;\n        int tmp2\
  \ = y;\n        x = tmp2;\n        y = tmp1;\n        int tmp3 = min;\n        min\
  \ = tmp3;\n        while(x <= y) {\n            int tmp = (x + y + 1)/2;\n     \
  \       if(isPrime(tmp)) {\n                min = tmp;\n                x = tmp;\n\
  \            } else {\n                break;\n            }\n        }\n      \
  \  int tmp1 = x;\n        int tmp2 = y;\n        x = tmp2;\n        y = tmp1;\n\
  \        if(x >= y) {\n            return -1;\n        }\n        int tmp3 = min;\n\
  \        min = tmp3;\n        while(x <= y) {\n            int tmp = (x + y + 1)/2;\n\
  \            if(isPrime(tmp)) {\n                min = tmp;\n                x =\
  \ tmp;\n            } else {\n                break;\n            }\n        }\n\
  \        return min;"
- "        List<Integer> evenIntegers = new ArrayList<>();\n        evenIntegers.add(0);\n\
  \        int i = 1;\n        while (i <= y / 2) {\n            int j = 1;\n    \
  \        while (j <= (x / 2) / i) {\n                if (x / 2 % i == 0 && y % i\
  \ == 0) {\n                    evenIntegers.add(j);\n                }\n       \
  \         j++;\n            }\n            i++;\n        }\n        int maxIndex\
  \ = Collections.max(evenIntegers);\n        int even = evenIntegers.get(maxIndex);\n\
  \        if (even != 0)\n            return even;\n        else\n            return\
  \ -1;"
- "        if(x == y) {\n            return x;\n        }\n        if (x > y) {\n\
  \            x = y;\n            y = x;\n        }\n        int max = Math.max(x,\
  \ y);\n        int min = Math.min(x, y);\n        int difference = max - min;\n\
  \        while (difference > 0) {\n            int temp = max;\n            max\
  \ = min + difference;\n            min = temp;\n            difference = max - min;\n\
  \        }\n        if (min>y){\n            return -1;\n        }\n        return\
  \ min;"
- "        int result = -1;\n        if (x >= 0 && y >= 0) {\n            int max_x\
  \ = x;\n            int max_y = y;\n            while (max_x != max_y) {\n     \
  \           while (max_x % 2 == 0 && max_y % 2 == 0) {\n                    max_x\
  \ /= 2;\n                    max_y /= 2;\n                }\n                if\
  \ (max_x == max_y) {\n                    result = max_x;\n                    max_x++;\n\
  \                    max_y++;\n                } else {\n                    max_x++;\n\
  \                }\n            }\n        }\n        return result;"
- "        // Write your code here\n        if (x > y) {\n            int temp = x;\n\
  \            x = y;\n            y = temp;\n        }\n        if (x == y)\n   \
  \         return x;\n        if (x >= y)\n            while (x % 2 == 0) {\n   \
  \             x = x / 2;\n                if (x != y)\n                    x = x\
  \ - y;\n            }\n            else\n                while (y % 2 == 0) {\n\
  \                    y = y / 2;\n                    if (x != y)\n             \
  \           y = y - x;\n                }\n        if (x <= y)\n            while\
  \ (x % 2 == 0) {\n                x = x / 2;\n                if (x != y)\n    \
  \                x = x - y;\n            }\n            else\n                while\
  \ (y % 2 == 0) {\n                    y = y / 2;\n                    if (x != y)\n\
  \                        y = y - x;\n                }\n        return x;"
- "        int low = x;\n        int high = y;\n        while(low <= high) {\n   \
  \         int mid = (low + high) / 2;\n            if(mid % 2 == 0) {\n        \
  \        low = mid;\n            } else {\n                high = mid;\n       \
  \     }\n        }\n        if(low%2==0)\n            return low;\n        else\n\
  \            return -1;"
- "        int z = x + y;\n        if (z % 2 != 0) {\n            z = z - 1;\n   \
  \         int count = 0;\n            while (z % 2 != 0) {\n                z =\
  \ z / 2;\n                count++;\n            }\n            z = z + x;\n    \
  \        z = (z * z) + y;\n            return z;\n        } else {\n           \
  \ return -1;\n        }"
- "        if (x >= y) {\n            throw new IllegalArgumentException(\"X must\
  \ be greater than Y.\");\n        }\n        int result = x;\n        while (result\
  \ <= y) {\n            result = result + 1;\n            if (result % 2 != 0) {\n\
  \                result *= 2;\n            }\n        }\n        return result;"
- "        if (x >= y || y <= 0) {\n            return -1;\n        }\n\n        int\
  \ result = 0;\n        int max_value = x;\n\n        while (x <= y) {\n        \
  \    result += 2;\n            x += (x + max_value) % y;\n            max_value\
  \ = y;\n        }\n\n        return result;"
- '        return x.max(y);'
- '        return (x+y)/2;'
- "        if (x < y && x % 2 == 0)\n            return x;\n        if (y < x && y\
  \ % 2 == 0)\n            return y;\n        if (x < y)\n            return chooseNum(y,\
  \ x);\n        if (y < x)\n            return chooseNum(y, x);\n        if (x >\
  \ y)\n            return chooseNum(y, x);\n        return -1;"
- "        int result = -1;\n        if(x<=y && x%2==0 && y%2==0) {\n            result\
  \ = x;\n        } else if(y<=x && y%2==0 && x%2==0) {\n            result = y;\n\
  \        }\n        return result;"
- "        int maxnum = x;\n        if (x > y && maxnum != 0) {\n            maxnum\
  \ = y;\n        }\n        while (x * x <= y) {\n            if (maxnum % 2 == 0\
  \ && x > maxnum) {\n                maxnum = x;\n            } else {\n        \
  \        maxnum = y;\n            }\n            x /= 2;\n            y /= 2;\n\
  \        }\n        return maxnum;"
- "        if (x < y) {\n            int temp = x;\n            x = y;\n         \
  \   y = temp;\n        }\n        int max = Integer.MIN_VALUE;\n        int i =\
  \ 0;\n        int j = (2 * x) + 1;\n        while (i < y) {\n            int k =\
  \ j + 1;\n            if (i % 2 != 0) {\n                k = k + 1;\n          \
  \  }\n            int res = (int) Math.pow(k, 2);\n            i++;\n          \
  \  if (max < res) {\n                max = res;\n            }\n            j =\
  \ k;\n        }\n        return max;"
- "        // x is the first number (start range)\n        // y is the second number\
  \ (end range)\n        int num = x + y;\n        // If the number is smaller than\
  \ the start range, then return -1\n        if (num < x) {\n            return -1;\n\
  \        }\n        // If the number is greater than the end range, then return\
  \ -1\n        if (num > y) {\n            return -1;\n        }\n        // If the\
  \ number is in the range [x, y], then return it\n        if (num == x || num ==\
  \ y) {\n            return num;\n        }\n        // Otherwise, we need to loop\
  \ to find the largest even number in the range\n        do {\n            // Find\
  \ the nearest even number in the range [x, y]\n            int nextNum = x + y /\
  \ 2;\n            // If the nearest even number is in the range [x, y], then return\
  \ it\n            if (nextNum == x || nextNum == y) {\n                return nextNum;\n\
  \            }\n            // If the nearest even number is greater than y, then\
  \ increment y\n            if (nextNum > y) {\n                y = nextNum - y;\n\
  \            }\n            // If the nearest even number is less than y, then decrement\
  \ y\n            if (nextNum < y) {\n                y = nextNum - y;\n        \
  \    }\n        } while (num % 2 != 0);\n        // If the loop ran to completion,\
  \ then the number isn't even in the range\n        return -1;"
- "        int maxEven = 0;\n        for (int i = x; i <= y; i++) {\n            if\
  \ (x % i == 0 && y % i == 0 && i == y) {\n                return i;\n          \
  \  }\n        }\n        return maxEven;"
- "        if ((x > y) && (x % 2 == 0) && (y % 2 == 0)) {\n            return x;\n\
  \        } else if (x > y && x % 2 == 0 && y % 2 == 1) {\n            return y;\n\
  \        } else {\n            return -1;\n        }"
- "        int i, result = -1;\n        if (x == y)\n            return x;\n     \
  \   for (i = 0; i < y; i++) {\n            if (i % 2 == 0 && i > x) {\n        \
  \        return i;\n            }\n        }\n        return -1;"
- '        return (int) Math.max(Math.min(x, y), 0);'
- "        if (x > y) {\n            int tempX = x;\n            int tempY = y;\n\
  \            x = y;\n            y = tempX;\n        }\n        if (x % 2 != 0 &&\
  \ y % 2 == 0) {\n            return x;\n        }\n        else if (x % 2 == 0 &&\
  \ y % 2 != 0) {\n            return y;\n        }\n        return -1;"
- '        return ((x >= y && x % 2 == 0) || (x <= y && y % 2 == 0) ? x : -1);'
- "        int x_to_end = (x - 1) % y;\n        int y_to_end = (y - 1) % x;\n    \
  \    int x_to_start = (x - 1) + (x - 1) % x;\n        int y_to_start = (y - 1) +\
  \ (y - 1) % y;\n\n        if (x_to_start > x_to_end) {\n            int temp = x_to_end;\n\
  \            x_to_end = x_to_start;\n            x_to_start = temp;\n        }\n\
  \        if (y_to_start > y_to_end) {\n            int temp = y_to_end;\n      \
  \      y_to_end = y_to_start;\n            y_to_start = temp;\n        }\n     \
  \   int x_evenly_divisible = x;\n        int y_evenly_divisible = y;\n        int\
  \ temp;\n        while (x_evenly_divisible % 2 == 0 && y_evenly_divisible % 2 ==\
  \ 0) {\n            x_evenly_divisible /= 2;\n            y_evenly_divisible /=\
  \ 2;\n        }\n        for (int x_loop = 0; x_loop < y; x_loop++) {\n        \
  \    int x_evenly_divisible = (x_evenly_divisible + x_evenly_divisible + x_evenly_divisible\
  \ + x_evenly_divisible) % x;\n            for (int y_loop = 0; y_loop < x; y_loop++)\
  \ {\n                temp = (x_evenly_divisible + y_evenly_divisible) % 2;\n   \
  \             if (temp == 0) {\n                    return x_evenly_divisible +\
  \ y_evenly_divisible;\n                }\n                if (temp > 0) {\n    \
  \                x_evenly_divisible = (x_evenly_divisible + x_evenly_divisible +\
  \ x_evenly_divisible + x_evenly_divisible) % x;\n                }\n           \
  \ }\n        }\n        return -1;"
- "        //int a = (int) Math.ceil(Math.pow(x, 2) + (y * y));\n        BigInteger\
  \ a = BigInteger.valueOf(Math.ceil(Math.pow(x, 2) + (y * y)));\n        BigInteger\
  \ b = BigInteger.valueOf(y);\n\n        if (a.compareTo(b) <= 0) {\n           \
  \ return (int) a;\n        } else {\n            return -1;\n        }"
- "        Integer num = new Integer(x);\n        num = num.max(y);\n        if (num.equals(new\
  \ Integer(y))) {\n            System.out.println(\"Value is even\");\n        }\n\
  \        return num;"
- "        if ((x > y) && (x % 2 == 0) && (y % 2 == 0)) {\n            return y;\n\
  \        }\n        if ((x < y) && (x % 2 == 0) && (y % 2 == 0)) {\n           \
  \ return x;\n        }\n        if (x <= y) {\n            return choose_num(x,\
  \ y - 1);\n        } else {\n            return choose_num(y - 1, x);\n        }"
- "        int max = 0;\n        for (int i = x; i <= y; ++i) {\n            if (x\
  \ % i == 0) {\n                if (y % i == 0) {\n                    max = i;\n\
  \                    break;\n                }\n            }\n        }\n     \
  \   if (max == 0)\n            return -1;\n        System.out.println(max);\n  \
  \      return max;"
- "        if (x > y || x < 0 || y < 0) {\n            return -1;\n        }\n   \
  \     int[] arr = {x};\n        Arrays.sort(arr);\n        for(int i = 1;i<=y;i++)\
  \ {\n            if (arr[i] == (x+i)) {\n                arr.add(i);\n         \
  \       Arrays.sort(arr);\n            }\n        }\n        return arr[0];"
- "        if (x < y) return -1;\n        int num = x;\n        if (x % 2 == 0) {\n\
  \            while (num < y) {\n                num = num * 3 + 1;\n           \
  \     if (num % 2 == 0) break;\n            }\n        } else {\n            while\
  \ (num < y) {\n                num += 1;\n                if (num % 2 == 0) break;\n\
  \            }\n        }\n        return num;"
- "        if (x > y) {\n            int temp=x;\n            x=y;\n            y=temp;\n\
  \        }\n        ArrayList < Integer > arrayList = new ArrayList < > ();\n  \
  \      arrayList.add(y);\n        while (y >= x) {\n            if (x % 2 == 0)\
  \ {\n                arrayList.add(y);\n                break;\n            }\n\
  \            y = y - 1;\n        }\n        if (arrayList.size() < 2) {\n      \
  \      return -1;\n        } else {\n            return arrayList.get(0);\n    \
  \    }"
- "        List<Integer> nums = new ArrayList<>();\n        for (int i = x; i <= y;\
  \ i++) {\n            if (i%2 == 0)\n                nums.add(i);\n        }\n \
  \       System.out.println(nums);\n        int maxNumber = Collections.max(nums);\n\
  \        System.out.println(maxNumber);\n        System.out.println(maxNumber%2\
  \ == 0);\n        if(maxNumber%2 == 0)\n            return maxNumber;\n        else\n\
  \            return -1;"
- "        int x_even = x / 2;\n        int y_odd = y / 2;\n        if (x_even > y_odd)\
  \ {\n            return x_even;\n        } else {\n            return y_odd;\n \
  \       }"
- "        int ans = 0;\n        int m = Math.max(x, y);\n        int n = Math.min(x,\
  \ y);\n        if (m % 2 == 0 && n % 2 == 0) {\n            int a = m / 2;\n   \
  \         while (a <= n) {\n                if (a * 2 == m)\n                  \
  \  ans = a;\n                a++;\n            }\n        }\n        else if (n\
  \ % 2 == 0 && m % 2 == 0) {\n            int a = (n + m) / 2;\n            while\
  \ (a <= m) {\n                if (a * 2 == n)\n                    ans = a;\n  \
  \              a++;\n            }\n        }\n        return ans;"
- "        if((y > x) || (x == y)) {\n            return -1;\n        }\n        if(x\
  \ == y) {\n            return x;\n        }\n        int a = Integer.MIN_VALUE;\n\
  \        int b = Integer.MAX_VALUE;\n        int c = x;\n        int d = y;\n  \
  \      while(c <= d) {\n            a = b;\n            b = c;\n            c =\
  \ d;\n            d = (e.getNextNumber(a) - e.getNextNumber(b)) * (c - d);\n   \
  \     }\n        return a;"
- "        // Initialize the biggest number as 0\n        int max = x;\n        //\
  \ Initialize minimum number as -1\n        int min = -1;\n        // Initialize\
  \ biggest even number as 0\n        int maxEven = 0;\n\n        for (int i = x;\
  \ i <= y; i++) {\n            if (i % 2 == 0) {\n                maxEven = i;\n\
  \                min = i;\n            } else if (i > maxEven) {\n             \
  \   maxEven = i;\n            }\n        }\n\n        return maxEven;"
- "        int result = -1;\n        int lower = (x > y) ? x : y;\n        int higher\
  \ = (x < y) ? x : y;\n        while(lower <= higher) {\n            int mid = lower\
  \ + (higher - lower) / 2;\n            if(mid % 2 == 0)\n                higher\
  \ = mid;\n            else\n                lower = mid;\n        }\n        if(lower\
  \ == higher)\n            result = lower;\n        return result;"
- "        int minX = Math.min(x, y);\n        int maxX = Math.max(x, y);\n      \
  \  // To check if the number is within the range\n        if (minX >= maxX) {\n\
  \            return -1;\n        }\n        long sum = minX + maxX;\n        //\
  \ To check if the number is even\n        if (sum & 1 == 0) {\n            return\
  \ sum;\n        }\n        // To check if the number is odd\n        long sum1 =\
  \ sum - 1;\n        return sum1 + 1;"
- "        int even = -1;\n        \n        // If x or y is negative, return -1\n\
  \        if (x < 0 || y < 0) {\n            return -1;\n        }\n\n        //\
  \ Calculate the minimum number of steps to get the number in range\n        // [x,\
  \ y]\n        int steps = 1;\n        while (x <= y) {\n            steps++;\n \
  \           if (steps % 2 == 1) {\n                even = x;\n                break;\n\
  \            }\n            x++;\n        }\n\n        // If even isn't found, return\
  \ -1\n        if (even < 1) {\n            return -1;\n        }\n\n        // Calculate\
  \ how many steps we need to go to make even number even\n        // from the start\
  \ and add it to the number of steps to get even\n        // number from range.\n\
  \        int numSteps = steps + even - 1;\n        \n        // Start from the end\
  \ to make it faster\n        for (int i = even - 1; i > 0; i--) {\n            if\
  \ (numSteps % i == 0) {\n                numSteps /= i;\n                break;\n\
  \            }\n        }\n        \n        // Return the even number if x is even,\
  \ otherwise x is odd and the\n        // even number is in the range.\n        if\
  \ (x % 2 == 0) {\n            return even;\n        }\n        return even-1;"
- "        // your code here\n        int maxEven = -1;\n        for (int num = x;\
  \ num < y; num++) {\n            int count = 0;\n            while (num % 2 != 0)\
  \ {\n                num++;\n                count++;\n            }\n         \
  \   if (maxEven < count && count > maxEven)\n                maxEven = count;\n\
  \        }\n        return maxEven;"
- "        int a = Math.max(x, y);\n        int b = Math.min(x, y);\n        while(a\
  \ != b) {\n            if(a % 2 == 0) {\n                a = a / 2;\n          \
  \  } else {\n                b = (b + 1) / 2;\n            }\n        }\n      \
  \  return a;"
- '        return ((x + y) / 2 << 1) + 1;'
- "        // Initialize a bigger number that will be returned\n        int biggest\
  \ = 0;\n        // Test if the biggest even number can be computed\n        if ((x\
  \ & 1) == 0 && (y & 1) == 0) {\n            // If there is an even number in the\
  \ given range, increment the biggest\n            // even number to be the max of\
  \ the numbers x and y\n            biggest = Math.max(x, Math.max(y, biggest));\n\
  \        } else if (x != 0 && y != 0) {\n            // Otherwise, if there is an\
  \ even number in the given range, \n            // then test the numbers in the\
  \ range, and update the biggest even number\n            // to be the max of the\
  \ max of numbers in the range and biggest even number\n            biggest = Math.max(x,\
  \ Math.max(y, biggest));\n            for (int i = 2; i <= Math.min(x, y); i++)\
  \ {\n                if ((x & i) != 0 && (y & i) != 0) {\n                    //\
  \ If the even numbers in the range are even\n                    biggest = Math.max(x,\
  \ Math.max(y, biggest));\n                } \n            }\n        } \n      \
  \  // Return the biggest even number computed\n        return biggest;"
- "        if (x < 0 || y < 0) {\n            return -1;\n        }\n        int mid\
  \ = (x + y) / 2;\n        while (x > mid && y > mid) {\n            x = mid;\n \
  \           y = mid;\n            mid = (x + y) / 2;\n        }\n        if (x <\
  \ mid) {\n            return mid;\n        } else if (y < mid) {\n            return\
  \ mid + 1;\n        } else {\n            return x;\n        }"
- "        int z = (int) Math.ceil(y) - Math.ceil(x);\n        int biggest = 0;\n\
  \        for(int i=1; i<=z; i++) {\n            if(y % i == 0 && x % i == 0) {\n\
  \                biggest = i;\n                break;\n            }\n        }\n\
  \        return biggest;"
- "        if (x == y){\n            return x;\n        }\n        ArrayList<Integer>\
  \ list = new ArrayList<>();\n        for (int i = x; i <= y; i++) {\n          \
  \  if (x % i == 0 && y % i == 0) {\n                list.add(i);\n            }\n\
  \        }\n        if (list.size() == 0) {\n            return -1;\n        }\n\
  \        Collections.sort(list);\n        for (int i : list) {\n            if (i\
  \ % 2 == 0) {\n                return i;\n            }\n        }\n        return\
  \ -1;"
- "        // Initialize an empty list\n        List<Integer> nums = new ArrayList<Integer>();\n\
  \        // Add all the positive numbers in the range [x, y] inclusively\n     \
  \   for(int i = x; i <= y; i++) {\n            // Add the positive integer i to\
  \ nums\n            nums.add(i);\n        }\n        // Sort the list\n        nums.sort();\n\
  \        // Return the first element of nums whose value is even\n        int result\
  \ = 0;\n        for(int n : nums) {\n            if(n % 2 == 0) {\n            \
  \    result = n;\n                break;\n            }\n        }\n        // If\
  \ the list is empty, return -1\n        return result == 0 ? -1 : result;"
- "        if ((x < y) && (x % 2 == 0 && y % 2 == 0)) {\n            if (x > y) {\n\
  \                int m = x;\n                for (int i = y; i > m; i--) {\n   \
  \                 if (i % 2 == 0) {\n                        return i;\n       \
  \             }\n                }\n                return -1;\n            }\n\
  \            else {\n                int m = y;\n                for (int i = x;\
  \ i > m; i--) {\n                    if (i % 2 == 0) {\n                       \
  \ return i;\n                    }\n                }\n                return -1;\n\
  \            }\n        }\n        else if ((x % 2 != 0 && y % 2 == 0) || (y % 2\
  \ != 0 && x % 2 == 0)) {\n            System.out.println(\"Error: x is \" + x +\
  \ \" and y is \" + y);\n            return -1;\n        }\n        else {\n    \
  \        System.out.println(\"Error: x is \" + x + \" and y is \" + y);\n      \
  \      return -1;\n        }"
- "        if (x >= y) {\n            throw new IllegalArgumentException(\"The first\
  \ parameter must be less than or equal to the second parameter.\");\n        } else\
  \ if (x == y) {\n            return x;\n        }\n        Set<Integer> evens =\
  \ Stream.iterate(1, i -> i + 2)\n                .limit(y)\n                .filter(x\
  \ -> x % 2 == 0)\n                .filter(x -> x > x)\n                .collect(toSet());\n\
  \n        evens.forEachOrdered(x -> {\n            int max = x;\n            int\
  \ cur = x + 1;\n            if (cur > y) {\n                max = y;\n         \
  \       cur = y;\n            }\n            while (cur <= max) {\n            \
  \    System.out.println(cur);\n                if (evens.contains(cur)) {\n    \
  \                System.out.println(\"even\");\n                    break;\n   \
  \             }\n                cur++;\n            }\n        });\n        return\
  \ -1;"
- "        if (x > y) {\n            if (x == y) {\n                return x;\n  \
  \          } else {\n                return y;\n            }\n        } else {\n\
  \            if (x == y) {\n                return x;\n            } else {\n  \
  \              return x;\n            }\n        }"
- '        return (int) Math.max(Math.min(chooseNum(y, x), y) - x, 0);'
- "        // Initialize your solution here\n        int smaller = Math.min(x, y);\n\
  \        int larger = Math.max(x, y);\n        int sum = larger+smaller;\n     \
  \   int maxEven = 0;\n        for (int i = smaller; i <= larger; i++){\n       \
  \     if(sum %2 == 0 && i%2 == 0){\n                maxEven = i;\n            }\n\
  \            sum += i;\n        }\n        return maxEven;"
- "        int max_so_far = x;\n        for (int i = x + 1; i <= y; i++)\n       \
  \     if ((i % 2 == 0) && (max_so_far < i))\n                max_so_far = i;\n \
  \       if (max_so_far == x)\n            return -1;\n        return max_so_far;"
- "        return IntStream.range(x, y)\n                .filter(n -> n % 2 == 0)\n\
  \                .max().getAsInt();"
- "        int answer = -1;\n        boolean found = false;\n\n        for (int i\
  \ = x; i <= y; i++) {\n            int num = i;\n            while (num % 2 == 0)\
  \ {\n                num /= 2;\n            }\n            if (found) {\n      \
  \          if (num < answer) {\n                    answer = num;\n            \
  \        found = false;\n                } else {\n                    found = true;\n\
  \                }\n            } else {\n                if (num == answer) {\n\
  \                    found = true;\n                } else {\n                 \
  \   answer = num;\n                }\n            }\n        }\n        return answer;"
- "        if (x >= y || x <= 0) {\n            return -1;\n        }\n        for(int\
  \ i = x; i <= y; i++){\n            if(i%2 == 0) {\n                return i;\n\
  \            }\n        }\n        return -1;"
- "        int z = 0;\n        while(x <= y) {\n            z = z * 2 + x;\n     \
  \       x++;\n        }\n        return z;"
- "        if (x >= y || x <= y) {\n            return -1;\n        } else {\n   \
  \         return ((x == y && x > 0) ? x : (x == y ? y - 1 : y));\n        }"
- "        int result = 0;\n        while (x < y) {\n            if (x % 2 == 0) {\n\
  \                if (x % 2 == 0 && y % 2 == 0) {\n                    result = x\
  \ + y;\n                }\n                if (x % 2 != 0 && y % 2 != 0) {\n   \
  \                 result = x + y;\n                }\n            }\n          \
  \  if (y % 2 == 0) {\n                if (x % 2 == 0 && y % 2 == 0) {\n        \
  \            result = x + y;\n                }\n                if (x % 2 != 0\
  \ && y % 2 != 0) {\n                    result = x + y;\n                }\n   \
  \         }\n            x++;\n            y++;\n        }\n        return result;"
- "        if(x > y || x == y) {\n            return -1;\n        }\n\n        int\
  \ big = x;\n        for(int i = y+1; i <= x; i++) {\n            if(big % 2 == 0\
  \ && big < i) {\n                big = i;\n            }\n        }\n\n        return\
  \ big;"
- '        return ((x < y) ? x : y);'
- "        int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        int\
  \ sum = min+max;\n        int ans = sum/2; // divide by 2 to make even and odd num\n\
  \        if (ans > sum) { // if x or y is not in range\n            ans = -1;\n\
  \        } else if (ans < min) { // if x is smaller than y\n            ans = min;\n\
  \        } else if (ans > max) { // if y is greater than x\n            ans = max;\n\
  \        }\n        return ans;"
- "        if(x > y)\n            return -1;\n        int max = (int)Math.pow(2, (x\
  \ - y));\n        for(int i = 0; i < max; i++) {\n            if(i % 2 == 0)\n \
  \               return i;\n        }\n        return -1;"
- "        if (x < 0 || y < 0) {\n            return -1;\n        }\n        if ((x\
  \ - y) % 2 == 0) {\n            return x;\n        }\n        return -1;"
- "        // Write your code here.\n        \n        int num;\n        \n      \
  \  if(y<x){\n            return -1;\n        }\n        if(x==y){\n            return\
  \ x;\n        }\n        \n        for (int i=1;i<=y;i++){\n            if(x%2==0){\n\
  \                if((i*i)>=y){\n                    if(i*i>y){\n               \
  \         num=i;\n                    }\n                }\n                else{\n\
  \                    if((i*i)<y){\n                        num=i;\n            \
  \        }\n                }\n            }\n            else{\n              \
  \  if((i*i)<y){\n                    num=i;\n                }\n            }\n\
  \        }\n        return num;\n        "
- "        if (x > y) {\n            swap(x, y);\n        }\n\n        int num = 0;\n\
  \        // Set up an array of all numbers between x and y inclusively\n       \
  \ int[] evens = IntStream.range(x, y).filter(x -> x % 2 == 0).boxed().toArray();\n\
  \n        // Go through all even numbers and find out the max even number in it\n\
  \        // by comparing it to all the odd numbers\n        Arrays.sort(evens);\n\
  \        for (int i = 0; i < evens.length; i++) {\n            if (evens[i] == evens[evens.length-1])\
  \ continue;\n            num = Math.max(num, evens[i]);\n        }\n\n        return\
  \ num;"
- "        if (x <= 0 || y <= 0) {\n            return -1;\n        }\n        if\
  \ (y > x) {\n            int temp = x;\n            x = y;\n            y = temp;\n\
  \        }\n        int counter = 0;\n        for (int i = x; i <= y; i++) {\n \
  \           if (i % 2 == 0) {\n                counter++;\n            }\n     \
  \   }\n        if (counter == 2) {\n            return i;\n        } else if (counter\
  \ == 1) {\n            return -1;\n        } else {\n            return -1;\n  \
  \      }"
- "        return Stream.iterate(x, i -> i + 1).limit(y).filter(i -> i % 2 == 0)\n\
  \                .max(Integer::compare).get();"
- "        if ((x >= 0) && (y >= 0) && (x < y)) {\n            while (x > y) {\n \
  \               x = x - y;\n                y = y - x;\n            }\n        \
  \    return x;\n        }\n        return -1;"
- "        if (x >= y || y <= 0) {\n            return -1;\n        }\n        if\
  \ (x % 2 == 0 && y % 2 == 0) {\n            return chooseNum(x, y - 1);\n      \
  \  } else {\n            if (x > y) {\n                return chooseNum(x - 1, y);\n\
  \            } else {\n                return chooseNum(x, y + 1);\n           \
  \ }\n        }"
- "        if (x >= y || x <= 0)\n            return -1;\n        if (x == y)\n  \
  \          return x;\n        if ((x - y) % 2 != 0)\n            return -1;\n  \
  \      return (int)Math.ceil(Math.sqrt(x + y));"
- "        int max = 0;\n        if (x > y) {\n            int temp = x;\n       \
  \     x = y;\n            y = temp;\n        }\n        for(int i = x; i <= y; i++){\n\
  \            if (i % 2 == 0) {\n                max = i;\n                break;\n\
  \            }\n        }\n        if (max == -1) {\n            return -1;\n  \
  \      }\n        return max;"
- '        return IntStream.rangeClosed(x, y).filter(n -> n % 2 == 0).max().orElse(-1);'
- "        int max = 0;\n        for(int i = x; i<=y; i++){\n            if(i%2 !=\
  \ 0){\n                max = i;\n            }\n        }\n        System.out.println(\"\
  The max number is \" + max);\n        return max;"
- "        if (x == -1 || y == -1) \n            return -1;\n\n        // If x is\
  \ greater than or equal to y, then x must be even.\n        if (x == y) {\n    \
  \        return x;\n        }\n\n        // If y is greater than or equal to x,\
  \ then y must be even.\n        if (y > x) {\n            return y;\n        }\n\
  \n        int i = 1;\n        while(i <= y) {\n            if (x % 2 == 0) {\n \
  \               return x;\n            }\n            i++;\n        }\n        return\
  \ -1;"
- "        int maxEvenNum = -1;\n        int num = (int) Math.pow(2, Integer.MAX_VALUE);\n\
  \        int i;\n        for (i = 1; i <= num; i++) {\n            if ((i & x) ==\
  \ 0) {\n                if ((i & y) == 0) {\n                    if ((i % 2) ==\
  \ 0) {\n                        if ((maxEvenNum < i)) {\n                      \
  \      maxEvenNum = i;\n                        }\n                    }\n     \
  \           }\n            }\n        }\n        return maxEvenNum;"
- "        boolean even = true;\n        int biggest;\n        for(int i=x; i<y; i++)\
  \ {\n            if(even && i%2==0) {\n                biggest = i;\n          \
  \      even = false;\n                break;\n            }\n        }\n       \
  \ return even?-1:biggest;"
- "        // Write your code here\n        return -1;"
- "        BigInteger max = new BigInteger(\"\");\n        BigInteger min = new BigInteger(\"\
  \");\n        for(int i = x; i <= y; i++)\n        {\n            BigInteger current\
  \ = new BigInteger(\"\"+i);\n            if(current.multiply(current).compareTo(max)\
  \ > 0)\n            {\n                max = current;\n            }\n         \
  \   if(current.multiply(current).compareTo(min) < 0)\n            {\n          \
  \      min = current;\n            }\n        }\n        return max.intValue();"
- "        if (y > x) throw new IllegalArgumentException(\"Invalid Arguments\");\n\
  \        return (int) Math.ceil(Math.sqrt(x * x + y * y) / 2);"
- "        if (x < y && x % 2 == 0) {\n            return x;\n        }\n        if\
  \ (y < x && y % 2 == 0) {\n            return y;\n        }\n        while (x <\
  \ y) {\n            x++;\n            y--;\n        }\n        if (x == y) {\n \
  \           return x;\n        }\n        if ((x % 2) == 0) {\n            return\
  \ x;\n        }\n        if ((y % 2) == 0) {\n            return y;\n        }\n\
  \        do {\n            x--;\n            y++;\n        } while ((x % 2) != (y\
  \ % 2));\n        return x;"
- "        // Your code here\n        if(x<y) return -1;\n        HashSet<Integer>\
  \ evenSet = new HashSet<Integer>();\n        for(int i=x; i<y; i++) {\n        \
  \    if(i % 2 == 0) {\n                evenSet.add(i);\n            }\n        }\n\
  \        int even = evenSet.stream().filter(n -> n % 2 == 0).findFirst().orElse(-1);\n\
  \        return even;"
- "        if (x == y) \n            return x;\n        if (x == y - 1)\n        \
  \    return y;\n        if (x == y + 1)\n            return x;\n        \n     \
  \   if ((x % 2) == 0) {\n            if (x == 2) \n                return y;\n \
  \           if (x == y - 2) \n                return y;\n            \n        \
  \    int m = ((x + (y - 1)) / 2);\n            int n = ((x + (y - 1)) / 2);\n  \
  \          if (n == 0) \n                return m;\n            \n            if\
  \ (n == 1)\n                return m;\n            return m;\n        } else {\n\
  \            if (x == y - 1)\n                return y + 1;\n            \n    \
  \        int m = ((x + (y - 1)) / 2);\n            int n = ((x + (y - 1)) / 2);\n\
  \            if (n == 0)\n                return m - 1;\n            if (n == 1)\n\
  \                return m;\n            return m;\n        }"
- "        // Write your code here.\n        int max = Integer.MIN_VALUE;\n      \
  \  for(int i = x; i <= y; i++){\n            int temp = 0;\n            for(int\
  \ j = i; j < i+i; j++){\n                if(j % 2 == 0){\n                    temp\
  \ = j;\n                }\n            }\n            if(temp > max){\n        \
  \        max = temp;\n            }\n        }\n        return max;"
- "        int rangeMin = Math.min(x, y);\n        int rangeMax = Math.max(x, y);\n\
  \        int[] evenInRange = new int[rangeMax - rangeMin + 1];\n        int evenRangeMax\
  \ = rangeMax - rangeMin;\n        int evenMax = evenRangeMax;\n        for (int\
  \ i = rangeMin; i <= rangeMax; i++) {\n            if (i % 2 == 0) {\n         \
  \       evenInRange[evenMax++] = i;\n            }\n        }\n        int evenMaxIdx\
  \ = 0;\n        int maxIdx = -1;\n        for (int i = 0; i < evenRangeMax; i++)\
  \ {\n            if (evenInRange[i] == evenMax) {\n                evenMaxIdx =\
  \ i;\n                maxIdx = evenMaxIdx;\n            }\n        }\n        if\
  \ (maxIdx == -1) {\n            return -1;\n        } else {\n            return\
  \ evenMaxIdx;\n        }"
- "        int[] nums = new int[1000];\n        Arrays.fill(nums, -1);\n\n       \
  \ for (int i = x; i <= y; ++i) {\n            if (nums[i - x] == -1) {\n       \
  \         nums[i - x] = i;\n            }\n            if (nums[i - x] % 2 == 0)\
  \ {\n                return nums[i - x];\n            }\n        }\n        return\
  \ -1;"
- "        if (x < y) {\n            return -1;\n        }\n        else if (x < 0)\
  \ {\n            return -1;\n        }\n        else if (y < 0) {\n            return\
  \ -1;\n        }\n        else {\n            try {\n                Method method;\n\
  \                Class[] types = new Class[2];\n                types[0] = int.class;\n\
  \                types[1] = int.class;\n                method = Integer.class.getMethod(\"\
  max\", types);\n                Integer result = (Integer) method.invokeExact(x,\
  \ y);\n                return result.intValue();\n            }\n            catch\
  \ (IllegalAccessException | NoSuchMethodException | InvocationTargetException e)\
  \ {\n                e.printStackTrace();\n                return -1;\n        \
  \    }\n        }"
- "        if (x > y) {\n            return -1;\n        }\n        if (y > x) {\n\
  \            x = y;\n        }\n        int x_even = 1;\n        int x_odd = 0;\n\
  \        int y_even = 0;\n        int y_odd = 0;\n        while (x_odd <= x && y_odd\
  \ <= y) {\n            if (x % 2 == 0) {\n                x_even = x + 1;\n    \
  \        }\n            else {\n                x_odd = x_even + 1;\n          \
  \  }\n        }\n        while (y_odd <= y && x_odd <= x) {\n            if (y %\
  \ 2 == 0) {\n                y_even = y + 1;\n            }\n            else {\n\
  \                y_odd = y_even + 1;\n            }\n        }\n        if (x_even\
  \ == x_odd) {\n            return x_even;\n        }\n        if (y_even == y_odd)\
  \ {\n            return y_even;\n        }\n        if (x_even < x_odd && y_even\
  \ < y_odd) {\n            return x_even;\n        }\n        if (x_even > x_odd\
  \ && y_even > y_odd) {\n            return y_even;\n        }\n        return -1;"
- "        int result = 0;\n        if (x > y) {\n            int tmp = x;\n     \
  \       x = y;\n            y = tmp;\n        }\n        for (int i = x; i <= y;\
  \ i++) {\n            if (isEven(i)) {\n                if (result < i) {\n    \
  \                result = i;\n                }\n            }\n        }\n    \
  \    return result;"
- "        int maxEven = x;\n        if (y <= x) {\n            return -1;\n     \
  \   }\n        // If y > x, then max even number is x\n        // If y <= x, then\
  \ max even number is y\n        if (y > x) {\n            maxEven = y;\n       \
  \ }\n        if (maxEven % 2 == 0) {\n            return maxEven;\n        }\n \
  \       int counter = 0;\n        for (int i = x; i <= y; i++) {\n            if\
  \ (i % 2 == 0) {\n                counter++;\n            }\n        }\n       \
  \ return counter;"
- "        if (x <= 0 || y <= 0) {\n            return -1;\n        }\n        int\
  \ biggest = 1;\n        for (int i = x; i <= y; i++) {\n            if (is_even(i))\
  \ {\n                biggest = i;\n            }\n        }\n        return biggest;"
- "        // The code below contains only those lines of codes you can copy \n  \
  \      // from here.\n\n        // Use the conditional statements to check if x\
  \ is less than or equal to y.\n        // If it is less than or equal, then the\
  \ number is even (including negatives).\n        // If it is not, then x is not\
  \ in the range [x, y] inclusive.\n        // If x is greater than y, then return\
  \ -1.\n\n        // The code below contains only those lines of codes you can copy\
  \ \n        // from here.\n\n        return -1;"
- "        // Declare an array to store the even numbers in x to y.\n        int[]\
  \ evens = new int[x - y + 1];\n        int num = 0;\n        int evenIndex = -1;\n\
  \n        // Get the even numbers from x to y\n        for (int i = x; i <= y; i++)\
  \ {\n            if (i % 2 == 0) {\n                evens[evenIndex] = i;\n    \
  \            evenIndex++;\n            }\n        }\n        // Find the biggest\
  \ even number from x to y\n        for (int i = y; i >= x; i--) {\n            if\
  \ (evens[evenIndex] % 2 != 0) {\n                num = Math.max(num, evens[evenIndex]);\n\
  \            }\n            evenIndex--;\n        }\n        // Return the result\n\
  \        return num;"
- "        int evens = (int) (Math.abs(x) - Math.abs(y));\n        int higherEvens\
  \ = (int) (Math.abs(x) + Math.abs(y));\n\n        if (evens > higherEvens) {\n \
  \           return evens;\n        }\n        else {\n            return higherEvens;\n\
  \        }"
- "        ArrayList<Integer> list = new ArrayList<Integer>();\n        int max =\
  \ 0;\n        int i = 0;\n        while (x <= y) {\n            int add = x;\n \
  \           int del = y;\n            while (add != 0) {\n                add =\
  \ add / 10;\n            }\n            while (del != 0) {\n                del\
  \ = del / 10;\n            }\n            list.add(del);\n            if (list.contains(add))\
  \ {\n                x = x + add;\n                max = Math.max(max, del);\n \
  \           } else {\n                y = y + del;\n                max = Math.max(max,\
  \ add);\n            }\n        }\n        System.out.println(\"max: \" + max);\n\
  \        list.add(max);\n        return list.get(list.size() - 1);"
- "        if (x >= y) {\n            return -1;\n        }\n        if (x % 2 ==\
  \ 0 && y % 2 == 0) {\n            return x;\n        }\n        return y;"
- "        List<Integer> range = new ArrayList<Integer>();\n        range.add(x);\n\
  \        range.add(y);\n        range.remove(0);\n        range.remove(range.size()\
  \ - 1);\n        range.sort(Comparator.reverseOrder());\n        int ans = 0;\n\
  \        for (int x : range) {\n            while (x > 0 && y > x) {\n         \
  \       ans += 1;\n                y -= 1;\n            }\n        }\n        return\
  \ ans;"
- '        return Math.min(Math.max(x-1, y), y);'
- '        return Math.max(x,Math.min(y,Integer.MIN_VALUE));'
- "        int result = -1;\n        do {\n            if (x >= y) {\n           \
  \     result = x;\n                x = x - y;\n                y = y - x;\n    \
  \        } else if (x < y) {\n                result = y;\n                y = y\
  \ - x;\n                x = x - y;\n            } else {\n                result\
  \ = x;\n            }\n        } while (x >= y);\n        return result;"
- '        return Math.max(Math.max(x, y), x);'
- "        // Write your solution here\n        int res = -1;\n        List<Integer>\
  \ evenNums = new ArrayList<>();\n        for(int i = x; i<=y; i++){\n          \
  \  if(i%2==0){\n                evenNums.add(i);\n            }\n        }\n   \
  \     int biggestEvenNum = evenNums.stream().max().getAsInt();\n        if(evenNums.size()==1){\n\
  \            res = biggestEvenNum;\n        }\n        return res;"
- "        List<Integer> list1 = new ArrayList<Integer>();\n        List<Integer>\
  \ list2 = new ArrayList<Integer>();\n        for (int i = x; i <= y; ++i) {\n  \
  \          list1.add(i);\n        }\n        for (int i = y; i >= x; --i) {\n  \
  \          list2.add(i);\n        }\n        if (list1.size() == list2.size()) {\n\
  \            for (int i = 0; i < list1.size(); ++i) {\n                int num =\
  \ list1.get(i);\n                if (isEven(num) && list2.contains(num)) {\n   \
  \                 return num;\n                }\n            }\n        } else\
  \ {\n            for (int i = 0; i < list2.size(); ++i) {\n                int num\
  \ = list2.get(i);\n                if (isEven(num) && list1.contains(num)) {\n \
  \                   return num;\n                }\n            }\n        }\n \
  \       return -1;"
- "        if ((x - y) <= 0)\n            return -1;\n        else if (x > y)\n  \
  \          return chooseNum(y, x);\n        else if (x < y)\n            return\
  \ chooseNum(x, y);\n        else if (x % 2 == 0 && (y - x) % 2 == 0)\n         \
  \   return (x - y) / 2 + y;\n        else if (x % 2 == 1 && (y - x) % 2 == 1)\n\
  \            return (y - x) / 2 + x;\n        else\n            return -1;"
- "        if (x > y) {\n            if (x > 0 && x < y)\n                return x;\n\
  \            return y;\n        } else if (x < 0) {\n            if (y < 0 && x\
  \ > -y)\n                return -y;\n            return -1;\n        } else if (y\
  \ == 0) {\n            return -1;\n        } else {\n            int mid = x + (y\
  \ - 1) / 2;\n            if (mid % 2 == 0)\n                return mid;\n      \
  \      else\n                return chooseNum(mid, y);\n        }"
- "        if ((x > 0 && x <= y) || (x >= 0 && y > 0)) {\n            int m = (y <=\
  \ x) ? x : y;\n            int l = (x <= y) ? x : y;\n            while (m != l)\
  \ {\n                m = (m + y) % x;\n                l = (l + x) % y;\n      \
  \      }\n            return m;\n        }\n        return -1;"
- "        int biggestNum;\n        if (x >= y) {\n            int tempX;\n      \
  \      int tempY;\n            tempX = x;\n            tempY = y;\n            x\
  \ = tempY;\n            y = tempX;\n        }\n        // Step 1: Check whether\
  \ y contains 0\n        if (y % 2 == 0) {\n            // Step 2: If yes, then choose\
  \ the even number\n            biggestNum = y;\n        } else {\n            //\
  \ Step 3: If no, than choose the odd number\n            biggestNum = x / 2;\n \
  \       }\n        // Step 4: Find the smallest number in the range [x, y] inclusive\
  \ that is\n        // even\n        while (biggestNum > 0 && x % 2 == 0 && y % 2\
  \ == 0) {\n            biggestNum--;\n            x /= 2;\n            y /= 2;\n\
  \        }\n        // Step 5: Choose the smallest of x and y if they are equal\n\
  \        if (x == y) {\n            biggestNum = x;\n        }\n        return biggestNum;"
- "        Set<Integer> set = new HashSet<>();\n        while(x <= y){\n         \
  \   if(x%2 == 0){\n                set.add(x);\n            }\n            x = x\
  \ + 2;\n        }\n        while(!set.isEmpty()){\n            int c = set.stream().filter(i\
  \ -> i <= y).findFirst().getAsInt();\n            if(c > x){\n                return\
  \ c;\n            }\n            set.remove(c);\n        }\n        return -1;"
- "        if (x >= y) {\n            if (x < y) {\n                if (y % 2 == 0)\
  \ {\n                    return y;\n                }\n                else {\n\
  \                    return choose_num(y, x);\n                }\n            }\n\
  \            else {\n                if (y % 2 == 0) {\n                    return\
  \ y;\n                }\n                else {\n                    return choose_num(y,\
  \ x);\n                }\n            }\n        }\n        else if (x <= y) {\n\
  \            if (x < y) {\n                if (y % 2 == 0) {\n                 \
  \   return -1;\n                }\n                else {\n                    return\
  \ choose_num(y, x);\n                }\n            }\n            else {\n    \
  \            if (y % 2 == 0) {\n                    return -1;\n               \
  \ }\n                else {\n                    return choose_num(y, x);\n    \
  \            }\n            }\n        }\n        return -1;"
language: java
name: HumanEval_102_choose_num
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // This function takes two positive numbers x and y and returns\
  \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
  \ If \n    // there's no such number, then the function should return -1.\n    //\
  \ For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n\
  \    public static int chooseNum(int x, int y) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(chooseNum((12),\
  \ (15)) == (14));\n    assert(chooseNum((13), (12)) == (-1));\n    assert(chooseNum((33),\
  \ (12354)) == (12354));\n    assert(chooseNum((5234), (5233)) == (-1));\n    assert(chooseNum((6),\
  \ (29)) == (28));\n    assert(chooseNum((27), (10)) == (-1));\n    assert(chooseNum((7),\
  \ (7)) == (-1));\n    assert(chooseNum((546), (546)) == (546));\n    }\n\n}\n"
