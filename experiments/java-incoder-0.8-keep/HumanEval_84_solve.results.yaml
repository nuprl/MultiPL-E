language: java
name: HumanEval_84_solve
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = \"\";\n        int remainder;\n        while(N != 0) {\n            remainder\
    \ = N % 2;\n            binary = String.valueOf(remainder) + binary;\n       \
    \     N = N/2;\n        }\n        return binary;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjdkf0syb.java:30)\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here\n        String outputStr = \"\"\n                + Integer.toString(N)\n\
    \                .chars()\n                .mapToObj(x -> Integer.toString((int)x))\n\
    \                .map(x -> x + \"\")\n                .collect(Collectors.joining());\n\
    \        \n        return outputStr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg_m7wdw3.java:31)\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        while (N --> 0) {\n            int temp = N % 10;\n            sum\
    \ += temp * Math.pow(2,temp);\n            N /= 10;\n        }\n        return\
    \ Integer.toString(sum);\n}\n    public static void main(String[] args) {\n  \
    \  assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp573lkrdk.java:29)\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        BigInteger\
    \ result = BigInteger.ZERO;\n        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 1; i <= N; i++) {\n            result = result.add(BigInteger.valueOf(i).divide(BigInteger.TEN));\n\
    \            sb.append(result.mod(BigInteger.TEN));\n        }\n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf054jqt5.java:29)\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Your code\
    \ here\n        StringBuilder result = new StringBuilder();\n        while(N >0){\n\
    \            int digit = N % 10;\n            int digitCount = 1;\n          \
    \  while (digit / 2 != 0) {\n                digitCount++;\n                digit\
    \ = digit / 2;\n            }\n            result.append(String.valueOf(digitCount));\n\
    \            N = N / 10;\n        }\n        return result.toString();\n}\n  \
    \  public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp65lr3z0k.java:35)\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N <=\
    \ 0)\n            return \"0\";\n        int result = 0;\n        int temp = N;\n\
    \        while (temp > 0) {\n            result = result + ((temp % 10) + 1);\n\
    \            temp = temp / 10;\n        }\n        return (\"\" + result);\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcbl8bhh2.java:31)\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        ArrayList<Integer>\
    \ digitSums = new ArrayList<Integer>();\n\n        String binary = \"\";\n   \
    \     while (N >=10) {\n            digitSums.add(N%10);\n            N = N/10;\n\
    \        }\n        binary = digitSums.stream().map(d -> String.valueOf(d)+\"\
    0\").collect(Collectors.joining());\n        return binary;\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplyqvzncu.java:31)\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = \"\";\n        int i = 1;\n        while (N /= 10) {\n            s = s +\
    \ i;\n            i = i * 2;\n        }\n        return s;\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa6vx_ejd.java:22: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (N /= 10) {\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ result = new StringBuilder();\n        String s = \"\";\n        while (N !=0){\n\
    \            result.append(Integer.toString(N%2));\n            N = N/2;\n   \
    \     }\n        s = result.toString();\n        String reversed = new StringBuffer(s).reverse().toString();\n\
    \        int reversedLen = reversed.length();\n        for (int i=reversedLen-1;i>=0;i--){\n\
    \            int count = 0;\n            int currPos = 0;\n            while(currPos\
    \ != i){\n                if (reversed.charAt(currPos)=='1') count++;\n      \
    \          currPos++;\n            }\n            result.append(count);\n    \
    \    }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpex4pbt4c.java:38: error: incompatible types: StringBuilder cannot\
    \ be converted to String\n        return result;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = \"\";\n        if (N > 1000) {\n            int temp = N;\n            N =\
    \ solve(temp);\n        }\n        while (N --> 0) {\n            s += (char)\
    \ ('0' + N % 2);\n            N /= 2;\n        }\n        return s;\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg56hxo9x.java:23: error: incompatible types: String cannot be converted\
    \ to int\n            N = solve(temp);\n                     ^\n1 error\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // write\
    \ your code in Java SE 8.\n        if (N < 0)\n            return \"Invalid Input\"\
    ;\n        if (N == 0)\n            return \"0\";\n        StringBuilder sb =\
    \ new StringBuilder();\n        List<Integer> list = new ArrayList<>();\n    \
    \    int sum = 0;\n        for (int i = N; i > 0; i--) {\n            sum = sum\
    \ + i % 10;\n            if (sum > 1) {\n                list.add(sum - 1);\n\
    \                sum = sum / 10;\n            } else {\n                sum +=\
    \ i;\n                list.add(i);\n            }\n        }\n        String str\
    \ = \"\";\n        list.forEach(i -> str = i + \" \" + str);\n        str = String.join(\"\
    \ \", list);\n        for (int i = str.length() - 1; i >= 0; i--) {\n        \
    \    if (str.charAt(i) != ' ') {\n                sb.insert(0, str.charAt(i));\n\
    \                break;\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp38kq0sg7.java:40: error: no suitable method found for join(String,List<Integer>)\n\
    \        str = String.join(\" \", list);\n                    ^\n    method String.join(CharSequence,CharSequence...)\
    \ is not applicable\n      (varargs mismatch; List<Integer> cannot be converted\
    \ to CharSequence)\n    method String.join(CharSequence,Iterable<? extends CharSequence>)\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to Iterable<? extends CharSequence>)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        char[] bn\
    \ = binary(N);\n        StringBuilder sb = new StringBuilder();\n        int sum\
    \ = 0;\n        for (int i = 0; i < bn.length; i++) {\n            sum += bn[i]\
    \ - '0';\n        }\n        sb = new StringBuilder(String.valueOf(sum));\n  \
    \      return sb.toString();\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnbcxll0.java:20: error: cannot find symbol\n        char[] bn\
    \ = binary(N);\n                    ^\n  symbol:   method binary(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        boolean isEven\
    \ = true;\n        int[] digits = new int[8];\n        StringBuilder s = new StringBuilder();\n\
    \        if (N < 0) {\n            return \"-1\";\n        } else if (N == 0)\
    \ {\n            return \"0\";\n        } else if (N == 1) {\n            return\
    \ \"1\";\n        } else {\n            while (N != 0) {\n                int\
    \ remainder = (int) (N % 10);\n                N = N / 10;\n                digits[7\
    \ - 1] = remainder;\n                int lastDigit = 0;\n                for (int\
    \ i = 0; i <= 6; i++) {\n                    digits[i] = digits[i + 1] + digits[i\
    \ - 1];\n                    if (isEven) {\n                        if (digits[i]\
    \ > 1) {\n                            lastDigit = i;\n                       \
    \     digits[i] += digits[i] - 1;\n                            break;\n      \
    \                  }\n                    } else if (digits[i] > 1) {\n      \
    \                  lastDigit = i;\n                        digits[i] -= 1;\n \
    \                       break;\n                    }\n                }\n   \
    \             isEven = !(isEven);\n                s.append(digits[lastDigit]);\n\
    \            }\n            String outputStr = s.reverse().toString();\n     \
    \       int lastDigit = 0;\n            while (outputStr.charAt(lastDigit) ==\
    \ '0') {\n                lastDigit++;\n            }\n            outputStr =\
    \ outputStr.substring(0, lastDigit + 1);\n            return outputStr;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -1 out of bounds for length 8\n\tat Problem.solve(tmpnz_p4jj1.java:36)\n\
    \tat Problem.main(tmpnz_p4jj1.java:62)\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        StringBuilder stringBuilder = new StringBuilder();\n\
    \        // Step 1: Iterate through each bit of the given integer\n        for\
    \ (int i = 0; i < binary.length(); i++) {\n            // Step 2: If the bit is\
    \ a '0' then the digit in the sum will be '0' and if it is a '1' then the digit\
    \ will be '1'\n            String digit = binary == Character.toString((char)\
    \ 0) ? \"0\" : \"1\";\n            // Step 3: Add the digit to the string builder\n\
    \            stringBuilder.append(digit);\n        }\n        return stringBuilder.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv0riax7q.java:32)\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String res\
    \ = \"\";\n        int sum = 0, i = 0;\n        while (N > 0) {\n            int\
    \ rem = N % 10;\n            sum = sum + rem * Math.pow(10, i);\n            N\
    \ = N / 10;\n            i++;\n        }\n        res = Integer.toString(sum);\n\
    \        if (res.length() == 1) {\n            res = \"0\" + res;\n        }\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps4xhjcfp.java:24: error: incompatible types: possible lossy conversion\
    \ from double to int\n            sum = sum + rem * Math.pow(10, i);\n       \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ binaryNumberString = new StringBuilder();\n        // convert N into an array\
    \ of integers\n        int[] numbers = convertToNumbers(N);\n        // find the\
    \ sum of the numbers' binary digits\n        int sumOfNumbersBinaryDigits = 0;\n\
    \        for (int number = 0; number < numbers.length; number++) {\n         \
    \   sumOfNumbersBinaryDigits += numbers[number];\n        }\n        // add the\
    \ sum of the numbers' binary digits to the binary number\n        binaryNumberString.append(sumOfNumbersBinaryDigits);\n\
    \        // if the sum of the numbers' binary digits equals N, the binary number\
    \ will be \"1\".\n        if (sumOfNumbersBinaryDigits == N) {\n            binaryNumberString.append(\"\
    1\");\n        }\n        return binaryNumberString.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptjffqfu3.java:22: error: cannot find symbol\n        int[] numbers\
    \ = convertToNumbers(N);\n                        ^\n  symbol:   method convertToNumbers(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // If N is\
    \ less than 0 return null\n        if(N < 0) {\n            return null;\n   \
    \     }\n\n        // If N is zero, return an empty string\n        if(N == 0)\
    \ {\n            return \"\";\n        }\n\n        // If N is 1, return \"1\"\
    \n        if(N == 1) {\n            return \"1\";\n        }\n\n        // Initialize\
    \ a BigDecimal for current sum\n        BigDecimal sum = new BigDecimal(String.valueOf(N));\n\
    \n        // Start a loop\n        while(sum.compareTo(BigDecimal.ZERO) == 1)\
    \ {\n            String s = sum.toString();\n            sum.add(new BigDecimal(String.valueOf(Integer.parseInt(s.substring(0,s.length()\
    \ - 1)))));\n        }\n        return sum.toString();\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        long sum\
    \ = 0;\n        char bin[] = Long.toBinaryString(N).replace(' ', '0');\n     \
    \   Arrays.sort(bin);\n        StringBuilder res = new StringBuilder();\n    \
    \    for(int i=bin.length-1;i>=0;i--){\n            res.append(bin[i]);\n    \
    \        sum += bin[i];\n        }\n        return res.toString()+Long.toBinaryString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7x7__ym.java:21: error: incompatible types: String cannot be converted\
    \ to char[]\n        char bin[] = Long.toBinaryString(N).replace(' ', '0');\n\
    \                                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        \n      \
    \  String str = \"\";\n        int sum = 0;\n        int pow = 1;\n        int\
    \ remainder = 0;\n        if (N == 0){\n            return str;\n        }\n \
    \       \n        while (N > 0){\n            \n            sum = sum + N%10;\n\
    \            N = N/10;\n        }\n        \n        if (sum < pow){\n       \
    \     sum = sum + pow;\n            pow = pow * 10;\n        }\n        \n   \
    \     int finalSum = sum;\n        \n        int pow = 1;\n        \n        while\
    \ (sum > 0){\n            \n            sum = sum - pow;\n            pow = pow\
    \ * 10;\n        }\n        \n        \n        int finalSum2 = sum;\n       \
    \ \n        \n        int finalSum3 = sum2;\n        \n        \n        \n  \
    \      \n        while (finalSum != 0){\n            \n            if (finalSum\
    \ % 2 != 0){\n                \n                str = str + finalSum % 2;\n  \
    \          }\n            finalSum = finalSum / 2;\n            finalSum2 = finalSum2\
    \ + 1;\n            finalSum3 = finalSum3 + 1;\n            \n        }\n    \
    \    \n        while (finalSum2 != 0){\n            if (finalSum2 % 2 != 0){\n\
    \                \n                str = str + finalSum2 % 2;\n            }\n\
    \            finalSum2 = finalSum2 / 2;\n            finalSum3 = finalSum3 + 1;\n\
    \            \n        }\n        while (finalSum3 != 0){\n            if (finalSum3\
    \ % 2 != 0){\n                \n                str = str + finalSum3 % 2;\n \
    \           }\n            finalSum3 = finalSum3 / 2;\n            finalSum2 =\
    \ finalSum2 + 1;\n            \n        }\n        \n        return str;\n   \
    \     \n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwpkntbd5.java:42: error: variable pow is already defined in method\
    \ solve(int)\n        int pow = 1;\n            ^\n/tmp/tmpwpkntbd5.java:54: error:\
    \ cannot find symbol\n        int finalSum3 = sum2;\n                        ^\n\
    \  symbol:   variable sum2\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int remainder\
    \ = 0;\n        int sum = 0;\n        int count = 0;\n        while (N > 0) {\n\
    \            remainder = N % 2;\n            N = (int)(N / 2);\n            sum\
    \ = sum + remainder;\n            count++;\n        }\n        String result =\
    \ \"\";\n        for (int i = 1; i < count; i++) {\n            String binary\
    \ = Integer.toBinaryString(sum);\n            int j = 0;\n            while (binary.length()\
    \ > i) {\n                String temp = binary.substring(0, j);\n            \
    \    result += temp;\n                binary = binary.substring(j);\n        \
    \        j = temp.length();\n            }\n            result += binary;\n  \
    \      }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011959
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        if (N <= 0) {\n            throw new IllegalArgumentException(\"\
    Not a valid number. Must be greater then zero\");\n        }\n        for (int\
    \ i = 2; i <= N; i *= 10) {\n            int sum = 0;\n            while (i >\
    \ 0) {\n                sum += i % 10;\n                i /= 10;\n           \
    \ }\n            if (sum != 0) {\n                sb.append(sum);\n          \
    \  }\n        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        long remainder\
    \ = 0;\n        long result = 0;\n        String binary = \"\";\n        while\
    \ (N > 0) {\n            remainder = N % 10;\n            result += remainder\
    \ * Math.pow(2, binary);\n            N = N / 10;\n            binary = binary\
    \ + 1;\n        }\n        return String.valueOf(result);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzba6hsoi.java:25: error: incompatible types: String cannot be converted\
    \ to double\n            result += remainder * Math.pow(2, binary);\n        \
    \                                      ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Your code\
    \ goes here\n        if(N < 0) return \"ERROR\";\n        StringBuilder result\
    \ = new StringBuilder(2);\n        while(true){\n            int sum = 0;\n  \
    \          for(int i=1;i<=N;i++){\n                sum = sum + N % 10;\n     \
    \           N = N / 10;\n            }\n            result.append(sum);\n    \
    \        if(N == 1) break;\n        }\n        return result.toString();\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpszr50xym.java:35)\n"
  stdout: ''
  timestamp: 1660011954
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here\n        String[] binaryString = N.toBinaryString().split(\"\"\
    );\n        int sum = 0;\n        for (int i : binaryString) {\n            sum\
    \ += Integer.parseInt(i);\n        }\n        return sum + \"\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaam368d_.java:21: error: int cannot be dereferenced\n        String[]\
    \ binaryString = N.toBinaryString().split(\"\");\n                           \
    \      ^\n/tmp/tmpaam368d_.java:23: error: incompatible types: String cannot be\
    \ converted to int\n        for (int i : binaryString) {\n                   \
    \  ^\n/tmp/tmpaam368d_.java:24: error: incompatible types: int cannot be converted\
    \ to String\n            sum += Integer.parseInt(i);\n                       \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Your code\
    \ here\n        int sum = 0;\n        while (N >0) {\n            sum += (N %\
    \ 2);\n            N = N/2;\n        }\n        return (sum > 0 ? Integer.toString(sum)\
    \ : Integer.toString(sum) + Integer.toString(0));\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lacxqrn.java:29)\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        long a =\
    \ N;\n        String str = String.valueOf(a);\n        StringBuilder binary =\
    \ new StringBuilder();\n        int b = 0;\n        while ((a % 10) != 0) {\n\
    \            a = a / 10;\n            b++;\n        }\n        binary.append(str);\n\
    \        while (b > 0) {\n            binary.insert(0, 0);\n            b--;\n\
    \        }\n        return binary.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqoul5cf8.java:36)\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvlne5hwm.java:23)\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        while (true) {\n            int next = N % 10;\n            N =\
    \ N/10;\n            sum += next;\n            if( N == 0 ) return Integer.toString(sum);\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79yh8k29.java:30)\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // TODO:\
    \ your code goes here\n        int[] arr= new int[32];\n        arr[0]=N;\n  \
    \      int[] sums=new int[32];\n        while(arr[0]!=0){\n            int sum=0;\n\
    \            int remainder=arr[0]%2;\n            int index=0;\n            while(arr[index]!=0\
    \ && arr[index]!=1){\n                sum+=arr[index];\n                sums[index]=sum;\n\
    \                index++;\n            }\n            sums[0]=sum;\n         \
    \   arr=Arrays.copyOfRange(arr,1,arr.length);\n            sums=Arrays.copyOfRange(sums,1,sums.length);\n\
    \        }\n        int maxsum=0;\n        for(int i=0; i<sums.length;i++){\n\
    \            if(sums[i]>maxsum){\n                maxsum=sums[i];\n          \
    \  }\n        }\n        return Integer.toString(maxsum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpystj8opg.java:46)\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int[] digits\
    \ = new int[32];\n        int sum = 0;\n        while (N /= 2) {\n           \
    \ int value = N % 2;\n            digits[value / 32] ++;\n            N /= 2;\n\
    \        }\n        for (int i = 0; i < 32; i++) {\n            sum += digits[i];\n\
    \        }\n        return Integer.toString(sum).substring(1) + Integer.toString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsejxid50.java:22: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (N /= 2) {\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        while(N!=0){\n            sum = sum + N % 10;\n            N = N\
    \ / 10;\n        }\n        String s = String.valueOf(sum);\n        return s;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss8pxhhd.java:30)\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        long n =\
    \ N;\n        int sum = 0;\n        int count = 0;\n        StringBuilder result\
    \ = new StringBuilder();\n\n        while (n!=0){\n            count++;\n    \
    \        sum += n % 10;\n            n = n/10;\n        }\n        \n        if\
    \ (count>1){\n            sum -= 1;\n            count -=1;\n        }\n     \
    \   \n        for (int i = count; i > 0; i--){\n            result.append(sum);\n\
    \        }\n\n        return result.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj6fy182x.java:43)\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ output = new StringBuilder();\n        int sum = 0;\n\n        while (N !=0){\n\
    \            sum = sum + N % 2;\n            N = N / 2;\n        }\n        output.append((char)\
    \ (sum % 2));\n\n        return String.valueOf(output);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr70rssel.java:32)\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N < 0)\
    \ return \"0\";\n        String[] binary = {\"\", \"1\", \"10\", \"11\", \"100\"\
    , \"101\", \"110\", \"111\", \"\"};\n        int numDigits = N;\n        int sum\
    \ = 0;\n        while (numDigits > 0) {\n            int digit = numDigits % 10;\n\
    \            sum += binary[digit];\n            numDigits /= 10;\n        }\n\
    \        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpesgz8lnk.java:26: error: incompatible types: String cannot be converted\
    \ to int\n            sum += binary[digit];\n                         ^\n1 error\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N < 0)\
    \ {\n            return \"-1\";\n        }\n        int sum = 0;\n        int\
    \ count = 1;\n        int remainder = 0;\n        while (N > 0) {\n          \
    \  remainder = N % 10;\n            sum += remainder * count;\n            N =\
    \ (N - remainder) / 10;\n            count++;\n        }\n        return Integer.toString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb9b3em_4.java:35)\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        Stack<Integer>\
    \ stack = new Stack<Integer>();\n        for (int i = 0; i < N; i++) {\n     \
    \       String str = Integer.toBinaryString(i);\n            int size = str.length();\n\
    \            for (int j = 0; j < size; j++) {\n                stack.push(Integer.parseInt(str.substring(j,\
    \ j + 1)));\n            }\n        }\n        int sum = 0;\n        while (!stack.isEmpty())\
    \ {\n            sum += stack.pop();\n        }\n        return Integer.toString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoe3xov0i.java:35)\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N > 1000000\
    \ || N < 1) {\n            return \"INVALID VALUE\";\n        }\n        long\
    \ count = 0;\n        long result = N;\n        do {\n            int digit =\
    \ result % 10;\n            result += digit * Math.pow(10, count);\n         \
    \   count++;\n        } while (result != 0);\n        return Long.toBinaryString(result);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbk7fql24.java:26: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = result % 10;\n                   \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N < 0)\n\
    \            return \"No binary number\";\n        char ch[] = new char[32];\n\
    \        Arrays.fill(ch, ' ');\n        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = Integer.MIN_VALUE; i >=0; i+= Math.pow(2,32)){\n        \
    \    int val = N - i;\n            if (val < 0)\n                break;\n    \
    \        int x = val % Math.pow(2,32);\n            val = val / Math.pow(2,32);\n\
    \            char ch = ch[(int)x];\n            if (ch == ' ') {\n           \
    \     sb.append(val);\n            } else {\n                sb.append(ch);\n\
    \                sb.append(val);\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1aibpxcg.java:29: error: incompatible types: possible lossy conversion\
    \ from double to int\n            int x = val % Math.pow(2,32);\n            \
    \            ^\n/tmp/tmp1aibpxcg.java:30: error: incompatible types: possible\
    \ lossy conversion from double to int\n            val = val / Math.pow(2,32);\n\
    \                      ^\n/tmp/tmp1aibpxcg.java:31: error: variable ch is already\
    \ defined in method solve(int)\n            char ch = ch[(int)x];\n          \
    \       ^\n/tmp/tmp1aibpxcg.java:31: error: array required, but char found\n \
    \           char ch = ch[(int)x];\n                        ^\n4 errors\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        int sum = 0;\n        while (N /= 2) {\n            sum +=\
    \ N % 2;\n            N = N >> 1;\n        }\n        result += sum;\n       \
    \ return result;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppcjuu9ol.java:22: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (N /= 2) {\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while(N !=0) {\n            int sum = (N\
    \ % 10);\n            N = N/10;\n            sb.append(sum);\n        }\n    \
    \    return String.valueOf(sb);\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnxcb_3t0.java:29)\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        int sum = 0;\n        while (true) {\n  \
    \          sb.append(N % 10);\n            N /= 10;\n            sum += N % 10;\n\
    \            if (sum > 9)\n                break;\n        }\n        sb.append(\"\
    1\" + sum);\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = \"\";\n        if (N < 1000) {\n            String t = Integer.toBinaryString(N);\n\
    \            s = t.substring(t.length() - 1);\n        }\n        if (N < 100000000)\
    \ {\n            String t = String.format(\"%\" + Integer.toBinaryString(N).length()\n\
    \                    + \"d\", N);\n            s = t.substring(t.length() - 1);\n\
    \        }\n        return s;\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdtx9_p0j.java:33)\n"
  stdout: ''
  timestamp: 1660011955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        while (n > 0) {\n            sum += n % 10;\n            n = n /\
    \ 10;\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxozi2nqv.java:21: error: cannot find symbol\n        while (n >\
    \ 0) {\n               ^\n  symbol:   variable n\n  location: class Problem\n\
    /tmp/tmpxozi2nqv.java:22: error: cannot find symbol\n            sum += n % 10;\n\
    \                   ^\n  symbol:   variable n\n  location: class Problem\n/tmp/tmpxozi2nqv.java:23:\
    \ error: cannot find symbol\n            n = n / 10;\n            ^\n  symbol:\
    \   variable n\n  location: class Problem\n/tmp/tmpxozi2nqv.java:23: error: cannot\
    \ find symbol\n            n = n / 10;\n                ^\n  symbol:   variable\
    \ n\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toString(N).replaceAll(\"\
    0*$\", \"\").replaceAll(\"1\", \"0\");\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8z90e57m.java:23)\n"
  stdout: ''
  timestamp: 1660011956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String output\
    \ = \"\";\n        ArrayList<Integer> binary = new ArrayList<Integer>();\n   \
    \     while (N !=0){\n            int d = N % 10;\n            N /= 10;\n    \
    \        binary.add(d);\n        }\n        StringBuilder builder = new StringBuilder();\n\
    \        builder.append(\"0\");\n        for (int j = 1; j < binary.size(); j++)\
    \ {\n            builder.append(binary.get(j));\n        }\n        return builder.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphqynt8ai.java:35)\n"
  stdout: ''
  timestamp: 1660011957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here.\n        try{\n            String result = \"\";\n         \
    \   while(true){\n                String remainder = N % 10 + result;\n      \
    \          N = N / 10;\n                result = remainder;\n                if(!N){\n\
    \                    break;\n                }\n            }\n            return\
    \ result;\n        }catch(NumberFormatException e){\n            return \"Number\
    \ format\";\n        }\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpri1k92_p.java:27: error: bad operand type int for unary operator\
    \ '!'\n                if(!N){\n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // write\
    \ your code here\n        return String.valueOf(N);\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprfdjaxpx.java:24)\n"
  stdout: ''
  timestamp: 1660011956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ result = new StringBuilder(\"\");\n        int temp = 0;\n        while (N !=0){\n\
    \            temp = N % 10;\n            N = N / 10;\n            result.append(temp);\n\
    \        }\n        return result.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2oj9btsc.java:30)\n"
  stdout: ''
  timestamp: 1660011957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) return \"\";\n        Set<Integer> digits = IntStream.rangeClosed(1, N).boxed().collect(Collectors.toSet());\n\
    \        return digits.stream().map(i -> (char) ('0' + i)).collect(Collectors.joining());\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpknm124t_.java:22: error: no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \        return digits.stream().map(i -> (char) ('0' + i)).collect(Collectors.joining());\n\
    \                                                         ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Character>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer\
    \ type-variable(s) R#1\n        (actual and formal argument lists differ in length))\n\
    \    method Stream.<R#2,A>collect(Collector<? super Character,A,R#2>) is not applicable\n\
    \      (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Character,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n1 error\n"
  stdout: ''
  timestamp: 1660011956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // write\
    \ your code in Java SE 7\n        StringBuilder sb = new StringBuilder();\n  \
    \      int sum = 0;\n        for (int i = 0; i <= N; i++) {\n            sum +=\
    \ (i & 1);\n            while (sum > 1) {\n                int temp = sum;\n \
    \               sum = temp % 2;\n                sb.insert(0, (temp - sum) + \"\
    \");\n            }\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkvzolrng.java:34)\n"
  stdout: ''
  timestamp: 1660011957
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N < 0)\
    \ return \"\";\n        String result = \"\";\n        double remaining = N;\n\
    \        while (remaining > 0) {\n            remaining = (remaining % 2) + 1;\n\
    \            result += String.valueOf(remaining);\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Base case\n\
    \        if (N == 0)\n            return \"0\";\n        // If N < 10 then do\
    \ nothing\n        if (N <= 9)\n            return Integer.toString(N);\n    \
    \    // Else split N into two numbers, N1 and N2\n        int N1 = N % 10;\n \
    \       int N2 = N / 10;\n        return solve(N1) + solve(N2);\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd8snshic.java:32)\n"
  stdout: ''
  timestamp: 1660011956
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Your code\
    \ here\n        StringBuilder binary = new StringBuilder();\n        for(int x\
    \ = 1; x < N; x++) {\n            int d = x % 10;\n            binary.append(d);\n\
    \            x /= 10;\n        }\n        return binary.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        while(true) {\n            sum += getSum(N);\n            N = sum;\n\
    \            if(sum == 0) break;\n        }\n        return getSum(sum);\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp40zfps1o.java:22: error: cannot find symbol\n            sum +=\
    \ getSum(N);\n                   ^\n  symbol:   method getSum(int)\n  location:\
    \ class Problem\n/tmp/tmp40zfps1o.java:26: error: cannot find symbol\n       \
    \ return getSum(sum);\n               ^\n  symbol:   method getSum(int)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N < 10)\n\
    \            return \"\" + N;\n        else if (N < 100)\n            return \"\
    \" + solve(N / 10);\n        else if (N < 1000)\n            return \"\" + solve(N\
    \ / (10 * 10));\n        else\n            return \"\" + solve(N / (100 * 100));\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjwoo5kpg.java:30)\n"
  stdout: ''
  timestamp: 1660011957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        Map<Character,\
    \ Integer> map = new TreeMap<>();\n        while (N --> 0) {\n            int\
    \ temp = N % 2;\n            if (temp > 0) {\n                map.put('0', map.get('0')\
    \ | temp);\n            } else {\n                map.put('1', map.get('1') |\
    \ temp);\n            }\n            N /= 2;\n        }\n        StringBuilder\
    \ str = new StringBuilder();\n        for (Map.Entry<Character, Integer> entry\
    \ : map.entrySet()) {\n            str.append(entry.getKey());\n            str.append(entry.getValue());\n\
    \        }\n        return str.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.solve(tmpcdeou2h4.java:24)\n\tat Problem.main(tmpcdeou2h4.java:38)\n"
  stdout: ''
  timestamp: 1660011957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if(N < 10)\
    \ {\n            return String.valueOf(N);\n        }\n\n        StringBuilder\
    \ builder = new StringBuilder();\n        builder.append(solve(N / 10));\n   \
    \     builder.append(N % 10);\n        return builder.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kldae60.java:30)\n"
  stdout: ''
  timestamp: 1660011956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"0\";\n        for (int i = 1; i <= N; i++) {\n            result += (Integer.toBinaryString(i)).replace('\
    \ ', '0');\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv280os6u.java:27)\n"
  stdout: ''
  timestamp: 1660011957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        BigInteger\
    \ result = new BigInteger(\"1\");\n        do {\n            int remain = N %\
    \ 10;\n            N /= 10;\n            result = result.add(remain);\n      \
    \  } while (N != 0);\n        return result.mod(2).equals(0) ? result.toString()\
    \ : solve(N);\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw4jl9p8g.java:24: error: no suitable method found for add(int)\n\
    \            result = result.add(remain);\n                           ^\n    method\
    \ BigInteger.add(BigInteger) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to BigInteger)\n    method BigInteger.add(long) is not applicable\n\
    \      (add(long) is not public in BigInteger; cannot be accessed from outside\
    \ package)\n/tmp/tmpw4jl9p8g.java:26: error: incompatible types: int cannot be\
    \ converted to BigInteger\n        return result.mod(2).equals(0) ? result.toString()\
    \ : solve(N);\n                          ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int digit\
    \ = 0;\n        int binaryDigit = 0;\n        String binaryString = \"\";\n\n\
    \        while(N >0) {\n            digit = N % 10;\n            binaryDigit =\
    \ (int) Math.pow(2,digit);\n            binaryString += String.valueOf(binaryDigit);\n\
    \            N /= 10;\n        }\n\n        return binaryString;\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxtbkshq0.java:34)\n"
  stdout: ''
  timestamp: 1660011957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        BigInteger\
    \ sum = null;\n        StringBuilder builder = new StringBuilder();\n        do\
    \ {\n            sum = BigInteger.valueOf(N).divide(BigInteger.valueOf(2).pow(Integer.MAX_VALUE)).add(BigInteger.ONE);\n\
    \            builder.append(sum);\n            N = sum.intValue();\n        }\
    \ while (N > 0);\n        return builder.reverse().toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: BigInteger\
    \ would overflow supported range\n\tat java.base/java.math.BigInteger.reportOverflow(BigInteger.java:1169)\n\
    \tat java.base/java.math.BigInteger.checkRange(BigInteger.java:1164)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:1139)\n\
    \tat java.base/java.math.BigInteger.shiftLeft(BigInteger.java:3326)\n\tat java.base/java.math.BigInteger.pow(BigInteger.java:2450)\n\
    \tat Problem.solve(tmpj07oqk4u.java:23)\n\tat Problem.main(tmpj07oqk4u.java:30)\n"
  stdout: ''
  timestamp: 1660011957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        \n}\n   \
    \ public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpmwxtrfcw.java:21: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        String[] arr = getSumDigits(N);\n       \
    \ for(int i = 0; i < arr.length; i++) {\n            if(arr[i] > 9) {\n      \
    \          sb.append(arr[i] - 10 + '0');\n            } else {\n             \
    \   sb.append(arr[i]);\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7y4b75dt.java:21: error: cannot find symbol\n        String[] arr\
    \ = getSumDigits(N);\n                       ^\n  symbol:   method getSumDigits(int)\n\
    \  location: class Problem\n/tmp/tmp7y4b75dt.java:23: error: bad operand types\
    \ for binary operator '>'\n            if(arr[i] > 9) {\n                    \
    \  ^\n  first type:  String\n  second type: int\n/tmp/tmp7y4b75dt.java:24: error:\
    \ bad operand types for binary operator '-'\n                sb.append(arr[i]\
    \ - 10 + '0');\n                                 ^\n  first type:  String\n  second\
    \ type: int\n3 errors\n"
  stdout: ''
  timestamp: 1660011957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        int i = 0;\n        StringBuilder sb = new StringBuilder();\n  \
    \      while (i <= N) {\n            sum = sum + i;\n            i = i + 1;\n\
    \        }\n        \n        // sb.append(Integer.toBinaryString(sum));\n   \
    \     while(sum>0){\n            int remainder = sum % 2;\n            sum = sum\
    \ / 2;\n            sb = (sb.length() > 0) ? sb.append(remainder).append(sb.toString())\
    \ : remainder;\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgt8ta4_j.java:32: error: incompatible types: bad type in conditional\
    \ expression\n            sb = (sb.length() > 0) ? sb.append(remainder).append(sb.toString())\
    \ : remainder;\n                                                             \
    \                     ^\n    int cannot be converted to StringBuilder\n1 error\n"
  stdout: ''
  timestamp: 1660011957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = \"\";\n        int digit = 0;\n        int sum = 0;\n\n        while(n > 0){\n\
    \            digit = n % 10;\n            sum = (sum + digit);\n            n\
    \ /= 10;\n        }\n        binary = Integer.toString(sum);\n        return binary;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsrcpvv7b.java:24: error: cannot find symbol\n        while(n >\
    \ 0){\n              ^\n  symbol:   variable n\n  location: class Problem\n/tmp/tmpsrcpvv7b.java:25:\
    \ error: cannot find symbol\n            digit = n % 10;\n                   \
    \ ^\n  symbol:   variable n\n  location: class Problem\n/tmp/tmpsrcpvv7b.java:27:\
    \ error: cannot find symbol\n            n /= 10;\n            ^\n  symbol:  \
    \ variable n\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        long sum=0;\n\
    \        while(true){\n            if(N==0){\n                return Long.toBinaryString(sum);\n\
    \            }\n            long x=N%10;\n            sum+=x;\n            N=N/10;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) return Integer.toString(0);\n        if (N == 1) return Integer.toString(1);\n\
    \        if (N < 0) return \"INVALID INPUT\";\n        StringBuilder sb = new\
    \ StringBuilder(8);\n        while (N /= 2) {\n            N /= 2;\n         \
    \   char temp = n % 2 == 0 ? '0' : '1';\n            sb.append(temp);\n      \
    \  }\n        return Integer.toString(Integer.parseInt(sb.toString()) + 1);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp13izm8rf.java:24: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (N /= 2) {\n                 ^\n/tmp/tmp13izm8rf.java:26:\
    \ error: cannot find symbol\n            char temp = n % 2 == 0 ? '0' : '1';\n\
    \                        ^\n  symbol:   variable n\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) {\n            return \"0\";\n        }\n        int[] digitSum = new int[10];\n\
    \        digits[0] = 1;\n        int sum = 0;\n        int remainder = 0;\n  \
    \      int power = 1;\n        do {\n            sum = 0;\n            while (N\
    \ != 0) {\n                sum = sum + N % 10;\n                N = N / 10;\n\
    \            }\n            digitSum[power] = sum;\n            power++;\n   \
    \     } while (N != 0);\n        String result = \"\";\n        for (int i = 1;\
    \ i < digitSum.length; i++) {\n            int digit = digitSum[i] - digitSum[i\
    \ - 1];\n            if (i != 0) {\n                result = result + \"1\" +\
    \ digit;\n            } else {\n                result = result + digit;\n   \
    \         }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp27_wnwb2.java:24: error: cannot find symbol\n        digits[0]\
    \ = 1;\n        ^\n  symbol:   variable digits\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        while (N !=0){\n            sum = sum + N % 2;\n            N =\
    \ N/2;\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd66swtev.java:28)\n"
  stdout: ''
  timestamp: 1660011958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        String binaryString = \"\";\n        while (N !=  0) {\n       \
    \     int quotient = N % 10;\n            sum += quotient;\n            N = N\
    \ / 10;\n            binaryString = quotient + binaryString;\n        }\n    \
    \    return sum + binaryString;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ojfm0u9.java:31)\n"
  stdout: ''
  timestamp: 1660011958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        int sumDividedByTwo = 0;\n        while (N >0) {\n            sum\
    \ += N % 10;\n            N /= 10;\n        }\n        if (sum == 0) {\n     \
    \       return \"0\";\n        }\n        int sumOfTwo = sum / 2;\n        while\
    \ (sumOfTwo > 10) {\n            sumOfTwo = sumOfTwo / 10;\n        }\n      \
    \  int sumOfTwoInReverse = sumOfTwo;\n        sumOfTwoInReverse = sumOfTwoInReverse\
    \ * 2;\n        String result = \"\";\n        while (sumOfTwoInReverse >0) {\n\
    \            result = sumOfTwoInReverse % 2 + result;\n            sumOfTwoInReverse\
    \ = sumOfTwoInReverse / 2;\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptexn45uc.java:43)\n"
  stdout: ''
  timestamp: 1660011958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        int i = 1;\n        int j = N;\n        while(j !=0){\n   \
    \         result += Integer.toBinaryString(j % 2);\n            i ++;\n      \
    \      j = j / 2;\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf8a1abxv.java:31)\n"
  stdout: ''
  timestamp: 1660011958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // write\
    \ your code here\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 1; i <= N; i++) {\n            int remainder = i % 10;\n     \
    \       String s = remainder + \"\";\n            if (s.length() == 1) {\n   \
    \             result.append('0');\n            }\n            result.append((char)\
    \ (s.length() - 1));\n        }\n        return result.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyztgqj4m.java:33)\n"
  stdout: ''
  timestamp: 1660011958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = \"\";\n        double sum = 0;\n        StringBuilder sb = new StringBuilder();\n\
    \        long x = 0;\n        long s = 1;\n        double power = 1;\n       \
    \ int length = N;\n        while (length > 0) {\n            sum = 0;\n      \
    \      while (x != 0) {\n                sum += pow(x, power);\n             \
    \   x /= 10;\n                power *= 2;\n            }\n            s = (int)(s\
    \ * sum);\n            sb.append(s);\n            length--;\n            power\
    \ = 1;\n            sum = 0;\n        }\n        s = Double.parseDouble(sb.toString());\n\
    \        sb.delete(0, sb.length());\n        s = String.valueOf(s);\n        return\
    \ s;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzbaug3mg.java:24: error: variable s is already defined in method\
    \ solve(int)\n        long s = 1;\n             ^\n/tmp/tmpzbaug3mg.java:30: error:\
    \ cannot find symbol\n                sum += pow(x, power);\n                \
    \       ^\n  symbol:   method pow(long,double)\n  location: class Problem\n/tmp/tmpzbaug3mg.java:40:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \       s = Double.parseDouble(sb.toString());\n                             \
    \ ^\n/tmp/tmpzbaug3mg.java:42: error: incompatible types: String cannot be converted\
    \ to long\n        s = String.valueOf(s);\n                          ^\n/tmp/tmpzbaug3mg.java:43:\
    \ error: incompatible types: long cannot be converted to String\n        return\
    \ s;\n               ^\n5 errors\n"
  stdout: ''
  timestamp: 1660011958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int n = N;\n\
    \        String ans = \"\";\n        while (n != 0) {\n            int x = n %\
    \ 10;\n            ans = x + (ans + \"0\");\n            n = n / 10;\n       \
    \ }\n        return ans.substring(1);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps2sbb83i.java:30)\n"
  stdout: ''
  timestamp: 1660011958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // code here\n\
    \        StringBuilder output = new StringBuilder();\n        int i = 1;\n   \
    \     while (i <= N) {\n            output.append(i);\n            i = i * 2 +\
    \ 1;\n        }\n        return output.toString();\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp337j5220.java:30)\n"
  stdout: ''
  timestamp: 1660011958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        char[] digits\
    \ = N + '0'.toCharArray();\n        StringBuilder builder = new StringBuilder();\n\
    \        \n        //String value = \"\";\n        //int sum = 0;\n        int\
    \ length = 0;\n        boolean bSum = false;\n        \n        for(int i = 0;\
    \ i < digits.length; i++){\n            if(digits[i] != 0){\n                length\
    \ = length - 1;\n                if(length == 0){\n                    builder.append((char)\
    \ digits[i]);\n                    bSum = true;\n                }\n         \
    \       else{\n                    builder.append((char) digits[i]);\n       \
    \             bSum = false;\n                }\n            }\n        }\n   \
    \     \n        if(bSum){\n            builder.reverse();\n        }\n       \
    \ //return builder.toString();\n        return builder.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2b1r47wz.java:20: error: char cannot be dereferenced\n        char[]\
    \ digits = N + '0'.toCharArray();\n                               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        N = N < 0 ? 0 : N;\n        for (int i = N; i > 0; i /= 2)\n\
    \            result += (i & 1 ? 1 : 0);\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjxks95qw.java:23: error: incompatible types: int cannot be converted\
    \ to boolean\n            result += (i & 1 ? 1 : 0);\n                       \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) return \"\";\n        int[] binary = {0, 0};\n        while (N --> 0)\n \
    \           binary[N & 1]++;\n        return Arrays.stream(binary).mapToObj(x\
    \ -> Integer.toString(x)).collect(Collectors.joining());\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwouw2ie.java:27)\n"
  stdout: ''
  timestamp: 1660011958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        int tmp = N;\n        while (tmp > 0) {\n            int digit =\
    \ tmp % 10;\n            sum += digit;\n            tmp = tmp / 10;\n        }\n\
    \        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiksipmly.java:31)\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        String one = \"1\";\n        String two =\
    \ \"10\";\n        String three = \"11\";\n        String four = \"100\";\n  \
    \      String five = \"101\";\n        String six = \"110\";\n        String seven\
    \ = \"111\";\n        String digit;\n        char oneChar;\n        char twoChar;\n\
    \        char threeChar;\n        char fourChar;\n        char fiveChar;\n   \
    \     char sixChar;\n        char sevenChar;\n        for (int i = 0; i < N; i++)\
    \ {\n            digit = (i + \"\").substring(1);\n            oneChar = (char)\
    \ Integer.parseInt(digit);\n            twoChar = (char) Integer.parseInt(two\
    \ + digit);\n            threeChar = (char) Integer.parseInt(three + digit);\n\
    \            fourChar = (char) Integer.parseInt(four + digit);\n            fiveChar\
    \ = (char) Integer.parseInt(five + digit);\n            sixChar = (char) Integer.parseInt(six\
    \ + digit);\n            sevenChar = (char) Integer.parseInt(seven + digit);\n\
    \            sb.append(oneChar);\n            sb.append(twoChar);\n          \
    \  sb.append(threeChar);\n            sb.append(fourChar);\n            sb.append(fiveChar);\n\
    \            sb.append(sixChar);\n            sb.append(sevenChar);\n        }\n\
    \        return sb.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.solve(tmp7ewvt0_7.java:38)\n\tat Problem.main(tmp7ewvt0_7.java:56)\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ result = new StringBuilder();\n        while (true) {\n            int sum =\
    \ 0;\n            int digits = 0;\n            while (N != 0) {\n            \
    \    int remainder = N % 10;\n                sum += remainder;\n            \
    \    digits += 1;\n                N /= 10;\n            }\n            result.append(sum);\n\
    \            if (sum == 0 && digits == 0) {\n                return result.toString();\n\
    \            }\n            result.insert(0, sum % 2);\n            int remainder\
    \ = N % 10;\n            result.append(remainder);\n            N /= 10;\n   \
    \     }\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0h6v3rs6.java:41)\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N < 0)\
    \ {\n            throw new IllegalArgumentException(\"Invalid Number\");\n   \
    \     }\n\n        ArrayList<Integer> digits = new ArrayList<>();\n        while\
    \ (N /= 10)\n            digits.add(N %10);\n        StringBuilder builder = new\
    \ StringBuilder();\n\n        for (int i = 0; i < digits.size(); i++)\n      \
    \      builder.append(digits.get(i));\n        return builder.toString();\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr3khto3.java:25: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (N /= 10)\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int num =\
    \ 0;\n        int numCount = 0;\n        int sum = 0;\n        boolean check =\
    \ false;\n        while(numCount < 10){\n            sum = 0;\n            num\
    \ = num * 10 + (N % 10);\n            N = N/10;\n            numCount++;\n   \
    \         if(N == 0){\n                check = true;\n            }\n        }\n\
    \        if(check){\n            num = num * 10;\n        }\n        while(numCount\
    \ >= 10){\n            sum = sum + num % 10;\n            num = num / 10;\n  \
    \          numCount--;\n        }\n        if(check){\n            sum = sum +\
    \ num;\n        }\n        if(sum > 9){\n            return String.valueOf(sum\
    \ - 10);\n        }\n        return String.valueOf(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpatc4dftr.java:50)\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int n = N;\n\
    \        StringBuilder sb = new StringBuilder();\n\n        while(n>0){\n    \
    \        sb.append((int)Math.pow(2,n%10));\n            n = n/10;\n        }\n\
    \n        return sb.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5whpsl41.java:31)\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N <=\
    \ 0) {\n            return \"Error\";\n        }\n        String result = \"\"\
    ;\n        List<Integer> digits = new ArrayList<Integer>();\n        while (N\
    \ > 0) {\n            digits.add(N % 10);\n            N /= 10;\n        }\n \
    \       Collections.sort(digits);\n        System.out.println(digits);\n     \
    \   for (int d : digits) {\n            int sum = 0;\n            int carry =\
    \ 0;\n            for (int i = digits.size() - 1; i >= 0; i--) {\n           \
    \     sum += digits.get(i) * Math.pow(2, i);\n                carry = sum / 10;\n\
    \                sum -= carry * Math.pow(2, i);\n            }\n            result\
    \ += String.valueOf(carry + sum % 10);\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1qko_q9u.java:44)\n"
  stdout: '[0, 0, 0, 1]

    '
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        System.out.println(N);\n\
    \        String result = \"\";\n        if (N == 0)\n            result += \"\
    0\";\n        else\n            result += (solve(N >> 1) + solve(N & 1));\n  \
    \      return result;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.io.FileOutputStream.write(FileOutputStream.java:349)\n\
    \tat java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)\n\
    \tat java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)\n\
    \tat java.base/java.io.PrintStream.write(PrintStream.java:570)\n\tat java.base/sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:234)\n\
    \tat java.base/sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:313)\n\
    \tat java.base/sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:111)\n\t\
    at java.base/java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:178)\n\
    \tat java.base/java.io.PrintStream.writeln(PrintStream.java:723)\n\tat java.base/java.io.PrintStream.println(PrintStream.java:938)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:20)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Problem.solve(tmpe0p6o0ku.java:25)\n\tat Problem.solve(tmpe0p6o0ku.java:25)\n\
    \tat Pro"
  stdout: '1000

    500

    250

    125

    62

    31

    15

    7

    3

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    0

    1

    '
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        long sum\
    \ = 0;\n        while (N --> 0) sum++; // sum of the digits\n        int digits\
    \ = (int)Math.floor(Math.log(N)/Math.log(2));\n        String res = \"\";\n  \
    \      while (digits --> 0) res += \"1\";\n        while (sum --> 0) res += \"\
    0\";\n        return res;\n}\n    public static void main(String[] args) {\n \
    \   assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphgm4zsfm.java:29)\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ builder = new StringBuilder();\n        int sum = 0;\n        while (N !=  0)\
    \ {\n            int last = N %10;\n            N /= 10;\n            sum += last;\n\
    \            builder.append(last);\n        }\n        builder.insert(0, sum +\
    \ \"\");\n        return builder.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9qctljc.java:32)\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String[]\
    \ results = new String[100];\n        int sum = 0;\n        long x = 0;\n    \
    \    int count = 0;\n        int power = 0;\n        int lastDigit = 0;\n    \
    \    int lastDigitCount = 0;\n        for(int i = 0; i< N; i++) {\n          \
    \  sum = 0;\n            power = i;\n            lastDigit = x % 10;\n       \
    \     lastDigitCount = 1;\n            while(x > 0) {\n                sum = (sum*10)\
    \ + (lastDigit % 2);\n                lastDigit = (lastDigit/2);\n           \
    \     lastDigitCount++;\n            }\n            results[count] = Integer.toString(sum)\
    \ + Integer.toString(lastDigitCount);\n            count++;\n            x /=\
    \ 10;\n        }\n        String s = String.join(\"\", results);\n        s =\
    \ s.substring(0, s.length()-1);\n        return s;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxh8dyq0v.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n            lastDigit = x % 10;\n                        \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        BigInteger n = new BigInteger(String.valueOf(Math.abs(N)));\n\
    \        BigInteger remainder = n.mod(BigInteger.valueOf(10));\n        \n   \
    \     String binary = remainder.toString();\n        while(binary.length() > 1)\
    \ {\n            sb.insert(0, remainder.mod(BigInteger.valueOf(2)));\n       \
    \     remainder = remainder.divide(BigInteger.valueOf(2));\n            binary\
    \ = remainder.toString();\n        }\n        \n        if(binary.length() ==\
    \ 1) sb.insert(0, remainder.mod(BigInteger.valueOf(2)));\n        \n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx256gxjp.java:36)\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if(N < 0)\n\
    \            return \"-1\";\n        int sum = 0;\n        while(n != 0) {\n \
    \           sum = sum + n % 10;\n            n = n / 10;\n        }\n        return\
    \ String.valueOf(sum);\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjvt1n2e1.java:23: error: cannot find symbol\n        while(n !=\
    \ 0) {\n              ^\n  symbol:   variable n\n  location: class Problem\n/tmp/tmpjvt1n2e1.java:24:\
    \ error: cannot find symbol\n            sum = sum + n % 10;\n               \
    \         ^\n  symbol:   variable n\n  location: class Problem\n/tmp/tmpjvt1n2e1.java:25:\
    \ error: cannot find symbol\n            n = n / 10;\n            ^\n  symbol:\
    \   variable n\n  location: class Problem\n/tmp/tmpjvt1n2e1.java:25: error: cannot\
    \ find symbol\n            n = n / 10;\n                ^\n  symbol:   variable\
    \ n\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // write\
    \ your code in Java here\n        String result = \"\";\n        int count = 1;\n\
    \        while(count <= N) {\n            String s = Integer.toString(count);\n\
    \            int pos = s.indexOf(\"1\");\n            String temp = s.substring(0,\
    \ pos);\n            result += temp;\n            count = count*10 + 1;\n    \
    \    }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2phv0r6r.java:33)\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Code here\n\
    \        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n      \
    \  final int log2 = (int) (Math.log(N)/Math.log(2));\n        List<String> digits\
    \ = Arrays.asList(N%2 == 0 ? \"1\" : \"0\", Integer.toString(N/2), (N/2&1) ==\
    \ 1 ? \"\" : \"1\");\n        return String.join(\"\", digits);\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8wpvk9li.java:28)\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        for(int i = 1; i < N; i = i + 1) {\n            sum = sum + N %\
    \ 10;\n            N = N / 10;\n        }\n        String binary = Integer.toString(sum);\n\
    \        return binary;\n}\n    public static void main(String[] args) {\n   \
    \ assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"110\"\
    )));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvdweqkww.java:29)\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ binaryN = new StringBuilder();\n        for (int i = 1; i < (N >>> 1); ++i)\
    \ {\n            binaryN.append(i & 1 ? \"1\" : \"0\");\n        }\n        return\
    \ binaryN.toString();\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6uzq5e_u.java:22: error: incompatible types: int cannot be converted\
    \ to boolean\n            binaryN.append(i & 1 ? \"1\" : \"0\");\n           \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        boolean flag = true;\n        int i = 1;\n        while (flag) {\n\
    \            if ((N / i) % 2 == 0) {\n                sum += i;\n            \
    \    i++;\n            } else {\n                sum -= i;\n                i++;\n\
    \            }\n            flag = N < i;\n        }\n        return Integer.toString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwg469ox5.java:37)\n"
  stdout: ''
  timestamp: 1660011960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // write\
    \ your code here\n        String result = \"\";\n        int sum = 0;\n      \
    \  for (int i = 0; i <= N; i++) {\n            int reminder = N % 10;\n      \
    \      sum = sum + reminder;\n            N = N / 10;\n        }\n        result\
    \ = Integer.toString(sum);\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg1xcs266.java:32)\n"
  stdout: ''
  timestamp: 1660011960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) {\n            return \"0\";\n        }\n        final String binaryString\
    \ = getBinaryString(N);\n        final String binarySum = binaryString.substring(binaryString.length()\
    \ - 1);\n        return binarySum;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgvh86gsu.java:23: error: cannot find symbol\n        final String\
    \ binaryString = getBinaryString(N);\n                                    ^\n\
    \  symbol:   method getBinaryString(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        double sum\
    \ = 0;\n        double digitSum = 0;\n        int lastDigit = 0;\n        String\
    \ result = \"\";\n        for (int i = 0; i < N; i++) {\n            sum += ((N\
    \ % 10) * Math.pow(10, i));\n            digitSum = sum / Math.pow(10, i);\n \
    \           lastDigit = digitSum % 10;\n            sum = digitSum / 10;\n   \
    \         result += lastDigit + \"\";\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ghlcer5.java:27: error: incompatible types: possible lossy conversion\
    \ from double to int\n            lastDigit = digitSum % 10;\n               \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        while (N /= 10) {\n            sum += N % 10;\n            N /=\
    \ 10;\n        }\n        return String.valueOf(sum);\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7axczpsm.java:21: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (N /= 10) {\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011960
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        long sum\
    \ = 0;\n        int temp = 0;\n        int sumOfDigits = 0;\n        while(N !=0){\n\
    \            temp = N % 10;\n            sum += temp;\n            sumOfDigits\
    \ += temp;\n            N = N/10;\n        }\n        if(sumOfDigits == 0)\n \
    \           sum = sum + 1;\n        long pow = sum;\n        StringBuilder output\
    \ = new StringBuilder();\n        while(sumOfDigits >0){\n            String temp1\
    \ = String.valueOf(sumOfDigits % 10);\n            String temp2 = String.valueOf(sumOfDigits\
    \ % 2);\n            sumOfDigits /= 2;\n            sumOfDigits = sumOfDigits\
    \ + 1;\n            output.append(temp1);\n            output.append(temp2);\n\
    \            sumOfDigits = sumOfDigits + 1;\n        }\n        return output.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        long sum\
    \ = 0;\n        int numDigits = (int) Math.log10(N) + 1;\n        char[] digits\
    \ = String.valueOf(N).toCharArray();\n        int index = 0;\n        while (digits[index]\
    \ == '1') {\n            sum += (int) Math.pow(10, numDigits - index - 1);\n \
    \           index++;\n        }\n        if (digits[index] == '1') {\n       \
    \     sum += (int) Math.pow(10, numDigits - index - 1);\n        }\n        StringBuilder\
    \ result = new StringBuilder(String.valueOf(sum));\n        while (index > 0)\
    \ {\n            int digit = digits[index - 1] - '0';\n            if (digit >\
    \ 0) {\n                result.insert(0, (char)('0' + digit));\n            }\
    \ else {\n                result.insert(0, (char)('1' + digit));\n           \
    \ }\n            index--;\n        }\n        return result.toString();\n}\n \
    \   public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsii_507m.java:44)\n"
  stdout: ''
  timestamp: 1660011960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binaryN\
    \ = \"\";\n        int sum = 0;\n        while(N !=0) {\n            sum=sum+(N%2);\n\
    \            N=N/2;\n        }\n        binaryN=Integer.toString(sum);\n     \
    \   return binaryN;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphuu55nnt.java:30)\n"
  stdout: ''
  timestamp: 1660011960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        \n      \
    \  if (N < 0) throw new IllegalArgumentException();\n        if (N > 1000) throw\
    \ new IllegalArgumentException();\n        int sum = 0;\n        StringBuilder\
    \ sb = new StringBuilder();\n        do {\n            int digit = (int)Math.pow(2,N);\n\
    \            if (N < 10) sb.append(Integer.toString(digit));\n            else\
    \ {\n                int count = (int)(Math.log10(digit)-Math.log10(2));\n   \
    \             for (int i = 0; i < count; i++) {\n                    sb.append(\"\
    1\");\n                    digit = digit/10;\n                }\n            \
    \    sb.append(Integer.toString(digit));\n            }\n            sum += digit;\n\
    \            N /= 10;\n        } while(N !=  0);\n        if (N < 10) {\n    \
    \        sb.append(\"0\");\n        }\n        return sb.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdmligjao.java:45)\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        int remainder;\n        while (N != 0) {\n            int quotient\
    \ = N / 10;\n            sum += quotient;\n            N = N % 10;\n        }\n\
    \        remainder = sum;\n        String s = \"\";\n        while (sum != 0)\
    \ {\n            s += (remainder % 2 == 1 ? \"1\" : \"0\");\n            sum -=\
    \ remainder % 2;\n            remainder = sum / 2;\n        }\n        return\
    \ s;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Your code\
    \ here\n        Stack<Integer> stack = new Stack<Integer>();\n        int total\
    \ = 0;\n        while(stack.isEmpty() == false){\n            stack.push(N);\n\
    \            N = N / 10;\n        }\n        for(int i = 0; i<stack.size(); i++){\n\
    \            total += stack.get(i) % 2;\n        }\n        StringBuilder sb =\
    \ new StringBuilder();\n        while(total > 0){\n            sb.append((total\
    \ % 2 == 0) ? \"1\" : \"0\");\n            total /= 2;\n        }\n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3dz3392l.java:38)\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"0\";\n        int numDigits = N;\n        int remainder = N;\n        while\
    \ (numDigits > 0) {\n            remainder = N % 10;\n            result += Integer.toString(remainder);\n\
    \            N = N / 10;\n            numDigits--;\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprzv_635p.java:32)\n"
  stdout: ''
  timestamp: 1660011960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        String str = binary(N);\n        int pos = str.length() - 1;\n \
    \       while(pos>=0){\n            sum += Integer.parseInt(str.substring(pos,\
    \ pos));\n            pos--;\n        }\n        return sum+\"\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr__r_k1e.java:21: error: cannot find symbol\n        String str\
    \ = binary(N);\n                     ^\n  symbol:   method binary(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N !=0){\n            int temp=N%10;\n\
    \            sb.append(String.valueOf(temp));\n            N=N/10;\n        }\n\
    \        return sb.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5jry5940.java:29)\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if(N==0){\n\
    \            return \"0\";\n        }\n        if(N==1){\n            return \"\
    1\";\n        }\n        int sum = 0;\n        String s = \"\";\n        while(true){\n\
    \            sum+=N%10;\n            int rest = N%10;\n            N=N/10;\n \
    \           int count = 1;\n            while(count>0){\n                if(rest==0){\n\
    \                    break;\n                }\n                sum+=rest;\n \
    \               rest-=count*rest;\n                count++;\n            }\n \
    \           if(sum>1){\n                String t = \"\";\n                while(sum>1){\n\
    \                    t += \"1\";\n                    sum--;\n               \
    \ }\n                s = s + t;\n                s=s+t;\n            }\n     \
    \       else{\n                break;\n            }\n        }\n        return\
    \ s;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvb3bwvsh.java:57)\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N < 0)\
    \ return \"-1\";\n        String ans = \"\";\n        while (N > 0) {\n      \
    \      ans = String.valueOf((N % 2 == 0 ? 1 : 0)) + ans;\n            N = N /\
    \ 2;\n        }\n        return ans;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsfywuur6.java:29)\n"
  stdout: ''
  timestamp: 1660011960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ output = new StringBuilder();\n        long remainder = N;\n        String remainderStr\
    \ = \"\";\n        while (true) {\n            long nextRemainder = (remainder\
    \ % 2 == 0) ? remainder / 2 : remainder - remainder / 2;\n            int nextDigit\
    \ = nextRemainder % 10;\n            remainderStr = nextRemainder >= 10 ? nextRemainder\
    \ : Integer.toString(nextRemainder);\n            output.append(nextDigit);\n\
    \            remainder = nextRemainder / 10;\n            if (nextRemainder <\
    \ 10 || nextRemainder == 0) {\n                break;\n            }\n       \
    \ }\n        return output.reverse().toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpen36a9k3.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int nextDigit = nextRemainder % 10;\n        \
    \                                  ^\n/tmp/tmpen36a9k3.java:26: error: incompatible\
    \ types: bad type in conditional expression\n            remainderStr = nextRemainder\
    \ >= 10 ? nextRemainder : Integer.toString(nextRemainder);\n                 \
    \                                ^\n    long cannot be converted to String\n/tmp/tmpen36a9k3.java:26:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        remainderStr = nextRemainder >= 10 ? nextRemainder : Integer.toString(nextRemainder);\n\
    \                                                                            \
    \      ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) return \"\";\n        int n = N;\n        String binaryResult = \"\";\n \
    \       do {\n            binaryResult += getBinaryDigit(n--);\n        } while\
    \ (n >= 0);\n        return binaryResult;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzcoigs3a.java:24: error: cannot find symbol\n            binaryResult\
    \ += getBinaryDigit(n--);\n                            ^\n  symbol:   method getBinaryDigit(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int result\
    \ = 0;\n        while (N !=0){\n            result += N % 2;\n            N =\
    \ N/2;\n        }\n        return String.valueOf(result);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjs3ziu1z.java:28)\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        long sum\
    \ = 0;\n        char digit;\n\n        for(; N > 0; N /= 2) {\n            sum\
    \ += N % 2 == 0 ? 1 : -1;\n        }\n\n        digit = sum + '0';\n        return\
    \ String.valueOf(digit);\n}\n    public static void main(String[] args) {\n  \
    \  assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpix16uq8r.java:27: error: incompatible types: possible lossy conversion\
    \ from long to char\n        digit = sum + '0';\n                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        for (int i = 0; i < N; i++) {\n            String binary =\
    \ String.format(\"%\" + String.format(\"%1$\" + i, N) + \"s\", \"\");\n      \
    \      for (int j = 0; j < binary.length(); j++) {\n                result +=\
    \ binary.charAt(j);\n            }\n        }\n        return result;\n}\n   \
    \ public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.UnknownFormatConversionException:\
    \ Conversion = '1'\n\tat java.base/java.util.Formatter.parse(Formatter.java:2750)\n\
    \tat java.base/java.util.Formatter.format(Formatter.java:2671)\n\tat java.base/java.util.Formatter.format(Formatter.java:2625)\n\
    \tat java.base/java.lang.String.format(String.java:4143)\n\tat Problem.solve(tmpkntmg10f.java:22)\n\
    \tat Problem.main(tmpkntmg10f.java:30)\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        int sum = 0;\n        while (sum < N) {\n\
    \            sb.append(String.valueOf(N & 1));\n            N >>>= 1;\n      \
    \      sum++;\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptnrpimcf.java:30)\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ output = new StringBuilder(\"\");\n        while (N !=  0) {\n            N\
    \ = N / 10;\n            output.append(N % 10);\n        }\n        return output.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpci5pzwyg.java:28)\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        String str = Integer.toBinaryString(N);\n        for (int i = 0;\
    \ i < str.length(); i++)\n            sum += Integer.parseInt(str.substring(i,\
    \ i + 1));\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpstlrds3d.java:27)\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return String.format(\"\
    %0\" + N + \"d\", N);\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxklmw1xu.java:23)\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binarySum\
    \ = String.valueOf(Integer.toBinaryString(N));\n        List<Integer> digits =\
    \ binarySum.replaceAll(\".\", \"\").chars().mapToObj(c -> (int) c).collect(Collectors.toList());\n\
    \        return digits.stream().map(String::valueOf).reduce(Integer::sum).map(String::valueOf(2)).reduce((a,\
    \ b) -> a + b).map(String::valueOf).collect(Collectors.joining());\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5y8roymo.java:22: error: ')' expected\n        return digits.stream().map(String::valueOf).reduce(Integer::sum).map(String::valueOf(2)).reduce((a,\
    \ b) -> a + b).map(String::valueOf).collect(Collectors.joining());\n         \
    \                                                                            \
    \       ^\n1 error\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return String.join(\"\
    \",\n                IntStream.range(0, N).mapToObj(i -> getDigit(i, N))\n   \
    \                     .collect(Collectors.toList()));\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbvlnjqcr.java:20: error: no suitable method found for join(String,List<Object>)\n\
    \        return String.join(\"\",\n                     ^\n    method String.join(CharSequence,CharSequence...)\
    \ is not applicable\n      (varargs mismatch; inference variable R has incompatible\
    \ bounds\n          equality constraints: List<T#2>\n          lower bounds: CharSequence,Object)\n\
    \    method String.join(CharSequence,Iterable<? extends CharSequence>) is not\
    \ applicable\n      (argument mismatch; inference variable T#2 has incompatible\
    \ bounds\n          lower bounds: CharSequence,Object\n          lower bounds:\
    \ Object)\n  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared\
    \ in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared\
    \ in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared\
    \ in interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    /tmp/tmpbvlnjqcr.java:21: error: cannot find symbol\n                IntStream.range(0,\
    \ N).mapToObj(i -> getDigit(i, N))\n                                         \
    \           ^\n  symbol:   method getDigit(int,int)\n  location: class Problem\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Your code\
    \ goes here\n        String result = Integer.toString(N);\n        char[] chars\
    \ = result.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder\
    \ sb = new StringBuilder();\n        while(!chars.isEmpty()) {\n            sb.append(chars.charAt(0));\n\
    \            char[] rest = chars.clone();\n            Arrays.fill(rest, 1, chars.length,\
    \ ' ');\n            chars = rest;\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5a3tlqu1.java:25: error: cannot find symbol\n        while(!chars.isEmpty())\
    \ {\n                    ^\n  symbol:   method isEmpty()\n  location: variable\
    \ chars of type char[]\n/tmp/tmp5a3tlqu1.java:26: error: cannot find symbol\n\
    \            sb.append(chars.charAt(0));\n                           ^\n  symbol:\
    \   method charAt(int)\n  location: variable chars of type char[]\n2 errors\n"
  stdout: ''
  timestamp: 1660011961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        for (int i = 0; i <= N; i++) {\n            sum += getDigit(i);\n\
    \        }\n        return getBinaryDigit(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsw2nxtsm.java:22: error: cannot find symbol\n            sum +=\
    \ getDigit(i);\n                   ^\n  symbol:   method getDigit(int)\n  location:\
    \ class Problem\n/tmp/tmpsw2nxtsm.java:24: error: cannot find symbol\n       \
    \ return getBinaryDigit(sum);\n               ^\n  symbol:   method getBinaryDigit(int)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        Long sum\
    \ = 0;\n        Long two = Long.valueOf(2);\n        int ten = Integer.valueOf(10);\n\
    \        int counter = 0;\n        StringBuilder result = new StringBuilder();\n\
    \        while (N > 0) {\n            counter++;\n            sum = (sum * ten)\
    \ + (N % ten);\n            N /= ten;\n        }\n        if (N > 1) {\n     \
    \       sum = (sum * two) + (N % two);\n            N /= two;\n        }\n   \
    \     while (N > 0) {\n            result.append(N % 2 == 0 ? 1 : 0);\n      \
    \      N /= 2;\n        }\n        System.out.println(result);\n        System.out.println(counter);\n\
    \        return (sum < 10 ? \"0\" : \"\") + sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm6il337h.java:20: error: incompatible types: int cannot be converted\
    \ to Long\n        Long sum = 0;\n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N < 0)\
    \ return \"\";\n        int rem = N % 2;\n        while (N /= 2)\n           \
    \ rem += (N & 1) * (1 - (N & 1) * rem);\n        return rem == 0 ? \"1\" : \"\
    0\" + rem.toString();\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfe9b5ddz.java:22: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (N /= 2)\n                 ^\n/tmp/tmpfe9b5ddz.java:24:\
    \ error: int cannot be dereferenced\n        return rem == 0 ? \"1\" : \"0\" +\
    \ rem.toString();\n                                         ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = \"\";\n        if (N < 0) return \"-1\";\n        for (int i = 0; i < N; i++)\n\
    \            s += getSum(i);\n        return s;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpij3dsdib.java:23: error: cannot find symbol\n            s += getSum(i);\n\
    \                 ^\n  symbol:   method getSum(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N <=\
    \ 0) return \"0\";\n        char[] chars = Integer.toString(N).toCharArray();\n\
    \        StringBuilder builder = new StringBuilder();\n        for (int i = 0;\
    \ i < chars.length; i++) {\n            int val = chars[i] - '0';\n          \
    \  builder.append(val);\n        }\n        return builder.toString();\n}\n  \
    \  public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0u9sjcs.java:30)\n"
  stdout: ''
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return String.valueOf(solve(N));\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat Problem.solve(tmpwpk626q4.java:20)\n\tat Problem.solve(tmpwpk626q4.java:20)\n\
    \tat"
  stdout: ''
  timestamp: 1660011962
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = \"\";\n        int sum = 0;\n        boolean cont = true;\n        int i =\
    \ 1;\n        while(cont) {\n            sum = 0;\n            cont = false;\n\
    \            while(i <= N) {\n                sum = sum + i % 10;\n          \
    \      i = i / 10;\n                if(i > 1) {\n                    cont = true;\n\
    \                    break;\n                }\n            }\n            s =\
    \ s + sum;\n        }\n        return s;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011967
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        int lastDigit = 0;\n        long lastSum = 0;\n        while(N >\
    \ 0){\n            int digit = N % 10;\n            sum = (sum*2) + digit;\n \
    \           lastDigit = lastDigit * 2 + digit;\n            N = N / 10;\n    \
    \    }\n        lastSum = lastSum*2 + sum;\n        if(lastDigit == lastSum){\n\
    \            return \"\" + lastDigit;\n        }else{\n            return lastDigit\
    \ + solve(lastSum);\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2drwbgbk.java:33: error: incompatible types: possible lossy conversion\
    \ from long to int\n            return lastDigit + solve(lastSum);\n         \
    \                            ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        for(int i = 1; i <= N; i++) {\n            sum += (i % 2 == 0) ?\
    \ i%2 : 0;\n        }\n        String output = \"\";\n        while(sum > 0) {\n\
    \            int rem = sum % 2;\n            output += (rem > 0) ? \"1\" : \"\
    0\";\n            sum = (sum - rem) / 2;\n        }\n        return output;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqbe5nvbi.java:33)\n"
  stdout: ''
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        if (N <= 0) return \"0\";\n        while (N !=  0) {\n         \
    \   sum += N % 10;\n            N = N / 10;\n        }\n        return Integer.toString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm4j7koul.java:30)\n"
  stdout: ''
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        long sum\
    \ = 0;\n        int digit = 0;\n        while (sum < N) {\n            digit =\
    \ (int) (sum % 10);\n            sum += (digit << 1);\n        }\n        int\
    \ lastDigit = 0;\n        int remainder;\n        while (sum >= 10) {\n      \
    \      remainder = sum % 10;\n            sum += (remainder * 10L);\n        \
    \    lastDigit = (int) remainder;\n            sum += (lastDigit << 1);\n    \
    \    }\n        if (lastDigit == 0) {\n            return String.valueOf(digit);\n\
    \        } else {\n            return String.valueOf(digit) + String.valueOf(lastDigit);\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkl0byw1u.java:29: error: incompatible types: possible lossy conversion\
    \ from long to int\n            remainder = sum % 10;\n                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Variables:\n\
    \        // @N integer\n        // Constraints: 0 \u2264 N \u2264 10000.\n   \
    \     int sum = 0;\n        int remainder = N % 10;\n        if (N < 10) {\n \
    \           System.out.println(\"0\" + N);\n            return N;\n        }\n\
    \        for (int i = N; i > 0; i--) {\n            sum += N % 10;\n         \
    \   N /= 10;\n        }\n        System.out.println(sum + remainder);\n      \
    \  return N + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gijq7yb.java:27: error: incompatible types: int cannot be converted\
    \ to String\n            return N;\n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code in Java SE 8.\n        if (N > 10) {\n            int remainder =\
    \ N % 10;\n            String binary = Integer.toBinaryString(N / 10);\n     \
    \       return binary.concat(remainder + \"\").reverse();\n        } else {\n\
    \            return Integer.toString(N);\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy81bzt1u.java:24: error: cannot find symbol\n            return\
    \ binary.concat(remainder + \"\").reverse();\n                               \
    \                 ^\n  symbol:   method reverse()\n  location: class String\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N < 0)\
    \ throw new IllegalArgumentException();\n        List<Integer> result = new ArrayList<>();\n\
    \        while (N /= 10) {\n            int remain = N % 10;\n            result.add(remain);\n\
    \            N /= 10;\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = result.size() - 1; i >= 0; i--) {\n            sb.append(result.get(i));\n\
    \        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnzl0oqu4.java:22: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (N /= 10) {\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        Map<Integer,String>\
    \ binSum = IntStream.rangeClosed(1, 10).mapToObj(i -> Integer.toString(i, 2))\n\
    \                .collect(Collectors.toMap(i -> i, i -> Integer.toString(i&1,2)));\n\
    \        String output = \"1\";\n        for(int i=1; i <= N; i++) {\n       \
    \     output = output + binSum.get(i);\n        }\n        return output;\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ug7uv0k.java:21: error: bad operand types for binary operator\
    \ '&'\n                .collect(Collectors.toMap(i -> i, i -> Integer.toString(i&1,2)));\n\
    \                                                                         ^\n\
    \  first type:  String\n  second type: int\n/tmp/tmp8ug7uv0k.java:21: error: incompatible\
    \ types: inference variable K has incompatible bounds\n                .collect(Collectors.toMap(i\
    \ -> i, i -> Integer.toString(i&1,2)));\n                        ^\n    equality\
    \ constraints: Integer\n    lower bounds: String\n  where K,T,U are type-variables:\n\
    \    K extends Object declared in method <T,K,U>toMap(Function<? super T,? extends\
    \ K>,Function<? super T,? extends U>)\n    T extends Object declared in method\
    \ <T,K,U>toMap(Function<? super T,? extends K>,Function<? super T,? extends U>)\n\
    \    U extends Object declared in method <T,K,U>toMap(Function<? super T,? extends\
    \ K>,Function<? super T,? extends U>)\n2 errors\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N < 0)\n\
    \            return \"\";\n        char[] buffer = new char[N];\n        int sum\
    \ = N;\n        int pos = 0;\n        while (sum > 0) {\n            int digit\
    \ = sum % 10;\n            sum += digit == 0 ? 1 : 0;\n            buffer[pos++]\
    \ = digit + '0';\n        }\n        return String.valueOf(buffer);\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0kq3chcu.java:28: error: incompatible types: possible lossy conversion\
    \ from int to char\n            buffer[pos++] = digit + '0';\n               \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if(N<10){\n\
    \            return N+\"\";\n        }\n        String s = \"\";\n        StringBuilder\
    \ sb = new StringBuilder();\n        while(true){\n            String str = Integer.toBinaryString(N);\n\
    \            sb.append(str);\n            N = N/10;\n            if(!N){\n   \
    \             s = sb.toString();\n                return s;\n            }\n \
    \       }\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2pyez1qy.java:29: error: bad operand type int for unary operator\
    \ '!'\n            if(!N){\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        long digitSum\
    \ = 0;\n        int nDigits = 0;\n        long remainder;\n        StringBuilder\
    \ result = new StringBuilder();\n\n        for (int i = 0; i < N; i++) {\n   \
    \         if (N == 1) {\n                result.append(\"1\");\n             \
    \   return result.toString();\n            }\n            digitSum = 0;\n    \
    \        nDigits = 0;\n\n            remainder = N % 10;\n            digitSum\
    \ += remainder;\n            N /= 10;\n\n            while ((N > 0) && (remainder\
    \ > 0)) {\n                nDigits++;\n                remainder = N % 10;\n \
    \               digitSum += remainder;\n                N /= 10;\n           \
    \ }\n            result.append(Integer.toString(digitSum));\n        }\n     \
    \   return result.toString();\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8rjpwko6.java:43: error: incompatible types: possible lossy conversion\
    \ from long to int\n            result.append(Integer.toString(digitSum));\n \
    \                                          ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        int digitSum = 0;\n        while (N > 0)\
    \ {\n            digitSum++;\n            N = N >> 1;\n        }\n        int\
    \ rem = 0;\n        for (int i = 0; i < digitSum; i++) {\n            rem = N\
    \ & 1;\n            sb.append(rem);\n            N = N >> 1;\n        }\n    \
    \    return String.valueOf(sb.reverse());\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsupnex81.java:35)\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // write\
    \ your code here\n        StringBuilder sb = new StringBuilder();\n        while(N!=0){\n\
    \        sb.append(N%2);\n        N=N/2;\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc_8tpqhe.java:29)\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) {\n            return \"0\";\n        }\n        BigInteger sum = new BigInteger(\"\
    1\");\n        StringBuilder buffer = new StringBuilder(\"\");\n        for (int\
    \ i = N / 2; i > 0; i /= 2)\n        {\n            sum = sum.add(new BigInteger(String.format(\"\
    %0\" + N + \"d\", i)));\n        }\n        buffer.append(sum);\n        if (N\
    \ % 2 == 1)\n            buffer.append(1);\n        return buffer.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02nlkcq8.java:35)\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int[] bits\
    \ = new int[32];\n        String ans = \"\";\n        while (N !== 0) {\n    \
    \        int sum = 0;\n            while (N > 0) {\n                sum = sum\
    \ + N & 1;\n                N >>>= 1;\n            }\n            int i = sum\
    \ / 32;\n            bits[i] += 1;\n            ans += i;\n        }\n       \
    \ StringBuilder s = new StringBuilder();\n        for (int i = 0; i < 32; i++)\
    \ {\n            if (bits[i] > 0) s.append(i + 1);\n        }\n        return\
    \ s.toString();\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp87wzm0w7.java:22: error: illegal start of expression\n        while\
    \ (N !== 0) {\n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        int sum = 0;\n\n        // Loop from 0 to\
    \ N and get each number in binary string\n        for (int i = 0; i < N; i++)\
    \ {\n            String binary = Integer.toBinaryString(i).replace('-', '1');\n\
    \            // Add it to the total\n            sum += binary.length();\n   \
    \         // Append this digit\n            sb.append(binary);\n        }\n  \
    \      // Build the final answer by concatenating the total of each digit\n  \
    \      sb.append(sum);\n        return sb.toString();\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo47lk50l.java:36)\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N < 0\
    \ || N > 10000)\n            throw new IllegalArgumentException(\"N < 0 || N >\
    \ 10000\");\n\n        int sum = 0;\n\n        for (int i = N; i > 0; i /= 2)\n\
    \            sum += n % 2 == 0 ? 1 : 2;\n\n        return Integer.toString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpew9jih_t.java:26: error: cannot find symbol\n            sum +=\
    \ n % 2 == 0 ? 1 : 2;\n                   ^\n  symbol:   variable n\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return String.join(\"\
    \", IntStream.rangeClosed(1, N).map(i -> {\n            String binary;\n     \
    \       int digit;\n            int digitSum = 0;\n            while (i > 0) {\n\
    \                digit = i % 10;\n                digitSum += digit;\n       \
    \         i /= 10;\n            }\n            binary = Integer.toString(digitSum);\n\
    \            if (digitSum > 9) {\n                binary += \"1\";\n         \
    \   }\n            return binary;\n        }).collect(Collectors.toList()));\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw16_n0t1.java:33: error: incompatible types: bad return type in\
    \ lambda expression\n            return binary;\n                   ^\n    String\
    \ cannot be converted to int\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String ans\
    \ = \"0\";\n        while (ans.length() < N) {\n            ans = ans + \"1\"\
    ;\n        }\n        return ans;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwlzgfyv.java:27)\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here\n        double sum=0;\n        int i=0;\n        while(N!=0){\n\
    \            sum+=Math.pow(2,i);\n            i++;\n            N=N-1;\n     \
    \   }\n        return Double.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7zw02htx.java:31)\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int binaryNum\
    \ = 0;\n        int sum = 0;\n        String binary = \"\";\n        while (N\
    \ !=  0) {\n            binaryNum = N % 10;\n            binary = binary.concat(binaryNum);\n\
    \            N = N/10;\n        }\n        return binary;\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm2v5cclv.java:25: error: incompatible types: int cannot be converted\
    \ to String\n            binary = binary.concat(binaryNum);\n                \
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        int power = 1;\n        String ans = \"\";\n        // Iterate through\
    \ binary representation of N\n        for(int i = N; i >= 1; i/= 2){\n       \
    \     // Add ith digit to sum\n            sum += N % 10;\n            // Multiply\
    \ ith power of 2 with N\n            power *= 2;\n        }\n        // Reverse\
    \ sum to put in binary string\n        for(int i = sum; i >= 0; i/= 2){\n    \
    \        ans = ans + ((ans.charAt(i) - '0') + Integer.parseInt(Integer.toBinaryString(sum))\
    \ * power);\n            // Multiply power * 2 with ith power of 2\n         \
    \   power *= 2;\n        }\n        return ans;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 0\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.solve(tmp2axybq5o.java:32)\n\
    \tat Problem.main(tmp2axybq5o.java:39)\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        Set<Integer>\
    \ set = new HashSet<>();\n        String binaryNumbers = \"00000000000000000000000000000000000000000000000000000000\"\
    ;\n        String binarySum = binaryNumbers;\n        String binaryString = \"\
    \";\n        while (set.add(N)) {\n            binaryString += Integer.toBinaryString(N);\n\
    \            N = (N / 2);\n        }\n        return binaryNumbers.substring(0,\
    \ binaryString.length());\n}\n    public static void main(String[] args) {\n \
    \   assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp61b8s3e8.java:31)\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) return \"0\";\n        List<Integer> list = new ArrayList<Integer>();\n \
    \       int lastDigit = N % 10;\n        list.add(lastDigit);\n        while (N\
    \ /= 10)\n            list.add(N % 10);\n        int sum = 0;\n        for (int\
    \ i = 0; i < list.size(); i++)\n            sum += list.get(i) * Math.pow(10,\
    \ i);\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdmj48b05.java:24: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (N /= 10)\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        for (int i = 0; i <= N; i++) {\n            sum += (i % 2 == 0 ?\
    \ 1 : 0);\n        }\n        StringBuilder sb = new StringBuilder();\n      \
    \  for (int i = sum; i >= 1; i--) {\n            int rem = (int)Math.pow(10, i)\
    \ % 2;\n            if (rem == 0) {\n                sb.append(i);\n         \
    \   }\n        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6wddutg7.java:34)\n"
  stdout: ''
  timestamp: 1660011963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm3pi8xp.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String output\
    \ = \"\";\n        int digit = N % 10;\n        N = N / 10;\n        while(N >=0){\n\
    \            int remain = N % 10;\n            N = N / 10;\n            output\
    \ += (Integer.toString(remain) + Integer.toString(digit));\n        }\n      \
    \  return output;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011969
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // your implementation\n\
    \        // your code\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_2o1d0qi.java:25)\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        while (N !=0) {\n            sum += N % 2;\n            N = N /\
    \ 2;\n        }\n        return Integer.toString(sum);\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1dpkqmoy.java:28)\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        int remainder = 0;\n        StringBuilder result = new StringBuilder(\"\
    \");\n        while (N /= 2) {\n            sum++;\n            remainder = N\
    \ % 2;\n            N = (N - remainder) / 2; // integer division\n        }\n\
    \        while (N > 0) {\n            if (sum + remainder < 10) {\n          \
    \      result.append((char) ('0' + sum + remainder));\n            } else {\n\
    \                result.append((char) ('0' + sum));\n            }\n         \
    \   sum = remainder;\n            remainder = N % 2;\n            N = (N - remainder)\
    \ / 2; // integer division\n        }\n        return result.toString();\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsz4lnp80.java:23: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (N /= 2) {\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Declare\
    \ result and string with 1 digit longer\n        String result = \"\";\n     \
    \   // Declare a temporary string with 1 digit longer\n        String temp = \"\
    \";\n        // Perform a binary search to find the first digit that exceeds the\
    \ N\n        int firstDigit = Integer.MAX_VALUE;\n        int lastDigit = 0;\n\
    \        while (firstDigit < N) {\n            lastDigit = firstDigit + 1;\n \
    \           while (lastDigit < N) {\n                temp = String.valueOf(lastDigit);\n\
    \                if (temp.equals(String.valueOf(firstDigit)))\n              \
    \      break;\n                lastDigit++;\n            }\n            if (lastDigit\
    \ - firstDigit > 0)\n                break;\n            firstDigit = lastDigit\
    \ - 1;\n        }\n        // If firstDigit equals N, return the result with N\
    \ digits;\n        // otherwise, return the result with N - firstDigit digits.\n\
    \        // Example\n        // If N = 15, the result will be \"1111\"\n     \
    \   // If N = 12, the result will be \"1100\"\n        // If N = 147, the result\
    \ will be \"11001\"\n        if (firstDigit == N) {\n            result = String.valueOf(firstDigit);\n\
    \        } else\n            result = String.valueOf(firstDigit) + String.valueOf(lastDigit\
    \ - firstDigit + 1);\n        // Return the result\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp07etcv1k.java:53)\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here\n        String s = \"\";\n        int t = N;\n        while\
    \ (t > 0) {\n            int rem = (t % 2);\n            s += Integer.toString(rem);\n\
    \            t /= 2;\n        }\n        return s;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzknb67cy.java:31)\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        long res\
    \ = 0;\n        String output = \"\";\n        while (true) { // for i = N / 10\
    \ to N / 2\n            res += (N % (long) Math.pow(10, i)) * (long) Math.pow(10,\
    \ i);\n            N /= (long) Math.pow(10, i);\n            output += Integer.toString(N);\n\
    \            if (N == 0) break;\n        }\n        return output;\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8fi2_xcx.java:23: error: cannot find symbol\n            res +=\
    \ (N % (long) Math.pow(10, i)) * (long) Math.pow(10, i);\n                   \
    \                         ^\n  symbol:   variable i\n  location: class Problem\n\
    /tmp/tmp8fi2_xcx.java:23: error: cannot find symbol\n            res += (N % (long)\
    \ Math.pow(10, i)) * (long) Math.pow(10, i);\n                               \
    \                                       ^\n  symbol:   variable i\n  location:\
    \ class Problem\n/tmp/tmp8fi2_xcx.java:24: error: cannot find symbol\n       \
    \     N /= (long) Math.pow(10, i);\n                                     ^\n \
    \ symbol:   variable i\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // write\
    \ your code in Java SE 8\n        StringBuilder sb = new StringBuilder();\n  \
    \      while (N != 0) {\n            int digit = N % 2;\n            N /= 2;\n\
    \            sb.append(digit);\n        }\n        return sb.toString();\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuouo59m6.java:30)\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int a[] =\
    \ new int[32];\n        int sum = 0;\n        int i = 0;\n        // Binary representation\
    \ of N\n        // Example\n        // For N = 1000, the binary representation\
    \ is: 01110000\n        // For N = 150, the binary representation is: 011101\n\
    \        // For N = 147, the binary representation is: 01110100\n        while(i\
    \ != 32){\n            sum = sum + (int)Math.floor(Math.pow(2, i))*N % 10;\n \
    \           i += 1;\n        }\n        // Converting binary to decimal\n    \
    \    // Example\n        // For N = 1000, the decimal representation is: 1\n \
    \       // For N = 150, the decimal representation is: 6\n        // For N = 147,\
    \ the decimal representation is: 12\n        // Note: The decimal representation\
    \ of any binary number is its respective binary digit sum\n        int decimal\
    \ = sum;\n        // Adding decimal to binary \n        // Example\n        //\
    \ For N = 1000, the binary is 01110000 and the decimal is 1, the output will be\
    \ 01110000 + 1 = 01110001\n        // For N = 150, the binary is 01110100 and\
    \ the decimal is 6, the output will be 01110100 + 6 = 0111011\n        // For\
    \ N = 147, the binary is 01110100 and the decimal is 12, the output will be 01110100\
    \ + 12 = 1011100\n        StringBuilder builder = new StringBuilder(\"\");\n \
    \       while(decimal != 0){\n            builder.insert(0, (char) ('0' + decimal%2));\n\
    \            decimal /= 2;\n        }\n        return builder.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdospybu6.java:52)\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        boolean digitSums[]\
    \ = new boolean[N];\n        Arrays.fill(digitSums, true);\n\n        // add up\
    \ the digits in the binary representation of N\n        // and multiply that by\
    \ the appropriate power of 2\n        int sum = 0;\n        for (int i = 0; i\
    \ < N / 2; i++) {\n            if (digitSums[i]) {\n                sum += N %\
    \ 10 * Math.pow(10, i);\n                digitSums[i] = false;\n            }\n\
    \            N /= 10;\n        }\n\n        // convert sum to a string\n     \
    \   String bin = Integer.toString(sum, 2);\n        if (N > 0) {\n           \
    \ // append 1's if the binary has non-zero digits and an odd length\n        \
    \    if (bin.length() > 1) {\n                bin = \"1\" + bin;\n           \
    \ } else {\n                bin = \"0\" + bin;\n            }\n        }\n   \
    \     return bin;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp285u3y7a.java:47)\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // TODO your\
    \ code\n        return Integer.toString(N);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6a02djks.java:24)\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Initialize\
    \ a variable that will hold the sum of digits of the binary number.\n        int\
    \ sum = 0;\n        // Initialize a String variable that will hold our output.\n\
    \        String result = \"\";\n        // Initialize the remainder for the binary\
    \ number. Initialize with the value of N.\n        int remainder = N;\n      \
    \  // Loop that will run until remainder is zero\n        while (remainder > 0)\
    \ {\n            // Get remainder modulo 2.\n            int mod = remainder %\
    \ 2;\n            // Add the value of mod multiplied with 10.\n            sum\
    \ += mod * 10;\n            // Multiply remainder by 2 after adding mod times\
    \ 10 to the sum.\n            remainder = remainder / 2;\n        }\n        //\
    \ Add sum to the output.\n        result = String.valueOf(sum);\n        // Return\
    \ the output.\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzdeo8_8e.java:41)\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        while (N > 0) {\n            result = String.valueOf((N & N\
    \ - 1L) + 10L) + result;\n            N >>>= 1;\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpamtmbyhm.java:28)\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        long sum\
    \ = 0;\n        for(int i = 0; i < N; i++) {\n            sum += N % 10;\n   \
    \         N /= 10;\n        }\n        String output = (Integer.toString(sum));\n\
    \        while(output.length() < 32) {\n            output = output + \"0\";\n\
    \        }\n        return output;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ok6r4wl.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n        String output = (Integer.toString(sum));\n       \
    \                                   ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here\n        \n        for(int i=1;i<=N;i++)\n            if((i%2)==0)\n\
    \                i=i*2+1;\n            else\n                i=i*2;\n        return\
    \ Integer.toString(i);\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbecbf7s6.java:27: error: cannot find symbol\n        return Integer.toString(i);\n\
    \                                ^\n  symbol:   variable i\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        while (N --> 0) {\n            sum += (N & 1);\n            N =\
    \ N / 2;\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr307ua30.java:28)\n"
  stdout: ''
  timestamp: 1660011964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String output\
    \ = \"1\";\n\n        while (N --> 0) {\n            int sum = 0;\n\n        \
    \    while (N != 0) {\n                sum += N % 2;\n                N /= 2;\n\
    \            }\n\n            String temp = Integer.toString(sum);\n         \
    \   if (temp.equals(\"\")) {\n                output = output + \"0\";\n     \
    \       } else {\n                output = output + temp;\n            }\n   \
    \     }\n\n        return output;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbx6fiixy.java:41)\n"
  stdout: ''
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String[]\
    \ binaryDigits = {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"\
    , \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\"\
    , \"29\", \"30\", \"31\"};\n        StringBuilder builder = new StringBuilder();\n\
    \        if (N == 0)\n            return builder.append(\"0\").toString();\n \
    \       if (N == 1)\n            return builder.append(binaryDigits[0]).toString();\n\
    \        if (N == 2)\n            return builder.append(binaryDigits[1]).toString();\n\
    \        if (N < 10)\n            return builder.append(binaryDigits[N % 10]).toString();\n\
    \        if (N < 100)\n            return builder.append(binaryDigits[N % 100]).toString();\n\
    \        if (N < 1000)\n            return builder.append(binaryDigits[N % 1000]).toString();\n\
    \        if (N < 10000)\n            return builder.append(binaryDigits[N % 10000]).toString();\n\
    \        return solve(N / 10000) + solve(N / 1000) + solve(N / 100) + solve(N\
    \ / 10) + solve(N / 1) + N;\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1000 out of bounds for length 32\n\tat Problem.solve(tmpj0r75xei.java:35)\n\
    \tat Problem.main(tmpj0r75xei.java:39)\n"
  stdout: ''
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        while (N > 0) {\n            sum += N % 10;\n            N = (N\
    \ - N % 10) / 10;\n        }\n        return Integer.toString(sum);\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpihoocq5u.java:29)\n"
  stdout: ''
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        final int\
    \ totalSum = N;\n        int sum = 0;\n        int digitSum = 0;\n        String\
    \ binary = \"\";\n        while (digitSum <= totalSum) {\n            if (digitSum\
    \ > 0) {\n                digitSum /= 10;\n                sum += digitSum;\n\
    \            }\n            else {\n                digitSum = totalSum;\n   \
    \         }\n            binary = \"\" + sum;\n            totalSum -= digitSum;\n\
    \            digitSum = 0;\n            sum = 0;\n        }\n        return binary;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2onut1a2.java:33: error: cannot assign a value to final variable\
    \ totalSum\n            totalSum -= digitSum;\n            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int i = N;\n\
    \        int sum = 0;\n        while (i != 0) {\n            int rem = i % 2;\n\
    \            sum += rem;\n            i = i / 2;\n        }\n        return String.valueOf(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptd5a6byg.java:30)\n"
  stdout: ''
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm3pi8xp.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int count\
    \ = 0;\n        while (N --> 0) {\n            count++;\n            N--;\n  \
    \      }\n        String binary = Integer.toBinaryString(N);\n        int sum\
    \ = 0;\n        for (int i = binary.length() - 1; i >= 0; i--) {\n           \
    \ int bin = binary.charAt(i) - '0';\n            sum += bin * Math.pow(2, count);\n\
    \            count--;\n        }\n        return Integer.toString(sum);\n}\n \
    \   public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmpx62cwn.java:35)\n"
  stdout: ''
  timestamp: 1660011965
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        char digits[]\
    \ = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};\n        String binary\
    \ = \"\";\n        while (N >=0 ) {\n            int remainder = N % 2;\n    \
    \        N /= 2;\n            int nextDigit = digits[remainder];\n           \
    \ int sum = (nextDigit << 1) + remainder;\n            binary = Integer.toString(sum)\
    \ + binary;\n        }\n        return binary;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011970
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) return \"0\";\n        StringBuilder sb = new StringBuilder();\n        int\
    \ one = N % 10;\n        N /= 10;\n        int two = N % 10;\n        N /= 10;\n\
    \        int three = N % 10;\n        N /= 10;\n        int four = N % 10;\n \
    \       N /= 10;\n        int five = N % 10;\n        N /= 10;\n        int six\
    \ = N % 10;\n        N /= 10;\n        int seven = N % 10;\n        N /= 10;\n\
    \        int eight = N % 10;\n        N /= 10;\n        int nine = N % 10;\n \
    \       N /= 10;\n        char oneChar = '1';\n        char twoChar = '2';\n \
    \       char threeChar = '3';\n        char fourChar = '4';\n        char fiveChar\
    \ = '5';\n        char sixChar = '6';\n        char sevenChar = '7';\n       \
    \ char eightChar = '8';\n        char nineChar = '9';\n        char digitChar\
    \ = '0';\n        sb.append(oneChar);\n        sb.append(twoChar);\n        sb.append(threeChar);\n\
    \        sb.append(fourChar);\n        sb.append(fiveChar);\n        sb.append(sixChar);\n\
    \        sb.append(sevenChar);\n        sb.append(eightChar);\n        sb.append(nineChar);\n\
    \        sb.append(digitChar);\n        sb.append(oneChar);\n        if (one >\
    \ 0) sb.append(oneChar);\n        if (two > 0) sb.append(twoChar);\n        if\
    \ (three > 0) sb.append(threeChar);\n        if (four > 0) sb.append(fourChar);\n\
    \        if (five > 0) sb.append(fiveChar);\n        if (six > 0) sb.append(sixChar);\n\
    \        if (seven > 0) sb.append(sevenChar);\n        if (eight > 0) sb.append(eightChar);\n\
    \        if (nine > 0) sb.append(nineChar);\n        return sb.toString();\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgaya63ob.java:73)\n"
  stdout: ''
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        Map<String,\
    \ Integer> digits = IntStream.range(0, 10)\n                .boxed().collect(Collectors.toMap(\n\
    \                        n -> String.format(\"%\" + n + \"d\", n),\n         \
    \               n -> n));\n        StringBuilder result = new StringBuilder();\n\
    \        IntStream.range(0,N).forEach(n -> {\n            String binary = digits.get(n)\
    \ + \"\";\n            while (binary.length() < Integer.toString(n).length())\
    \ {\n                binary = binary + '0';\n            }\n            result.insert(0,\
    \ binary);\n        });\n        return result.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.MissingFormatWidthException: %0d\n\
    \tat java.base/java.util.Formatter$FormatSpecifier.checkNumeric(Formatter.java:3201)\n\
    \tat java.base/java.util.Formatter$FormatSpecifier.checkInteger(Formatter.java:3161)\n\
    \tat java.base/java.util.Formatter$FormatSpecifier.<init>(Formatter.java:2900)\n\
    \tat java.base/java.util.Formatter.parse(Formatter.java:2747)\n\tat java.base/java.util.Formatter.format(Formatter.java:2671)\n\
    \tat java.base/java.util.Formatter.format(Formatter.java:2625)\n\tat java.base/java.lang.String.format(String.java:4143)\n\
    \tat Problem.lambda$solve$0(tmp75hzzd40.java:22)\n\tat java.base/java.util.stream.Collectors.lambda$uniqKeysMapAccumulator$1(Collectors.java:179)\n\
    \tat java.base/java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)\n\
    \tat java.base/java.util.stream.IntPipeline$1$1.accept(IntPipeline.java:180)\n\
    \tat java.base/java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:104)\n\
    \tat java.base/java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:711)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.solve(tmp75hzzd40.java:21)\n\tat Problem.main(tmp75hzzd40.java:35)\n"
  stdout: ''
  timestamp: 1660011966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if(N <= 0)\
    \ return \"0\";\n        List<Integer> digits = new ArrayList<>();\n        while(N\
    \ !=0) {\n            digits.add(N %10);\n            N = N/10;\n        }\n \
    \       Collections.sort(digits);\n        int digit = (int)Math.pow(2,digits.size()-1);\n\
    \        StringBuilder ans = new StringBuilder();\n        for(int i = 0; i <\
    \ (digits.size())-1; i++) {\n            ans.append(digits.get(digit));\n    \
    \    }\n        return ans.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 8 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.solve(tmpwadm_auy.java:30)\n\tat Problem.main(tmpwadm_auy.java:35)\n"
  stdout: ''
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here\n        Set<Integer> s = new HashSet<Integer>();\n        s.addAll(Arrays.asList(N));\n\
    \        int sum = 0;\n        for(int i : s){\n            sum = sum + i;\n \
    \       }\n        return Integer.toBinaryString(sum);\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvlwna1ms.java:30)\n"
  stdout: ''
  timestamp: 1660011966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Solve\
    \ the problem recursively\n        return solve(N,\"0\");\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2tnn50zw.java:21: error: method solve in class Problem cannot be\
    \ applied to given types;\n        return solve(N,\"0\");\n               ^\n\
    \  required: int\n  found:    int,String\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // write\
    \ your code in Java here\n        if(N==0) return \"0\";\n        \n        int\
    \ sum=0;\n        while(N>0){\n            sum=sum+(N%10);\n            N=N/10;\n\
    \        }\n        \n        StringBuilder sb=new StringBuilder();\n        while(sum>0){\n\
    \            sb=sb.append(sum%2);\n            sum=sum/2;\n        }\n       \
    \ \n        return sb.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplnahpqch.java:39)\n"
  stdout: ''
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        if (N <= 0) {\n            return \"\";\n        }\n      \
    \  // Find a power of 2 greater than or equal to N\n        int power = (int)\
    \ Math.ceil(Math.log(N) / Math.log(2));\n        long sum = 0;\n        StringBuilder\
    \ sb = new StringBuilder();\n        // Get binary representation of N in powers\
    \ of 2\n        while(power != 0) {\n            long tmp = N / Math.pow(2, power);\n\
    \            sb.append((tmp & 1) == 1 ? 1 : 0);\n            sum = sum + tmp;\n\
    \            N = tmp;\n            power--;\n        }\n        // Get binary\
    \ representation of sum in base 2\n        for(char c : sb.toString().toCharArray())\
    \ {\n            result = result + (int) c;\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfg4ke8ys.java:30: error: incompatible types: possible lossy conversion\
    \ from double to long\n            long tmp = N / Math.pow(2, power);\n      \
    \                   ^\n/tmp/tmpfg4ke8ys.java:33: error: incompatible types: possible\
    \ lossy conversion from long to int\n            N = tmp;\n                ^\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        while (N != 0) {\n            sum += (N & 1);\n            N >>>=\
    \ 1;\n        }\n        return Integer.toBinaryString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzvcynhay.java:28)\n"
  stdout: ''
  timestamp: 1660011966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0)\n            return \"0\";\n        int remainder;\n        int sum;\n  \
    \      int digitSum = 0;\n        while (N /= 2) {\n            remainder = N\
    \ % 2;\n            sum += remainder;\n            digitSum += 1;\n          \
    \  N = N/2;\n        }\n        if (sum > digitSum)\n            return solve(sum);\n\
    \        return \"0\".repeat(digitSum) + sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22sxrd6n.java:25: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (N /= 2) {\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        int remainder = 0;\n        String binary = \"\";\n        while\
    \ (N !== 0) {\n            remainder = N % 10;\n            sum += remainder;\n\
    \            N = N / 10;\n        }\n\n        while (remainder != 0) {\n    \
    \        binary += remainder;\n            sum += remainder;\n            remainder\
    \ = N % 10;\n            N = N / 10;\n        }\n\n        return binary.toString()\
    \ + sum.toString();\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0jajwjyk.java:23: error: illegal start of expression\n        while\
    \ (N !== 0) {\n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // write\
    \ your code in Java SE 8\n        // Pre-requisites: 1 \u2264 N \u2264 10000.\n\
    \        int sum = 0;\n        int power = 1;\n        int remainder = 0;\n  \
    \      int sumOfDigits = 0;\n        BigInteger bigN = new BigInteger(String.valueOf(N));\n\
    \n        while(true) {\n            BigInteger current = bigN.divideAndRemainder(power);\n\
    \            remainder = 0;\n            if(current.intValue() != 0) {\n     \
    \           remainder = current.intValue();\n                sum += remainder;\n\
    \                power = power * 10;\n            }\n            else {\n    \
    \            break;\n            }\n            sumOfDigits += sum;\n        }\n\
    \        return String.valueOf(sumOfDigits);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz6csfomj.java:29: error: incompatible types: int cannot be converted\
    \ to BigInteger\n            BigInteger current = bigN.divideAndRemainder(power);\n\
    \                                                         ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Solution\
    \ using recursion\n        if(N < 10 && N > -1){\n            return Integer.toString(N);\n\
    \        } else {\n            return solve(10 - N) + Integer.toString(N);\n \
    \       }\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat Problem.solve(tmponc27tpn.java:24)\n\tat Problem.solve(tmponc27tpn.java:24)\n\
    \tat"
  stdout: ''
  timestamp: 1660011966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = \"\";\n        while(n != 0) {\n            s += Integer.toString(n % 2);\n\
    \            n = n/2;\n        }\n        return s;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpts514p7s.java:21: error: cannot find symbol\n        while(n !=\
    \ 0) {\n              ^\n  symbol:   variable n\n  location: class Problem\n/tmp/tmpts514p7s.java:22:\
    \ error: cannot find symbol\n            s += Integer.toString(n % 2);\n     \
    \                             ^\n  symbol:   variable n\n  location: class Problem\n\
    /tmp/tmpts514p7s.java:23: error: cannot find symbol\n            n = n/2;\n  \
    \          ^\n  symbol:   variable n\n  location: class Problem\n/tmp/tmpts514p7s.java:23:\
    \ error: cannot find symbol\n            n = n/2;\n                ^\n  symbol:\
    \   variable n\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        long sum\
    \ = 0, rem;\n        char ch = '0';\n        for (int i = N; i >= 1; i--) {\n\
    \            long temp = N;\n            while (temp != 0) {\n               \
    \ rem = (int) Math.floor(temp / 2);\n                temp = temp % 2;\n      \
    \          ch = (char)(ch + rem);\n            }\n            sum += (long)ch;\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpva2x1lac.java:34)\n"
  stdout: ''
  timestamp: 1660011966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N > 10000)\
    \ {\n            return \"\";\n        }\n        \n        String result = \"\
    \";\n        \n        if (N <= 1) {\n            result += \"0\";\n        }\n\
    \        else {\n            int remainder = 0;\n            String ones = \"\
    1\";\n            String zeros = \"0\";\n            int onesIndex = 1;\n    \
    \        int zerosIndex = 1;\n            while (N > 0) {\n                remainder\
    \ = N % 10;\n                result += ones;\n                result += Integer.toString(N\
    \ % 10);\n                N = N / 10;\n                onesIndex = onesIndex +\
    \ 1;\n                zerosIndex = zerosIndex + 1;\n                ones = Integer.toString(onesIndex);\n\
    \                zeros = Integer.toString(zerosIndex);\n            }\n      \
    \      result += \"1\";\n            result += zeros;\n            result += \"\
    0\";\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpueqlo0ii.java:52)\n"
  stdout: ''
  timestamp: 1660011966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        char bin[];\n\
    \        String s = \"\";\n        StringBuilder builder = new StringBuilder();\n\
    \        bin = binary(N);\n        for (String bin : bin) {\n            builder.append(bin);\n\
    \        }\n        return builder.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjzf4t35k.java:23: error: cannot find symbol\n        bin = binary(N);\n\
    \              ^\n  symbol:   method binary(int)\n  location: class Problem\n\
    /tmp/tmpjzf4t35k.java:24: error: variable bin is already defined in method solve(int)\n\
    \        for (String bin : bin) {\n                    ^\n/tmp/tmpjzf4t35k.java:24:\
    \ error: incompatible types: char cannot be converted to String\n        for (String\
    \ bin : bin) {\n                          ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011966
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        Set<Integer>\
    \ digits = new HashSet<>();\n        int sum = 0;\n        do {\n            int\
    \ digit = 0;\n            do {\n                digit = (int) (Math.pow(10, digits.size())\
    \ * N % 10);\n            } while (digits.size() < (N / 10));\n            sum\
    \ = (sum * 10) + digit;\n            digits.add(digit);\n            N = (int)\
    \ (N / 10);\n        } while (N != 0);\n        if (sum == 0 || sum > 9)\n   \
    \         return String.valueOf(sum);\n        return \"\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        BigInteger\
    \ sum = new BigInteger(\"\", 2).add(N);\n        return sum.toString();\n}\n \
    \   public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppjmr1cpe.java:20: error: no suitable method found for add(int)\n\
    \        BigInteger sum = new BigInteger(\"\", 2).add(N);\n                  \
    \                            ^\n    method BigInteger.add(BigInteger) is not applicable\n\
    \      (argument mismatch; int cannot be converted to BigInteger)\n    method\
    \ BigInteger.add(long) is not applicable\n      (add(long) is not public in BigInteger;\
    \ cannot be accessed from outside package)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        String result = \"\";\n        while (N !=0) {\n            int\
    \ temp = N % 10;\n            sum += temp;\n            N /= 10;\n        }\n\
    \        while (sum > 0) {\n            result += sum % 2 == 0 ? \"0\" : \"1\"\
    ;\n            sum /= 2;\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu91v9mj3.java:35)\n"
  stdout: ''
  timestamp: 1660011966
