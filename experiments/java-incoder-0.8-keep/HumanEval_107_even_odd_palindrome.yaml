name: HumanEval_107_even_odd_palindrome
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a positive integer n, return a tuple that has the\
  \ number of even and odd\n    // integer palindromes that fall within the range(1,\
  \ n), inclusive.\n    // Example 1:\n    // Input: 3\n    // Output: (1, 2)\n  \
  \  // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even,\
  \ and two of them are odd.\n    // Example 2:\n    // Input: 12\n    // Output:\
  \ (4, 6)\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7,\
  \ 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    //\
  \ 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer\
  \ palindromes respectively.\n    public static Pair<Integer, Integer> evenOddPalindrome(int\
  \ n) {\n"
tests: "return Pair.with(0,0);\n    }\n    public static void main(String[] args)\
  \ {\n    assert(evenOddPalindrome((123)).equals((Pair.with(8, 13))));\n    assert(evenOddPalindrome((12)).equals((Pair.with(4,\
  \ 6))));\n    assert(evenOddPalindrome((3)).equals((Pair.with(1, 2))));\n    assert(evenOddPalindrome((63)).equals((Pair.with(6,\
  \ 8))));\n    assert(evenOddPalindrome((25)).equals((Pair.with(5, 6))));\n    assert(evenOddPalindrome((19)).equals((Pair.with(4,\
  \ 6))));\n    assert(evenOddPalindrome((9)).equals((Pair.with(4, 5))));\n    assert(evenOddPalindrome((1)).equals((Pair.with(0,\
  \ 1))));\n    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
