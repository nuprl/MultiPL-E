language: java
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int[] arrayIntArray = array.toArray();\n        Arrays.sort(arrayIntArray);\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>(arrayIntArray.length);\n\
    \        for (int i = 0; i < arrayIntArray.length; i++) {\n            result.add(arrayIntArray[i]);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9fyg6w81.java:20: error: incompatible types: Object[] cannot be\
    \ converted to int[]\n        int[] arrayIntArray = array.toArray();\n       \
    \                                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> copy = new ArrayList<Integer>(array);\n\
    \        Collections.sort(copy);\n        int sum = 0;\n        for(int i : copy)\
    \ {\n            sum += i;\n        }\n        if(sum % 2 == 0) {\n          \
    \  return copy;\n        } else {\n            return new ArrayList<Integer>(Collections.reverse(copy));\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfwhz3qko.java:29: error: 'void' type not allowed here\n       \
    \     return new ArrayList<Integer>(Collections.reverse(copy));\n            \
    \                                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        PriorityQueue<Integer> queue = new PriorityQueue<>((int) (array.size()\
    \ * .01), Comparator.naturalOrder());\n        queue.addAll(array);\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        while (queue.size() > 0) {\n          \
    \  result.add(queue.poll());\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException\n\tat java.base/java.util.PriorityQueue.<init>(PriorityQueue.java:174)\n\
    \tat Problem.sortArray(tmptky9uqkt.java:20)\n\tat Problem.main(tmptky9uqkt.java:29)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Integer[] arr = array.toArray(new Integer[array.size()]);\n\
    \        // sort ascending\n        Arrays.sort(arr);\n        // if sum is odd\n\
    \        if ((arr[0] + arr[1]) % 2 == 1) {\n            ArrayList list = new ArrayList<>(Arrays.asList(arr));\n\
    \            // sort descending\n            Collections.sort(list, (o1, o2) ->\
    \ {\n                if (o1 > o2) return 1;\n                if (o1 < o2) return\
    \ -1;\n                return 0;\n            });\n            return list;\n\
    \        } else {\n            return array;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpru27xy5g.java:28: error: bad operand types for binary operator\
    \ '>'\n                if (o1 > o2) return 1;\n                       ^\n  first\
    \ type:  Object\n  second type: Object\n/tmp/tmpru27xy5g.java:29: error: bad operand\
    \ types for binary operator '<'\n                if (o1 < o2) return -1;\n   \
    \                    ^\n  first type:  Object\n  second type: Object\nNote: /tmp/tmpru27xy5g.java\
    \ uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked\
    \ for details.\n2 errors\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Write your code here\n        int sum = 0;\n        for\
    \ (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n   \
    \     }\n        int odd = (sum % 2 != 0) ? -1 : 1;\n        Collections.sort(array,\
    \ (l, r) -> {\n            if (l > r) {\n                return -1;\n        \
    \    } else if (l < r) {\n                return odd;\n            }\n       \
    \     return 0;\n        });\n        return array;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplv_ymx4z.java:39)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array.size() > 0) {\n            final long sum = Arrays.stream(array).reduce((a,\
    \ b) -> a + b).getAsLong();\n            if (sum % 2 == 1) {\n               \
    \ Collections.sort(array);\n            } else {\n                Collections.sort(array,\
    \ Collections.reverseOrder());\n            }\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzt1z09k9.java:21: error: no suitable method found for stream(ArrayList<Integer>)\n\
    \            final long sum = Arrays.stream(array).reduce((a, b) -> a + b).getAsLong();\n\
    \                                   ^\n    method Arrays.<T#1>stream(T#1[]) is\
    \ not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n  \
    \      for (int i = 0; i < array.size(); i++) {\n            int j = i;\n    \
    \        int sum = 0;\n            while (j < array.size() && ((sum += array.get(j++))\
    \ < 0)) {\n            }\n            if (sum % 2 == 0) {\n                for\
    \ (int k = i; k < j; k++) {\n                    result.add(array.get(k));\n \
    \               }\n            } else {\n                for (int k = i; k < j;\
    \ k++) {\n                    result.add(array.get(k));\n                }\n \
    \           }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp62f3qy7c.java:41)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> sortedArray = new ArrayList<>();\n    \
    \    int sum = array.get(0) + array[array.size() - 1];\n        if (sum % 2 ==\
    \ 0) {\n            sortedArray.add(0, array.get(0));\n            for (int i\
    \ = 1; i < array.size() - 1; i++) {\n                sortedArray.add(i, array.get(i));\n\
    \            }\n        } else {\n            sortedArray.add(0, array[array.size()\
    \ - 1]);\n            for (int i = 1; i < array.size(); i++) {\n             \
    \   sortedArray.add(i, array.get(i));\n            }\n        }\n        return\
    \ sortedArray;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3qh3_wz.java:21: error: array required, but ArrayList<Integer>\
    \ found\n        int sum = array.get(0) + array[array.size() - 1];\n         \
    \                             ^\n/tmp/tmpf3qh3_wz.java:28: error: array required,\
    \ but ArrayList<Integer> found\n            sortedArray.add(0, array[array.size()\
    \ - 1]);\n                                    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Write your code here\n        // return array;\n      \
    \  int[] arr = new int[array.size()];\n        int i = 0, j = 0;\n        ArrayList<Integer>\
    \ copy = new ArrayList<Integer>();\n        for (int num : array) {\n        \
    \    arr[i] = num;\n            i++;\n        }\n        Arrays.sort(arr);\n \
    \       int temp = 0;\n        boolean isEvenOrOdd = false;\n        for (i =\
    \ 0; i < arr.length; i++) {\n            temp = arr[i];\n            copy.add(temp);\n\
    \        }\n        if (copy.size() % 2 == 0) {\n            isEvenOrOdd = true;\n\
    \        } else {\n            isEvenOrOdd = false;\n        }\n        for (int\
    \ num : copy) {\n            if (isEvenOrOdd && num < arr[0]) {\n            \
    \    Collections.swap(copy, j, j + 1);\n            }\n            if (!isEvenOrOdd\
    \ && num > arr[i]) {\n                Collections.swap(copy, i, i + 1);\n    \
    \        }\n            j++;\n        }\n        return copy;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.sortArray(tmp44ece756.java:45)\n\
    \tat Problem.main(tmp44ece756.java:54)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> array2 = new ArrayList<Integer>();\n  \
    \      ArrayList<Integer> array3 = new ArrayList<Integer>();\n        int sum\
    \ = 0;\n        for(int i = 0; i<array.size(); i++) {\n            array2.add(array.get(i));\n\
    \            sum += array.get(i);\n        }\n        if(sum%2 == 0) {\n     \
    \       Collections.sort(array2);\n            array2.forEach(i -> array3.add(i));\n\
    \        } else {\n            Collections.sort(array2, Collections.reverseOrder());\n\
    \            array2.forEach(i -> array3.add(i));\n        }\n        return array3;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6z1y0237.java:39)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if(array.isEmpty()) {\n            return array;\n       \
    \ }\n        ArrayList<Integer> sortedArray = new ArrayList<Integer>();\n    \
    \    Comparator<Integer> comp = (a,b) -> {\n            Integer firstVal = Integer.valueOf(a);\n\
    \            Integer secondVal = Integer.valueOf(b);\n            Integer sum\
    \ = firstVal.add(secondVal);\n            if (sum%2 == 0) {\n                Collections.sort(array,\
    \ comp);\n            } else {\n                Collections.sort(array, Collections.reverseOrder(comp));\n\
    \            }\n            return array;\n        };\n        Collections.sort(array,\
    \ comp);\n        return sortedArray;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl2li5v4q.java:27: error: cannot find symbol\n            Integer\
    \ sum = firstVal.add(secondVal);\n                                  ^\n  symbol:\
    \   method add(Integer)\n  location: variable firstVal of type Integer\n/tmp/tmpl2li5v4q.java:33:\
    \ error: incompatible types: bad return type in lambda expression\n          \
    \  return array;\n                   ^\n    ArrayList<Integer> cannot be converted\
    \ to int\n2 errors\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<>(array);\n    \
    \    Arrays.sort(result);\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpas6drnpu.java:21: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(result);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> returnArray = new ArrayList<Integer>();\n\
    \        Collections.sort(array);\n        int totalSum = 0;\n        for (int\
    \ i = 0; i < array.size(); i++) {\n            totalSum += array.get(i);\n   \
    \     }\n        if (totalSum % 2 == 1) {\n            Collections.reverse(array);\n\
    \        }\n        for(Integer i : array) {\n            returnArray.add(i);\n\
    \        }\n        return returnArray;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpknqlfyeq.java:37)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> newArray = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < array.size(); i++) {\n            pq.offer(array.get(i));\n\
    \        }\n        while (!pq.isEmpty()) {\n            newArray.add(pq.poll());\n\
    \        }\n        return newArray;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoaxjcrdd.java:34)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> results = new ArrayList<Integer>();\n \
    \       ArrayList<Integer> temporaryArray = new ArrayList<Integer>();\n      \
    \  ArrayList<Integer> arrayListCopy = new ArrayList<Integer>(array);\n       \
    \ for (int i = 0; i < arrayListCopy.size(); i++) {\n            int sum = (arrayListCopy.get(i)\
    \ + arrayListCopy.get((i + 1))) % 2;\n            temporaryArray.add(sum);\n \
    \       }\n        temporaryArray = sortList(temporaryArray);\n        results.addAll(temporaryArray);\n\
    \        return results;\n}\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptb2ttvw3.java:27: error: cannot find symbol\n        temporaryArray\
    \ = sortList(temporaryArray);\n                         ^\n  symbol:   method\
    \ sortList(ArrayList<Integer>)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> copy = new ArrayList<>(array);\n      \
    \  Collections.sort(copy);\n        return copy;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpif8_ajie.java:28)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sum = 0;\n        int last = 0;\n        for (int i =\
    \ 0; i < array.size(); i++) {\n            sum += array.get(i);\n            last\
    \ = i;\n        }\n        if (sum % 2 == 1) {\n            Collections.sort(array);\n\
    \        } else {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc_00wt76.java:37)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Arrays.sort(array);\n        if (array.get(0) == array.get(array.length\
    \ - 1)) {\n            Collections.reverse(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfwbut2an.java:20: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpfwbut2an.java:21: error: cannot find symbol\n        if\
    \ (array.get(0) == array.get(array.length - 1)) {\n                          \
    \                 ^\n  symbol:   variable length\n  location: variable array of\
    \ type ArrayList<Integer>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> copy = new ArrayList<>(array);\n      \
    \  ArrayList<Integer> copy2 = new ArrayList<>(array);\n        if (array.isEmpty())\n\
    \            return copy;\n        ArrayList<Integer> newCopy = new ArrayList<>();\n\
    \        int sumOfFirstElements = sumOf(copy, 0);\n        int sumOfLastElements\
    \ = sumOf(copy, copy.size() - 1);\n        if (sumOfFirstElements % 2 == 1) {\n\
    \            Collections.sort(copy2);\n            Collections.sort(copy);\n \
    \           newCopy.addAll(copy);\n            newCopy.addAll(copy2);\n      \
    \  } else if (sumOfLastElements % 2 == 0) {\n            Collections.sort(copy);\n\
    \            Collections.sort(copy2);\n            newCopy.addAll(copy2);\n  \
    \          newCopy.addAll(copy);\n        } else {\n            Collections.sort(copy);\n\
    \            newCopy.addAll(copy);\n        }\n        return newCopy;\n}\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1wi1htc8.java:25: error: cannot find symbol\n        int sumOfFirstElements\
    \ = sumOf(copy, 0);\n                                 ^\n  symbol:   method sumOf(ArrayList<Integer>,int)\n\
    \  location: class Problem\n/tmp/tmp1wi1htc8.java:26: error: cannot find symbol\n\
    \        int sumOfLastElements = sumOf(copy, copy.size() - 1);\n             \
    \                   ^\n  symbol:   method sumOf(ArrayList<Integer>,int)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> returnArray = new ArrayList<>();\n    \
    \    if (array.size() >= 2) {\n            Integer firstElement = array.get(0);\n\
    \            Integer lastElement = array.get(array.size() - 1);\n            int\
    \ firstElementSum = firstElement.intValue();\n            int lastElementSum =\
    \ lastElement.intValue();\n            boolean isEvenSum = firstElementSum % 2\
    \ != 0;\n            int lastElementElementSum = lastElement.intValue();\n   \
    \         if (firstElementSum > lastElementSum) {\n                int temp =\
    \ firstElement;\n                firstElement = lastElement;\n               \
    \ lastElement = temp;\n            }\n            int firstIndex = 0;\n      \
    \      int lastIndex = 0;\n            for (Integer num : array) {\n         \
    \       int sum = num.intValue();\n                if (firstElementSum <= sum)\
    \ {\n                    firstIndex++;\n                    if (isEvenSum) {\n\
    \                        returnArray.add(0, firstElement);\n                 \
    \       firstElement = sum;\n                        firstElementSum -= sum;\n\
    \                    } else {\n                        returnArray.add(firstElement);\n\
    \                        firstElement = sum;\n                        firstElementSum\
    \ -= sum;\n                    }\n                } else {\n                 \
    \   lastIndex++;\n                    if (isEvenSum) {\n                     \
    \   returnArray.add(lastElement, sum);\n                        lastElement =\
    \ sum;\n                        lastElementSum -= sum;\n                    }\
    \ else {\n                        returnArray.add(lastElement, sum);\n       \
    \                 lastElement = sum;\n                        lastElementSum -=\
    \ sum;\n                    }\n                }\n            }\n            if\
    \ (isEvenSum) {\n                returnArray.add(firstElement, lastElement);\n\
    \            }\n        }\n        return returnArray;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqft62cgt.java:69)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Arrays.sort(array);\n        if (array.get(0) % 2 == 0) {\n\
    \            Collections.reverse(array);\n        }\n        return array;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy05jb4f3.java:20: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Comparator<Integer> ascComparator = Comparator.comparingInt((Integer\
    \ e) -> e);\n        Comparator<Integer> descComparator = Comparator.comparingInt((Integer\
    \ e) -> -e);\n        ArrayList<Integer> result = new ArrayList<>();\n       \
    \ if (array.size() == 0) {\n            return result;\n        }\n        int\
    \ sumFirst = array.get(0) + array.get(array.size() - 1);\n        int sumLast\
    \ = sumFirst - array.get(array.size() - 1);\n        if (sumFirst % 2 == 0) {\n\
    \            Collections.sort(array, ascComparator);\n        } else {\n     \
    \       Collections.sort(array, descComparator);\n        }\n        for (int\
    \ i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n   \
    \     }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp910zbjsu.java:41)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // sort them in ascending order if the sum( first index value,\
    \ last index value) is odd\n        // or sort it in descending order if the sum(\
    \ first index value, last index value) is even\n        int lastValue = array.get(array.size()\
    \ - 1);\n        Collections.sort(array);\n        if (lastValue % 2 != 0) {\n\
    \            // ascending\n            array.removeAll(Collections.singleton(lastValue));\n\
    \            array.add(lastValue);\n            return array;\n        } else\
    \ {\n            // descending\n            array.removeAll(Collections.singleton(lastValue));\n\
    \            Collections.sort(array);\n            array.add(0, lastValue);\n\
    \            return array;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp_5dr7b9a.java:22)\n\tat Problem.main(tmp_5dr7b9a.java:38)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array.size() <= 1) {\n            return array;\n    \
    \    }\n        Arrays.sort(array);\n        int odd = 0, even = 0;\n        for\
    \ (int i = 0; i < array.size(); i++) {\n            odd += array.get(i);\n   \
    \     }\n        for (int i = array.size() - 1; i > 0; i--) {\n            even\
    \ += array.get(i);\n        }\n        if (odd % 2 == 0) {\n            Arrays.sort(array);\n\
    \        } else {\n            Arrays.sort(array, Collections.reverseOrder());\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8dm2t5t6.java:23: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp8dm2t5t6.java:32: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \            Arrays.sort(array);\n                  ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mism"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Collections.sort(array);\n        if (array.get(0) == array[array.size()-1])\
    \ return array;\n        int n = array.size();\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>(n);\n        int k = 0;\n        for (int i = 0; i\
    \ < array.size(); i++) {\n            k = k + array.get(i);\n            if (k%2\
    \ == 0) result.add(array.get(i));\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ek1edib.java:21: error: array required, but ArrayList<Integer>\
    \ found\n        if (array.get(0) == array[array.size()-1]) return array;\n  \
    \                               ^\n1 error\n"
  stdout: ''
  timestamp: 1660012006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Write your code here.\n        ArrayList<Integer> array2\
    \ = new ArrayList<>();\n        int sum = 0;\n        int len = array.size();\n\
    \        int index = 0;\n        for (int i = 0; i < len; i++) {\n           \
    \ sum += array.get(i);\n            if (sum % 2 == 0) {\n                array2.add(array.get(index));\n\
    \                sum -= array.get(index);\n                index++;\n        \
    \    } else {\n                array2.add(array.get(index));\n               \
    \ sum -= array.get(index);\n                index++;\n                array2.add(array.get(index));\n\
    \                sum -= array.get(index);\n                index++;\n        \
    \    }\n        }\n        return array2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpdl7yapo9.java:35)\n\tat Problem.main(tmpdl7yapo9.java:44)\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> returnArray = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> newArray = new ArrayList<Integer>();\n        for\
    \ (int i = 0; i < array.size(); i++) {\n            int newNumber = 0;\n     \
    \       if (array.get(i) > array.get(i + 1)) {\n                newNumber = array.get(i\
    \ + 1);\n                newArray.add(newNumber);\n            } else {\n    \
    \            newNumber = array.get(i);\n                newArray.add(newNumber);\n\
    \            }\n        }\n        for (int i = 0; i < newArray.size(); i++) {\n\
    \            if (newArray.get(i) % 2 != 0) {\n                returnArray.add(newArray.get(i));\n\
    \            }\n        }\n        return returnArray;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpqsp3x56z.java:24)\n\tat Problem.main(tmpqsp3x56z.java:41)\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> copy = new ArrayList<>();\n        int\
    \ first = array.get(0);\n        int last = array.get(array.size() - 1);\n   \
    \     int sum = (first + last);\n        if (sum % 2 == 0) {\n            Collections.sort(array);\n\
    \            for (int i = 0; i < copy.size(); i++) {\n                copy.set(i,\
    \ array.get(i));\n            }\n        } else {\n            Collections.sort(array);\n\
    \            for (int i = copy.size() - 1; i >= 0; i--) {\n                copy.set(i,\
    \ array.get(i));\n            }\n        }\n        return copy;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpt7qckxck.java:21)\n\tat Problem.main(tmpt7qckxck.java:38)\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> arr2 = new ArrayList<>();\n        int[]\
    \ sum = new int[array.size()];\n        Arrays.fill(sum, 0);\n        for (int\
    \ i = 0; i < array.size(); i++) {\n            sum[i] += array.get(i);\n     \
    \   }\n        if (sum[sum.length - 1] % 2 == 0) {\n            Collections.sort(array);\n\
    \            for (int i = 0; i < array.size(); i++) {\n                arr2.add(array.get(i));\n\
    \            }\n        } else {\n            Collections.sort(array, (i, v) ->\
    \ v - array.get(i));\n            for (int i = array.size() - 1; i >= 0; i--)\
    \ {\n                arr2.add(array.get(i));\n            }\n        }\n     \
    \   return arr2;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -1 out of bounds for length 0\n\tat Problem.sortArray(tmpbitvzjnq.java:26)\n\
    \tat Problem.main(tmpbitvzjnq.java:40)\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n     \
    \   if (array.isEmpty()) {\n            return res;\n        }\n        int sum\
    \ = 0;\n        for (int a : array) {\n            sum += a;\n        }\n    \
    \    if (sum % 2 == 1) {\n            return new ArrayList<Integer>(array);\n\
    \        } else {\n            Collections.sort(array, (o1, o2) -> {\n       \
    \         return o2 - o1;\n            });\n            return array;\n      \
    \  }\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp53zduy27.java:40)\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<>(array);\n    \
    \    List<Integer> subList = result.subList(1, result.size());\n        Collections.sort(subList,\
    \ Comparator.comparingInt(i -> i));\n        if (subList.size() % 2 != 0)\n  \
    \          Collections.sort(subList, Comparator.comparingInt(i -> -(i)));\n  \
    \      result.addAll(subList);\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: fromIndex(1)\
    \ > toIndex(0)\n\tat java.base/java.util.AbstractList.subListRangeCheck(AbstractList.java:509)\n\
    \tat java.base/java.util.ArrayList.subList(ArrayList.java:1108)\n\tat Problem.sortArray(tmp1nw33olm.java:21)\n\
    \tat Problem.main(tmp1nw33olm.java:29)\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int[] array1 = new int[array.size()];\n        IntStream.range(0,\
    \ array1.length).forEach(i -> array1[i] = array.get(i));\n        Arrays.sort(array1);\n\
    \        ArrayList<Integer> result = new ArrayList<>(array);\n        result.clear();\n\
    \        result.addAll(Arrays.asList(array1));\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ha0w9ri.java:25: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        result.addAll(Arrays.asList(array1));\n \
    \             ^\n    lower bounds: Integer,Object\n    lower bounds: int[]\n \
    \ where T is a type-variable:\n    T extends Object declared in method <T>asList(T...)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> copyArray = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < array.size(); i++) {\n            copyArray.add(array.get(i));\n\
    \        }\n        Integer sumFirst = 0;\n        Integer sumLast = copyArray.get(copyArray.size()\
    \ - 1);\n        int oddOrEven = sumFirst.intValue() % 2 == 0 ? (sumLast.intValue()\
    \ - sumFirst.intValue()) % 2 : 0;\n        \n        switch (oddOrEven) {\n  \
    \          case 0:\n                Collections.sort(copyArray);\n           \
    \     break;\n            case 1:\n                Collections.sort(copyArray,\
    \ Collections.reverseOrder());\n                break;\n        }\n        return\
    \ copyArray;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmposj8ypoy.java:25)\n\tat Problem.main(tmposj8ypoy.java:39)\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n    \
    \    ArrayList<Integer> temp2 = new ArrayList<Integer>();\n        for (int i\
    \ = 0; i < array.size(); i++) {\n            temp.add(array.get(i));\n       \
    \ }\n        temp.sort(compare);\n        for (int i = 0; i < temp.size(); i++)\
    \ {\n            temp2.add(temp.get(i));\n        }\n        temp2.sort(compare);\n\
    \        for (int i = 0; i < temp2.size(); i++) {\n            array.set(temp2.get(i),\
    \ i);\n        }\n        return array;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj4wfadz2.java:25: error: cannot find symbol\n        temp.sort(compare);\n\
    \                  ^\n  symbol:   variable compare\n  location: class Problem\n\
    /tmp/tmpj4wfadz2.java:29: error: cannot find symbol\n        temp2.sort(compare);\n\
    \                   ^\n  symbol:   variable compare\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if(array.isEmpty()) throw new RuntimeException(\"array is\
    \ empty\");\n        int sum = array.get(0) + array.get(array.length-1);\n   \
    \     if(sum % 2 == 0) return sortArrayDesc(array);\n        else return sortArrayAsc(array);\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcyi3w091.java:21: error: cannot find symbol\n        int sum =\
    \ array.get(0) + array.get(array.length-1);\n                                \
    \                ^\n  symbol:   variable length\n  location: variable array of\
    \ type ArrayList<Integer>\n/tmp/tmpcyi3w091.java:22: error: cannot find symbol\n\
    \        if(sum % 2 == 0) return sortArrayDesc(array);\n                     \
    \           ^\n  symbol:   method sortArrayDesc(ArrayList<Integer>)\n  location:\
    \ class Problem\n/tmp/tmpcyi3w091.java:23: error: cannot find symbol\n       \
    \ else return sortArrayAsc(array);\n                    ^\n  symbol:   method\
    \ sortArrayAsc(ArrayList<Integer>)\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sum = array.stream().mapToInt(Integer::intValue).sum();\n\
    \        int numOfOddNums = sum % 2 == 0 ? sum : sum * -1;\n        Collections.sort(array,Comparator.comparingInt((int[]array)i\
    \ -> {\n            int temp = i;\n            if((int)temp + numOfOddNums ==\
    \ sum) {\n                return temp;\n            }\n            return (int)\
    \ temp + numOfOddNums;\n        }));\n        return array;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbzt8s5vr.java:22: error: -> expected\n        Collections.sort(array,Comparator.comparingInt((int[]array)i\
    \ -> {\n                                                                   ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Integer sum = 0;\n        Integer temp;\n        int count\
    \ = 0;\n        Collections.sort(array);\n        for (int i = 0; i < array.size();\
    \ i++) {\n            temp = array.get(i);\n            if (temp != null) {\n\
    \                if (temp != 0) {\n                    sum += temp;\n        \
    \            count++;\n                }\n            }\n        }\n        if\
    \ (sum % 2 != 0) {\n            Collections.reverse(array);\n        }\n     \
    \   return array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg36xep07.java:41)\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> copy = array.clone();\n        Arrays.sort(copy);\n\
    \n        if (copy.get(0) % 2 != 0) {\n            Collections.reverse(copy);\n\
    \        }\n\n        return copy;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_t81wy2b.java:20: error: incompatible types: Object cannot be converted\
    \ to ArrayList<Integer>\n        ArrayList<Integer> copy = array.clone();\n  \
    \                                           ^\n/tmp/tmp_t81wy2b.java:21: error:\
    \ no suitable method found for sort(ArrayList<Integer>)\n        Arrays.sort(copy);\n\
    \              ^\n    method Arrays.sort(int[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to int[])\n    method Arrays.sort(long[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to long[])\n    method Arrays.sort(short[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to short[])\n    method Arrays.sort(char[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to char[])\n    method Arrays.sort(byte[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to byte[])\n    method Arrays.sort(float[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to float[])\n    method Arrays.sort(double[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to double[])\n    method Arrays.sort(Object[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is\
    \ not applicable\n      (cannot infer type-variable(s) T#1\n        (actual and\
    \ formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Your code here\n        if (array.isEmpty()) {\n      \
    \      return array;\n        }\n        if (array.isEmpty()) {\n            return\
    \ array;\n        }\n        ArrayList<Integer> list = new ArrayList<>(array);\n\
    \        int size = list.size();\n        Collections.sort(list);\n        ArrayList<Integer>\
    \ arrSorted;\n        if (list.get(0) % 2 != 0) {\n            arrSorted = new\
    \ ArrayList<>(list.subList(0, size - 1));\n            arrSorted.addAll(list.subList(size\
    \ - 1, size));\n            arrSorted.sort(Collections.reverseOrder());\n    \
    \    } else {\n            arrSorted = new ArrayList<>(list.subList(0, size -\
    \ 1));\n            arrSorted.addAll(list.subList(size - 1, size));\n        \
    \    arrSorted.sort();\n        }\n        return arrSorted;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7eacvdpi.java:38: error: method sort in class ArrayList<E> cannot\
    \ be applied to given types;\n            arrSorted.sort();\n                \
    \     ^\n  required: Comparator<? super Integer>\n  found:    no arguments\n \
    \ reason: actual and formal argument lists differ in length\n  where E is a type-variable:\n\
    \    E extends Object declared in class ArrayList\n1 error\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<>();\n        Collections.sort(array);\n\
    \        if (array.get(0) % 2 == 0) {\n            result.addAll(Arrays.copyOfRange(array,\
    \ 1, array.length));\n        } else {\n            result.addAll(Arrays.copyOfRange(array,\
    \ array.length + 1, array.length));\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfgqooo4.java:23: error: cannot find symbol\n            result.addAll(Arrays.copyOfRange(array,\
    \ 1, array.length));\n                                                       \
    \     ^\n  symbol:   variable length\n  location: variable array of type ArrayList<Integer>\n\
    /tmp/tmpzfgqooo4.java:25: error: cannot find symbol\n            result.addAll(Arrays.copyOfRange(array,\
    \ array.length + 1, array.length));\n                                        \
    \                 ^\n  symbol:   variable length\n  location: variable array of\
    \ type ArrayList<Integer>\n/tmp/tmpzfgqooo4.java:25: error: cannot find symbol\n\
    \            result.addAll(Arrays.copyOfRange(array, array.length + 1, array.length));\n\
    \                                                                           ^\n\
    \  symbol:   variable length\n  location: variable array of type ArrayList<Integer>\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array == null || array.size() == 0) {\n            return\
    \ new ArrayList<Integer>();\n        }\n        Collections.sort(array);\n   \
    \     int firstIndex = array.size() / 2;\n        int secondIndex = firstIndex\
    \ + 1;\n        int sumFirstValue = array.get(firstIndex);\n        int sumSecondValue\
    \ = array.get(secondIndex);\n        if (sumFirstValue % 2 != 0) {\n         \
    \   Collections.reverse(array);\n        }\n        if (sumSecondValue % 2 ==\
    \ 0) {\n            Collections.reverse(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpasw4d88n.java:27)\n\tat Problem.main(tmpasw4d88n.java:38)\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        array.add(array.get(0));\n        int[] arrayCopy = new int[array.size()];\n\
    \        for (int i = 0; i < arrayCopy.length; i++) {\n            arrayCopy[i]\
    \ = array.get(i);\n        }\n        Arrays.sort(arrayCopy, new Comparator<Integer>()\
    \ {\n            int sum = 0;\n            int i = 0;\n            int j = 0;\n\
    \            public int compare(Integer o1, Integer o2) {\n                if\
    \ (o1.intValue() > o2.intValue()) {\n                    return 1;\n         \
    \       } else if (o1.intValue() < o2.intValue()) {\n                    return\
    \ -1;\n                } else {\n                    sum = sum + o1;\n       \
    \             i = o1;\n                    j = o2;\n                }\n      \
    \          if (sum % 2 == 1) {\n                    return -1;\n             \
    \   } else if (sum % 2 == 0) {\n                    return 1;\n              \
    \  }\n            }\n        });\n        ArrayList<Integer> sortedArray = new\
    \ ArrayList<Integer>();\n        int temp = 0;\n        for (int i = 0; i < arrayCopy.length;\
    \ i++) {\n            sortedArray.add(arrayCopy[i]);\n        }\n        return\
    \ sortedArray;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl1wfpmvq.java:25: error: no suitable method found for sort(int[],<anonymous\
    \ Comparator<Integer>>)\n        Arrays.sort(arrayCopy, new Comparator<Integer>()\
    \ {\n              ^\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>)\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       equality constraints: int\n        lower bounds: Integer,Object)\n   \
    \ method Arrays.<T#2>sort(T#2[],int,int,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Object declared in method <T#1>sort(T#1[],Comparator<? super T#1>)\n    T#2\
    \ extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sum = getSum(array);\n        List<Integer> list = array.stream().sorted(Comparator.comparing(Integer::valueOf)).collect(Collectors.toList());\n\
    \        List<Integer> sortedList = list.stream().sorted(Comparator.comparing(Integer::valueOf)).collect(Collectors.toList());\n\
    \        List<Integer> sortedList2 = array.stream().sorted(Comparator.comparing(Integer::valueOf)).collect(Collectors.toList());\n\
    \        ArrayList<Integer> sortedList3 = new ArrayList<>(list);\n        ArrayList<Integer>\
    \ sortedList4 = new ArrayList<>(list);\n        Collections.sort(list);\n    \
    \    Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list);\n\
    \        Collections.sort(list);\n        Collections.sort(list);\n        Collections.sort(list\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpicuz3xic.java:92: error: ')' expected\n        Collections.sort(list\n\
    \                             ^\n1 error\n"
  stdout: ''
  timestamp: 1660012006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // code here\n        int sum = 0;\n        for(int i = 0;\
    \ i<array.size(); i++){\n            sum += array.get(i);\n        }\n       \
    \ if(sum%2==1){\n            Collections.sort(array);\n        }\n        else{\n\
    \            Collections.sort(array,Collections.reverseOrder());\n        }\n\
    \        return array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqkp2ysoi.java:37)\n"
  stdout: ''
  timestamp: 1660012008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> a = new ArrayList<>();\n        a.addAll(array);\n\
    \        Collections.sort(a);\n        return a;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0r509ts.java:29)\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array == null) return null;\n        ArrayList<Integer>\
    \ newArray = new ArrayList<Integer>();\n        int[] sorted = new int[array.size()];\n\
    \        int sum = 0;\n        int odd_sum = 0;\n        int even_sum = 0;\n \
    \       int first_index = 0, last_index = 0;\n        Arrays.sort(array);\n  \
    \      sum = array.get(0);\n        odd_sum = sum % 2;\n        sum = sum / 2;\n\
    \        even_sum = sum % 2;\n        sum = sum / 2;\n        Arrays.fill(sorted,\
    \ 0);\n        int i = 1, j = 1;\n        while (i <= array.size()) {\n      \
    \      sum = sum + array.get(i);\n            if (sum == odd_sum) {\n        \
    \        newArray.add(array.get(first_index));\n                first_index++;\n\
    \            } else if (sum == even_sum) {\n                newArray.add(array.get(last_index));\n\
    \                last_index--;\n            } else {\n                newArray.add(array.get(i));\n\
    \            }\n            i++;\n            j++;\n        }\n        return\
    \ newArray;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfp3uroei.java:27: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> arrayCopy = new ArrayList<>(array.size());\n\
    \        int sum = 0;\n        for (Integer value : array) {\n            sum\
    \ += value;\n        }\n        ArrayList<Integer> left = new ArrayList<>(array.size());\n\
    \        ArrayList<Integer> right = new ArrayList<>(array.size());\n        int\
    \ pos = array.size() - 1;\n        for (int i = 0; i <= array.size() - 1; i++)\
    \ {\n            while (pos >= 0 && sum + array[pos] < sum) {\n              \
    \  left.add(pos + 1, array[pos + 1]);\n                pos -= 1;\n           \
    \ }\n            while (pos >= 0 && sum + array[pos] >= sum) {\n             \
    \   right.add(pos + 1, array[pos + 1]);\n                pos -= 1;\n         \
    \   }\n        }\n        if (sum % 2 == 1) {\n            arrayCopy.addAll(left);\n\
    \            arrayCopy.addAll(right);\n        } else {\n            arrayCopy.addAll(right);\n\
    \            arrayCopy.addAll(left);\n        }\n        return arrayCopy;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq_ax1dgp.java:29: error: array required, but ArrayList<Integer>\
    \ found\n            while (pos >= 0 && sum + array[pos] < sum) {\n          \
    \                                ^\n/tmp/tmpq_ax1dgp.java:30: error: array required,\
    \ but ArrayList<Integer> found\n                left.add(pos + 1, array[pos +\
    \ 1]);\n                                       ^\n/tmp/tmpq_ax1dgp.java:33: error:\
    \ array required, but ArrayList<Integer> found\n            while (pos >= 0 &&\
    \ sum + array[pos] >= sum) {\n                                          ^\n/tmp/tmpq_ax1dgp.java:34:\
    \ error: array required, but ArrayList<Integer> found\n                right.add(pos\
    \ + 1, array[pos + 1]);\n                                        ^\n4 errors\n"
  stdout: ''
  timestamp: 1660012008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n     \
    \   Arrays.sort(array);\n        int sum = 0;\n        for (int i = 0; i < array.size();\
    \ i++) {\n            sum += array.get(i);\n            if (sum % 2 != 0) {\n\
    \                ret.add(array.get(i));\n            }\n        }\n        return\
    \ ret;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2qx5_imw.java:21: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sum = 0;\n        for(int i : array) {\n            sum\
    \ += i;\n        }\n\n        Collections.sort(array);\n\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbscwbq8k.java:33)\n"
  stdout: ''
  timestamp: 1660012009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n    \
    \    int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n        \
    \    list.add(array.get(i));\n            sum += array.get(i);\n        }\n\n\
    \        if (sum % 2 != 0) {\n            Collections.sort(list);\n        }\n\
    \        else {\n            Collections.sort(list, Collections.reverseOrder());\n\
    \        }\n\n        return list;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_c3a3eac.java:40)\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array.isEmpty()) {\n            return array;\n      \
    \  }\n        ArrayList<Integer> result = new ArrayList<>();\n        int sum\
    \ = 0;\n        for (int num : array) {\n            sum = sum + num;\n      \
    \  }\n        int isEvenOrOdd = sum % 2 == 0 ? 1 : -1;\n        if (isEvenOrOdd\
    \ == 1) {\n            for (int i = 0; i < array.size(); i++) {\n            \
    \    result.add(array.get(i));\n            }\n        } else {\n            for\
    \ (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp0sf8utk.java:43)\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sum = array.get(0)+array.get(array.size()-1);\n      \
    \  if(sum % 2 == 0) {\n            Collections.sort(array);\n            return\
    \ array;\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n\
    \        for(Integer i : array) {\n            int index1 = result.size()-1;\n\
    \            int index2 = index1-1;\n            int sum1 = 0;\n            int\
    \ sum2 = 0;\n            for(int j = 0; j < index2; j++) {\n                sum1\
    \ += result.get(j);\n            }\n            for(int j = 0; j < index1; j++)\
    \ {\n                sum2 += result.get(j);\n            }\n            if(sum1\
    \ < sum2) {\n                result.add(i, index1);\n            } else {\n  \
    \              result.add(i, index2);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp6hrc2fem.java:20)\n\tat Problem.main(tmp6hrc2fem.java:47)\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Write your code here.\n        int sum = 0;\n        for(int\
    \ i=0; i<array.size(); i++)\n            sum += array.get(i);\n        if(sum%2\
    \ == 0)\n            Collections.sort(array);\n        else\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        return array;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpongrdfeb.java:33)\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> newArray = new ArrayList<Integer>(array);\n\
    \        Collections.sort(newArray);\n        return newArray;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxgrwvyzi.java:28)\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<>();\n        int\
    \ left = 0, right = array.size() - 1;\n        while (left < right) {\n      \
    \      int mid = (left + right) / 2;\n            int sum = 0;\n            if\
    \ (right > left) {\n                sum = array[mid] + array[right];\n       \
    \     }\n            if (sum % 2 == 0) {\n                result.add(array[mid]);\n\
    \                right = mid - 1;\n            } else {\n                result.add(array[mid]);\n\
    \                left = mid + 1;\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyok693_5.java:26: error: array required, but ArrayList<Integer>\
    \ found\n                sum = array[mid] + array[right];\n                  \
    \         ^\n/tmp/tmpyok693_5.java:26: error: array required, but ArrayList<Integer>\
    \ found\n                sum = array[mid] + array[right];\n                  \
    \                      ^\n/tmp/tmpyok693_5.java:29: error: array required, but\
    \ ArrayList<Integer> found\n                result.add(array[mid]);\n        \
    \                        ^\n/tmp/tmpyok693_5.java:32: error: array required, but\
    \ ArrayList<Integer> found\n                result.add(array[mid]);\n        \
    \                        ^\n4 errors\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n    \
    \    // get first and last index value\n        long first = array.get(0);\n \
    \       long last = array.get(array.size() - 1);\n        // sort array in ascending\
    \ order if the sum is odd\n        boolean isOdd = (last + first) % 2 != 0;\n\
    \        // sort array in descending order if the sum is even\n        boolean\
    \ isEven = (last + first) % 2 == 0;\n        if (isOdd || isEven) {\n        \
    \    // get array size\n            int size = array.size();\n            // sort\
    \ array in ascending order\n            for (int i = 0; i < size; i++) {\n   \
    \             long sum = (array.get(i) + first) % 2;\n                if (sum\
    \ > 0) {\n                    list.add(array.get(i));\n                }\n   \
    \         }\n            // sort array in descending order\n            for (int\
    \ i = size-1; i >= 0; i--) {\n                long sum = (array.get(i) + first)\
    \ % 2;\n                if (sum < 1) {\n                    list.add(0, array.get(i));\n\
    \                }\n            }\n        } else {\n            // sort array\
    \ in ascending order\n            for (int i = 0; i < array.size(); i++) {\n \
    \               long sum = (array.get(i) + first) % 2;\n                if (sum\
    \ > 0) {\n                    list.add(array.get(i));\n                }\n   \
    \         }\n        }\n        return list;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpury6hqxn.java:22)\n\tat Problem.main(tmpury6hqxn.java:57)\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Arrays.sort(array);\n        if (array.get(array.size() -\
    \ 1) % 2 == 1) {\n            Collections.reverse(array);\n        }\n       \
    \ return array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp96io8_5t.java:20: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> copy = new ArrayList<>();\n        int\
    \ last = 0;\n        for(int i=0; i < array.size(); i++) {\n            int current\
    \ = array.get(i);\n            copy.add(last);\n            last = current;\n\
    \        }\n        copy.add(last);\n        Collections.sort(copy, (a, b) ->\
    \ {\n            int sumA = a + last;\n            int sumB = b + last;\n    \
    \        int sum = sumA + sumB;\n            if(sum % 2 == 0) {\n            \
    \    return sumB - sumA;\n            }else {\n                return sumA - sumB;\n\
    \            }\n        });\n        return copy;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptrwa04qh.java:29: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n            int sumA = a + last;\n\
    \                           ^\n/tmp/tmptrwa04qh.java:30: error: local variables\
    \ referenced from a lambda expression must be final or effectively final\n   \
    \         int sumB = b + last;\n                           ^\n2 errors\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> arr = new ArrayList<>();\n        arr.addAll(array);\n\
    \        Collections.sort(arr);\n        return arr;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkk_rxm1c.java:29)\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<>();\n        int[]\
    \ sum = array.toArray();\n        int total = 0;\n        for (int i = 0; i <\
    \ sum.length; i++) {\n            total += sum[i];\n            if (total % 2\
    \ == 0) {\n                result.add(sum[i]);\n            } else {\n       \
    \         Collections.sort(result, Collections.reverseOrder());\n            \
    \    result.add(sum[i]);\n            }\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3uh62b5w.java:21: error: incompatible types: Object[] cannot be\
    \ converted to int[]\n        int[] sum = array.toArray();\n                 \
    \                ^\n1 error\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array == null || array.size() == 0) {\n            return\
    \ new ArrayList<Integer>();\n        }\n        // Calculate the first and last\
    \ element of the array.\n        int lastIndex = array.size() - 1;\n        int\
    \ firstIndex = array.get(0);\n        \n        // Calculate the sum of the first\
    \ and last element.\n        int sum = firstIndex + lastIndex;\n        if (sum\
    \ % 2 == 0) {\n            // Sum is even, sort descending order.\n          \
    \  Collections.sort(array);\n        }\n        else {\n            // Sum is\
    \ odd, sort ascending order.\n            Collections.reverse(array);\n      \
    \  }\n        \n        // Return the array.\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwb7y50b9.java:44)\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> newArray = new ArrayList<Integer>(array.size());\n\
    \        if (array.isEmpty()) {\n            return newArray;\n        }\n   \
    \     int sumFirst = array.get(0);\n        int sumLast = array.get(array.size()\
    \ - 1);\n        int sumOdd = sumFirst % 2 == 1 ? ((sumLast % 2 == 1) ? sumLast\
    \ : -sumLast) : (sumLast % 2 == 1 ? -sumFirst : sumFirst);\n        int sumEven\
    \ = sumLast % 2 == 1 ? ((sumFirst % 2 == 1) ? sumFirst : -sumFirst) : (sumFirst\
    \ % 2 == 1 ? -sumLast : sumLast);\n        if (sumOdd % 2 == 1) {\n          \
    \  Collections.sort(array, (a, b) -> {\n                boolean aEven = a == sumEven;\n\
    \                boolean bEven = b == sumEven;\n                if (aEven) {\n\
    \                    return bEven;\n                } else {\n               \
    \     return aEven;\n                }\n            });\n        } else {\n  \
    \          Collections.sort(array, (a, b) -> {\n                boolean aOdd =\
    \ a == sumOdd;\n                boolean bOdd = b == sumOdd;\n                if\
    \ (bOdd) {\n                    return aOdd;\n                } else {\n     \
    \               return bOdd;\n                }\n            });\n        }\n\
    \        newArray.addAll(array);\n        return newArray;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2av0325.java:29: error: incompatible types: cannot infer type-variable(s)\
    \ T\n            Collections.sort(array, (a, b) -> {\n                       \
    \     ^\n    (argument mismatch; bad return type in lambda expression\n      boolean\
    \ cannot be converted to int)\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>sort(List<T>,Comparator<? super T>)\n/tmp/tmpw2av0325.java:39:\
    \ error: incompatible types: cannot infer type-variable(s) T\n            Collections.sort(array,\
    \ (a, b) -> {\n                            ^\n    (argument mismatch; bad return\
    \ type in lambda expression\n      boolean cannot be converted to int)\n  where\
    \ T is a type-variable:\n    T extends Object declared in method <T>sort(List<T>,Comparator<?\
    \ super T>)\n2 errors\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // copy the array and sort it first in ascending order if\
    \ the sum of the first index and the last\n        // index is odd, and sort in\
    \ descending order if the sum of the first index and the last index is\n     \
    \   // even\n        ArrayList<Integer> copy = new ArrayList<>(array);\n     \
    \   Arrays.sort(copy, (int x, int y) -> {\n            if (x % 2 != 0 && y % 2\
    \ == 0) {\n                return y - x;\n            } else if (x % 2 == 0 &&\
    \ y % 2 != 0) {\n                return x - y;\n            }\n            return\
    \ 0;\n        });\n        return copy;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphxqbotj1.java:24: error: no suitable method found for sort(ArrayList<Integer>,(int\
    \ x, in[...] 0; })\n        Arrays.sort(copy, (int x, int y) -> {\n          \
    \    ^\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; ArrayList<Integer>\
    \ cannot be converted to T#1[]))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Write your code here\n        int sum = 0;\n        for\
    \ (int num : array) {\n            sum += num;\n        }\n        Arrays.sort(array);\n\
    \        if (sum % 2 != 0) {\n            Collections.reverse(array);\n      \
    \  }\n        return array;\n}\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp06xg4q2b.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n  \
    \      // if sum is odd, then sort by desc order\n        Collections.sort(array,\
    \ new Comparator<Integer>() {\n            public int compare(Integer o1, Integer\
    \ o2) {\n                return o1 - o2;\n            }\n        });\n       \
    \ // if sum is even, then sort by asc order\n        if (array.get(0) != array.get((array.size()\
    \ - 1))) {\n            Collections.sort(array, new Comparator<Integer>() {\n\
    \                public int compare(Integer o1, Integer o2) {\n              \
    \      return o2 - o1;\n                }\n            });\n        }\n      \
    \  // if sum is odd, then return array\n        if (array.get(0) % 2 == 1) {\n\
    \            return array;\n        } else {\n            return result;\n   \
    \     }\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpyi5bgi5g.java:28)\n\tat Problem.main(tmpyi5bgi5g.java:43)\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n  \
    \      int sum = 0;\n        int minIndex = 0;\n        int maxIndex = array.size()-1;\n\
    \        for (int i = 0; i < array.size(); i++) {\n            if (i % 2 == 0)\
    \ {\n                sum += array.get(i);\n                if (sum % 2 != 0) {\n\
    \                    minIndex = i;\n                } else {\n               \
    \     maxIndex = i;\n                }\n            } else {\n               \
    \ sum -= array.get(i);\n                if (sum % 2 == 0) {\n                \
    \    minIndex = i;\n                    break;\n                }\n          \
    \  }\n        }\n        for (int i = minIndex; i <= maxIndex; i++) {\n      \
    \      result.add(array.get(i));\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaeekgtvy.java:48)\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // write your code here\n        ArrayList<Integer> newArray\
    \ = new ArrayList<>();\n        Collections.sort(array);\n\n        if (array.get(0)\
    \ % 2 != 0)\n            newArray.add(0, array.get(0));\n        if (array.get(array.size()\
    \ - 1) % 2 != 0)\n            newArray.add(0, array.get(array.size() - 1));\n\n\
    \        for (int i = 0; i < array.size(); i++)\n            if (array.get(i)\
    \ == newArray.get(newArray.size() - 1))\n                newArray.add(i, array.get(i));\n\
    \            else if (array.get(i) == newArray.get(newArray.size() - 2))\n   \
    \             newArray.add(i, array.get(i));\n            else\n             \
    \   newArray.add(i, array.get(i));\n\n        return newArray;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpi3qrjgoz.java:24)\n\tat Problem.main(tmpi3qrjgoz.java:40)\n"
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<>();\n        int\
    \ sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum\
    \ = sum + array.get(i);\n            result.add(array.get(i));\n            if\
    \ (sum % 2 != 0) {\n                Collections.sort(result);\n              \
    \  return result;\n            } else {\n                Collections.sort(result,\
    \ Collections.reverseOrder());\n                return result;\n            }\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuprnawyg.java:33: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660012010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array == null || array.size() < 2) {\n            return\
    \ array;\n        }\n        List<Integer> result = new ArrayList<Integer>();\n\
    \        Arrays.sort(array);\n        int sum = 0;\n        for (int i : array)\
    \ {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n         \
    \   Collections.reverse(result);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4i_d9lld.java:24: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp4i_d9lld.java:32: error: incompatible types: List<Integer>\
    \ cannot be converted to ArrayList<Integer>\n        return result;\n        \
    \       ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660012011
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n    \
    \    list.add(array.get(0));\n        list.add(array.get(-1));\n        Collections.sort(list);\n\
    \        Collections.reverse(list);\n        return list;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp266lz9ws.java:21)\n\tat Problem.main(tmp266lz9ws.java:28)\n"
  stdout: ''
  timestamp: 1660012011
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Integer sum = array.get(0) + array.get(array.size() - 1);\n\
    \        if (sum % 2 == 1) {\n            Collections.sort(array);\n         \
    \   Collections.reverse(array);\n        }\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpcx4oov7o.java:20)\n\tat Problem.main(tmpcx4oov7o.java:28)\n"
  stdout: ''
  timestamp: 1660012012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList <Integer> newArray = new ArrayList<Integer>();\n\
    \        if (array == null || array.isEmpty()) {\n            return newArray;\n\
    \        }\n        \n        for (int i = 0; i < array.size(); i++) {\n     \
    \       int j = i;\n            \n            while (j > 0) {\n              \
    \  int temp1 = array.get(j);\n                int temp2 = array.get(j - 1);\n\
    \                \n                if (temp1 > temp2) {\n                    int\
    \ temp = array.get(j);\n                    array.set(j, array.get(j - 1));\n\
    \                    array.set(j - 1, temp);\n                }\n            \
    \    j--;\n            }\n        }\n        return newArray;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl6p02xy3.java:44)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array.isEmpty()) {\n            return array;\n      \
    \  }\n        ArrayList<Integer> sortedArray = new ArrayList<Integer>();\n   \
    \     int sum = 0;\n        for (int i : array) {\n            sum += i;\n   \
    \         sortedArray.add(sum);\n        }\n        return sortedArray;\n}\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiz3xhg70.java:34)\n"
  stdout: ''
  timestamp: 1660012012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Arrays.sort(array);\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqrvs4onh.java:20: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Collections.sort(array);\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpox19am_j.java:27)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> array2 = new ArrayList<Integer>();\n  \
    \      int sum=0;\n        for (int i = 0; i < array.size(); i++) {\n        \
    \    sum+=array.get(i);\n            array2.add(sum);\n        }\n        if (sum%2==0)\
    \ {\n            Collections.sort(array2);\n        }\n        else {\n      \
    \      Collections.reverse(array2);\n        }\n        return array2;\n}\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyv0h_76z.java:37)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array == null || array.size() == 0) {\n            return\
    \ new ArrayList<Integer>();\n        }\n        int first = array.get(0);\n  \
    \      int last = array.get(array.size() - 1);\n        int sum = (first + last);\n\
    \        boolean evenSum = (sum % 2 == 0);\n        if (evenSum) {\n         \
    \   Collections.sort(array);\n        }\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr_rfnsj6.java:35)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n  \
    \      boolean evenSum = false;\n\n        Collections.sort(array);\n        int\
    \ firstIndex = 0;\n        int lastIndex = 0;\n        for (int i = 0; i < array.size();\
    \ i++) {\n            int currentValue = array.get(i);\n            int sum =\
    \ 0;\n            for (int j = 0; j < array.size(); j++) {\n                sum\
    \ += array.get(j);\n                if (j == i) {\n                    sorted.add(currentValue);\n\
    \                }\n            }\n            evenSum = (sum % 2 == 0);\n   \
    \         lastIndex = i;\n            int nextValue = array.get(lastIndex);\n\
    \            if (evenSum) {\n                sorted.add(nextValue);\n        \
    \    } else {\n                sorted.add(currentValue);\n            }\n    \
    \    }\n        return sorted;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp633ecsu5.java:48)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Integer sum = 0;\n        int[] a = new int[array.size()];\n\
    \        boolean even = true;\n        for (int i = 0; i < array.size(); i++)\
    \ {\n            sum += array.get(i);\n            if (even == true) {\n     \
    \           a[i] = sum;\n            } else {\n                a[i] = sum - array.get(i);\n\
    \            }\n            if (a[i] < 0) {\n                a[i] = a[i];\n  \
    \          }\n        }\n        Arrays.sort(a);\n        ArrayList<Integer> res\
    \ = new ArrayList<>();\n        for (int i = 0; i < a.length; i++) {\n       \
    \     res.add(array.get(i));\n        }\n        return res;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptdxgocxk.java:44)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Collections.sort(array);\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpox19am_j.java:27)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> copy = new ArrayList<Integer>(array);\n\
    \        Collections.sort(copy);\n        int sum = 0;\n        for (int i = 0;\
    \ i < copy.size(); i++) {\n            sum += copy.get(i);\n            if (sum\
    \ % 2 == 0) {\n                Collections.reverse((copy));\n            }\n \
    \       }\n        return copy;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpof_t6yf3.java:37)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> sortedArray = new ArrayList<Integer>();\n\
    \        Arrays.sort(array);\n        int sumOfFirst = 0;\n        int sumOfLast\
    \ = 0;\n        int sumOfSecond = 0;\n        for (int i = 0; i < array.size();\
    \ i++) {\n            sumOfFirst += array.get(i);\n            sumOfSecond +=\
    \ array.get(i);\n            sumOfLast = sumOfFirst;\n        }\n        if (sumOfFirst\
    \ % 2 == 0 && sumOfSecond % 2 == 1) {\n            sortedArray.add(array.get(0));\n\
    \            sortedArray.add(array.get(array.size() - 1));\n        }\n      \
    \  else if (sumOfFirst % 2 == 1 && sumOfSecond % 2 == 0) {\n            sortedArray.add(array.get(0));\n\
    \            sortedArray.add(array.get(array.size() - 1));\n        }\n      \
    \  return sortedArray;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmwsxvfmg.java:21: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array.isEmpty()) {\n            return array;\n      \
    \  }\n        ArrayList<Integer> result = new ArrayList<>();\n        int[] sums\
    \ = new int[array.size()];\n        for (int i = 0; i < sums.length; i++) {\n\
    \            sums[i] = array.get(i).intValue();\n        }\n        int sum =\
    \ 0, sumPrev = 0;\n        for (int i = 0; i < sums.length; i++) {\n         \
    \   sum += sums[i];\n            sumPrev = sum;\n        }\n        int lastIdx\
    \ = sums.length - 1;\n        for (int i = 0; i < sums.length; i++) {\n      \
    \      if (sums[i] > 0) {\n                if (sum - sums[i] >= 0) {\n       \
    \             sum = sums[i] + sum;\n                    lastIdx = i;\n       \
    \         } else {\n                    sum = sums[i] - sums[lastIdx];\n     \
    \               lastIdx = i;\n                }\n            }\n        }\n  \
    \      for (int i = sums.length - 1; i >= 0; i--) {\n            if (sums[i] >\
    \ 0) {\n                if (sumPrev + sums[i] - sum >= 0) {\n                \
    \    sum = sums[i] + sum;\n                } else {\n                    sum =\
    \ sums[i] - sums[lastIdx];\n                }\n            }\n            result.add(sum);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4nimckol.java:59)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Write your code here\n        if (array.isEmpty()) {\n\
    \            return array;\n        }\n        if (array.get(0) == array.get(0))\
    \ {\n            return array;\n        }\n        if (array.get(array.size()\
    \ - 1) == array.get(array.size() - 1)) {\n            return array;\n        }\n\
    \        ArrayList<Integer> resultList = new ArrayList<Integer>();\n        int\
    \ temp = 0;\n        Comparator<Integer> sortBySumAsc = (i, j) -> {\n        \
    \    int sum = i + j;\n            if (sum % 2 == 1) {\n                return\
    \ 1;\n            } else {\n                return -1;\n            }\n      \
    \  };\n        Comparator<Integer> sortBySumDesc = (i, j) -> {\n            int\
    \ sum = i + j;\n            if (sum % 2 == 0) {\n                return 1;\n \
    \           } else {\n                return -1;\n            }\n        };\n\
    \        for (int i = 0; i < array.size() - 1; i++) {\n            for (int j\
    \ = i + 1; j < array.size(); j++) {\n                if (sortBySumAsc.compare(array.get(i),\
    \ array.get(j)) > 0) {\n                    temp = array.get(i);\n           \
    \         array.set(i, array.get(j));\n                    array.set(j, temp);\n\
    \                }\n            }\n        }\n        resultList.addAll(array);\n\
    \        if (sortBySumAsc.compare(array.get(array.size() - 1), array.get(array.size()\
    \ - 1)) == 0) {\n            Collections.sort(resultList, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(resultList);\n        }\n    \
    \    return resultList;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfrdo40jv.java:68)\n"
  stdout: ''
  timestamp: 1660012014
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Collections.sort(array);\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpox19am_j.java:27)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sum = 0;\n        ArrayList<Integer> result = new ArrayList<>();\n\
    \        for(int i = 0; i <array.size(); i++){\n            sum += array.get(i);\n\
    \            result.add(array.get(i));\n        }\n        if (sum % 2 != 0) {\n\
    \            Collections.sort(result);\n            result = Collections.reverse(result);\n\
    \        } else {\n            Collections.sort(result);\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1ui_tw8.java:28: error: incompatible types: void cannot be converted\
    \ to ArrayList<Integer>\n            result = Collections.reverse(result);\n \
    \                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int[] arrayCopy = new int[array.size()];\n        array.toArray(arrayCopy);\n\
    \        Arrays.sort(arrayCopy);\n        ArrayList<Integer> arraySort = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < arrayCopy.length; i++) {\n            if (arrayCopy[i]\
    \ % 2 == 0) {\n                arraySort.add(arrayCopy[i]);\n            }\n \
    \       }\n        return arraySort;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9hvsvpyf.java:21: error: no suitable method found for toArray(int[])\n\
    \        array.toArray(arrayCopy);\n             ^\n    method Collection.<T#1>toArray(IntFunction<T#1[]>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; int[] cannot be converted to IntFunction<T#1[]>))\n    method ArrayList.<T#2>toArray(T#2[])\
    \ is not applicable\n      (inference variable T#2 has incompatible bounds\n \
    \       equality constraints: int\n        lower bounds: Object)\n  where T#1,T#2\
    \ are type-variables:\n    T#1 extends Object declared in method <T#1>toArray(IntFunction<T#1[]>)\n\
    \    T#2 extends Object declared in method <T#2>toArray(T#2[])\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> sortedArray = new ArrayList<Integer>();\n\
    \        Integer firstValue = null;\n        Integer lastValue = null;\n     \
    \   for (Integer value : array) {\n            if (firstValue == null) {\n   \
    \             firstValue = value;\n                lastValue = value;\n      \
    \      } else if (lastValue == null) {\n                lastValue = value;\n \
    \           } else {\n                Integer sum = firstValue + lastValue;\n\
    \                if (sum % 2 == 1) {\n                    sortedArray.add(firstValue);\n\
    \                    firstValue = value;\n                } else {\n         \
    \           sortedArray.add(lastValue);\n                    lastValue = value;\n\
    \                }\n            }\n        }\n        if (firstValue != null)\
    \ {\n            sortedArray.add(firstValue);\n        }\n        if (lastValue\
    \ != null) {\n            sortedArray.add(lastValue);\n        }\n        return\
    \ sortedArray;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqb1iz06s.java:50)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n    \
    \    int sum = 0;\n        int min = array.get(0);\n        int max = array.get(array.size()-1);\n\
    \        for(int i=0;i<array.size();i++){\n            sum = min + max;\n    \
    \        temp.add(array.get(i));\n            if(sum%2 == 0){\n              \
    \  min = array.get(i);\n            }\n            else if(sum%2 != 0){\n    \
    \            max = array.get(i);\n            }\n        }\n        Collections.sort(temp);\n\
    \        ArrayList<Integer> temp2 = new ArrayList<Integer>();\n        for(int\
    \ i=0;i<temp.size(); i++){\n            temp2.add(temp.get(i));\n        }\n \
    \       return temp2;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpzyl8jhu3.java:22)\n\tat Problem.main(tmpzyl8jhu3.java:42)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int[] firstIndex = new int[array.size()];\n        int[] lastIndex\
    \ = new int[array.size()];\n        firstIndex[0] = Integer.MAX_VALUE;\n     \
    \   lastIndex[array.size() - 1] = Integer.MIN_VALUE;\n        int sum = 0;\n \
    \       for (int i = 0; i < array.size(); i++) {\n            firstIndex[i] =\
    \ i;\n            sum += array.get(i);\n        }\n        for (int i = array.size()\
    \ - 1; i >= 0; i--) {\n            sum -= array.get(i);\n            lastIndex[i]\
    \ = i;\n        }\n        if (sum % 2 != 0) {\n            return array.stream().sorted(Comparator.comparingInt(Integer::intValue))\n\
    \                    .collect(Collectors.toCollection(ArrayList::new));\n    \
    \    } else {\n            return array.stream().sorted(Comparator.comparingInt(Integer::intValue).reversed())\n\
    \                    .collect(Collectors.toCollection(ArrayList::new));\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 0 out of bounds for length 0\n\tat Problem.sortArray(tmp98rz1edo.java:22)\n\
    \tat Problem.main(tmp98rz1edo.java:42)\n"
  stdout: ''
  timestamp: 1660012014
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if(array.isEmpty()) return array;\n        int length = array.size();\n\
    \        ArrayList<Integer> result = new ArrayList<>(length);\n        int[] values\
    \ = new int[length];\n        for (int i = 0; i < length; i++) {\n           \
    \ values[i] = array.get(i);\n        }\n        Arrays.sort(values);\n       \
    \ for (int i = 0; i < length; i++) {\n            result.add(values[i]);\n   \
    \     }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp22vdg0se.java:37)\n"
  stdout: ''
  timestamp: 1660012014
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array == null) {\n            return null;\n        }\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (array.size()\
    \ <= 0) {\n            return result;\n        }\n        ArrayList<Integer> copy\
    \ = new ArrayList<Integer>(array);\n        Collections.sort(copy, Collections.reverseOrder());\n\
    \        Integer sum = 0;\n        Integer first = 0;\n        for (Integer value\
    \ : copy) {\n            if (sum % 2 == 1) {\n                result.add(first);\n\
    \                result.add(value);\n            }\n            sum += value;\n\
    \            first++;\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplkaknjr2.java:43)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Write your code here\n        int sum = 0;\n        int\
    \ temp = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum\
    \ += array.get(i);\n        }\n        if (sum % 2 == 1) {\n            for (int\
    \ i = 0; i < array.size(); i++) {\n                temp = array.get(i);\n    \
    \            array.set(i, array.get(i + 1));\n                array.set(i + 1,\
    \ temp);\n            }\n        }\n        return array;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpawls96f7.java:29)\n\tat Problem.main(tmpawls96f7.java:37)\n"
  stdout: ''
  timestamp: 1660012014
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n     \
    \   Comparator<Integer> comparator = Comparator.comparing(i -> i);\n        int\
    \ len = array.size();\n        Integer temp;\n        Integer sum = 0;\n     \
    \   Integer firstValue = null;\n        Integer lastValue = null;\n        //\
    \ Get the first and last value\n        for (int i = 0; i < len; i++) {\n    \
    \        sum = sum + array.get(i);\n            if (firstValue == null || sum\
    \ == firstValue) {\n                firstValue = array.get(i);\n            }\
    \ else if (sum == lastValue) {\n                lastValue = array.get(i);\n  \
    \          }\n        }\n        if (firstValue == null && lastValue == null)\
    \ {\n            return new ArrayList<Integer>();\n        } else if (firstValue\
    \ == null) {\n            for (int i = len - 1; i >= 0; i--) {\n             \
    \   sum = sum + array.get(i);\n                if (lastValue == null || sum ==\
    \ lastValue) {\n                    lastValue = array.get(i);\n              \
    \  }\n            }\n            ret.addAll(Arrays.asList(lastValue, temp));\n\
    \        } else if (lastValue == null) {\n            for (int i = 0; i < len;\
    \ i++) {\n                sum = sum + array.get(i);\n                if (firstValue\
    \ == null || sum == firstValue) {\n                    firstValue = array.get(i);\n\
    \                }\n            }\n            ret.addAll(Arrays.asList(firstValue,\
    \ temp));\n        } else {\n            Arrays.asList(firstValue, lastValue).stream().forEach(i\
    \ -> ret.add(i));\n        }\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpow42xx9l.java:45: error: variable temp might not have been initialized\n\
    \            ret.addAll(Arrays.asList(lastValue, temp));\n                   \
    \                             ^\n/tmp/tmpow42xx9l.java:53: error: variable temp\
    \ might not have been initialized\n            ret.addAll(Arrays.asList(firstValue,\
    \ temp));\n                                                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1660012014
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int a = 0, b = array.get(array.size() - 1);\n        int c;\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        while\
    \ (b - a > 0) {\n            c = (a + b) / 2;\n            if (a + b == c)\n \
    \               c = b - a;\n            if (c % 2 != 0) {\n                result.add(c);\n\
    \            }\n            else {\n                result.add(c * -1);\n    \
    \        }\n            a = b;\n            b = c;\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpqheo7fts.java:20)\n\tat Problem.main(tmpqheo7fts.java:39)\n"
  stdout: ''
  timestamp: 1660012015
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> res = new ArrayList<>();\n        if (array.size()\
    \ == 0) {\n            return res;\n        }\n        Integer first = array.get(0);\n\
    \        Integer last = array.get(array.size() - 1);\n        int total = first\
    \ + last;\n        if (total % 2 == 1) {\n            Collections.sort(array);\n\
    \        } else {\n            Collections.reverse(array);\n        }\n      \
    \  for (int i = 0; i < array.size(); i++) {\n            res.add(array.get(i));\n\
    \        }\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwpwjzkql.java:41)\n"
  stdout: ''
  timestamp: 1660012015
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<>(array);\n    \
    \    Arrays.sort(result);\n        // check the sum\n        if (sumAndCheck(array,\
    \ result) == 1) {\n            // sort it in descending order\n            Collections.reverse(result);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps1bef24n.java:21: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(result);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmps1bef24n.java:23: error: cannot find symbol\n        if\
    \ (sumAndCheck(array, result) == 1) {\n            ^\n  symbol:   method sumAndCheck(ArrayList<Integer>,ArrayList<Integer>)\n\
    \  location: class Problem\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660012015
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array == null || array.size() == 0) {\n            return\
    \ new ArrayList<Integer>();\n        }\n        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        int sum = 0;\n        list.add(array.get(0));\n\
    \        sum = Math.abs(array.get(0) - array.get(array.size() - 1));\n       \
    \ if (sum % 2 != 0) {\n            Collections.sort(array);\n            Collections.reverse(array);\n\
    \            for(int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            Collections.sort(array);\n     \
    \       for(int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n\
    \            }\n            Collections.reverse(array);\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcur_qkho.java:25: error: cannot find symbol\n        list.add(array.get(0));\n\
    \        ^\n  symbol:   variable list\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660012015
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Arrays.sort(array);\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqrvs4onh.java:20: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int n = array.size();\n        if (n == 0) return array;\n\
    \        long min = array.get(0);\n        for (int i = 1; i < n; i++) {\n   \
    \         int current = array.get(i);\n            int min = Math.min(current,\
    \ min);\n        }\n        Arrays.sort(array);\n        if (n % 2 == 0) {\n \
    \           int lastItem = array.get(n - 1);\n            for (int i = 0; i <\
    \ n - 1; i++) {\n                int current = array.get(i);\n               \
    \ array.set(i, last + min);\n                last = current;\n               \
    \ min = Math.min(current, min);\n            }\n            array.set(n - 1, lastItem);\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuq_es1r_.java:25: error: variable min is already defined in method\
    \ sortArray(ArrayList<Integer>)\n            int min = Math.min(current, min);\n\
    \                ^\n/tmp/tmpuq_es1r_.java:27: error: no suitable method found\
    \ for sort(ArrayList<Integer>)\n        Arrays.sort(array);\n              ^\n\
    \    method Arrays.sort(int[]) is not applicable\n      (argument mismatch; ArrayList<Integer>\
    \ cannot be converted to int[])\n    method Arrays.sort(long[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Integer> cannot be converted to long[])\n\
    \    method Arrays.sort(short[]) is not applicable\n      (argument mismatch;\
    \ ArrayList<Integer> cannot be converted to short[])\n    method Arrays.sort(char[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to char[])\n    method Arrays.sort(byte[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to byte[])\n    method Arrays.sort(float[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to float[])\n    method Arrays.sort(double[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to double[])\n    method Arrays.sort(Object[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is\
    \ not applicable\n      (cannot infer type-variable(s) T#1\n        (actual and\
    \ formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpuq_es1r_.java:32: error: cannot find symbol\n         \
    \       array.set(i, last + min);\n                             ^\n  symbol: \
    \  variable last\n  location:"
  stdout: ''
  timestamp: 1660012015
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Collections.sort(array);\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpox19am_j.java:27)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // write your code here\n        if(array.isEmpty())\n   \
    \         return null;\n        ArrayList<Integer> sortedArray = new ArrayList<Integer>();\n\
    \        int sum = 0;\n        for(int i = 0; i < array.size(); i++){\n      \
    \      sum = sum + array.get(i);\n            if(sum%2 != 0){\n              \
    \  sortedArray.add(array.get(i));\n            }\n        }\n        return sortedArray;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmp1x4fgxwf.java:34)\n"
  stdout: ''
  timestamp: 1660012016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> resultArray = new ArrayList<>();\n    \
    \    Comparator<Integer> comp = (first, second) -> {\n            Integer result\
    \ = first + second;\n            if (result % 2 != 0) {\n                return\
    \ -1;\n            } else {\n                return 1;\n            }\n      \
    \  };\n        boolean ascending = true;\n        Integer first = array.get(0);\n\
    \        Integer last = array.get(array.size() - 1);\n        if (ascending) {\n\
    \            for (int i = 0; i < array.size(); i++) {\n                int current\
    \ = array.get(i);\n                Integer next = first + current;\n         \
    \       if (next > last) {\n                    ascending = false;\n         \
    \           break;\n                }\n                resultArray.add(current);\n\
    \                first = next;\n            }\n        } else {\n            for\
    \ (int i = 0; i < array.size(); i++) {\n                int current = array.get(i);\n\
    \                Integer next = last + current;\n                if (next < first)\
    \ {\n                    ascending = true;\n                    break;\n     \
    \           }\n                resultArray.add(current);\n                last\
    \ = next;\n            }\n        }\n        if (ascending) {\n            Collections.sort(resultArray,\
    \ comp);\n        } else {\n            Collections.sort(resultArray, Collections.reverseOrder(comp));\n\
    \        }\n        return resultArray;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpiuaoni2d.java:30)\n\tat Problem.main(tmpiuaoni2d.java:63)\n"
  stdout: ''
  timestamp: 1660012016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        int len\
    \ = array.size();\n        int sum = 0;\n        int mid = 0;\n        boolean\
    \ odd = true;\n        boolean even = true;\n        int first = -1;\n       \
    \ int last = -1;\n        for (int i = 0; i < len; i++) {\n            sum = array[i]\
    \ + array[len - 1];\n            mid = sum / 2;\n            if (mid != sum) {\n\
    \                if (sum % 2 == 1) {\n                    even = false;\n    \
    \            }\n                if (sum % 2 == 0) {\n                    odd =\
    \ true;\n                }\n            }\n            if (first == -1 && mid\
    \ != sum) {\n                first = mid;\n            }\n            if (last\
    \ == -1 && mid != sum) {\n                last = mid;\n            }\n       \
    \     if (mid == sum) {\n                ret.add(array.get(i));\n            }\n\
    \        }\n        if (even) {\n            if (first != -1 && last != -1) {\n\
    \                ret.add(array.get(first));\n                ret.add(array.get(last));\n\
    \            }\n            if (first != -1) {\n                ret.add(array.get(first));\n\
    \            }\n            if (last != -1) {\n                ret.add(array.get(last\
    \ - 1));\n            }\n        }\n        if (odd) {\n            if (first\
    \ != -1 && last != -1) {\n                ret.add(array.get(last));\n        \
    \        ret.add(array.get(first));\n            }\n            if (first != -1)\
    \ {\n                ret.add(array.get(last - 1));\n            }\n          \
    \  if (last != -1) {\n                ret.add(array.get(first));\n           \
    \ }\n        }\n        return ret;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpknpxpjvz.java:29: error: array required, but ArrayList<Integer>\
    \ found\n            sum = array[i] + array[len - 1];\n                      \
    \ ^\n/tmp/tmpknpxpjvz.java:29: error: array required, but ArrayList<Integer> found\n\
    \            sum = array[i] + array[len - 1];\n                              \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660012015
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sum = 0;\n        for (Integer num : array) {\n      \
    \      sum += num;\n        }\n        if (sum % 2 == 0) {\n            Collections.sort(array);\n\
    \        } else {\n            Collections.reverse(array);\n        }\n      \
    \  return array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmcva8lnv.java:34)\n"
  stdout: ''
  timestamp: 1660012016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        List<Integer> copy = new ArrayList<>();\n        int sum =\
    \ 0;\n        for (int n : array) {\n            sum = sum + n;\n            copy.add(n);\n\
    \        }\n        if (sum % 2 == 1) {\n            Collections.sort(copy, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(copy);\n        }\n        return\
    \ copy;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp999tcimw.java:31: error: incompatible types: List<Integer> cannot\
    \ be converted to ArrayList<Integer>\n        return copy;\n               ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660012016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sum = 0;\n        for(int i = 0; i < array.size(); i++)\
    \ {\n            sum += array.get(i);\n        }\n        List<Integer> result\
    \ = new ArrayList<>();\n        if(sum % 2 == 0) {\n            for(int i = 0;\
    \ i < array.size(); i++) {\n                result.add(array.get(i));\n      \
    \          sum += array.get(i);\n            }\n            Collections.sort(result);\n\
    \        } else {\n            for(int i = array.size()-1; i >= 0; i--) {\n  \
    \              result.add(array.get(i));\n                sum += array.get(i);\n\
    \            }\n            Collections.sort(result);\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp50ek6hn_.java:38: error: incompatible types: List<Integer> cannot\
    \ be converted to ArrayList<Integer>\n        return result;\n               ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660012016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<Integer>(array);\n\
    \        Collections.sort(result);\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb07d0u_p.java:28)\n"
  stdout: ''
  timestamp: 1660012016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> sorted = new ArrayList<>();\n\n       \
    \ Comparator<Integer> comparator = new Comparator<Integer>() {\n            public\
    \ int compare(Integer o1, Integer o2) {\n                int sum1 = o1 + o2;\n\
    \                int sum2 = o1 - o2;\n\n                if (sum1 < sum2) {\n \
    \                   return -1;\n                } else if (sum1 > sum2) {\n  \
    \                  return 1;\n                } else {\n                    return\
    \ 0;\n                }\n            }\n        };\n\n        sorted.addAll(array);\n\
    \        sorted.sort(comparator);\n\n        return sorted;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdvbao41.java:45)\n"
  stdout: ''
  timestamp: 1660012016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array == null) {\n            return new ArrayList<>();\n\
    \        }\n        int[] arr = new int[array.size()];\n        int pos = 0;\n\
    \        int i = 0;\n        boolean swap = false;\n        for (int k = 0; k\
    \ < array.size(); k++) {\n            arr[i] = array.get(k);\n            i++;\n\
    \        }\n        for (int k = 0; k < i; k++) {\n            for (int j = k\
    \ + 1; j < i; j++) {\n                if (arr[k] + arr[j] < arr[j]) {\n      \
    \              int tmp = arr[k];\n                    arr[k] = arr[j];\n     \
    \               arr[j] = tmp;\n                }\n            }\n        }\n \
    \       if (pos == 0) {\n            return new ArrayList<>();\n        }\n  \
    \      for (int k = 0; k < i; k++) {\n            if (arr[k] == arr[k + 1]) {\n\
    \                swap = true;\n            }\n        }\n        if (swap) {\n\
    \            Arrays.sort(arr, 0, i);\n            pos = 0;\n            swap =\
    \ false;\n            for (int k = 0; k < i; k++) {\n                if (arr[k]\
    \ == arr[k + 1]) {\n                    swap = true;\n                }\n    \
    \        }\n        }\n        for (int k = 0; k < i; k++) {\n            arr[k]\
    \ = arr[k];\n        }\n        pos = 0;\n        for (int k = 0; k < i; k++)\
    \ {\n            arr[k] = 0;\n        }\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnjogp47.java:69)\n"
  stdout: ''
  timestamp: 1660012016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n  \
    \      for(int i = 0; i < array.size(); i++) {\n            int sum = 0;\n   \
    \         for(int j = i; j < array.size(); j++) {\n                sum += array.get(j);\n\
    \            }\n            if(sum % 2 != 0) {\n                Collections.reverse(result);\n\
    \                return result;\n            }\n            Collections.sort(result);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpanbvx_ph.java:36)\n"
  stdout: ''
  timestamp: 1660012016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Sort array in ascending order if the sum of the first and\
    \ last number in the array is odd.\n        // Otherwise, sort the array in descending\
    \ order if the sum of the first and last number in the array is even.\n      \
    \  final Integer sumOfFirstAndLastNumber = array.stream().mapToInt(i -> i).sum();\n\
    \n        // If the sum is odd, the array will be sorted in ascending order.\n\
    \        // If it is even, the array will be sorted in descending order.\n   \
    \     if (sumOfFirstAndLastNumber % 2 == 0) {\n            array.sort();\n   \
    \     }\n        else {\n            Collections.reverse(array);\n        }\n\
    \        return array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmolja_ya.java:27: error: method sort in class ArrayList<E> cannot\
    \ be applied to given types;\n            array.sort();\n                 ^\n\
    \  required: Comparator<? super Integer>\n  found:    no arguments\n  reason:\
    \ actual and formal argument lists differ in length\n  where E is a type-variable:\n\
    \    E extends Object declared in class ArrayList\n1 error\n"
  stdout: ''
  timestamp: 1660012016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Integer[] array = array.toArray(new Integer[array.size()]);\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>(array.size());\n \
    \       int[] sumArray = array.stream().mapToInt(Integer::intValue).toArray();\n\
    \        int sumOfFirst = 0;\n        int sumOfLast = 0;\n        for (int i =\
    \ 0; i < sumArray.length; i++) {\n            sumOfFirst += sumArray[i];\n   \
    \     }\n        int indexLast = 0;\n        for (int i = 0; i < sumArray.length;\
    \ i++) {\n            sumOfLast += sumArray[i];\n            if (sumOfFirst %\
    \ 2 == 1 && sumOfLast % 2 == 0) {\n                result.add(array[indexLast]);\n\
    \                indexLast++;\n                sumOfFirst = 0;\n             \
    \   sumOfLast = 0;\n            }\n            else if (sumOfFirst % 2 == 1 &&\
    \ sumOfLast % 2 == 1) {\n                result.add(array[sumArray.length - 1\
    \ - i]);\n                sumOfFirst = 0;\n                sumOfLast = 0;\n  \
    \          }\n            else {\n                sumOfFirst -= sumArray[i];\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3v0mi6wr.java:20: error: variable array is already defined in method\
    \ sortArray(ArrayList<Integer>)\n        Integer[] array = array.toArray(new Integer[array.size()]);\n\
    \                  ^\n/tmp/tmp3v0mi6wr.java:20: error: cannot find symbol\n  \
    \      Integer[] array = array.toArray(new Integer[array.size()]);\n         \
    \                                                ^\n  symbol:   method size()\n\
    \  location: variable array of type Integer[]\n/tmp/tmp3v0mi6wr.java:20: error:\
    \ cannot find symbol\n        Integer[] array = array.toArray(new Integer[array.size()]);\n\
    \                               ^\n  symbol:   method toArray(Integer[])\n  location:\
    \ variable array of type Integer[]\n/tmp/tmp3v0mi6wr.java:21: error: cannot find\
    \ symbol\n        ArrayList<Integer> result = new ArrayList<Integer>(array.size());\n\
    \                                                                ^\n  symbol:\
    \   method size()\n  location: variable array of type Integer[]\n/tmp/tmp3v0mi6wr.java:22:\
    \ error: cannot find symbol\n        int[] sumArray = array.stream().mapToInt(Integer::intValue).toArray();\n\
    \                              ^\n  symbol:   method stream()\n  location: variable\
    \ array of type Integer[]\n5 errors\n"
  stdout: ''
  timestamp: 1660012016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int[] arr = new int[array.size()];\n        for (int i = 0;\
    \ i < array.size(); i++)\n            arr[i] = array.get(i);\n        int len\
    \ = arr.length;\n        int odd = 0, even = 0;\n        int sum = 0;\n      \
    \  for (int i = 0; i < len - 1; i++) {\n            sum = arr[i] + arr[len - 1];\n\
    \            if (sum % 2 == 1) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n        }\n        int[] res = new\
    \ int[len];\n        ArrayList<Integer> result = new ArrayList<>();\n        boolean\
    \ flag = false;\n        if (odd == 0) {\n            for (int i = 0; i < len;\
    \ i++) {\n                if (arr[i] != arr[len - 1]) {\n                    result.add(arr[i]);\n\
    \                }\n            }\n            flag = true;\n        } else if\
    \ (even == len) {\n            for (int i = len - 1; i >= 0; i--) {\n        \
    \        if (arr[i] != arr[0]) {\n                    result.add(arr[i]);\n  \
    \              }\n            }\n            flag = true;\n        }\n       \
    \ if (flag) {\n            for (int i = 0; i < result.size(); i++) {\n       \
    \         res[result.size() - i - 1] = result.get(i);\n            }\n       \
    \     return new ArrayList<>(Arrays.asList(res));\n        } else {\n        \
    \    return new ArrayList<>(Arrays.asList(arr));\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpojj8jwvq.java:56: error: incompatible types: cannot infer type\
    \ arguments for ArrayList<>\n            return new ArrayList<>(Arrays.asList(res));\n\
    \                                ^\n    reason: inference variable E has incompatible\
    \ bounds\n      equality constraints: Integer\n      lower bounds: T,int[]\n \
    \ where E,T are type-variables:\n    E extends Object declared in class ArrayList\n\
    \    T extends Object declared in method <T>asList(T...)\n/tmp/tmpojj8jwvq.java:58:\
    \ error: incompatible types: cannot infer type arguments for ArrayList<>\n   \
    \         return new ArrayList<>(Arrays.asList(arr));\n                      \
    \          ^\n    reason: inference variable E has incompatible bounds\n     \
    \ equality constraints: Integer\n      lower bounds: T,int[]\n  where E,T are\
    \ type-variables:\n    E extends Object declared in class ArrayList\n    T extends\
    \ Object declared in method <T>asList(T...)\n2 errors\n"
  stdout: ''
  timestamp: 1660012016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> arrayCopy = new ArrayList<Integer>(array);\n\
    \        ArrayList<Integer> sortedArray = new ArrayList<Integer>();\n        int\
    \ sumOfFirst = arrayCopy.get(0) + arrayCopy.get(arrayCopy.size() - 1);\n     \
    \   int sumOfLast = arrayCopy.get(arrayCopy.size() - 1) + arrayCopy.get(arrayCopy.size()\
    \ - 2);\n        \n        sortedArray.add(sumOfFirst);\n        sortedArray.add(sumOfLast);\n\
    \        \n        int countOfFirst = 0;\n        int countOfLast = 0;\n     \
    \   \n        for (int i = 0; i < arrayCopy.size(); i++) {\n            if (arrayCopy.get(i)\
    \ == sumOfFirst) {\n                countOfFirst++;\n            } else if (arrayCopy.get(i)\
    \ == sumOfLast) {\n                countOfLast++;\n            }\n        }\n\
    \        \n        sortedArray.add(countOfFirst);\n        sortedArray.add(countOfLast);\n\
    \        \n        return sortedArray;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp8ephwdae.java:22)\n\tat Problem.main(tmp8ephwdae.java:45)\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sumOfArray = array.stream().mapToInt(Integer::intValue).sum();\n\
    \        boolean isEvenOrOdd = sumOfArray % 2 == 0;\n        if (isEvenOrOdd)\
    \ {\n            Collections.sort(array);\n        } else {\n            Collections.reverse(array);\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzowd84zq.java:32)\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> newArray = new ArrayList<Integer>();\n\
    \        int totalSum = 0;\n        int index = 0;\n        for(int i = 0; i <\
    \ array.size(); i++) {\n            newArray.add(array.get(i));\n            totalSum\
    \ += array.get(i);\n        }\n        // check for odd sum first\n        if(totalSum\
    \ % 2 != 0) {\n            // sort descending\n            Collections.sort(newArray,\
    \ (a, b) -> b - a);\n        } else {\n            // sort ascending\n       \
    \     Collections.sort(newArray);\n        }\n        return newArray;\n}\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptl3txt96.java:40)\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<Integer>(array);\n\
    \        Collections.sort(result);\n        if (result.stream().map(i -> i + 1).sum()\
    \ % 2 == 1)\n            Collections.reverse(result);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphm72l15n.java:22: error: cannot find symbol\n        if (result.stream().map(i\
    \ -> i + 1).sum() % 2 == 1)\n                                           ^\n  symbol:\
    \   method sum()\n  location: interface Stream<Integer>\n1 error\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n  \
    \      int firstIndex = 0;\n        int lastIndex = 0;\n        int sum = 0;\n\
    \        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n\
    \            if (sum % 2 == 0) {\n                result.add(array.get(i));\n\
    \            } else {\n                result.add(array.get(i));\n           \
    \ }\n            firstIndex = i;\n            lastIndex = i;\n        }\n    \
    \    return result;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp56prh3bv.java:39)\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<>();\n\n       \
    \ // Sort using Java 8 Streams.\n        result.addAll(\n                Arrays.stream(array).sorted(Comparator.comparing(Function.identity()))\n\
    \                        .collect(Collectors.toList()));\n\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqr8v_ckp.java:24: error: no suitable method found for stream(ArrayList<Integer>)\n\
    \                Arrays.stream(array).sorted(Comparator.comparing(Function.identity()))\n\
    \                      ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; ArrayList<Integer>\
    \ cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmpqr8v_ckp.java:24: error: cannot find symbol\n                Arrays.stream(array).sorted(Comparator.comparing(Function.identity()))\n\
    \                                                                 ^\n  symbol:\
    \   variable Function\n  location: class Problem\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660012018
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        List<Integer> list = new ArrayList<Integer>(array);\n    \
    \    Collections.sort(list);\n        Collections.reverse(list);\n        return\
    \ list;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqo8lmyag.java:23: error: incompatible types: List<Integer> cannot\
    \ be converted to ArrayList<Integer>\n        return list;\n               ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660012018
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Integer[] arr = new Integer[array.size()];\n        for (int\
    \ i = 0; i < arr.length; i++) {\n            arr[i] = array.get(i);\n        }\n\
    \        Arrays.sort(arr);\n        ArrayList<Integer> result = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.length; i++) {\n            result.add(arr[i]);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm8o86fmf.java:35)\n"
  stdout: ''
  timestamp: 1660012018
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n  \
    \      int length = array.size();\n        int sum = 0;\n        for (int i =\
    \ 0; i < length; i++) {\n            sum = sum + array.get(i);\n            if\
    \ (sum % 2 != 0) {\n                result.add(array.get(i));\n            }\n\
    \        }\n        Collections.sort(result);\n        return result;\n}\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_v9gmlhu.java:35)\n"
  stdout: ''
  timestamp: 1660012018
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> array1 = array;\n        ArrayList<Integer>\
    \ array2 = array1;\n\n        int first = array1.get(0);\n        int last = array1.get(array1.size()-1);\n\
    \        Arrays.sort(array2);\n\n        if (last - first > 1) {\n           \
    \ if (array2.get(array2.size() - 1) - array2.get(array2.size() - 2) % 2 == 1)\n\
    \                Collections.reverse(array1);\n            else\n            \
    \    Collections.reverse(array2);\n        }\n\n        return array1;\n}\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwewzlid.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array2);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012018
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> sortedArray = new ArrayList<Integer>(array.size());\n\
    \        ArrayList<Integer> reversedArray = new ArrayList<Integer>(array.size());\n\
    \        \n        boolean oddSum = false;\n        boolean evenSum = false;\n\
    \        \n        int first = array.get(0);\n        int last = array.get(array.size()\
    \ - 1);\n\n        for (int i = 0; i < array.size(); i++) {\n            if (i\
    \ < array.size() - 1) {\n                sortedArray.add(array.get(i));\n    \
    \        }\n            if (i == array.size() - 1) {\n                evenSum\
    \ = oddSum = sumOfTwo(first, last) % 2 != 0;\n            }\n        }\n     \
    \   if (oddSum) {\n            reversedArray = sortedArray;\n            sortedArray\
    \ = new ArrayList<Integer>(array.size());\n            Collections.reverse(sortedArray);\n\
    \        }\n        if (evenSum) {\n            Collections.reverse(sortedArray);\n\
    \        }\n        return sortedArray;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp67iq_8h1.java:34: error: cannot find symbol\n                evenSum\
    \ = oddSum = sumOfTwo(first, last) % 2 != 0;\n                               \
    \    ^\n  symbol:   method sumOfTwo(int,int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660012018
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int[] nums = array.stream().mapToInt(i -> i).toArray();\n\
    \        if (nums.length < 2) {\n            return array;\n        }\n      \
    \  int sum = 0;\n        int evenSum = 0;\n        int oddSum = 0;\n        for\
    \ (int i = 0; i < nums.length; ++i) {\n            sum = nums[i] + nums[nums.length\
    \ - i - 1];\n            if (sum % 2 == 0) {\n                evenSum += sum;\n\
    \            }\n            else if (sum % 2 != 0) {\n                oddSum +=\
    \ sum;\n            }\n        }\n        int left = evenSum % 2 == 0 ? evenSum\
    \ - 1 : evenSum;\n        int right = oddSum % 2 == 0 ? oddSum + 1 : oddSum;\n\
    \        Arrays.sort(nums, left, right);\n        int[] result = new int[nums.length];\n\
    \        for (int i = 0; i < nums.length; ++i) {\n            result[i] = nums[i];\n\
    \        }\n        return Arrays.asList(result);\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1anqe8vq.java:43: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<Integer>\n  \
    \      return Arrays.asList(result);\n                            ^\n  where T\
    \ is a type-variable:\n    T extends Object declared in method <T>asList(T...)\n\
    1 error\n"
  stdout: ''
  timestamp: 1660012018
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> newArray = new ArrayList<>(array);\n  \
    \      ArrayList<Integer> sorted = new ArrayList<>();\n        sort(sorted, newArray);\n\
    \        return sorted;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpin5dt19f.java:22: error: cannot find symbol\n        sort(sorted,\
    \ newArray);\n        ^\n  symbol:   method sort(ArrayList<Integer>,ArrayList<Integer>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660012018
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Write your code here\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int sum = 0;\n        for (int i = 0; i\
    \ < array.size(); i++) {\n            sum = sum + array.get(i);\n            result.add(array.get(i));\n\
    \        }\n        if (sum % 2 != 0) {\n            for (int i = array.size()\
    \ - 1; i > 0; i--) {\n                sum = sum + array.get(i);\n            \
    \    Collections.sort(result);\n            }\n        } else {\n            for\
    \ (int i = 0; i < (array.size() - 1); i++) {\n                sum = sum + array.get(i);\n\
    \                Collections.sort(result);\n            }\n        }\n       \
    \ return result;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkb31mx14.java:44)\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sum = 0;\n        int n = array.size();\n        for(int\
    \ i = 0; i<n; i++) {\n            sum += array.get(i);\n        }\n        if\
    \ (sum%2 == 1) {\n            Collections.sort(array);\n        }\n        else\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  }\n        return array;\n}\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphw3q51d3.java:37)\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> ret = new ArrayList<>(array);\n       \
    \ Collections.sort(ret);\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaacsnzw_.java:28)\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> copy = array.clone();\n        int sum\
    \ = 0;\n        for(int i = 0; i < copy.size(); i++) {\n            sum = sum\
    \ + copy.get(i);\n        }\n        Collections.sort(copy, (a, b) -> {\n    \
    \        int c = Integer.compare(b, a);\n            return c > 0 ? 1 : ((c ==\
    \ 0) ? 0 : -1);\n        });\n        return copy;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c1lfkmb.java:20: error: incompatible types: Object cannot be converted\
    \ to ArrayList<Integer>\n        ArrayList<Integer> copy = array.clone();\n  \
    \                                           ^\n1 error\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // write your code here\n        Collections.sort(array);\n\
    \        int sum = 0;\n        for(int i : array) {\n            sum += i;\n \
    \       }\n        if(sum %2 == 0){\n            Collections.reverse(array);\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe5_tstfn.java:35)\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sum = 0;\n        int temp;\n        System.out.println(\"\
    Sorted array: \");\n        for (int i = 0; i < array.size(); i++) {\n       \
    \     sum += array.get(i);\n            temp = sum;\n            sum = sum - array.get(i);\n\
    \            array.set(i, temp);\n        }\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfdry4ak5.java:34)\n"
  stdout: "Sorted array: \nSorted array: \nSorted array: \n"
  timestamp: 1660012019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array.isEmpty()) {\n            return array;\n      \
    \  }\n\n        ArrayList<Integer> newArray = new ArrayList<>();\n        int\
    \ first = array.get(0);\n        int last = array.get(array.size() - 1);\n   \
    \     if (Math.abs(first - last) % 2 == 0) {\n            newArray.addAll(Arrays.asList(first,\
    \ last));\n            newArray.addAll(Arrays.asList(last, first));\n        }\
    \ else {\n            newArray.addAll(Arrays.asList(last, first));\n         \
    \   newArray.addAll(Arrays.asList(first, last));\n        }\n        return newArray;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplkeelrad.java:38)\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n  \
    \      int sum = 0;\n        for (int i : array) {\n            sum += i;\n  \
    \      }\n        if (sum % 2 == 1) {\n            Collections.sort(array);\n\
    \        } else {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        }\n        for (Integer i : array) {\n            result.add(i);\n  \
    \      }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2lhvxnb.java:39)\n"
  stdout: ''
  timestamp: 1660012020
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array == null || array.isEmpty()) return null;\n     \
    \   ArrayList<Integer> newArray = new ArrayList<Integer>();\n        int sum =\
    \ 0;\n        int temp;\n        for (int i = 0; i < array.size(); i++) {\n  \
    \          sum = sum + array.get(i);\n        }\n        if (sum % 2 == 0) {\n\
    \            newArray.add(array.get(array.size() - 1));\n            newArray.add(array.get(0));\n\
    \        } else {\n            newArray.add(array.get(0));\n            newArray.add(array.get(array.size()\
    \ - 1));\n        }\n        return newArray;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpa09hjpoj.java:37)\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n  \
    \      int[] a = new int[array.size()];\n        for (int i = 0; i < array.size();\
    \ i++) {\n            a[i] = array.get(i);\n        }\n        // Sort the given\
    \ array in ascending order if the sum( first index value, last index value) is\
    \ odd,\n        // or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n        if (sum(a) % 2 == 1) {\n            Arrays.sort(a);\n\
    \            System.out.println(Arrays.toString(a));\n            for (int i =\
    \ 0; i < a.length; i++) {\n                result.add(a[i]);\n            }\n\
    \        } else {\n            Arrays.sort(a, Collections.reverseOrder());\n \
    \           System.out.println(Arrays.toString(a));\n            for (int i =\
    \ 0; i < a.length; i++) {\n                result.add(a[i]);\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpreaer9ot.java:27: error: cannot find symbol\n        if (sum(a)\
    \ % 2 == 1) {\n            ^\n  symbol:   method sum(int[])\n  location: class\
    \ Problem\n/tmp/tmpreaer9ot.java:34: error: no suitable method found for sort(int[],Comparator<Object>)\n\
    \            Arrays.sort(a, Collections.reverseOrder());\n                  ^\n\
    \    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is not applicable\n\
    \      (inference variable T#1 has incompatible bounds\n        equality constraints:\
    \ int\n        lower bounds: Object)\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> sorted = new ArrayList<>();\n        int\
    \ sum = 0;\n        for(int i : array) {\n            sum += i;\n        }\n \
    \       sorted.add(sum);\n        for(int i : array) {\n            sum -= i;\n\
    \            sorted.add(sum);\n        }\n        Collections.sort(sorted);\n\
    \        return sorted;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwjaa585d.java:34)\n"
  stdout: ''
  timestamp: 1660012020
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array == null) {\n            throw new IllegalArgumentException(\"\
    array can not be null\");\n        }\n        if (array.isEmpty()) {\n       \
    \     return array;\n        }\n        int[] res = new int[array.size()];\n \
    \       for (int i = 0; i < array.getSize(); ++i) {\n            int sum = 0;\n\
    \            for (int j = 0; j < i; ++j) {\n                sum += array.get(j);\n\
    \            }\n            res[i] = sum;\n        }\n        Arrays.sort(res);\n\
    \        ArrayList<Integer> result = new ArrayList<>(array);\n        for (int\
    \ i = 0; i < array.getSize(); ++i) {\n            if (i % 2 == 0) {\n        \
    \        result.add(res[i]);\n            } else {\n                result.remove(result.size()\
    \ - i - 1);\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe8s6pkrb.java:27: error: cannot find symbol\n        for (int i\
    \ = 0; i < array.getSize(); ++i) {\n                                 ^\n  symbol:\
    \   method getSize()\n  location: variable array of type ArrayList<Integer>\n\
    /tmp/tmpe8s6pkrb.java:36: error: cannot find symbol\n        for (int i = 0; i\
    \ < array.getSize(); ++i) {\n                                 ^\n  symbol:   method\
    \ getSize()\n  location: variable array of type ArrayList<Integer>\n2 errors\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        boolean isEven = Arrays.stream(array).sum() % 2 == 0;\n  \
    \      if (isEven) {\n            return array.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n\
    \        } else {\n            return array.stream().sorted((a, b) -> Integer.compare(b,\
    \ a)).collect(Collectors.toCollection(ArrayList::new));\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp48tkc9eu.java:20: error: no suitable method found for stream(ArrayList<Integer>)\n\
    \        boolean isEven = Arrays.stream(array).sum() % 2 == 0;\n             \
    \                  ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; ArrayList<Integer>\
    \ cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660012020
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> temp = new ArrayList<>();\n        int\
    \ sum = 0;\n        for(Integer i : array) {\n            if(i!=0){\n        \
    \        sum += i;\n            }\n        }\n        if(sum%2 != 0){\n      \
    \      return array.stream().sorted((x,y) -> x-y).collect(Collectors.toCollection(ArrayList::new));\n\
    \        }\n        return array.stream().sorted((x,y) -> y-x).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf2pro_8u.java:36)\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if(array.isEmpty()) {\n            return array;\n       \
    \ }\n\n        int sum = 0;\n        for(int i = 0; i < array.size(); i++) {\n\
    \            sum += array.get(i);\n        }\n\n        int middle = sum / 2;\n\
    \        boolean isOdd = (sum % 2 == 0);\n\n        if(isOdd) {\n            Collections.sort(array);\n\
    \        }\n\n        else {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        }\n\n        for(int i = 0; i < array.size(); i++) {\n            int\
    \ number = array.get(i);\n\n            if(isOdd && number > middle) {\n     \
    \           array.set(i, middle);\n            }\n\n            if(!isOdd && number\
    \ < middle) {\n                array.set(i, middle);\n            }\n        }\n\
    \n        return array;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp97ujoh8c.java:57)\n"
  stdout: ''
  timestamp: 1660012020
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> sorted_array = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < array.size(); i++) {\n            int sum = (int)\
    \ Math.ceil(array.get(i) + array.get(i + 1));\n            if (sum % 2 == 0) {\n\
    \                sorted_array.add((int) array.get(i));\n            }\n      \
    \      else {\n                sorted_array.add((int) array.get(i));\n       \
    \     }\n        }\n        return sorted_array;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpylj1xe6u.java:22)\n\tat Problem.main(tmpylj1xe6u.java:34)\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sum = array.stream().reduce(Integer::sum).orElse(0);\n\
    \        switch (sum % 2) {\n            case 1:\n                return array.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toCollection(ArrayList::new));\n\
    \            case 0:\n                return array.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpvmzx02v3.java:27: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array.size() <= 1) {\n            return array;\n    \
    \    }\n        ArrayList<Integer> sortedArray = new ArrayList<>(array);\n   \
    \     int[] firstArray = sortedArray.toArray(new int[0]);\n        int[] lastArray\
    \ = firstArray;\n        int sumOfFirstArray = 0;\n        int sumOfLastArray\
    \ = 0;\n        for (int i = 0; i < firstArray.length; i++) {\n            sumOfFirstArray\
    \ += firstArray[i];\n            sumOfLastArray += lastArray[i];\n        }\n\
    \        int sumOfFirstArray2 = sumOfFirstArray;\n        int sumOfLastArray2\
    \ = sumOfLastArray;\n        if (sumOfFirstArray2 % 2 == 1) {\n            Arrays.sort(firstArray);\n\
    \        }\n        if (sumOfLastArray2 % 2 == 0) {\n            Arrays.sort(lastArray);\n\
    \        }\n        sortedArray.addAll(firstArray);\n        sortedArray.addAll(lastArray);\n\
    \        return sortedArray;\n}\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_xez6x5j.java:24: error: no suitable method found for toArray(int[])\n\
    \        int[] firstArray = sortedArray.toArray(new int[0]);\n               \
    \                       ^\n    method Collection.<T#1>toArray(IntFunction<T#1[]>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; int[] cannot be converted to IntFunction<T#1[]>))\n    method ArrayList.<T#2>toArray(T#2[])\
    \ is not applicable\n      (inference variable T#2 has incompatible bounds\n \
    \       equality constraints: int\n        lower bounds: Object)\n  where T#1,T#2\
    \ are type-variables:\n    T#1 extends Object declared in method <T#1>toArray(IntFunction<T#1[]>)\n\
    \    T#2 extends Object declared in method <T#2>toArray(T#2[])\n/tmp/tmp_xez6x5j.java:40:\
    \ error: incompatible types: int[] cannot be converted to Collection<? extends\
    \ Integer>\n        sortedArray.addAll(firstArray);\n                        \
    \   ^\n/tmp/tmp_xez6x5j.java:41: error: incompatible types: int[] cannot be converted\
    \ to Collection<? extends Integer>\n        sortedArray.addAll(lastArray);\n \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sum = 0;\n        int minIndex = -1;\n        int maxIndex\
    \ = array.size()-1;\n        for (Integer num : array) {\n            sum += num;\n\
    \            if (minIndex == -1) {\n                minIndex = sum;\n        \
    \    } else if (sum < minIndex) {\n                minIndex = sum;\n         \
    \   }\n            if (maxIndex == -1) {\n                maxIndex = sum;\n  \
    \          } else if (sum > maxIndex) {\n                maxIndex = sum;\n   \
    \         }\n        }\n        // Sorting ascending (odd sum)\n        if (minIndex\
    \ < maxIndex) {\n            while (minIndex < maxIndex) {\n                Collections.sort(array);\n\
    \                minIndex++;\n                maxIndex--;\n                sum\
    \ = 0;\n                for (Integer num : array) {\n                    sum +=\
    \ num;\n                    if (minIndex == maxIndex) {\n                    \
    \    minIndex = sum;\n                        break;\n                    }\n\
    \                    if (sum < minIndex) {\n                        minIndex =\
    \ sum;\n                    }\n                    if (sum > maxIndex) {\n   \
    \                     maxIndex = sum;\n                    }\n               \
    \ }\n            }\n        }\n        // Sorting descending (even sum)\n    \
    \    if (minIndex < maxIndex) {\n            while (minIndex < maxIndex) {\n \
    \               Collections.sort(array);\n                maxIndex--;\n      \
    \          minIndex++;\n                sum = 0;\n                for (Integer\
    \ num : array) {\n                    sum += num;\n                    if (minIndex\
    \ == maxIndex) {\n                        minIndex = sum;\n                  \
    \      break;\n                    }\n                    if (sum < minIndex)\
    \ {\n                        minIndex = sum;\n                    }\n        \
    \            if (sum > maxIndex) {\n                        maxIndex = sum;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for\
    \ (int i = 0; i < array.size(); i++) {\n            Integer num = array.get(i);\n\
    \            if (i + 1 < array.size()) {\n                int num2 = array.get(i\
    \ + 1);\n                int num3 = array.get(i + 2);\n                result.addAll(new\
    \ IntIntTuple(i, num2, num3));\n            } else {\n                int num2\
    \ = array.get(i - 1);\n                int num3 = array.get(i);\n            \
    \    result.addAll(new IntIntTuple(i, num2, num3));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgas7kmbg.java:26: error: cannot find symbol\n                result.addAll(new\
    \ IntIntTuple(i, num2, num3));\n                                  ^\n  symbol:\
    \   class IntIntTuple\n  location: class Problem\n/tmp/tmpgas7kmbg.java:30: error:\
    \ cannot find symbol\n                result.addAll(new IntIntTuple(i, num2, num3));\n\
    \                                  ^\n  symbol:   class IntIntTuple\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Collections.sort(array);\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpox19am_j.java:27)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> arr1 = new ArrayList<Integer>();\n    \
    \    ArrayList<Integer> arr2 = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ arr3 = new ArrayList<Integer>();\n        ArrayList<Integer> arr4 = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> arr5 = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ arr6 = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 1) {\n            int temp;\n            temp\
    \ = sum - array.get(array.size() - 1);\n            arr1.add(temp);\n        \
    \    arr2.add(array.get(array.size() - 1));\n        }\n        else if (sum %\
    \ 2 == 0) {\n            int temp1;\n            temp1 = sum - array.get(0);\n\
    \            arr3.add(temp1);\n            arr4.add(array.get(0));\n        }\n\
    \        arr5.addAll(arr3);\n        arr6.addAll(arr4);\n        arr5.addAll(arr6);\n\
    \        arr1.addAll(arr5);\n        arr1.sort();\n        arr1.add(sum);\n  \
    \      arr1.addAll(arr2);\n        arr2.addAll(arr4);\n        arr2.addAll(arr3);\n\
    \        arr2.addAll(arr1);\n        arr2.sort();\n        return arr2;\n}\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptci6wxnr.java:43: error: method sort in class ArrayList<E> cannot\
    \ be applied to given types;\n        arr1.sort();\n            ^\n  required:\
    \ Comparator<? super Integer>\n  found:    no arguments\n  reason: actual and\
    \ formal argument lists differ in length\n  where E is a type-variable:\n    E\
    \ extends Object declared in class ArrayList\n/tmp/tmptci6wxnr.java:49: error:\
    \ method sort in class ArrayList<E> cannot be applied to given types;\n      \
    \  arr2.sort();\n            ^\n  required: Comparator<? super Integer>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where E is a type-variable:\n    E extends Object declared in class ArrayList\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> arrayResult = new ArrayList<Integer>();\n\
    \        Integer firstSum = 0, lastSum = 0;\n        for (Integer val : array)\
    \ {\n            lastSum += val;\n            if (firstSum < lastSum) {\n    \
    \            arrayResult.add(val);\n                firstSum = lastSum;\n    \
    \        } else {\n                arrayResult.add(val);\n                lastSum\
    \ -= val;\n            }\n        }\n        return arrayResult;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpakoy3abc.java:37)\n"
  stdout: ''
  timestamp: 1660012022
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array == null) {\n            throw new IllegalArgumentException(\"\
    null array\");\n        }\n        ArrayList<Integer> newArray = new ArrayList<>();\n\
    \        Integer lastIndex = -1;\n        for (Integer currentIndex : array) {\n\
    \            if (lastIndex == -1) {\n                newArray.add(currentIndex);\n\
    \            } else if (lastIndex !=currentIndex) {\n                if (lastIndex\
    \ instanceof Integer)\n                    newArray.add((Integer) lastIndex);\n\
    \                else {\n                    newArray.add(lastIndex);\n      \
    \              newArray.add(currentIndex);\n                }\n            }\n\
    \            lastIndex = currentIndex;\n        }\n        return newArray;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp7lteizd.java:43)\n"
  stdout: ''
  timestamp: 1660012022
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int N = array.size();\n        int[] arr1 = new int[N];\n\
    \        int[] arr2 = new int[N];\n        for(int i = 0; i < N; i++) {\n    \
    \        arr1[i] = array.get(i);\n        }\n        Arrays.sort(arr1);\n    \
    \    int n = arr1.length;\n        int m = N - 1;\n        while(m != 0) {\n \
    \           if(arr1[m] == arr1[m + 1]) {\n                m--;\n            }\n\
    \            else if(arr1[m] < arr1[m + 1]) {\n                Collections.swap(arr1,\
    \ m, m + 1);\n                m--;\n            }\n            else {\n      \
    \          Collections.swap(arr1, m, m + 1);\n                n--;\n         \
    \   }\n        }\n        for(int i = 0; i < N; i++) {\n            arr2[i] =\
    \ arr1[i];\n        }\n        return Arrays.asList(arr2);\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphtl6sli4.java:34: error: no suitable method found for swap(int[],int,int)\n\
    \                Collections.swap(arr1, m, m + 1);\n                         \
    \  ^\n    method Collections.swap(List<?>,int,int) is not applicable\n      (argument\
    \ mismatch; int[] cannot be converted to List<?>)\n    method Collections.swap(Object[],int,int)\
    \ is not applicable\n      (argument mismatch; int[] cannot be converted to Object[])\n\
    /tmp/tmphtl6sli4.java:38: error: no suitable method found for swap(int[],int,int)\n\
    \                Collections.swap(arr1, m, m + 1);\n                         \
    \  ^\n    method Collections.swap(List<?>,int,int) is not applicable\n      (argument\
    \ mismatch; int[] cannot be converted to List<?>)\n    method Collections.swap(Object[],int,int)\
    \ is not applicable\n      (argument mismatch; int[] cannot be converted to Object[])\n\
    /tmp/tmphtl6sli4.java:45: error: incompatible types: no instance(s) of type variable(s)\
    \ T exist so that List<T> conforms to ArrayList<Integer>\n        return Arrays.asList(arr2);\n\
    \                            ^\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>asList(T...)\n3 errors\n"
  stdout: ''
  timestamp: 1660012022
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Arrays.sort(array);\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqrvs4onh.java:20: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sum=0;\n        for(int i=0; i<array.size();i++) {\n \
    \           sum+=array.get(i);\n        }\n        \n        if(sum%2==0) {\n\
    \            Collections.sort(array);\n        } else {\n            Collections.reverse(array);\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3372788t.java:35)\n"
  stdout: ''
  timestamp: 1660012022
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<Integer>(array.size());\n\
    \n        int lastSum = 0;\n        int lastPos = 0;\n        boolean first =\
    \ true;\n        for (Integer i : array) {\n            if (first) {\n       \
    \         lastSum += i;\n                first = false;\n            } else {\n\
    \                int currSum = lastSum + i;\n                if (currSum % 2 ==\
    \ 0) {\n                    result.add(lastPos);\n                    lastSum\
    \ += i;\n                    lastPos = lastSum;\n                    first = true;\n\
    \                } else {\n                    lastSum += i;\n               \
    \     result.add(lastPos);\n                    lastPos = lastSum;\n         \
    \       }\n            }\n        }\n        result.add(lastPos);\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfg6jkmsj.java:47)\n"
  stdout: ''
  timestamp: 1660012022
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n  \
    \      ArrayList<Integer> array1 = new ArrayList<Integer>(array);\n        for\
    \ (int i = 0; i < array1.size(); i += 2) {\n            int sum1 = array1.get(i)\
    \ + array1.get(i + 1);\n            if (sum1 % 2 == 1) {\n                array1.remove(i\
    \ + 1);\n                array1.remove(array1.size() - 1);\n                sum1\
    \ = array1.get(i) + array1.get(i + 1);\n            }\n            if (sum1 %\
    \ 2 == 0) {\n                array1.remove(i);\n                array1.remove(array1.size()\
    \ - 1);\n            }\n            result.add(array1.get(i));\n            result.add(array1.get(i\
    \ + 1));\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpde_egd1j.java:23)\n\tat Problem.main(tmpde_egd1j.java:40)\n"
  stdout: ''
  timestamp: 1660012022
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> returnArray = new ArrayList<>();\n    \
    \    int sumFirstIndex = 0, sumLastIndex = 0;\n        int sumFirstIndexAndLastIndex\
    \ = 0;\n        for(int i = 0; i < array.size(); i++) {\n            sumFirstIndex\
    \ += array.get(i);\n            sumLastIndex += array[array.size() - i - 1];\n\
    \            sumFirstIndexAndLastIndex += array.get(i);\n            sumFirstIndexAndLastIndex\
    \ += array[array.size() - i - 1];\n        }\n        if(sumFirstIndex % 2 ==\
    \ 0) {\n            Collections.sort(returnArray, (o1, o2) -> o2-o1);\n      \
    \  }\n        else {\n            Collections.sort(returnArray, (o1, o2) -> o1-o2);\n\
    \        }\n        return returnArray;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp59ep63tj.java:25: error: array required, but ArrayList<Integer>\
    \ found\n            sumLastIndex += array[array.size() - i - 1];\n          \
    \                       ^\n/tmp/tmp59ep63tj.java:27: error: array required, but\
    \ ArrayList<Integer> found\n            sumFirstIndexAndLastIndex += array[array.size()\
    \ - i - 1];\n                                              ^\n2 errors\n"
  stdout: ''
  timestamp: 1660012022
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> newArray = new ArrayList<Integer>();\n\n\
    \        // If the sum of first and last element of the array is even, then sort\
    \ in descending order.\n        if (sumOfFirstLastElement(array) % 2 == 0) {\n\
    \            newArray.addAll(array);\n            newArray.addAll(Collections.nCopies(array.size()\
    \ - 1, 0));\n            newArray.addAll(Collections.nCopies(array.size() - 1,\
    \ Integer.valueOf(0)));\n            return newArray;\n        }\n\n        //\
    \ If the sum of first and last element of the array is odd, then sort in ascending\
    \ order.\n        else {\n            newArray.addAll(Collections.nCopies(array.size()\
    \ - 1, Integer.valueOf(0)));\n            newArray.addAll(array);\n          \
    \  newArray.addAll(Collections.nCopies(array.size() - 1, 0));\n            return\
    \ newArray;\n        }\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp82qv79la.java:23: error: cannot find symbol\n        if (sumOfFirstLastElement(array)\
    \ % 2 == 0) {\n            ^\n  symbol:   method sumOfFirstLastElement(ArrayList<Integer>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660012022
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<Integer>(array);\n\
    \        int[] arr = new int[result.size()];\n        int sum = 0;\n        for\
    \ (int i = 0; i < arr.length; i++) {\n            arr[i] = result.get(i);\n  \
    \          sum += arr[i];\n        }\n        if (sum % 2 != 0) {\n          \
    \  Collections.sort(result, Collections.reverseOrder());\n        } else {\n \
    \           Collections.sort(result);\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm5fm0gdp.java:37)\n"
  stdout: ''
  timestamp: 1660012022
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n     \
    \   int sum = array.get(0) + array.get(array.size() - 1);\n        boolean isSumOdd\
    \ = (sum & 1) == 1;\n        int mid = array.size() / 2;\n        if (isSumOdd)\
    \ {\n            Collections.sort(array);\n            for (int i = 0; i < mid;\
    \ i++) {\n                ans.add(array.get(i));\n            }\n        } else\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \      for (int i = 0; i < mid; i++) {\n                ans.add(array.get(i));\n\
    \            }\n        }\n        return ans;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp5tf7zzbb.java:21)\n\tat Problem.main(tmp5tf7zzbb.java:38)\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> copy = new ArrayList<Integer>(array);\n\
    \        Collections.sort(copy, (a, b) -> {\n            int i = (Integer) Collections.max(copy);\n\
    \            int j = (Integer) Collections.min(a);\n            return (i + j)\
    \ / 2;\n        });\n        Collections.sort(copy, (a, b) -> {\n            int\
    \ i = (Integer) Collections.max(a);\n            int j = (Integer) Collections.min(b);\n\
    \            return (i + j) / 2;\n        });\n        return copy;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6qvxp50.java:23: error: no suitable method found for min(Integer)\n\
    \            int j = (Integer) Collections.min(a);\n                         \
    \                ^\n    method Collections.<T#1>min(Collection<? extends T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Integer cannot be converted to Collection<? extends T#1>))\n    method\
    \ Collections.<T#2>min(Collection<? extends T#2>,Comparator<? super T#2>) is not\
    \ applicable\n      (cannot infer type-variable(s) T#2\n        (actual and formal\
    \ argument lists differ in length))\n  where T#1,T#2 are type-variables:\n   \
    \ T#1 extends Object,Comparable<? super T#1> declared in method <T#1>min(Collection<?\
    \ extends T#1>)\n    T#2 extends Object declared in method <T#2>min(Collection<?\
    \ extends T#2>,Comparator<? super T#2>)\n/tmp/tmpl6qvxp50.java:27: error: no suitable\
    \ method found for max(Integer)\n            int i = (Integer) Collections.max(a);\n\
    \                                         ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n\
    \        (argument mismatch; Integer cannot be converted to Collection<? extends\
    \ T#1>))\n    method Collections.<T#2>max(Collection<? extends T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object,Comparable<? super T#1> declared in\
    \ method <T#1>max(Collection<? extends T#1>)\n    T#2 extends Object declared\
    \ in method <T#2>max(Collection<? extends T#2>,Comparator<? super T#2>)\n/tmp/tmpl6qvxp50.java:28:\
    \ error: no suitable method found for min(Integer)\n            int j = (Integer)\
    \ Collections.min(b);\n                                         ^\n    method\
    \ Collections.<T#1>min(Collection<? extends T#1>) is not applicable\n      (cannot\
    \ infer type-variable(s) T#1\n        (argument mismatch; Integer cannot be converted\
    \ to Collection<? extends T#1>))\n    method Collections.<T#2>min(Collection<"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        boolean isEven = array.get(0).intValue() + array.get(array.size()\
    \ - 1).intValue() % 2 == 0;\n        \n        ArrayList<Integer> sortedArray\
    \ = new ArrayList<Integer>();\n        if(isEven)\n            Collections.sort(array);\n\
    \        else\n            Collections.sort(array, (lhs, rhs) -> lhs.intValue()\
    \ - rhs.intValue());\n        \n        for(int i = 0; i < array.size(); i++)\n\
    \            sortedArray.add(array.get(i));\n        return sortedArray;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpseaj47i4.java:20)\n\tat Problem.main(tmpseaj47i4.java:33)\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // sort arr\n        Collections.sort(array);\n        //\
    \ initialize sum\n        int sum = 0;\n        // if sum is even, sort arr in\
    \ descending order\n        if (array.get(array.size() - 1) % 2 == 0) {\n    \
    \        Collections.reverse(array);\n        }\n        // otherwise, sort arr\
    \ in ascending order\n        else {\n            sum = array.get(0); // set sum\
    \ to first value of arr\n            for (int i = 0; i < array.size(); i++) {\n\
    \                // add current value of arr to sum\n                sum = sum\
    \ + array.get(i);\n                // if sum is odd, swap arr[i] and arr[sum]\n\
    \                if (sum % 2 != 0) {\n                    Integer temp = array.get(i);\n\
    \                    array.set(i, array.get(sum));\n                    array.set(sum,\
    \ temp);\n                }\n            }\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpatblpta9.java:25)\n\tat Problem.main(tmpatblpta9.java:45)\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Write your code here\n        int sum = 0;\n        int\
    \ len = array.size();\n        for (int i = 0; i < len; i++) {\n            sum\
    \ += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            Collections.sort(array);\n\
    \        } else {\n            Collections.sort(array, (o1, o2) -> {\n       \
    \         return (o2.intValue() - o1.intValue()) * -1;\n            });\n    \
    \    }\n        return array;\n}\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_umpvur7.java:39)\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Write your code here\n        if (array.isEmpty()) return\
    \ null;\n        if (array.isEmpty()) return null;\n        if (array.isEmpty())\
    \ return null;\n        Comparator<Integer> cmp = new Comparator<Integer>() {\n\
    \            public int compare(Integer o1, Integer o2) {\n                Integer\
    \ temp = sumOfFirstAndLast(array, o1, o2);\n                return temp.compareTo(o1\
    \ - o2);\n            }\n        };\n        Collections.sort(array, cmp);\n \
    \       return array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkd5s5t88.java:26: error: cannot find symbol\n                Integer\
    \ temp = sumOfFirstAndLast(array, o1, o2);\n                               ^\n\
    \  symbol: method sumOfFirstAndLast(ArrayList<Integer>,Integer,Integer)\n1 error\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // write your code here\n        ArrayList<Integer> array2\
    \ = new ArrayList<Integer>(array);\n        \n        //int[] array2 = new int[array.size()];\n\
    \        //for(int i = 0; i < array2.length; i++){\n        //  array2[i] = array.get(i);\n\
    \        //}\n        \n        int sum = 0;\n        \n        for(int i = 0;\
    \ i < array2.size(); i++){\n            sum += array2.get(i);\n        }\n   \
    \     \n        \n        if(sum % 2 == 0){\n            Collections.sort(array2);\n\
    \        }\n        else{\n            Collections.sort(array2, Collections.reverseOrder());\n\
    \        }\n        return array2;\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2p2pe8w8.java:47)\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Write your code here\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int mid = Math.floor(array.length() / 2);\n\
    \        for (int i = 0; i < mid; i++) {\n            for (int j = mid - 1; j\
    \ > i; j--) {\n                if (array.get(i) > array.get(j)) {\n          \
    \          swap(array, i, j);\n                }\n            }\n        }\n \
    \       for (int i = mid; i < array.length; i++) {\n            for (int j = i;\
    \ j > mid; j--) {\n                if (array.get(i) > array.get(j)) {\n      \
    \              swap(array, i, j);\n                }\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjdm1n72w.java:22: error: cannot find symbol\n        int mid =\
    \ Math.floor(array.length() / 2);\n                                  ^\n  symbol:\
    \   method length()\n  location: variable array of type ArrayList<Integer>\n/tmp/tmpjdm1n72w.java:26:\
    \ error: cannot find symbol\n                    swap(array, i, j);\n        \
    \            ^\n  symbol:   method swap(ArrayList<Integer>,int,int)\n  location:\
    \ class Problem\n/tmp/tmpjdm1n72w.java:30: error: cannot find symbol\n       \
    \ for (int i = mid; i < array.length; i++) {\n                               \
    \    ^\n  symbol:   variable length\n  location: variable array of type ArrayList<Integer>\n\
    /tmp/tmpjdm1n72w.java:33: error: cannot find symbol\n                    swap(array,\
    \ i, j);\n                    ^\n  symbol:   method swap(ArrayList<Integer>,int,int)\n\
    \  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int sum = 0;\n        // first find the sum\n        for (Integer\
    \ val : array) {\n            sum += val;\n        }\n        if (sum % 2 != 0)\
    \ {\n            Collections.sort(array);\n        }\n        // second find the\
    \ index\n        int index = -1;\n        int minSum = Integer.MAX_VALUE;\n  \
    \      for (int i = 0; i < array.size(); i++) {\n            int val = array.get(i);\n\
    \            sum += val;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n                index = i;\n            }\n        }\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        // third sort the array\n      \
    \  for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n\
    \        }\n        int last = index - 1;\n        for (int i = index; i < array.size();\
    \ i++) {\n            result.add(array.get(i));\n            int val = result.get(last);\n\
    \            int temp = (int) Math.ceil((double) val / 2.0);\n            for\
    \ (int j = last; j > index; j--) {\n                temp = temp * 2;\n       \
    \         if (temp % 2 != 0) {\n                    temp = temp / 2;\n       \
    \         }\n                if (temp == val) {\n                    break;\n\
    \                }\n            }\n            last = j;\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpapjgmeak.java:58: error: cannot find symbol\n            last =\
    \ j;\n                   ^\n  symbol:   variable j\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Collections.sort(array);\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpox19am_j.java:27)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array == null) {\n            return null;\n        }\n\
    \        PriorityQueue<Integer> queue = new PriorityQueue<>();\n        Queue<Integer>\
    \ queue2 = new Queue<>();\n        queue.addAll(array);\n        int sum = 0;\n\
    \        int sum2 = 0;\n        int sum3 = 0;\n        int sum4 = 0;\n       \
    \ int sum5 = 0;\n        int sum6 = 0;\n        int sum7 = 0;\n        int sum8\
    \ = 0;\n        int sum9 = 0;\n        int sum10 = 0;\n        int sum11 = 0;\n\
    \        int sum12 = 0;\n        int sum13 = 0;\n        int sum14 = 0;\n    \
    \    int sum15 = 0;\n        int sum16 = 0;\n        int sum17 = 0;\n        int\
    \ sum18 = 0;\n        int sum19 = 0;\n        int sum20 = 0;\n        int sum21\
    \ = 0;\n        int sum22 = 0;\n        int sum23 = 0;\n        int sum24 = 0;\n\
    \        int sum25 = 0;\n        int sum26 = 0;\n        int sum27 = 0;\n    \
    \    int sum28 = 0;\n        int sum29 = 0;\n        int sum30 = 0;\n        int\
    \ sum31 = 0;\n        int sum32 = 0;\n        int sum33 = 0;\n        int sum34\
    \ = 0;\n        int sum35 = 0;\n        int sum36 = 0;\n        int sum37 = 0;\n\
    \        int sum38 = 0;\n        int sum39 = 0;\n        int sum40 = 0;\n    \
    \    int sum41 = 0;\n        int sum42 = 0;\n        int sum43 = 0;\n        int\
    \ sum44 = 0;\n        int sum45 = 0;\n        int sum46 = 0;\n        int sum47\
    \ = 0;\n        int sum48 = 0;\n        int sum49 = 0;\n        int sum50 = 0;\n\
    \        int sum51 = 0;\n        int sum52 = 0;\n        int sum53 = 0;\n    \
    \    int sum54 = 0;\n        int sum55 = 0;\n        int sum56 = 0;\n        int\
    \ sum57 = 0;\n        int sum58 = 0;\n        int sum59 = 0;\n        int sum60\
    \ = 0;\n        int sum61 = 0;\n        int sum62 = 0;\n        int sum63 = 0;\n\
    \        int sum64 = 0;\n        int sum65 = 0;\n        int sum66 = 0;\n    \
    \    int sum67 = 0;\n        int sum68 = 0;\n        int sum69 = 0;\n        int\
    \ sum70 = 0;\n        int sum71 = 0;\n        int sum72 = 0;\n        int sum73\
    \ = 0;\n        int sum74 = 0;\n        int sum75 = 0;\n        int sum76 = 0;\n\
    \        int sum77 = 0;\n        int sum78 = 0;\n        int sum79 = 0;\n    \
    \    int sum80 = 0;\n        int sum81 = 0;\n        int sum82 = 0;\n        int\
    \ sum83 = 0;\n        int sum84 = 0;\n        int sum85 = 0;\n        int sum86\
    \ = 0;\n        int sum87 = 0;\n        int sum88 = 0;\n        int sum89 = 0;\n\
    \        int sum90 = 0;\n        int sum91 = 0;\n        int sum92 = 0;\n    \
    \    int sum93 = 0;\n        int sum94 = 0;\n        int sum95 = 0;\n\n}\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy3vqgyhy.java:24: error: Queue is abstract; cannot be instantiated\n\
    \        Queue<Integer> queue2 = new Queue<>();\n                            \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // sort from low to high using Arrays.sort\n        Arrays.sort(array);\n\
    \n        // if the sum of first and last is even, return the result as array\n\
    \        if (array.get(0) % 2 == 0) {\n            return array;\n        }\n\
    \        // if the sum of first and last is odd, return the result as array\n\
    \        else {\n            ArrayList<Integer> array1 = new ArrayList<Integer>();\n\
    \            for (int i = 0; i <= array.size() - 1; i++) {\n                array1.add(array.get(i));\n\
    \            }\n            return array1;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo435pi8z.java:21: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> sortedArray = new ArrayList<Integer>();\n\
    \        // sort array in ascending order\n        if (array.get(0) + array[array.size()\
    \ - 1] % 2 == 1) {\n            // if even\n            for (int i = 0; i < array.size();\
    \ i++) {\n                sortedArray.add(array.get(i));\n            }\n    \
    \    } else {\n            // if odd\n            for (int i = 0; i < array.size();\
    \ i++) {\n                sortedArray.add(array.get(array.size() - 1 - i));\n\
    \            }\n        }\n        return sortedArray;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw37f_7sx.java:22: error: array required, but ArrayList<Integer>\
    \ found\n        if (array.get(0) + array[array.size() - 1] % 2 == 1) {\n    \
    \                            ^\n1 error\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n  \
    \      for(int i = 0; i < array.size(); i++) {\n            int sum = 0;\n   \
    \         for(int j = 0; j < array.size(); j++) {\n                sum += array.get(j);\n\
    \            }\n            int lastIndex = i - 1;\n            int firstIndex\
    \ = 0;\n            int targetSum = sum;\n            while(lastIndex >= 0) {\n\
    \                if(lastIndex > 0) {\n                    firstIndex++;\n    \
    \                targetSum -= array[lastIndex];\n                    lastIndex--;\n\
    \                } else {\n                    firstIndex++;\n               \
    \     targetSum -= array[lastIndex];\n                }\n                if(targetSum\
    \ < 0 && firstIndex < array.size()) {\n                    targetSum = sum - array[firstIndex];\n\
    \                    firstIndex++;\n                }\n            }\n       \
    \     result.add(firstIndex + 1);\n            result.add(lastIndex + 1);\n  \
    \      }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjtp1_rrq.java:32: error: array required, but ArrayList<Integer>\
    \ found\n                    targetSum -= array[lastIndex];\n                \
    \                      ^\n/tmp/tmpjtp1_rrq.java:36: error: array required, but\
    \ ArrayList<Integer> found\n                    targetSum -= array[lastIndex];\n\
    \                                      ^\n/tmp/tmpjtp1_rrq.java:39: error: array\
    \ required, but ArrayList<Integer> found\n                    targetSum = sum\
    \ - array[firstIndex];\n                                           ^\n3 errors\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Write your code here\n        ArrayList<Integer> newArray\
    \ = new ArrayList<Integer>();\n        int n = array.size();\n        if(n % 2\
    \ == 0){\n            int temp = 0;\n            int pos = 0;\n            int\
    \ i = 0;\n            int j = 1;\n            int k = 0;\n            int sum;\n\
    \            while(i < n / 2){\n                sum = array[i] + array[j];\n \
    \               if(sum % 2 != 0){\n                    temp = array[j];\n    \
    \                array[j] = array[i];\n                    array[i] = temp;\n\
    \                    newArray.add(array[i]);\n                }\n            \
    \    i = i + 1;\n                j = j + 1;\n            }\n            int k2\
    \ = k + 1;\n            while(j < n / 2){\n                sum = array[k] + array[k2];\n\
    \                if(sum % 2 != 0){\n                    temp = array[k];\n   \
    \                 array[k] = array[k2];\n                    array[k2] = temp;\n\
    \                    newArray.add(array[k2]);\n                }\n           \
    \     j = j + 1;\n                k2 = k2 + 1;\n            }\n        }\n   \
    \     else{\n            int temp = 0;\n            int pos = 0;\n           \
    \ int i = 0;\n            int j = 1;\n            int k = 0;\n            int\
    \ sum;\n            while(i < n / 2){\n                sum = array[i] + array[j];\n\
    \                if(sum % 2 == 0){\n                    temp = array[j];\n   \
    \                 array[j] = array[i];\n                    array[i] = temp;\n\
    \                    newArray.add(array[i]);\n                }\n            \
    \    i = i + 1;\n                j = j + 1;\n            }\n            int k2\
    \ = k + 1;\n            while(j < n / 2){\n                sum = array[k] + array[k2];\n\
    \                if(sum % 2 == 0){\n                    temp = array[k];\n   \
    \                 array[k] = array[k2];\n                    array[k2] = temp;\n\
    \                    newArray.add(array[k2]);\n                }\n           \
    \     j = j + 1;\n                k2 = k2 + 1;\n            }\n        }\n   \
    \     return newArray;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_gx8ysxp.java:31: error: array required, but ArrayList<Integer>\
    \ found\n                sum = array[i] + array[j];\n                        \
    \   ^\n/tmp/tmp_gx8ysxp.java:31: error: array required, but ArrayList<Integer>\
    \ found\n                sum = array[i] + array[j];\n                        \
    \              ^\n/tmp/tmp_gx8ysxp.java:33: error: array required, but ArrayList<Integer>\
    \ found\n                    temp = array[j];\n                              \
    \  ^\n/tmp/tmp_gx8ysxp.java:34: error: array required, but ArrayList<Integer>\
    \ found\n                    array[j] = array[i];\n                         ^\n\
    /tmp/tmp_gx8ysxp.java:34: error: array required, but ArrayList<Integer> found\n\
    \                    array[j] = array[i];\n                                  \
    \  ^\n/tmp/tmp_gx8ysxp.java:35: error: array required, but ArrayList<Integer>\
    \ found\n                    array[i] = temp;\n                         ^\n/tmp/tmp_gx8ysxp.java:36:\
    \ error: array required, but ArrayList<Integer> found\n                    newArray.add(array[i]);\n\
    \                                      ^\n/tmp/tmp_gx8ysxp.java:43: error: array\
    \ required, but ArrayList<Integer> found\n                sum = array[k] + array[k2];\n\
    \                           ^\n/tmp/tmp_gx8ysxp.java:43: error: array required,\
    \ but ArrayList<Integer> found\n                sum = array[k] + array[k2];\n\
    \                                      ^\n/tmp/tmp_gx8ysxp.java:45: error: array\
    \ required, but ArrayList<Integer> found\n                    temp = array[k];\n\
    \                                ^\n/tmp/tmp_gx8ysxp.java:46: error: array required,\
    \ but ArrayList<Integer> found\n                    array[k] = array[k2];\n  \
    \                       ^\n/tmp/tmp_gx8ysxp.java:46: error: array required, but\
    \ ArrayList<Integer> found\n                    array[k] = array[k2];\n      \
    \                              ^\n/tmp/tmp_gx8ysxp.java:47: error: array required,\
    \ but ArrayList<Integer> found\n                    array[k2] = temp;\n      \
    \                   ^\n/tmp/tmp_gx8ysxp.java:48: error: array required, but ArrayList<Integer>"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Arrays.sort(array);\n        Integer[] arr = new Integer[array.size()];\n\
    \        for (int i = 0; i < array.size(); i++)\n            arr[i] = array.get(i);\n\
    \        Collections.sort(arr);\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < array.size(); i++)\n            res.add(arr[i]);\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_7g1d28v.java:20: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp_7g1d28v.java:24: error: no suitable method found for sort(Integer[])\n\
    \        Collections.sort(arr);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Integer[] cannot be converted to List<T#1>))\n    method Collections.<T"
  stdout: ''
  timestamp: 1660012025
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int[] arrayValue = new int[array.size()];\n        for (int\
    \ i = 0; i < array.size(); i++) {\n            arrayValue[i] = array.get(i);\n\
    \        }\n        int evenSum = 0;\n        int oddSum = 0;\n        for (int\
    \ i = 0; i < arrayValue.length; i++) {\n            evenSum = evenSum + arrayValue[i];\n\
    \            oddSum = oddSum + arrayValue[i];\n        }\n        if (oddSum %\
    \ 2 != 0) {\n            Arrays.sort(arrayValue);\n        } else {\n        \
    \    Arrays.sort(arrayValue.reverse());\n        }\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i < arrayValue.length;\
    \ i++) {\n            result.add(arrayValue[i]);\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsds9yevo.java:33: error: cannot find symbol\n            Arrays.sort(arrayValue.reverse());\n\
    \                                  ^\n  symbol:   method reverse()\n  location:\
    \ variable arrayValue of type int[]\n1 error\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Collections.sort(array);\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpox19am_j.java:27)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        long n = array.size();\n        ArrayList<Integer> ret = new\
    \ ArrayList<Integer>(n);\n        // sort from smallest to largest\n        for\
    \ (int i = 0; i < n; ++i) {\n            int tmp = array.get(i);\n           \
    \ int j = n - 1;\n            for (; j >= 0 && tmp > array.get(j); --j) {\n  \
    \              int temp1 = array.get(j);\n                array.set(j, temp1);\n\
    \                int temp2 = array.get(i);\n                array.set(i, temp2);\n\
    \            }\n            ret.add(tmp);\n        }\n        return ret;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_1z2bye.java:21: error: no suitable constructor found for ArrayList(long)\n\
    \        ArrayList<Integer> ret = new ArrayList<Integer>(n);\n               \
    \                  ^\n    constructor ArrayList.ArrayList(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n    constructor\
    \ ArrayList.ArrayList(Collection<? extends Integer>) is not applicable\n     \
    \ (argument mismatch; long cannot be converted to Collection<? extends Integer>)\n\
    /tmp/tmp2_1z2bye.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int j = n - 1;\n                      ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1660012025
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Arrays.sort(array);\n        if (array.get(0) % 2 == 1) {\n\
    \            Collections.reverse(array);\n        }\n        return array;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwavpqa60.java:20: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012025
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if(array.isEmpty()) return new ArrayList<Integer>();\n   \
    \     HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n     \
    \   for(int i = 0; i <array.size(); i++) {\n            int x = array.get(i);\n\
    \            if(map.containsKey(x)) {\n                int y = map.get(x);\n \
    \               map.put(x, y+1);\n            } else {\n                map.put(x,\
    \ 1);\n            }\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i <map.size(); i++) {\n            Integer v = map.get(i);\n\
    \            int index = i;\n            for(int j = i+1; j < map.size(); j++)\
    \ {\n                Integer vv= map.get(j);\n                if(v+vv == i) {\n\
    \                    index = j;\n                    break;\n                }\n\
    \            }\n            Collections.sort(result, new Comparator<Integer>()\
    \ {\n                public int compare(Integer o1, Integer o2) {\n          \
    \          Integer v1 = map.get(o1);\n                    Integer v2 = map.get(o2);\n\
    \                    return v1.compareTo(v2);\n                }\n           \
    \ });\n            result.add(index, v);\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd64uj1nh.java:55)\n"
  stdout: ''
  timestamp: 1660012025
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> sortedArray = new ArrayList<Integer>();\n\
    \n        ArrayList<Integer> tempArray = new ArrayList<Integer>();\n        for\
    \ (int i = 0; i < array.size(); i++) {\n            tempArray.add(array.get(i));\n\
    \        }\n\n        Collections.sort(tempArray);\n        for (int i = 0; i\
    \ < tempArray.size(); i++) {\n            sortedArray.add(tempArray.get(i));\n\
    \        }\n\n        return sortedArray;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ept83gp.java:38)\n"
  stdout: ''
  timestamp: 1660012025
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // write your code here\n        int sum = 0;\n        for(int\
    \ i = 0; i < array.size(); i++){\n            sum += array.get(i);\n        }\n\
    \        if (sum%2 == 1){\n            Collections.sort(array);\n        }else\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  }\n        return array;\n}\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeqpzed8l.java:36)\n"
  stdout: ''
  timestamp: 1660012025
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Collections.sort(array);\n        ArrayList<Integer> sorted\
    \ = new ArrayList<Integer>();\n        Collections.reverse(array);\n        int\
    \ sum = 0;\n        boolean odd = true;\n        for(int i : array) {\n      \
    \      sum += i;\n            odd = odd ^ i % 2 != 0;\n            sorted.add((odd\
    \ ? -sum : sum), i);\n        }\n        return sorted;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 5, Size: 0\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:756)\n\
    \tat java.base/java.util.ArrayList.add(ArrayList.java:481)\n\tat Problem.sortArray(tmp6xwgp4lp.java:28)\n\
    \tat Problem.main(tmp6xwgp4lp.java:34)\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array.size() == 0) {\n            return new ArrayList<>();\n\
    \        }\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add(array.remove(0));\n\
    \        int sum = 0;\n        int index = 0;\n        int temp;\n        for\
    \ (Integer num : array) {\n            sum += num;\n            while (sum >=\
    \ sum) {\n                list.add(array.remove(index));\n                sum\
    \ -= list.get(index++);\n            }\n        }\n        list.add(array.remove(0));\n\
    \        return list;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.remove(ArrayList.java:504)\n\
    \tat Problem.sortArray(tmpb31dvqp7.java:35)\n\tat Problem.main(tmpb31dvqp7.java:40)\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n    \
    \    Integer temp = Integer.MIN_VALUE;\n        for (Integer value : array) {\n\
    \            if (value > temp) {\n                list.add(value);\n         \
    \   } else if (value == temp) {\n                list.add(value);\n          \
    \  } else {\n                list.add(temp);\n                list.add(value);\n\
    \            }\n        }\n        return list;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvkht8t5p.java:37)\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int s = sum( array.get(0), array.get(array.size() - 1) );\n\
    \        if ( s % 2 == 1 )\n            Collections.sort(array);\n        else\n\
    \            Collections.reverse(array);\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ikodoyy.java:20: error: cannot find symbol\n        int s = sum(\
    \ array.get(0), array.get(array.size() - 1) );\n                ^\n  symbol: \
    \  method sum(Integer,Integer)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Solution 1 \n        Arrays.sort(array);\n        // Solution\
    \ 2\n        // Arrays.sort(array, (first, second) -> {\n        //     int firstSum\
    \ = Arrays.stream(first).sum();\n        //     int secondSum = Arrays.stream(second).sum();\n\
    \        //     if (firstSum % 2 != secondSum % 2) return firstSum - secondSum;\n\
    \        //     return first.compareTo(second);\n        // });\n\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppuc3hose.java:21: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n     \
    \   List<Integer> nums = array.stream().sorted().collect(Collectors.toList());\n\
    \        int[] arr = new int[nums.size()];\n        nums.toArray(arr);\n     \
    \   Arrays.sort(arr);\n        if (arr[0] & 1 == 1) {\n            res.add(arr[0]);\n\
    \            res.add(arr[arr.length - 1]);\n        } else {\n            res.add(arr[arr.length\
    \ - 1]);\n            res.add(arr[0]);\n        }\n        return res;\n}\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6lfioac0.java:23: error: no suitable method found for toArray(int[])\n\
    \        nums.toArray(arr);\n            ^\n    method Collection.<T#1>toArray(IntFunction<T#1[]>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; int[] cannot be converted to IntFunction<T#1[]>))\n    method List.<T#2>toArray(T#2[])\
    \ is not applicable\n      (inference variable T#2 has incompatible bounds\n \
    \       equality constraints: int\n        lower bounds: Object)\n  where T#1,T#2\
    \ are type-variables:\n    T#1 extends Object declared in method <T#1>toArray(IntFunction<T#1[]>)\n\
    \    T#2 extends Object declared in method <T#2>toArray(T#2[])\n/tmp/tmp6lfioac0.java:25:\
    \ error: bad operand types for binary operator '&'\n        if (arr[0] & 1 ==\
    \ 1) {\n                   ^\n  first type:  int\n  second type: boolean\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Collections.sort(array);\n        return array;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpox19am_j.java:27)\n"
  stdout: ''
  timestamp: 1660012013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array == null || array.isEmpty()) return null;\n     \
    \   Arrays.sort(array);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < array.size(); i++)\n            result.add(array.get(i));\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpilvoph46.java:21: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(array);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Collections.sort(array);\n        if (array.isEmpty())\n \
    \           return array;\n        int first = 0;\n        int last = array.size()\
    \ - 1;\n        int mid = 0;\n        boolean flag = true;\n        int res =\
    \ 0;\n        ArrayList<Integer> res = new ArrayList<>();\n        while (first\
    \ < last) {\n            if (array.get(mid) <= 0) {\n                first++;\n\
    \                mid++;\n            } else {\n                last = mid;\n \
    \               if (array.get(mid) > 0) {\n                    mid++;\n      \
    \          } else {\n                    mid--;\n                }\n         \
    \   }\n            if (flag) {\n                res = res.add(array.get(mid));\n\
    \                first = mid;\n                if (array.get(mid) > 0) {\n   \
    \                 mid++;\n                } else {\n                    mid--;\n\
    \                }\n                flag = !flag;\n            } else {\n    \
    \            res = res.add(array.get(mid));\n                first = mid;\n  \
    \              if (array.get(mid) > 0) {\n                    mid++;\n       \
    \         } else {\n                    mid--;\n                }\n          \
    \      flag = !flag;\n            }\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ku88qf5.java:28: error: variable res is already defined in method\
    \ sortArray(ArrayList<Integer>)\n        ArrayList<Integer> res = new ArrayList<>();\n\
    \                           ^\n/tmp/tmp5ku88qf5.java:42: error: incompatible types:\
    \ boolean cannot be converted to ArrayList<Integer>\n                res = res.add(array.get(mid));\n\
    \                             ^\n/tmp/tmp5ku88qf5.java:51: error: incompatible\
    \ types: boolean cannot be converted to ArrayList<Integer>\n                res\
    \ = res.add(array.get(mid));\n                             ^\n3 errors\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> result = new ArrayList<>();\n        int[]\
    \ numArray = array.toArray();\n        int[] sortedArray = new int[numArray.length];\n\
    \        Arrays.sort(numArray);\n        int sum = 0;\n        for (int i = 0;\
    \ i < numArray.length; i++) {\n            sum += numArray[i];\n            sortedArray[i]\
    \ = sum;\n        }\n        Arrays.sort(sortedArray);\n        boolean isOdd\
    \ = sum % 2 == 0;\n        for (int i = 0; i < sortedArray.length; i++) {\n  \
    \          if (isOdd) {\n                result.add(numArray[sortedArray.length\
    \ - i - 1]);\n            } else {\n                result.add(sortedArray[sortedArray.length\
    \ - i - 1]);\n            }\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw_rqvhw.java:21: error: incompatible types: Object[] cannot be\
    \ converted to int[]\n        int[] numArray = array.toArray();\n            \
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int n = array.size();\n        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n         \
    \   int min = i;\n            int max = n - 1;\n            while (max >= min)\
    \ {\n                int j = min + 1;\n                int k = max - 1;\n    \
    \            int sum = array.get(min) + array.get(k);\n                if (sum\
    \ % 2 == 0) {\n                    max = k - 1;\n                } else {\n  \
    \                  min = j + 1;\n                }\n            }\n          \
    \  result.add(array.get(min));\n            result.add(array.get(max));\n    \
    \    }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp1zz9p86f.java:28)\n\tat Problem.main(tmp1zz9p86f.java:42)\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        // Your Code Here\n        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        int temp = 0;\n        int sum = 0;\n       \
    \ for (int i = 0; i < array.size(); i++) {\n            temp = array.get(i);\n\
    \            if (sum % 2 != 0) {\n                result.add(temp);\n        \
    \        sum = sum + temp;\n            } else {\n                result.add(temp);\n\
    \                sum = sum - temp;\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0mqntuqd.java:39)\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        if (array.isEmpty()) {\n            return array;\n      \
    \  }\n\n        // sort descending if odd sum is reached\n        int sum = array.get(0)\
    \ + array.get(array.size() - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array);\n\
    \            return array;\n        }\n\n        // sort ascending if even sum\
    \ is reached\n        Collections.sort(array);\n        int mid = array.size()\
    \ / 2;\n        int left = array.get(mid);\n        int right = array.get(mid\
    \ + 1);\n        int temp;\n        while (left < right) {\n            temp =\
    \ left;\n            while (left < right && array.get(left) < temp) {\n      \
    \          left ++;\n            }\n            while (right > left && array.get(right)\
    \ > temp) {\n                right --;\n            }\n            if (left <\
    \ right) {\n                swap(array, left, right);\n                left ++;\n\
    \                right --;\n            }\n        }\n\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ivf3yt8.java:46: error: cannot find symbol\n                swap(array,\
    \ left, right);\n                ^\n  symbol:   method swap(ArrayList<Integer>,int,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add(array.get(0));\n\
    \        list.add(array.get(array.size() - 1));\n        for(int i = 1; i < array.size()\
    \ - 1; i++) {\n            if((list.get(0) - list.get(i)) % 2 != 0) {\n      \
    \          list.set(list.size() - 2, list.get(list.size() - 1));\n           \
    \     list.set(list.size() - 1, array.get(i));\n            } else {\n       \
    \         list.set(list.size() - 2, list.get(i));\n                list.set(list.size()\
    \ - 1, array.get(i));\n            }\n        }\n        return list;\n}\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp4dj1jh4c.java:21)\n\tat Problem.main(tmp4dj1jh4c.java:35)\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Integer[] array2 = array.toArray(new Integer[array.size()]);\n\
    \        System.out.println(Arrays.toString(array2));\n\n        //Integer[] array2\
    \ = new Integer[array.size()];\n        //for (int i = 0; i < array.size(); i++)\
    \ {\n        //    array2[i] = array.get(i);\n        //}\n        System.out.println(\"\
    array2 length: \" + array2.length);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \n        if (array2.length != 0) {\n            ArrayList<Integer> tmp = new\
    \ ArrayList<Integer>(array2.length);\n            for (int i = 0; i < array2.length;\
    \ i++) {\n                tmp.add(array2.get(i));\n            }\n           \
    \ Collections.sort(tmp);\n            tmp = tmp.toArray(new Integer[tmp.size()]);\n\
    \            for (int i = 0; i < array2.length; i++) {\n                result.add(tmp[i]);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5ozy3tp.java:33: error: cannot find symbol\n                tmp.add(array2.get(i));\n\
    \                              ^\n  symbol:   method get(int)\n  location: variable\
    \ array2 of type Integer[]\n/tmp/tmpv5ozy3tp.java:36: error: incompatible types:\
    \ no instance(s) of type variable(s) T exist so that T[] conforms to ArrayList<Integer>\n\
    \            tmp = tmp.toArray(new Integer[tmp.size()]);\n                   \
    \          ^\n  where T is a type-variable:\n    T extends Object declared in\
    \ method <T>toArray(T[])\n/tmp/tmpv5ozy3tp.java:38: error: array required, but\
    \ ArrayList<Integer> found\n                result.add(tmp[i]);\n            \
    \                  ^\n3 errors\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        int len = array.size();\n        if (len < 2) return array;\n\
    \        int first = 0;\n        int last = len - 1;\n        int mid;\n     \
    \   while (true) {\n            if (first >= last) {\n                ArrayList<Integer>\
    \ result = new ArrayList<>();\n                for (int i = first; i < len; i++)\
    \ result.add(array.get(i));\n                return result;\n            }\n \
    \           mid = first + (last - first) / 2;\n            int sum = array[first]\
    \ + array[last];\n            if (sum % 2 == 1) last = mid;\n            else\
    \ first = mid;\n        }\n}\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo55lcsz1.java:32: error: array required, but ArrayList<Integer>\
    \ found\n            int sum = array[first] + array[last];\n                 \
    \          ^\n/tmp/tmpo55lcsz1.java:32: error: array required, but ArrayList<Integer>\
    \ found\n            int sum = array[first] + array[last];\n                 \
    \                         ^\n2 errors\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        Collections.sort(array);\n\n        if (array.get(0) % 2 ==\
    \ 0) {\n            Collections.reverse(array);\n        }\n\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpljhds61a.java:22)\n\tat Problem.main(tmpljhds61a.java:29)\n"
  stdout: ''
  timestamp: 1660012027
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
    \ array) {\n        \n        int n = array.size();\n        \n        // create\
    \ two new arrays to hold the sorted array and sort them\n        ArrayList<Integer>\
    \ unsorted = new ArrayList<Integer>(n);\n        ArrayList<Integer> sorted = new\
    \ ArrayList<Integer>(n);\n        \n        for(int i = 0; i < n; i++){\n    \
    \        if( array.get(i) % 2 != 0){\n                unsorted.add(array.get(i));\n\
    \            } else {\n                sorted.add(array.get(i));\n           \
    \ }\n        }\n        \n        // sort the unsorted array\n        Collections.sort(unsorted);\n\
    \        \n        // sort in the ascending order\n        Collections.sort(sorted);\n\
    \        \n        // if the sum is odd, reverse the array\n        if( unsorted.get(unsorted.size()\
    \ - 1) == unsorted.get(n-1)){\n            Collections.reverse(sorted);\n    \
    \    }\n        \n        return sorted;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpwrofccgr.java:42)\n\tat Problem.main(tmpwrofccgr.java:49)\n"
  stdout: ''
  timestamp: 1660012026
