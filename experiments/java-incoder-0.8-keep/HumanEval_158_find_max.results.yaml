language: java
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // write your code in Java 9+\n        if (words.size() ==\
    \ 0) {\n            return \"\";\n        }\n        \n        Set<String> set\
    \ = new HashSet<>();\n        \n        for (int i = 0; i < words.size(); i++)\
    \ {\n            String word = words.get(i);\n            if (set.contains(word))\
    \ {\n                int index = set.indexOf(word);\n                \n      \
    \          if (set.size() > (index + 1)) {\n                    set.remove(index);\n\
    \                    set.add(i);\n                    set.clear();\n         \
    \       }\n            } else {\n                set.add(i);\n               \
    \ set.clear();\n            }\n        }\n        return words.get(0);\n}\n  \
    \  public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpre65uppa.java:27: error: cannot find symbol\n                int\
    \ index = set.indexOf(word);\n                               ^\n  symbol:   method\
    \ indexOf(String)\n  location: variable set of type Set<String>\n/tmp/tmpre65uppa.java:31:\
    \ error: incompatible types: int cannot be converted to String\n             \
    \       set.add(i);\n                            ^\n/tmp/tmpre65uppa.java:35:\
    \ error: incompatible types: int cannot be converted to String\n             \
    \   set.add(i);\n                        ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        \n        //create set\n        HashSet<String> hs = new HashSet<String>();\n\
    \        for(int i = 0; i < words.size(); i++)\n        {\n            hs.add(words.get(i));\n\
    \        }\n        //remove duplicates\n        List<String> w = new ArrayList<String>(hs);\n\
    \        //sort alphabetically\n        w.sort(Comparator.comparing(String::toLowerCase));\n\
    \        \n        //get first item\n        String firstItem = w.get(0);\n  \
    \      //get number of unique characters\n        int count1 = firstItem.chars().distinct().count();\n\
    \        \n        //return first item if max unique count is same for all strings\n\
    \        if (count1 == words.size())\n        {\n            return firstItem;\n\
    \        }\n        \n        //otherwise find max unique count for each string\
    \ and return the one with highest count\n        int maxUniqueCount = 0;\n   \
    \     String maxItem = \"\";\n        for (int i = 0; i < words.size(); i++)\n\
    \        {\n            String item = w.get(i);\n            int count2 = item.chars().distinct().count();\n\
    \            //if count is higher, save it\n            if (count2 > maxUniqueCount)\n\
    \            {\n                maxUniqueCount = count2;\n                maxItem\
    \ = item;\n            }\n        }\n        return maxItem;\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcv1ouxm3.java:32: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int count1 = firstItem.chars().distinct().count();\n\
    \                                                       ^\n/tmp/tmpcv1ouxm3.java:46:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        int count2 = item.chars().distinct().count();\n                     \
    \                                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        String maxWord = \"\";\n        Set<String> uniqueChars =\
    \ new HashSet<String>();\n        for (String word : words) {\n            for\
    \ (char character : word.toCharArray()) {\n                uniqueChars.add(character);\n\
    \            }\n        }\n        for (String word : words) {\n            if\
    \ (uniqueChars.size() < word.length()) {\n                maxWord = word;\n  \
    \          } else if (uniqueChars.size() == word.length()) {\n               \
    \ boolean isFirst = true;\n                for (char character : word.toCharArray())\
    \ {\n                    if (uniqueChars.contains(Character.toString(character)))\
    \ {\n                        if (!isFirst) {\n                            maxWord\
    \ = word;\n                            break;\n                        }\n   \
    \                 }\n                    isFirst = false;\n                }\n\
    \            }\n        }\n        return maxWord;\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgturrrqu.java:21: error: incompatible types: char cannot be converted\
    \ to String\n                uniqueChars.add(character);\n                   \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<Integer, String> map = new HashMap<Integer, String>();\n\
    \        for(String word : words) {\n            int count = map.get(word);\n\
    \            if(count == null) map.put(word, word);\n            else map.put(word,\
    \ count + 1);\n        }\n        for(String word : map.keySet()) {\n        \
    \    int count = map.get(word);\n            if(count > map.size() - 1) return\
    \ word;\n        }\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6v9zzk2.java:19: error: incompatible types: String cannot be converted\
    \ to int\n            int count = map.get(word);\n                           \
    \    ^\n/tmp/tmpo6v9zzk2.java:20: error: bad operand types for binary operator\
    \ '=='\n            if(count == null) map.put(word, word);\n                 \
    \    ^\n  first type:  int\n  second type: <null>\n/tmp/tmpo6v9zzk2.java:20: error:\
    \ incompatible types: String cannot be converted to Integer\n            if(count\
    \ == null) map.put(word, word);\n                                      ^\n/tmp/tmpo6v9zzk2.java:21:\
    \ error: incompatible types: String cannot be converted to Integer\n         \
    \   else map.put(word, count + 1);\n                         ^\n/tmp/tmpo6v9zzk2.java:23:\
    \ error: incompatible types: Integer cannot be converted to String\n        for(String\
    \ word : map.keySet()) {\n                                    ^\n/tmp/tmpo6v9zzk2.java:24:\
    \ error: incompatible types: String cannot be converted to int\n            int\
    \ count = map.get(word);\n                               ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<Integer, Integer> counter = new HashMap<Integer, Integer>();\n\
    \        for (String word : words) {\n            counter.merge(word.length(),\
    \ 1, Integer::sum);\n        }\n        List<String> max = new ArrayList<>();\n\
    \        int maxLength = -1;\n        for (Map.Entry<Integer, Integer> entry :\
    \ counter.entrySet()) {\n            if (entry.getValue() > maxLength) {\n   \
    \             maxLength = entry.getKey();\n            }\n        }\n        for\
    \ (String word : words) {\n            if (word.length() == maxLength) {\n   \
    \             max.add(word);\n            }\n        }\n        if (max.size()\
    \ == 0) {\n            return \"\";\n        }\n        if (max.size() > 1) {\n\
    \            return max.stream().min(Comparator.comparingInt(String::length)).orElse(null);\n\
    \        } else {\n            return max.iterator().next();\n        }\n}\n \
    \   public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvl1_2xqt.java:43)\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        return words.stream().map(x -> x.replaceAll(\"[^\\\\w]\",\
    \ \"\")).distinct().count().max() + 1\n                == words.stream().map(x\
    \ -> x.replaceAll(\"[^\\\\w]\", \"\")).distinct().count() ? words.get(0) : \"\"\
    ;\n}\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzmdjc1xh.java:17: error: long cannot be dereferenced\n        return\
    \ words.stream().map(x -> x.replaceAll(\"[^\\\\w]\", \"\")).distinct().count().max()\
    \ + 1\n                                                                      \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> unique = new HashMap<String, Integer>();\n\
    \        Set<String> uniqueKeys = new HashSet<>();\n        for (String word :\
    \ words) {\n            for (char c : word.toCharArray()) {\n                if\
    \ (!uniqueKeys.contains(String.valueOf(c))) {\n                    uniqueKeys.add(String.valueOf(c));\n\
    \                    unique.put(String.valueOf(c), uniqueKeys.size());\n     \
    \           }\n            }\n        }\n        uniqueKeys.clear();\n       \
    \ Integer maxValue = unique.get(Collections.max(unique.keySet()));\n        for\
    \ (String word : unique.keySet()) {\n            if (unique.get(word) == maxValue)\
    \ {\n                return word;\n            }\n        }\n        return \"\
    \";\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkdmx894m.java:37)\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        ArrayList<Integer> count = new ArrayList<Integer>();\n   \
    \     HashMap<String, Integer> map = new HashMap<String, Integer>();\n       \
    \ for (String word : words) {\n            if (map.containsKey(word)) {\n    \
    \            map.put(word, map.get(word) + 1);\n            } else {\n       \
    \         map.put(word, 1);\n            }\n            count.add(map.get(word));\n\
    \        }\n        int max = Collections.max(count);\n        boolean found =\
    \ false;\n        for(int i=0; i<count.size(); i++) {\n            if(count.get(i)\
    \ == max) {\n                found = true;\n                break;\n         \
    \   }\n        }\n        if(!found) {\n            return \"\";\n        }\n\
    \        int index = 0;\n        for(String word : words) {\n            if (map.containsKey(word))\
    \ {\n                if (map.get(word) == max) {\n                    return word;\n\
    \                }\n            }\n        }\n        return \"\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxwfz42hq.java:49)\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<Character, Integer> charCount = new TreeMap<>((a, b) ->\
    \ Integer.compare(a, b));\n        for(String s : words) {\n            charCount.mergeAll(s\n\
    \                    .chars()\n                    .map(c -> new Character(c))\n\
    \                    .filter(Character::isLetter)\n                    .map(c\
    \ -> c)\n                    .collect(Collectors.toSet())\n            );\n  \
    \      }\n        Optional<String> max;\n        if(!charCount.isEmpty()) {\n\
    \            max = Optional.of(charCount.entrySet().stream()\n               \
    \     .filter(e -> e.getValue().equals(e.getValue()))\n                    .min(Map.Entry.comparingByValue())\n\
    \                    .get().getKey());\n        } else {\n            max = Optional.of(\"\
    <empty>\");\n        }\n        return max.orElse(\"\");\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu_gzx0vq.java:21: error: incompatible types: possible lossy conversion\
    \ from int to char\n                    .map(c -> new Character(c))\n        \
    \                                    ^\n/tmp/tmpu_gzx0vq.java:24: error: method\
    \ collect in interface IntStream cannot be applied to given types;\n         \
    \           .collect(Collectors.toSet())\n                    ^\n  required: Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>\n\
    \  found:    Collector<Object,CAP#1,Set<Object>>\n  reason: cannot infer type-variable(s)\
    \ R\n    (actual and formal argument lists differ in length)\n  where R is a type-variable:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n/tmp/tmpu_gzx0vq.java:24: error: incompatible types: cannot infer type-variable(s)\
    \ R\n                    .collect(Collectors.toSet())\n                      \
    \      ^\n    (argument mismatch; no instance(s) of type variable(s) CAP#1,T exist\
    \ so that Collector<T,?,Set<T>> conforms to Supplier<R>)\n  where R,T are type-variables:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T>toSet()\n  where CAP#1 is a fresh\
    \ type-variable:\n    CAP#1 extends Object from capture of ?\n/tmp/tmpu_gzx0vq.java:29:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \          max = Optional.of(charCount.entrySet().stream()\n                 \
    \            ^\n    equality constraints: String\n    lower bounds: Character\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int uniqueCount = 0;\n        int maxIndex = 0;\n        String\
    \ maxString = \"\";\n        for(int i = 0; i < words.size(); i++) {\n       \
    \     String currentWord = words.get(i);\n            for(int j = 0; j < currentWord.length();\
    \ j++) {\n                if(currentWord.charAt(j) != currentWord.charAt(j)) {\n\
    \                    uniqueCount++;\n                    maxIndex = i;\n     \
    \               break;\n                }\n            }\n            if(uniqueCount\
    \ > maxCount) {\n                maxCount = uniqueCount;\n                maxIndex\
    \ = i;\n                maxString = currentString;\n            }\n        }\n\
    \        if(maxCount == maxString.length()) {\n            return \"\";\n    \
    \    } else {\n            return maxString;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphwtyscra.java:29: error: cannot find symbol\n            if(uniqueCount\
    \ > maxCount) {\n                             ^\n  symbol:   variable maxCount\n\
    \  location: class Problem\n/tmp/tmphwtyscra.java:30: error: cannot find symbol\n\
    \                maxCount = uniqueCount;\n                ^\n  symbol:   variable\
    \ maxCount\n  location: class Problem\n/tmp/tmphwtyscra.java:32: error: cannot\
    \ find symbol\n                maxString = currentString;\n                  \
    \          ^\n  symbol:   variable currentString\n  location: class Problem\n\
    /tmp/tmphwtyscra.java:35: error: cannot find symbol\n        if(maxCount == maxString.length())\
    \ {\n           ^\n  symbol:   variable maxCount\n  location: class Problem\n\
    4 errors\n"
  stdout: ''
  timestamp: 1660011708
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Comparator<String> comparator = Comparator.comparing((String\
    \ s) -> (int)s.chars().distinct().count());\n        Optional<String> maxWord\
    \ = words.stream()\n                .max(comparator);\n        return maxWord.orElse(\"\
    \");\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_qpcv41z.java:24)\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String str : words) {\n            int count = counts.getOrDefault(str, 0);\n\
    \            counts.put(str, count + 1);\n        }\n        Integer max = Collections.max(counts.values());\n\
    \        for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n      \
    \      if (entry.getValue() == max) {\n                return entry.getKey();\n\
    \            }\n        }\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph5vbftpe.java:32)\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> counts = new HashMap<>();\n        for(String\
    \ s : words) {\n            String t = s;\n            for(int i = 0, n = s.length();\
    \ i <= n; ++i) {\n                t = s.substring(0, i) + s.substring(i);\n  \
    \              Integer count = counts.get(t);\n                count = (count\
    \ == null) ? 1 : count + 1;\n                counts.put(t, count);\n         \
    \   }\n        }\n        Integer maxCount = 0;\n        for(String s : counts.keySet())\
    \ {\n            Integer count = counts.get(s);\n            if(count == null\
    \ || count > maxCount) {\n                maxCount = count;\n                maxWord\
    \ = s;\n            }\n        }\n        return maxWord;\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptd_gdpnk.java:32: error: cannot find symbol\n                maxWord\
    \ = s;\n                ^\n  symbol:   variable maxWord\n  location: class Problem\n\
    /tmp/tmptd_gdpnk.java:35: error: cannot find symbol\n        return maxWord;\n\
    \               ^\n  symbol:   variable maxWord\n  location: class Problem\n2\
    \ errors\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = 0;\n        String temp = \"\";\n        for (String\
    \ str : words) {\n            int unique = 0;\n            char[] chars = str.toCharArray();\n\
    \            for (int i = 0; i < chars.length; i++) {\n                if (chars.indexOf(chars[i])\
    \ == chars.lastIndexOf(chars[i])) {\n                    unique++;\n         \
    \       }\n            }\n            if (unique > max) {\n                max\
    \ = unique;\n                temp = str;\n            }\n        }\n        return\
    \ temp;\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8t6oq2h_.java:23: error: cannot find symbol\n                if\
    \ (chars.indexOf(chars[i]) == chars.lastIndexOf(chars[i])) {\n               \
    \          ^\n  symbol:   method indexOf(char)\n  location: variable chars of\
    \ type char[]\n/tmp/tmp8t6oq2h_.java:23: error: cannot find symbol\n         \
    \       if (chars.indexOf(chars[i]) == chars.lastIndexOf(chars[i])) {\n      \
    \                                              ^\n  symbol:   method lastIndexOf(char)\n\
    \  location: variable chars of type char[]\n2 errors\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> charCounts = new HashMap<>();\n     \
    \   for (String word : words) {\n            charCounts.merge(word, 1, (count1,\
    \ count2) -> count1 + count2);\n        }\n        String maxWord = charCounts.entrySet().stream()\n\
    \                .max(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n\
    \                .orElse(null);\n        if (maxWord != null) {\n            return\
    \ maxWord;\n        }\n        int maxCount = 0;\n        for (String word : words)\
    \ {\n            int count = charCounts.get(word);\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsjqu32vz.java:40)\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        final Map<String, Integer> counter = new HashMap<>();\n  \
    \      for (String word : words) {\n            counter.merge(word, 1, (count1,\
    \ count2) -> count1 + count2);\n        }\n\n        Integer max = null;\n   \
    \     String maxStr = \"\";\n        for (String str : words) {\n            Integer\
    \ count = counter.get(str);\n            if (count != null) {\n              \
    \  if (max < count) {\n                    max = count;\n                    maxStr\
    \ = str;\n                }\n            }\n        }\n\n        return maxStr;\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because \"<local2>\" is null\n\tat Problem.findMax(tmpn926e1th.java:27)\n\
    \tat Problem.main(tmpn926e1th.java:37)\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        StringBuilder builder = new StringBuilder();\n\n        for\
    \ (int i = 0; i < words.size(); i++) {\n            int uniqueChars = getUniqueCharacters(words.get(i));\n\
    \            if (uniqueChars > 0) {\n                builder.append(words.get(i));\n\
    \                if (uniqueChars > builder.length()) {\n                    builder.setLength(uniqueChars);\n\
    \                }\n                builder.append(\" \");\n            }\n  \
    \      }\n\n        if (builder.length() > 0) {\n            builder.deleteCharAt(builder.length()\
    \ - 1);\n        }\n\n        return builder.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcby4irlj.java:20: error: cannot find symbol\n            int uniqueChars\
    \ = getUniqueCharacters(words.get(i));\n                              ^\n  symbol:\
    \   method getUniqueCharacters(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int maximum = -1;\n        int currentMax = -1;\n        ArrayList<String>\
    \ currentWord = new ArrayList<>();\n        for (String word : words) {\n    \
    \        char[] characters = new char[word.length()];\n            for (int i\
    \ = 0; i < word.length(); i++) {\n                characters[i] = word.charAt(i);\n\
    \            }\n            int newMax = 0;\n            for (int i = 0; i < characters.length;\
    \ i++) {\n                char c = characters[i];\n                int newCount\
    \ = 1;\n                for (int j = i; j < characters.length; j++) {\n      \
    \              if (characters[j] == c)\n                        newCount++;\n\
    \                }\n                if (newCount > newMax) {\n               \
    \     newMax = newCount;\n                }\n            }\n            if (newMax\
    \ > maximum) {\n                currentWord = word;\n                currentMax\
    \ = newMax;\n            } else if (currentMax == newMax) {\n                currentWord.add(word);\n\
    \            }\n        }\n        if (currentMax == 0) {\n            return\
    \ \"\";\n        } else {\n            return currentWord.get(0);\n        }\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph871qelv.java:38: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n                currentWord = word;\n                \
    \              ^\n1 error\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        List<String> word = new ArrayList<String>();\n        Collections.sort(words);\n\
    \        for (String i : words) {\n            if (i.length() > word.size()) {\n\
    \                word.add(i);\n            }\n        }\n        int unique =\
    \ 0;\n        for (String i : word) {\n            unique += i.length();\n   \
    \     }\n        if (unique > words.size())\n            return \"\";\n      \
    \  String max = \"\";\n        for (String i : word) {\n            if (i.length()\
    \ == word.size()) {\n                if (max.compareTo(i) < 0) {\n           \
    \         max = i;\n                }\n            }\n        }\n        return\
    \ max;\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpesscvs6r.java:41)\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        ArrayList<String> maxList = new ArrayList<>();\n        char\
    \ maxChar = 0;\n        \n        for (String word : words) {\n            int\
    \ uniqueChar = word.chars().distinct().count();\n            if(uniqueChar > maxChar)\
    \ {\n                maxChar = uniqueChar;\n            }\n            maxList.add(word);\n\
    \        }\n        return maxList.get(maxList.size() - 1);\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ovkhoib.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int uniqueChar = word.chars().distinct().count();\n\
    \                                                          ^\n/tmp/tmp0ovkhoib.java:23:\
    \ error: incompatible types: possible lossy conversion from int to char\n    \
    \            maxChar = uniqueChar;\n                          ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011708
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        String maxWord = null;\n        int maxChar = 0;\n       \
    \ \n        words.stream()\n            .flatMap(x -> Arrays.asList(x.split(\"\
    \")))\n            .forEach(x -> {\n                int xCount = 0;\n        \
    \        for (char c : x.toCharArray()) {\n                    xCount += words.get(x).indexOf(c)\
    \ + 1;\n                }\n                \n                if (xCount > maxChar)\
    \ {\n                    maxWord = x;\n                    maxChar = xCount;\n\
    \                }\n            });\n\n        return maxWord;\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo5_o8moi.java:21: error: incompatible types: cannot infer type-variable(s)\
    \ R\n            .flatMap(x -> Arrays.asList(x.split(\"\")))\n               \
    \     ^\n    (argument mismatch; bad return type in lambda expression\n      no\
    \ instance(s) of type variable(s) T#2 exist so that List<T#2> conforms to Stream<?\
    \ extends R>)\n  where R,T#1,T#2 are type-variables:\n    R extends Object declared\
    \ in method <R>flatMap(Function<? super T#1,? extends Stream<? extends R>>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>asList(T#2...)\n1 error\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Your code here\n        ArrayList <Integer> counts = new\
    \ ArrayList();\n        for (int i : words) {\n            int c=0;\n        \
    \    for (int j = 0; j < words.length; j++) {\n                if(!words[j].contains(i))\n\
    \                {\n                    c++;\n                }\n            }\n\
    \            counts.add(c);\n        }\n        Collections.sort(counts);\n  \
    \      for(int i = 0; i < counts.size(); i++)\n        {\n            if(counts.get(i)==counts.size()-1)\n\
    \            {\n                return words.get(i);\n            }\n        \
    \    else\n            {\n                if(counts.get(i)<counts.get(counts.size()-1))\n\
    \                {\n                    return words.get(counts.size());\n   \
    \             }\n                else\n                {\n                   \
    \ return words.get(counts.size()-1);\n                }\n            }\n     \
    \   }\n        return \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg1x5jw58.java:19: error: incompatible types: String cannot be converted\
    \ to int\n        for (int i : words) {\n                     ^\n/tmp/tmpg1x5jw58.java:21:\
    \ error: cannot find symbol\n            for (int j = 0; j < words.length; j++)\
    \ {\n                                     ^\n  symbol:   variable length\n  location:\
    \ variable words of type ArrayList<String>\n/tmp/tmpg1x5jw58.java:22: error: array\
    \ required, but ArrayList<String> found\n                if(!words[j].contains(i))\n\
    \                         ^\nNote: /tmp/tmpg1x5jw58.java uses unchecked or unsafe\
    \ operations.\nNote: Recompile with -Xlint:unchecked for details.\n3 errors\n"
  stdout: ''
  timestamp: 1660011708
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Set<String> set = new HashSet<>();\n        ArrayList<String>\
    \ dup = new ArrayList<>();\n        for (String string : words) {\n          \
    \  for (int i = 0; i < string.length(); i++) {\n                if (set.add((string).substring(i,\
    \ i+1))) {\n                    dup.add(string);\n                    break;\n\
    \                }\n            }\n        }\n        Collections.sort(dup);\n\
    \        if (dup.size() > 1)\n            return dup.get(0);\n        return \"\
    \";\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptvnzzmi_.java:33)\n"
  stdout: ''
  timestamp: 1660011709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = 0;\n        String answer = \"\";\n        for (String\
    \ word : words) {\n            int numChar = word.length();\n            if (numChar\
    \ > max) {\n                max = numChar;\n                answer = word;\n \
    \           }\n        }\n        return answer;\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmply5rcdc8.java:30)\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int count = new HashMap<>();\n        for (String word : words)\
    \ {\n            for (int i = 0; i < word.length(); i++) {\n                int\
    \ c = count.get(word.charAt(i));\n                if (c == null) {\n         \
    \           count.put(word.charAt(i), 1);\n                } else {\n        \
    \            count.put(word.charAt(i), c + 1);\n                }\n          \
    \  }\n        }\n\n        int maxCount = Integer.MIN_VALUE;\n        String maxWord\
    \ = \"\";\n\n        for (Map.Entry entry : count.entrySet()) {\n            int\
    \ count = entry.getValue();\n            if (count > maxCount) {\n           \
    \     maxCount = count;\n                maxWord = entry.getKey();\n         \
    \   }\n        }\n\n        return maxWord;\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvhcpp7h1.java:17: error: incompatible types: cannot infer type\
    \ arguments for HashMap<>\n        int count = new HashMap<>();\n            \
    \                   ^\n    reason: no instance(s) of type variable(s) K,V exist\
    \ so that HashMap<K,V> conforms to int\n  where K,V are type-variables:\n    K\
    \ extends Object declared in class HashMap\n    V extends Object declared in class\
    \ HashMap\n/tmp/tmpvhcpp7h1.java:20: error: int cannot be dereferenced\n     \
    \           int c = count.get(word.charAt(i));\n                             ^\n\
    /tmp/tmpvhcpp7h1.java:21: error: bad operand types for binary operator '=='\n\
    \                if (c == null) {\n                      ^\n  first type:  int\n\
    \  second type: <null>\n/tmp/tmpvhcpp7h1.java:22: error: int cannot be dereferenced\n\
    \                    count.put(word.charAt(i), 1);\n                         ^\n\
    /tmp/tmpvhcpp7h1.java:24: error: int cannot be dereferenced\n                \
    \    count.put(word.charAt(i), c + 1);\n                         ^\n/tmp/tmpvhcpp7h1.java:32:\
    \ error: int cannot be dereferenced\n        for (Map.Entry entry : count.entrySet())\
    \ {\n                                    ^\n/tmp/tmpvhcpp7h1.java:33: error: variable\
    \ count is already defined in method findMax(ArrayList<String>)\n            int\
    \ count = entry.getValue();\n                ^\n/tmp/tmpvhcpp7h1.java:33: error:\
    \ incompatible types: Object cannot be converted to int\n            int count\
    \ = entry.getValue();\n                                      ^\n/tmp/tmpvhcpp7h1.java:36:\
    \ error: incompatible types: Object cannot be converted to String\n          \
    \      maxWord = entry.getKey();\n                                      ^\n9 errors\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Create a map to count the character for each string.\n\
    \        Map<String, Integer> map = new HashMap<String, Integer>();\n        for\
    \ (String w : words) {\n            if (map.containsKey(w)) {\n              \
    \  map.put(w, map.get(w) + 1);\n            } else {\n                map.put(w,\
    \ 1);\n            }\n        }\n\n        // Find maximum\n        Integer maxValue\
    \ = 0;\n        String maxWord = \"\";\n        for (String word : map.keySet())\
    \ {\n            if (maxValue < map.get(word)) {\n                maxValue = map.get(word);\n\
    \                maxWord = word;\n            }\n        }\n\n        // If multiple\
    \ strings have maximum number of unique characters, return\n        // the one\
    \ which comes first in lexicographical order.\n        ArrayList<String> ordered\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (maxWord\
    \ == word) {\n                ordered.add(word);\n            } else if (ordered.size()\
    \ > 0 && ordered.get(0).compareTo(word) < 0) {\n                ordered.add(word);\n\
    \            }\n        }\n        return ordered.get(0); // return the first\
    \ string as our answer\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp479jhrb3.java:51)\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int count[] = new int[256];\n        for (String word : words)\
    \ {\n            int i;\n            for (i = 0; i < word.length(); i++) {\n \
    \               count[word.charAt(i)]++;\n            }\n        }\n        int\
    \ maxCount = -Integer.MAX_VALUE;\n        String max = \"\";\n        for (String\
    \ word : words) {\n            int count = count[word.charAt(0)];\n          \
    \  for (int i = 1; i < word.length(); i++) {\n                count += count[word.charAt(i)];\n\
    \                if (count > maxCount) {\n                    maxCount = count;\n\
    \                    max = word;\n                }\n            }\n        }\n\
    \        return max;\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpygwanqdt.java:27: error: variable count is already defined in method\
    \ findMax(ArrayList<String>)\n            int count = count[word.charAt(0)];\n\
    \                ^\n/tmp/tmpygwanqdt.java:27: error: array required, but int found\n\
    \            int count = count[word.charAt(0)];\n                            \
    \ ^\n/tmp/tmpygwanqdt.java:29: error: array required, but int found\n        \
    \        count += count[word.charAt(i)];\n                              ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String word : words) {\n            Integer count = counts.getOrDefault(word,\
    \ 0);\n            counts.put(word, ++count);\n        }\n        \n        //\
    \ Sort the keys of counts based on the number of occurrences\n        List<String>\
    \ sortedKeys = counts.entrySet().stream()\n            .sorted(Map.Entry.comparingByValue())\n\
    \            .map(Map.Entry::getKey)\n            .collect(Collectors.toList());\n\
    \        \n        // Return the element with the highest count\n        return\
    \ sortedKeys.get(0);\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0i_ay4_4.java:34)\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int maxLength = 1;\n        Collections.sort(words);\n   \
    \     int maxIndex = 0;\n        for (int i = 0; i < words.size(); i++) {\n  \
    \          if (words.get(i).length() > maxLength) {\n                maxLength\
    \ = words.get(i).length();\n                maxIndex = i;\n            }\n   \
    \     }\n        return words.get(maxIndex);\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7egyyyss.java:36)\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            for (int i = 0; i < word.length(); i++) {\n   \
    \             String key = word.substring(0, i);\n                if (map.get(key)\
    \ == null) map.put(key, 0);\n                map.put(key, map.get(key) + 1);\n\
    \            }\n        }\n        System.out.println(map);\n        Iterator<String>\
    \ it = words.iterator();\n        String max = null;\n        int maxCount = 0;\n\
    \        while (it.hasNext()) {\n            String word = it.next();\n      \
    \      int count = map.get(word);\n            if (count > maxCount) {\n     \
    \           max = word;\n                maxCount = count;\n            }\n  \
    \      }\n        return max;\n}\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.findMax(tmpc9zi9j1a.java:31)\n\tat Problem.main(tmpc9zi9j1a.java:40)\n"
  stdout: '{=3, str=1, st=1, na=1, s=1, nam=1, strin=1, n=1, stri=1, o=1}

    '
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        if (words == null || words.size() < 1) {\n            return\
    \ \"\";\n        }\n        Map<String, Integer> wordMap = new HashMap<>();\n\
    \        for (String word : words) {\n            Integer count = wordMap.getOrDefault(word,\
    \ 0);\n            wordMap.put(word, count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(wordMap.values());\n        if (maxCount == null || maxCount\
    \ < 1) {\n            return \"\";\n        }\n        ArrayList<String> maxWords\
    \ = new ArrayList<>();\n        for (String word : wordMap.values()) {\n     \
    \       if (word == maxCount) {\n                maxWords.add(word);\n       \
    \     }\n        }\n        return Collections.max(maxWords, (a, b) -> {\n   \
    \         return a.compareTo(b);\n        }).orElse(\"\");\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkn5lqz07.java:30: error: incompatible types: Integer cannot be\
    \ converted to String\n        for (String word : wordMap.values()) {\n      \
    \                                   ^\n/tmp/tmpkn5lqz07.java:31: error: incomparable\
    \ types: String and Integer\n            if (word == maxCount) {\n           \
    \          ^\n/tmp/tmpkn5lqz07.java:37: error: cannot find symbol\n        }).orElse(\"\
    \");\n          ^\n  symbol:   method orElse(String)\n  location: class String\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // TODO: Fill the body of the function.\n        String max\
    \ = \"\";\n        HashMap<Character, Integer> charCountMap = new HashMap<>();\n\
    \        for(String word: words) {\n            for (char c: word.toCharArray())\
    \ {\n                if (!charCountMap.containsKey(c)) {\n                   \
    \ charCountMap.put(c, 1);\n                } else {\n                    charCountMap.put(c,\
    \ charCountMap.get(c) + 1);\n                }\n            }\n        }\n   \
    \     if (charCountMap.values().stream().max().orElse(0) != 0) {\n           \
    \ max = charCountMap.entrySet().stream().filter(e -> e.getValue() == charCountMap.values().stream().max().orElse(0)).map(Map.Entry::getKey).findFirst().orElse(\"\
    \");\n        }\n        return max;\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6w9alymp.java:29: error: method max in interface Stream<T> cannot\
    \ be applied to given types;\n        if (charCountMap.values().stream().max().orElse(0)\
    \ != 0) {\n                                          ^\n  required: Comparator<?\
    \ super Integer>\n  found:    no arguments\n  reason: actual and formal argument\
    \ lists differ in length\n  where T is a type-variable:\n    T extends Object\
    \ declared in interface Stream\n/tmp/tmp6w9alymp.java:30: error: method max in\
    \ interface Stream<T> cannot be applied to given types;\n            max = charCountMap.entrySet().stream().filter(e\
    \ -> e.getValue() == charCountMap.values().stream().max().orElse(0)).map(Map.Entry::getKey).findFirst().orElse(\"\
    \");\n                                                                       \
    \                                      ^\n  required: Comparator<? super Integer>\n\
    \  found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where T is a type-variable:\n    T extends Object declared in interface\
    \ Stream\n/tmp/tmp6w9alymp.java:30: error: incompatible types: String cannot be\
    \ converted to Character\n            max = charCountMap.entrySet().stream().filter(e\
    \ -> e.getValue() == charCountMap.values().stream().max().orElse(0)).map(Map.Entry::getKey).findFirst().orElse(\"\
    \");\n                                                                       \
    \                                                                            \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Set<String> unique = new HashSet<>();\n        for(String\
    \ word : words) {\n            unique.add(word);\n        }\n        int max =\
    \ 0;\n        for(String word : unique) {\n            int count = 1;\n      \
    \      for(String s : words) {\n                if(s.equals(word)) {\n       \
    \             count++;\n                }\n            }\n            if(count\
    \ > max) {\n                max = count;\n            }\n        }\n        return\
    \ unique.size() > max ? unique.iterator().next() : \"\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpudkuelg5.java:37)\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        List<String> sorted = new ArrayList<>();\n        HashMap<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       if (map.containsKey(word)) {\n                map.put(word, map.get(word)\
    \ + 1);\n            } else {\n                map.put(word, 1);\n           \
    \ }\n        }\n        map.entrySet().stream().sorted(Map.Entry.comparingByValue())\n\
    \                .map(Map.Entry::getKey).forEach(s -> sorted.add(s));\n      \
    \  return sorted.isEmpty() ? \"\" : sorted.get(sorted.size() - 1);\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdrb17m4x.java:31)\n"
  stdout: ''
  timestamp: 1660011711
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // TODO: Write your code here.\n        int max = 0;\n   \
    \     String maxString = \"\";\n        for(String word: words) {\n          \
    \  int currentCount = 1;\n            for(char c: word.toCharArray()) {\n    \
    \            currentCount *= word.toCharArray().length;\n            }\n     \
    \       if(currentCount > max) {\n                max = currentCount;\n      \
    \          maxString = word;\n            }\n        }\n        return maxString;\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_sk6y43.java:34)\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        HashMap<String, Integer> counter = new HashMap<>();\n    \
    \    for (String word : words) {\n            int count = counter.get(word);\n\
    \            if (count == null || count > word.length()) {\n                counter.put(word,\
    \ word.length());\n            }\n        }\n        Iterator<String> iterator\
    \ = counter.keySet().iterator();\n        if (iterator.hasNext()) {\n        \
    \    String next = iterator.next();\n            while (iterator.hasNext()) {\n\
    \                String first = iterator.next();\n                int count2 =\
    \ counter.get(first);\n                if (count2 == 0 || count2 > counter.get(next))\
    \ {\n                    counter.put(first, counter.get(next));\n            \
    \    }\n                next = first;\n            }\n            return counter.get(next)\
    \ + \"\";\n        }\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe0n6ah9n.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null || count > word.length()) {\n          \
    \            ^\n  first type:  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Your code here\n        \n        // Initialize variables\n\
    \        \n        int uniqueCharacterCount = 0;\n        int maxCharacterCount\
    \ = 0;\n        \n        // Loop over all words\n        \n        for(int i\
    \ = 0; i < words.size(); i++) {\n            String word = words.get(i);\n   \
    \         \n            // Initialize variables\n            \n            String\
    \ tempWord = \"\";\n            \n            // Loop over all letters of each\
    \ word\n            \n            for(int j = 0; j < word.length(); j++) {\n \
    \               char letter = word.charAt(j);\n                \n            \
    \    // Check to see if letter has already been used\n                \n     \
    \           if(tempWord.contains(letter) == true) {\n                    uniqueCharacterCount++;\n\
    \                } else {\n                    uniqueCharacterCount = 0;\n   \
    \                 tempWord += letter;\n                }\n                \n \
    \               // Check to see if the current letter has the maximum count of\
    \ unique characters\n                \n                if(uniqueCharacterCount\
    \ > maxCharacterCount) {\n                    maxCharacterCount = uniqueCharacterCount;\n\
    \                }\n            }\n        }\n        \n        // Return the\
    \ word with maximum number of unique characters\n        \n        return words.get(0);\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4gr3awdc.java:40: error: incompatible types: char cannot be converted\
    \ to CharSequence\n                if(tempWord.contains(letter) == true) {\n \
    \                                    ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        ArrayList<String> maxWord = new ArrayList<String>();\n   \
    \     ArrayList<String> maxCount = new ArrayList<String>();\n        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       if (map.containsKey(word)) {\n                Integer count = map.get(word);\n\
    \                map.put(word, count + 1);\n            } else {\n           \
    \     map.put(word, 1);\n            }\n        }\n        for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            int count = entry.getValue();\n\
    \            if (count > maxCount.get(0)) {\n                maxWord.add(entry.getKey());\n\
    \                maxCount.add(String.valueOf(count));\n            }\n       \
    \ }\n        if (maxCount.size() > 0) {\n            return maxWord.get(0);\n\
    \        }\n        return \"\";\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm4jhvdc0.java:30: error: bad operand types for binary operator\
    \ '>'\n            if (count > maxCount.get(0)) {\n                      ^\n \
    \ first type:  int\n  second type: String\n1 error\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new TreeMap<>();\n        for (String\
    \ word : words) {\n            int count = getWordCount(word, map);\n        \
    \    if (count > map.get(word)) {\n                map.put(word, count);\n   \
    \         }\n        }\n        return map.isEmpty() ? \"\" : getWordWithMaxCount(map,\
    \ words);\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwncxjrr9.java:19: error: cannot find symbol\n            int count\
    \ = getWordCount(word, map);\n                        ^\n  symbol:   method getWordCount(String,Map<String,Integer>)\n\
    \  location: class Problem\n/tmp/tmpwncxjrr9.java:24: error: cannot find symbol\n\
    \        return map.isEmpty() ? \"\" : getWordWithMaxCount(map, words);\n    \
    \                                ^\n  symbol:   method getWordWithMaxCount(Map<String,Integer>,ArrayList<String>)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        if (words.size() == 0) {\n            return \"\";\n     \
    \   }\n        // Use a set to count the characters, which is faster than ArrayList.\n\
    \        Set<Character> counts = new HashSet<>();\n        for (String word :\
    \ words) {\n            for (char c : word.toCharArray()) {\n                counts.put(c);\n\
    \            }\n        }\n        Integer maxCount = null;\n        Integer minCount\
    \ = Integer.MAX_VALUE;\n        String maxWord = null;\n        for (String word\
    \ : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                count = (counts.contains(c)) ? count+1 : count;\n       \
    \     }\n            if (count > maxCount) {\n                maxCount = count;\n\
    \                maxWord = word;\n            } else if (count < minCount) {\n\
    \                minCount = count;\n            }\n        }\n        if (maxCount\
    \ == null || maxCount.intValue() >= minCount.intValue()) {\n            return\
    \ maxWord;\n        }\n        // If the max count is zero, the max word is empty.\n\
    \        return \"\";\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpao81emks.java:24: error: cannot find symbol\n                counts.put(c);\n\
    \                      ^\n  symbol:   method put(char)\n  location: variable counts\
    \ of type Set<Character>\n1 error\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        String max = \"\";\n        ArrayList<String> unique = new\
    \ ArrayList<>();\n\n        for(String word : words) {\n            char [] chars\
    \ = word.toCharArray();\n            String s = \"\";\n            for (int i\
    \ = 0; i < chars.length; i++) {\n                s = s + chars[i];\n         \
    \   }\n            if (!unique.contains(s)) {\n                unique.add(s);\n\
    \                if (s.length() > max.length()) {\n                    max = s;\n\
    \                }\n            }\n        }\n        return max;\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ljln8li.java:37)\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = 0;\n        String result = \"\";\n        for (String\
    \ word : words) {\n            Set<String> uniqueChars = new HashSet<>();\n  \
    \          for (char c : word.toCharArray()) {\n                if (!uniqueChars.contains(String.valueOf(c)))\
    \ {\n                    uniqueChars.add(String.valueOf(c));\n               \
    \ }\n            }\n            if (uniqueChars.size() > max) {\n            \
    \    result = word;\n                max = uniqueChars.size();\n            }\
    \ else if (uniqueChars.size() == max) {\n                if (uniqueChars.contains(word))\
    \ {\n                    result = word;\n                }\n            }\n  \
    \      }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcvb39prv.java:39)\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        String result = \"\";\n        Map<String, Integer> wordsMap\
    \ = new HashMap<>();\n        for(int i = 0; i < words.size(); i++) {\n      \
    \      String word = words.get(i);\n            Integer count = wordsMap.getOrDefault(word,\
    \ 0);\n            wordsMap.put(word, count + 1);\n        }\n        for(Map.Entry<String,\
    \ Integer> entry : wordsMap.entrySet()) {\n            if(entry.getValue() > result.length())\
    \ {\n                result = entry.getKey();\n            }\n        }\n    \
    \    return result;\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpymv4os0v.java:33)\n"
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        if (words == null || words.size() == 0) {\n            return\
    \ \"\";\n        }\n\n        TreeMap<Integer, String> wordsCount = new TreeMap<Integer,\
    \ String>();\n\n        // Create a map of all unique characters and their count\n\
    \        for (String word : words) {\n            for (char letter : word.toCharArray())\
    \ {\n                int count = 0;\n                if (wordsCount.containsKey(letter))\
    \ {\n                    count = wordsCount.get(letter);\n                }\n\n\
    \                wordsCount.put(letter, ++count);\n            }\n        }\n\n\
    \        // If there are multiple words with max number of unique characters,\
    \ return the first one\n        if (wordsCount.size() > 1) {\n            int\
    \ maxCount = wordsCount.lastKey();\n            String maxWord = wordsCount.get(maxCount);\n\
    \            int lowestCount = maxCount - 1;\n            for (String word : words)\
    \ {\n                int count = 0;\n                if (wordsCount.containsKey(word))\
    \ {\n                    count = wordsCount.get(word);\n                }\n\n\
    \                if (count == maxCount) {\n                    lowestCount = Math.min(lowestCount,\
    \ count - 1);\n                    if (lowestCount == 0) {\n                 \
    \       return word;\n                    }\n                }\n            }\n\
    \        }\n\n        // If there are no words with max number of unique characters,\
    \ return an empty string\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8vw73t8l.java:28: error: incompatible types: String cannot be converted\
    \ to int\n                    count = wordsCount.get(letter);\n              \
    \                            ^\n/tmp/tmp8vw73t8l.java:31: error: incompatible\
    \ types: char cannot be converted to Integer\n                wordsCount.put(letter,\
    \ ++count);\n                               ^\n/tmp/tmp8vw73t8l.java:43: error:\
    \ incompatible types: String cannot be converted to int\n                    count\
    \ = wordsCount.get(word);\n                                          ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n3 errors\n"
  stdout: ''
  timestamp: 1660011711
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // write your code here\n        \n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpqrxnvtt3.java:19: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011710
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> charMap = new HashMap<>();\n        for\
    \ (String word : words) {\n            for (int i = 0; i < word.length(); i++)\
    \ {\n                charMap.put(word.substring(i, i + 1), charMap.get(word.substring(i,\
    \ i + 1)) + 1);\n            }\n        }\n        \n        // sort the map and\
    \ find the max value\n        List<String> result = new ArrayList<>(charMap.entrySet());\n\
    \        result.sort(Comparator.comparing(Map.Entry::getValue).reversed());\n\
    \        \n        // if we have multiple strings, select the one which comes\
    \ first in lexicographical order\n        if (result.size() > 1) {\n         \
    \   return result.get(0);\n        } else {\n            return \"\";\n      \
    \  }\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn85qjmsc.java:25: error: incompatible types: cannot infer type\
    \ arguments for ArrayList<>\n        List<String> result = new ArrayList<>(charMap.entrySet());\n\
    \                                           ^\n    reason: inference variable\
    \ E has incompatible bounds\n      equality constraints: String\n      lower bounds:\
    \ Entry<String,Integer>\n  where E is a type-variable:\n    E extends Object declared\
    \ in class ArrayList\n/tmp/tmpn85qjmsc.java:26: error: incompatible types: cannot\
    \ infer type-variable(s) T,U\n        result.sort(Comparator.comparing(Map.Entry::getValue).reversed());\n\
    \                                        ^\n    (argument mismatch; invalid method\
    \ reference\n      method getValue in interface Entry<K,V> cannot be applied to\
    \ given types\n        required: no arguments\n        found:    Object\n    \
    \    reason: actual and formal argument lists differ in length)\n  where T,U,K,V\
    \ are type-variables:\n    T extends Object declared in method <T,U>comparing(Function<?\
    \ super T,? extends U>)\n    U extends Comparable<? super U> declared in method\
    \ <T,U>comparing(Function<? super T,? extends U>)\n    K extends Object declared\
    \ in interface Entry\n    V extends Object declared in interface Entry\n2 errors\n"
  stdout: ''
  timestamp: 1660011711
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // sort the array in reverse order\n        Collections.sort(words,\
    \ (o1, o2) -> {\n            return o2.length() - o1.length();\n        });\n\
    \        int maxCount = 0;\n        Iterator<String> it = words.iterator();\n\
    \        while (it.hasNext()) {\n            String word = it.next();\n      \
    \      int count = 1;\n            while (it.hasNext()) {\n                if\
    \ (word.equalsIgnoreCase(it.next())) {\n                    count++;\n       \
    \         }\n            }\n            if (count > maxCount) {\n            \
    \    maxCount = count;\n            }\n        }\n        // return the word with\
    \ maximum number of unique characters\n        if (maxCount == words.size()) {\n\
    \            return words.get(0);\n        }\n        return words.get(maxCount\
    \ - 1);\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpstg284kb.java:43)\n"
  stdout: ''
  timestamp: 1660011711
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Set<String> s = new HashSet<>();\n        int maxCount = 0;\n\
    \        for (String w : words) {\n            if (s.contains(w)) {\n        \
    \        maxCount++;\n            } else {\n                s.add(w);\n      \
    \          maxCount = 1;\n            }\n        }\n        return words.get(words.indexOf(s.toArray(new\
    \ String[s.size()])[0]));\n}\n    public static void main(String[] args) {\n \
    \   assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_f7cgxa7.java:31)\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<Integer, Integer> charMap = new HashMap<>();\n       \
    \ for (String word : words) {\n            charMap.merge(Arrays.asList(word).stream().distinct().count(),\
    \ 1, Integer::sum);\n        }\n        int maxVal = Collections.max(charMap.values());\n\
    \        for (Map.Entry<Integer, Integer> entry : charMap.entrySet()) {\n    \
    \        if (entry.getValue() == maxVal) {\n                return entry.getKey().toString();\n\
    \            }\n        }\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprxdh_092.java:19: error: incompatible types: long cannot be converted\
    \ to Integer\n            charMap.merge(Arrays.asList(word).stream().distinct().count(),\
    \ 1, Integer::sum);\n                                                        \
    \               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011711
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        TreeMap<String,Integer> map = new TreeMap<String,Integer>();\n\
    \        for(String word: words) {\n            map.put(word,map.getOrDefault(word,0)+1);\n\
    \        }\n        String maxWord = Collections.max(map.keySet());\n        int\
    \ maxCount = map.get(maxWord);\n        for(String word : words) {\n         \
    \   int count = map.getOrDefault(word,0);\n            if(maxCount < count) {\n\
    \                maxWord = word;\n                maxCount = count;\n        \
    \    }\n        }\n        return maxWord;\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgytj9ecc.java:34)\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // TODO: Complete the implementation.\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpbwbk_0zb.java:18: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int maxCount = 0;\n        String max = null;\n        for\
    \ (String word : words) {\n            int count = getUniqueCharCount(word);\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            max = word;\n            }\n        }\n        if (maxCount == 0)\
    \ {\n            return \"\";\n        }\n        if (maxCount == 1) {\n     \
    \       return max;\n        }\n        return max;\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc7hyjrjf.java:20: error: cannot find symbol\n            int count\
    \ = getUniqueCharCount(word);\n                        ^\n  symbol:   method getUniqueCharCount(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // TODO: write your logic here\n        return words.get(0);\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxlhz_8pj.java:21)\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Collections.sort(words);\n        int maxSize = 0, maxCount\
    \ = 0;\n        for (String str : words) {\n            char[] chs = str.toCharArray();\n\
    \            int count = 0;\n            for (char c : chs) {\n              \
    \  count += 1;\n                if (count > maxCount) {\n                    maxCount\
    \ = count;\n                    maxSize = chs.length;\n                }\n   \
    \         }\n        }\n        return maxSize <= maxCount ? null : words.get(0);\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.findMax(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpbbcs2png.java:33)\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int maxUniqueChars = Collections.frequency(words, \"\");\n\
    \        int maxIndex = 0;\n        int maxValue = 0;\n\n        for (int i =\
    \ 0; i < words.size(); i++) {\n            String word = words.get(i);\n     \
    \       int countUniqueChars = Collections.frequency(words, word);\n\n       \
    \     if (countUniqueChars > maxUniqueChars) {\n                maxIndex = i;\n\
    \                maxUniqueChars = countUniqueChars;\n            }\n        }\n\
    \n        return words.get(maxIndex);\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm1b_w9b8.java:34)\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // write your code here\n        int max = Collections.max(words,\
    \ (Comparator<String>) String::length).length();\n        System.out.println(max);\n\
    \        System.out.println(Collections.max(words, (Comparator<String>) String::length));\n\
    \        for (String s:words){\n            int n = s.length();\n            if\
    \ (n > max){\n                max = n;\n            }\n        }\n        for\
    \ (String s:words){\n            if (s.length() == max){\n                return\
    \ s;\n            }\n        }\n        return \"\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpompzusuc.java:18: error: incompatible types: invalid method reference\n\
    \        int max = Collections.max(words, (Comparator<String>) String::length).length();\n\
    \                                                              ^\n    method length\
    \ in class String cannot be applied to given types\n      required: no arguments\n\
    \      found:    String,String\n      reason: actual and formal argument lists\
    \ differ in length\n/tmp/tmpompzusuc.java:20: error: incompatible types: invalid\
    \ method reference\n        System.out.println(Collections.max(words, (Comparator<String>)\
    \ String::length));\n                                                        \
    \               ^\n    method length in class String cannot be applied to given\
    \ types\n      required: no arguments\n      found:    String,String\n      reason:\
    \ actual and formal argument lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int[] counts = new int[256];\n        for( String word: words\
    \ ) {\n            for( int ch: word.toCharArray() ) {\n                counts[ch]++;\n\
    \            }\n        }\n        int max_count = -1;\n        for( int i = 1;\
    \ i <= 256; i++) {\n            if( counts[i] > max_count ) {\n              \
    \  max_count = counts[i];\n                String result = \"\";\n           \
    \     for( int j = 0; j <= i; j++) {\n                    result += String.valueOf(j);\n\
    \                }\n                return result;\n            }\n        }\n\
    \        return \"\";\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptylrp5vh.java:37)\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        String[] arr = words.toArray(new String[words.size()]);\n\
    \        String[] arr1 = new String[arr.length];\n        Arrays.sort(arr);\n\
    \        for (int i = 0; i < arr.length; i++) {\n            String k = arr[i];\n\
    \            int count = 0;\n            for (int j = 0; j < arr1.length; j++)\
    \ {\n                if (k.compareTo(arr1[j]) == 0) {\n                    count++;\n\
    \                }\n            }\n            if (count == arr1.length) {\n \
    \               arr1[i] = k;\n            }\n        }\n        String result\
    \ = \"\";\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i]\
    \ != \"\") {\n                result = arr1[i];\n                break;\n    \
    \        }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot read\
    \ field \"value\" because \"anotherString\" is null\n\tat java.base/java.lang.String.compareTo(String.java:2015)\n\
    \tat Problem.findMax(tmpmhpvpgrv.java:24)\n\tat Problem.main(tmpmhpvpgrv.java:42)\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        if (words.size() < 1) {\n            return \"\";\n      \
    \  }\n        Set<Character> characters = new HashSet<>();\n        int maxCount\
    \ = 0;\n        for(String word : words) {\n            for (char character :\
    \ word.toCharArray()) {\n                characters.add(character);\n        \
    \    }\n            int count = characters.size();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n            }\n        }\n        if (maxCount\
    \ > 1) {\n            String maxWord = null;\n            for(String word : words)\
    \ {\n                int count = characters.size();\n                if (count\
    \ > 1) {\n                    if (maxCount == count) {\n                     \
    \   maxWord = word;\n                    }\n                }\n            }\n\
    \            return maxWord;\n        } else {\n            return words.get(0);\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjqfdqse7.java:48)\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<String, Integer>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                if (!map.containsKey(word.substring(0,\
    \ i))) {\n                    map.put(word.substring(0, i), 1);\n            \
    \    } else {\n                    map.put(word.substring(0, i), map.get(word.substring(0,\
    \ i)) + 1);\n                }\n            }\n        }\n\n        for (String\
    \ key : map.keySet()) {\n            Integer val = map.get(key);\n           \
    \ if (val > 0) {\n                if (val > map.get(key)) {\n                \
    \    map.put(key, val);\n                }\n            }\n        }\n\n     \
    \   // This will be a list with words with maximum count of unique characters\
    \ in lexicographical order\n        List<String> maxList = new ArrayList<>();\n\
    \        for (String key : map.keySet()) {\n            Integer val = map.get(key);\n\
    \            if (val > 0) {\n                maxList.add(key);\n            }\n\
    \        }\n\n        // For finding max we always take first element from maxList\
    \ in lexicographical order\n        Optional<String> maxItem = maxList.stream().reduce((x,\
    \ y) -> x.compareTo(y)).orElse(maxList.get(0));\n        return maxItem;\n}\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpezqxgm7g.java:48: error: incompatible types: bad return type in\
    \ lambda expression\n        Optional<String> maxItem = maxList.stream().reduce((x,\
    \ y) -> x.compareTo(y)).orElse(maxList.get(0));\n                            \
    \                                                    ^\n    int cannot be converted\
    \ to String\n/tmp/tmpezqxgm7g.java:49: error: incompatible types: Optional<String>\
    \ cannot be converted to String\n        return maxItem;\n               ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Set<String> s = new HashSet<>();\n        int max = 0;\n \
    \       for (String word : words) {\n            int n = word.chars().distinct().count();\n\
    \            if (n > max) {\n                max = n;\n                s.clear();\n\
    \            }\n            s.add(word);\n        }\n        return s.isEmpty()\
    \ ? null : Collections.max(s);\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfb93rfu3.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int n = word.chars().distinct().count();\n   \
    \                                              ^\n1 error\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Write your code here\n        int max = 0;\n        int\
    \ maxCount = 0;\n        String word = \"\";\n        for (String word : words)\
    \ {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char letter = word.charAt(i);\n                if (letter\
    \ == word.charAt(0)) {\n                    count++;\n                }\n    \
    \        }\n            if (count > maxCount) {\n                maxCount = count;\n\
    \                word = word;\n            }\n        }\n        return word;\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_xpemfu.java:21: error: variable word is already defined in method\
    \ findMax(ArrayList<String>)\n        for (String word : words) {\n          \
    \          ^\n1 error\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Collections.sort(words);\n\n        return words.get(0);\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpylm1vo2y.java:22)\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        List<String> uniques = new ArrayList<>();\n        Set<Character>\
    \ charSet = new HashSet<>();\n        uniques.addAll(words);\n        charSet.addAll(words.stream().flatMap(w\
    \ -> w.chars().distinct().boxed().collect(Collectors.toSet())).collect(Collectors.toSet()));\n\
    \n        Set<String> charList = new HashSet<>();\n        charSet.removeAll(uniques);\n\
    \        charList.addAll(uniques);\n\n        Iterator<String> it = charList.iterator();\n\
    \        String temp = \"\";\n\n        while (it.hasNext()) {\n            temp\
    \ = temp + it.next();\n        }\n\n        for (Iterator<String> i = charSet.iterator();\
    \ i.hasNext();) {\n            if (i.next().equals(temp)) {\n                i.remove();\n\
    \            }\n        }\n\n        return temp;\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe0ifibee.java:20: error: incompatible types: inference variable\
    \ R#1 has incompatible bounds\n        charSet.addAll(words.stream().flatMap(w\
    \ -> w.chars().distinct().boxed().collect(Collectors.toSet())).collect(Collectors.toSet()));\n\
    \                                             ^\n    equality constraints: Set<T#2>\n\
    \    lower bounds: Stream<? extends R#2>,Object\n  where R#1,A,T#1,T#2,R#2 are\
    \ type-variables:\n    R#1 extends Object declared in method <R#1,A>collect(Collector<?\
    \ super T#1,A,R#1>)\n    A extends Object declared in method <R#1,A>collect(Collector<?\
    \ super T#1,A,R#1>)\n    T#1 extends Object declared in interface Stream\n   \
    \ T#2 extends Object declared in method <T#2>toSet()\n    R#2 extends Object declared\
    \ in method <R#2>flatMap(Function<? super T#1,? extends Stream<? extends R#2>>)\n\
    /tmp/tmpe0ifibee.java:33: error: incompatible types: Iterator<Character> cannot\
    \ be converted to Iterator<String>\n        for (Iterator<String> i = charSet.iterator();\
    \ i.hasNext();) {\n                                                  ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        ArrayList<String> res = new ArrayList<>();\n        int max_char_sum\
    \ = 0;\n        String max_word = \"\";\n        for (String word : words) {\n\
    \            int charCount = word.length();\n            if (charCount > max_char_sum)\
    \ {\n                max_char_sum = charCount;\n                max_word = word;\n\
    \            }\n        }\n        if (max_char_sum > 0) {\n            res.add(max_word);\n\
    \            Collections.sort(res);\n        }\n        return res.isEmpty() ?\
    \ \"\" : res.get(0);\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_2w2hbtj.java:35)\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> countMap = new HashMap<>();\n       \
    \ for (String word : words) {\n            int count = countMap.get(word);\n \
    \           if (count != null)\n                countMap.put(word, count + 1);\n\
    \            else\n                countMap.put(word, 1);\n        }\n       \
    \ return counts.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).get().getKey();\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqeormm6m.java:20: error: bad operand types for binary operator\
    \ '!='\n            if (count != null)\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpqeormm6m.java:25: error: cannot find symbol\n\
    \        return counts.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).get().getKey();\n\
    \               ^\n  symbol:   variable counts\n  location: class Problem\n/tmp/tmpqeormm6m.java:25:\
    \ error: incompatible types: cannot infer type-variable(s) T,U\n        return\
    \ counts.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).get().getKey();\n\
    \                                                                  ^\n    (argument\
    \ mismatch; invalid method reference\n      method getValue in interface Entry<K,V>\
    \ cannot be applied to given types\n        required: no arguments\n        found:\
    \    Object\n        reason: actual and formal argument lists differ in length)\n\
    \  where T,U,K,V are type-variables:\n    T extends Object declared in method\
    \ <T,U>comparing(Function<? super T,? extends U>)\n    U extends Comparable<?\
    \ super U> declared in method <T,U>comparing(Function<? super T,? extends U>)\n\
    \    K extends Object declared in interface Entry\n    V extends Object declared\
    \ in interface Entry\n3 errors\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Write code here\n        ArrayList<String> temp = new ArrayList<String>();\n\
    \        for(int i = 0;i < words.size();i++){\n            if(temp.contains(words.get(i))){\n\
    \                temp.remove(words.get(i));\n            }else{\n            \
    \    temp.add(words.get(i));\n            }\n        }\n        return words.get(0);\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy8va__ek.java:29)\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        \n        // Write your code here\n\n        String max =\
    \ null;\n        Map<String, Integer> countMap = new HashMap<>();\n        for\
    \ (String word : words) {\n            Integer count = countMap.get(word);\n \
    \           if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count += 1;\n            }\n            countMap.put(word,\
    \ count);\n        }\n        for (String word : countMap.keySet()) {\n      \
    \      if (countMap.get(word).equals(countMap.get(max))) {\n                max\
    \ = word;\n                break;\n            }\n        }\n        return max;\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.findMax(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmp9jsnqpcu.java:40)\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // your code here\n        int maxLen = 0;\n        String\
    \ maxWord = \"\";\n        for (String s : words) {\n            int len = s.length();\n\
    \            if (len > maxLen) {\n                maxLen = len;\n            \
    \    maxWord = s;\n            }\n        }\n        return maxWord;\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplg9hhjwa.java:31)\n"
  stdout: ''
  timestamp: 1660011712
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Set<Character> chars = new HashSet<>();\n        List<String>\
    \ strs = new ArrayList<>();\n        for (String str : words) {\n            chars.clear();\n\
    \            for (char ch : str.toCharArray()) {\n                chars.add(ch);\n\
    \            }\n            if (chars.size() > 0) {\n                strs.add(str);\n\
    \            }\n        }\n\n        int max = 0;\n        String maxStr = \"\"\
    ;\n        for (String str : strs) {\n            chars.clear();\n           \
    \ for (char ch : str.toCharArray()) {\n                chars.add(ch);\n      \
    \      }\n            if (chars.size() > max) {\n                max = chars.size();\n\
    \                maxStr = str;\n            }\n        }\n\n        return maxStr;\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6va13q5e.java:46)\n"
  stdout: ''
  timestamp: 1660011713
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        \n        if (words.size() == 0) return \"\";\n        \n\
    \        Map<String, Integer> charCounts = new HashMap<>();\n        \n      \
    \  for (String w : words) {\n            charCounts.put(w, charCounts.getOrDefault(w,\
    \ 0) + 1);\n        }\n        \n        Optional<String> maxChar = Optional.empty();\n\
    \        \n        for (int i = 0; i < charCounts.size(); i++) {\n           \
    \ int count = charCounts.get(i) + 1;\n            if (maxChar.isPresent() && count\
    \ > maxChar.get().getCount()) {\n                maxChar = Optional.empty();\n\
    \            } else if (count > maxChar.get().getCount()) {\n                maxChar\
    \ = Optional.of(charCounts.get(i));\n            }\n        }\n        \n    \
    \    if (maxChar.isPresent()) {\n            return maxChar.get();\n        }\
    \ else {\n            return findFirst(words);\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9njmmm0q.java:30: error: cannot find symbol\n            if (maxChar.isPresent()\
    \ && count > maxChar.get().getCount()) {\n                                   \
    \                         ^\n  symbol:   method getCount()\n  location: class\
    \ String\n/tmp/tmp9njmmm0q.java:32: error: cannot find symbol\n            } else\
    \ if (count > maxChar.get().getCount()) {\n                                  \
    \          ^\n  symbol:   method getCount()\n  location: class String\n/tmp/tmp9njmmm0q.java:33:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              maxChar = Optional.of(charCounts.get(i));\n                   \
    \                  ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    /tmp/tmp9njmmm0q.java:40: error: cannot find symbol\n            return findFirst(words);\n\
    \                   ^\n  symbol:   method findFirst(ArrayList<String>)\n  location:\
    \ class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011713
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.findMax(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmp0tn6pk10.java:20)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        List<String> max = new ArrayList<>();\n        words.stream().forEach(word\
    \ -> {\n            String tmp = word;\n            if (max.stream().noneMatch(x\
    \ -> x.equalsIgnoreCase(tmp))) {\n                max.add(tmp);\n            }\n\
    \        });\n        if (max.size() > 0) {\n            return max.stream().sorted(Comparator.reverseOrder()).findFirst().get();\n\
    \        }\n        return \"\";\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_dgek671.java:31)\n"
  stdout: ''
  timestamp: 1660011713
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Set<String> unique = new HashSet<>();\n        for (String\
    \ word: words) {\n            unique.addAll(word.split(\"\"));\n        }\n  \
    \      Collections.sort(unique, String::compareToIgnoreCase);\n        unique.stream()\n\
    \            .filter(unique::contains)\n            .min(Comparator.comparingInt(unique::length))\n\
    \            .ifPresent(str -> System.out.println(str));\n        return \"\"\
    ;\n}\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmow6to_o.java:19: error: incompatible types: String[] cannot be\
    \ converted to Collection<? extends String>\n            unique.addAll(word.split(\"\
    \"));\n                                    ^\n/tmp/tmpmow6to_o.java:21: error:\
    \ no suitable method found for sort(Set<String>,String::co[...]eCase)\n      \
    \  Collections.sort(unique, String::compareToIgnoreCase);\n                  \
    \ ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n      (cannot\
    \ infer type-variable(s) T#1\n        (actual and formal argument lists differ\
    \ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (argument\
    \ mismatch; Set<String> cannot be converted to List<T#2>))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmpmow6to_o.java:24: error: invalid method reference\n   \
    \         .min(Comparator.comparingInt(unique::length))\n                    \
    \                     ^\n  cannot find symbol\n    symbol:   method length()\n\
    \    location: interface Set<String>\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011713
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Solution code here\n        ArrayList<Integer> charCountList\
    \ = new ArrayList<>();\n        for(String s : words) {\n            charCountList.add(s.length());\n\
    \        }\n        int max = 0;\n        int maxIndex = 0;\n        for(int i\
    \ = 0 ; i < charCountList.size() ; i++) {\n            if(max < charCountList.get(i))\
    \ {\n                max = charCountList.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        return words.get(maxIndex);\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecoi0m51.java:34)\n"
  stdout: ''
  timestamp: 1660011713
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Arrays.sort(words);\n\n        int highestUnique = 0;\n  \
    \      String highestWord = \"\";\n\n        for(int i = 0; i< words.size(); i++){\n\
    \            int countUnique = words.get(i).chars().distinct().count();\n    \
    \        if (countUnique > highestUnique){\n                highestUnique = countUnique;\n\
    \                highestWord = words.get(i);\n            }\n        }\n     \
    \   return highestWord;\n}\n    public static void main(String[] args) {\n   \
    \ assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpksoy0fsp.java:17: error: no suitable method found for sort(ArrayList<String>)\n\
    \        Arrays.sort(words);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpksoy0fsp.java:23: error: incompatible types: possible lossy\
    \ conversion from long to int\n            int countUnique = words.get(i).chars().distinct().count();\n\
    \                                                                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011713
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Your code here\n        String max = \"\";\n        Map<String,\
    \ Integer> countMap = new HashMap<>();\n        for(String w: words){\n      \
    \      String s = w.length();\n            Integer count = countMap.get(s);\n\
    \            if(count != null){\n                if(count > countMap.get(max).intValue()){\n\
    \                    max= s;\n                }\n            }else{\n        \
    \        countMap.put(s,1);\n            }\n        }\n        return max;\n}\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp66sj_cbp.java:21: error: incompatible types: int cannot be converted\
    \ to String\n            String s = w.length();\n                            \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011713
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Write your code here.\n        \n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count > 0) {\n                map.put(word,\
    \ count-1);\n            } else {\n                map.put(word, 1);\n       \
    \     }\n        }\n        \n        int max = -1;\n        String maxWord =\
    \ \"\";\n        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count > max) {\n                max = count;\n              \
    \  maxWord = word;\n            }\n        }\n        return maxWord;\n}\n   \
    \ public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.findMax(tmp5kk4pzss.java:21)\n\tat Problem.main(tmp5kk4pzss.java:41)\n"
  stdout: ''
  timestamp: 1660011713
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // If no input word is given, return empty string\n      \
    \  if (words == null || words.isEmpty()) {\n            return \"\";\n       \
    \ }\n\n        // Create a map of unique characters. Initialize to empty map\n\
    \        Map<Character, Integer> characterCountMap = new HashMap<>();\n\n    \
    \    // Loop through the words and count the unique characters\n        for (String\
    \ word : words) {\n            for (char c : word.toCharArray()) {\n         \
    \       if (!characterCountMap.containsKey(c)) {\n                    // If character\
    \ is new and does not exist in the map, add it to map\n                    characterCountMap.put(c,\
    \ 1);\n                } else {\n                    // If character is new and\
    \ does exist in the map, increment the count in the map\n                    characterCountMap.put(c,\
    \ characterCountMap.get(c) + 1);\n                }\n            }\n        }\n\
    \n        // Iterate over map and find the max count character\n        int maxCount\
    \ = 0;\n        for (Character c : characterCountMap.keySet()) {\n           \
    \ if (characterCountMap.get(c) > maxCount) {\n                maxCount = characterCountMap.get(c);\n\
    \            }\n        }\n\n        // If there are multiple words with the max\
    \ count character, return first word lexicographically\n        // otherwise,\
    \ return empty string\n        if (maxCount > 1) {\n            return words.get(0);\n\
    \        } else {\n            return \"\";\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmu0bn3tp.java:55)\n"
  stdout: ''
  timestamp: 1660011713
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Arrays.sort(words);\n        HashSet<String> set = new HashSet<String>(words);\n\
    \        int count= 0;\n        for (int i=0; i<words.size(); i++) {\n       \
    \     if (set.contains(words.get(i))) {\n                count++;\n          \
    \  }\n        }\n        String[] arr = new String[count];\n        int index\
    \ = 0;\n        for (int i=0; i<words.size(); i++) {\n            if (set.contains(words.get(i)))\
    \ {\n                arr[index++] = words.get(i);\n            }\n        }\n\
    \        String result = \"\";\n        for (int i=0; i<arr.length; i++) {\n \
    \           int count = 0;\n            String temp = arr[i];\n            while\
    \ (temp.charAt(0) == temp.charAt(1))\n                temp = temp.substring(1);\n\
    \            while (temp.charAt(temp.length()-1) == temp.charAt(temp.length()-2))\n\
    \                temp = temp.substring(0, temp.length()-1);\n            while\
    \ (temp.charAt(0) == temp.charAt(temp.length()-1))\n                temp = temp.substring(1);\n\
    \            while (temp.charAt(temp.length()-1) == temp.charAt(temp.length()-2))\n\
    \                temp = temp.substring(0, temp.length()-1);\n            if (temp.charAt(0)\
    \ == temp.charAt(temp.length()-1))\n                temp = temp.substring(1);\n\
    \            if (temp.charAt(temp.length()-1) == temp.charAt(temp.length()-2))\n\
    \                temp = temp.substring(0, temp.length()-1);\n            for (int\
    \ j=0; j<temp.length(); j++) {\n                if (temp.charAt(j) == temp.charAt(temp.length()-1))\n\
    \                    count++;\n            }\n            if (count > result)\n\
    \                result = arr[i];\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjqdb2pig.java:17: error: no suitable method found for sort(ArrayList<String>)\n\
    \        Arrays.sort(words);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpjqdb2pig.java:34: error: variable count is already defined\
    \ in method findMax(ArrayList<String>)\n            int count = 0;\n         \
    \       ^\n/tmp/tmpjqdb2pig.java:52: error: bad operand types for binary operator\
    \ '>'\n            if (count > result)\n                      ^\n  first type:\
    \  int\n  second type: String\nNote: Some messages"
  stdout: ''
  timestamp: 1660011713
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        \n        String word = null;\n        int max = 0;\n    \
    \    for (String s: words) {\n            char[] arr = s.toCharArray();\n    \
    \        int count = 0;\n            for (char c : arr) {\n                if\
    \ (Character.isLetter(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max) {\n                max = count;\n\
    \                word = s;\n            }\n        }\n        return word;\n}\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl7g4ibyq.java:37)\n"
  stdout: ''
  timestamp: 1660011714
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int maxChar = 0;\n        String maxWord = \"\";\n       \
    \ String maxWord2 = \"\";\n        for(int i = 0; i < words.size(); i++) {\n \
    \           String currentWord = words.get(i);\n            int currentChar =\
    \ currentWord.length();\n            if(currentChar > maxChar) {\n           \
    \     maxChar = currentChar;\n                maxWord = currentWord;\n       \
    \     }\n        }\n        for(int j = 0; j < words.size(); j++) {\n        \
    \    String currentWord2 = words.get(j);\n            int currentChar2 = currentWord2.length();\n\
    \            if(currentChar2 > maxChar) {\n                maxChar2 = currentChar2;\n\
    \                maxWord2 = currentWord2;\n            }\n        }\n        int\
    \ maxNumOfChars = maxChar;\n        if(maxNumOfChars == maxChar2) {\n        \
    \    return maxWord2;\n        } else if(maxNumOfChars < maxChar2) {\n       \
    \     return maxWord;\n        } else {\n            return maxWord2;\n      \
    \  }\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98sjxw06.java:32: error: cannot find symbol\n                maxChar2\
    \ = currentChar2;\n                ^\n  symbol:   variable maxChar2\n  location:\
    \ class Problem\n/tmp/tmp98sjxw06.java:37: error: cannot find symbol\n       \
    \ if(maxNumOfChars == maxChar2) {\n                            ^\n  symbol:  \
    \ variable maxChar2\n  location: class Problem\n/tmp/tmp98sjxw06.java:39: error:\
    \ cannot find symbol\n        } else if(maxNumOfChars < maxChar2) {\n        \
    \                          ^\n  symbol:   variable maxChar2\n  location: class\
    \ Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011713
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        ArrayList<Integer> counts = new ArrayList<Integer>();\n  \
    \      for (String s : words) {\n            counts.add(countChars(s));\n    \
    \    }\n        int max = Collections.max(counts);\n        int maxIndex = 0;\n\
    \        for (int i = 0; i < counts.size(); i++) {\n            if (counts.get(i)\
    \ == max) {\n                maxIndex = i;\n            }\n        }\n       \
    \ return words.get(maxIndex);\n}\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyed58bkr.java:19: error: cannot find symbol\n            counts.add(countChars(s));\n\
    \                       ^\n  symbol:   method countChars(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011713
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        String word = \"\";\n        int maxCount = 0;\n        for\
    \ (String s : words) {\n            char[] uniqueChars = s.toCharArray();\n  \
    \          Arrays.sort(uniqueChars);\n            int currentCount = uniqueChars.length;\n\
    \            if (currentCount > maxCount) {\n                word = s;\n     \
    \           maxCount = currentCount;\n            }\n        }\n        return\
    \ word;\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyx2f4tga.java:32)\n"
  stdout: ''
  timestamp: 1660011714
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ s : words) {\n            int count = 0;\n            for(char c : s.toCharArray())\
    \ {\n                if(map.containsKey(c)) {\n                    count = map.get(c);\n\
    \                }\n                map.put(c, count + 1);\n            }\n  \
    \      }\n        \n        Iterator<Map.Entry<String, Integer>> it = map.entrySet().iterator();\n\
    \        Map.Entry<String, Integer> entry = it.next();\n        while(it.hasNext())\
    \ {\n            entry = it.next();\n            if(entry.getValue() > entry.getKey().length())\
    \ {\n                return entry.getKey();\n            }\n        }\n      \
    \  return \"\";\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxtr54tv.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                map.put(c, count + 1);\n                        ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011714
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        \n        Arrays.sort(words);\n\n        for(String str :\
    \ words) {\n            if (str.chars().distinct().count() > words.size())\n \
    \               return str;\n        }\n        return \"\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpomzrov39.java:18: error: no suitable method found for sort(ArrayList<String>)\n\
    \        Arrays.sort(words);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011714
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> count = new HashMap<String, Integer>();\n\
    \        for (String word: words) {\n            for (int i = 0; i < word.length();\
    \ i++) {\n                if (count.containsKey(word.substring(0, i)))\n     \
    \               count.put(word.substring(0, i), count.get(word.substring(0, i))\
    \ + 1);\n                else\n                    count.put(word.substring(0,\
    \ i), 1);\n            }\n        }\n\n        for (Map.Entry<String, Integer>\
    \ pair: count.entrySet()) {\n            if (pair.getValue() > words.size())\n\
    \                return pair.getKey();\n        }\n        return \"\";\n}\n \
    \   public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0n6fmhg0.java:34)\n"
  stdout: ''
  timestamp: 1660011714
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int maxChar = 0;\n        for(String word: words) {\n    \
    \        char[] chars = word.toCharArray();\n            int uniqueChars = 0;\n\
    \            for(char c: chars) {\n                uniqueChars++;\n          \
    \      if(uniqueChars > maxChar) maxChar = uniqueChars;\n            }\n     \
    \   }\n        if(maxChar == 0) return \"\";\n        int index = 0;\n       \
    \ for(int i = 1; i < words.size(); i++) {\n            String word = words.get(i);\n\
    \            char[] chars = word.toCharArray();\n            int uniqueChars =\
    \ 0;\n            for(char c: chars) {\n                uniqueChars++;\n     \
    \           if(uniqueChars > maxChar) maxChar = uniqueChars;\n            }\n\
    \            if(maxChar == uniqueChars) {\n                index = i;\n      \
    \          break;\n            }\n        }\n        if(maxChar == 0) return \"\
    \";\n        char[] chars = words.get(index).toCharArray();\n        Arrays.sort(chars);\n\
    \        return new String(chars);\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbhnfcyt4.java:47)\n"
  stdout: ''
  timestamp: 1660011714
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = Integer.MIN_VALUE;\n        String res = \"\";\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ char[] charArray = word.toCharArray();\n            for (char c : charArray)\
    \ {\n                ++count;\n            }\n            if (count > max) {\n\
    \                max = count;\n                res = word;\n            }\n  \
    \      }\n        return res;\n}\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__3qqfn1.java:34)\n"
  stdout: ''
  timestamp: 1660011714
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            if(!map.containsKey(word)) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, map.get(word) + 1);\n\
    \            }\n        }\n\n        String maxKey = \"\";\n        int maxValue\
    \ = 0;\n        for(Map.Entry<String, Integer> entry : map.entrySet()) {\n   \
    \         if(entry.getValue() > maxValue) {\n                maxValue = entry.getValue();\n\
    \                maxKey = entry.getKey();\n            }\n        }\n\n      \
    \  return maxKey;\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0omqw09o.java:39)\n"
  stdout: ''
  timestamp: 1660011714
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int[] count = new int[26];\n        for (String word : words)\
    \ {\n            int c = 0;\n            for (int i = 0; i < word.length(); i++)\
    \ {\n                c += word.charAt(i) - 'a';\n            }\n            count[c]++;\n\
    \        }\n        Arrays.sort(count, Collections.reverseOrder());\n        for\
    \ (int i = 0; i < 26; i++) {\n            if (count[i] > 1) {\n              \
    \  return words.get(i);\n            }\n        }\n        return \"\";\n}\n \
    \   public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi8m4th8q.java:25: error: no suitable method found for sort(int[],Comparator<Object>)\n\
    \        Arrays.sort(count, Collections.reverseOrder());\n              ^\n  \
    \  method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is not applicable\n\
    \      (inference variable T#1 has incompatible bounds\n        equality constraints:\
    \ int\n        lower bounds: Object)\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011714
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String,Integer> map = new HashMap<>();\n        for (String\
    \ word:words) {\n            Integer count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      if (map.isEmpty()){\n            return \"\";\n        }\n        Set<Map.Entry<String,Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String,Integer> entry = Collections.max(entries);\n\
    \        return entry.getKey();\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbaqryqnl.java:31: error: no suitable method found for max(Set<Entry<String,Integer>>)\n\
    \        Map.Entry<String,Integer> entry = Collections.max(entries);\n       \
    \                                              ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1660011714
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Long> characterCountMap = new HashMap<>();\n \
    \       for (String word : words) {\n            List<String> uniqueCharacters\
    \ = new ArrayList<>();\n            int uniqueCharacterCount = 0;\n          \
    \  char[] chars = word.toCharArray();\n            for (int i = 0; i < chars.length;\
    \ i++) {\n                String charString = String.valueOf(chars[i]);\n    \
    \            if (!characterCountMap.containsKey(charString)) {\n             \
    \       uniqueCharacters.add(charString);\n                    uniqueCharacterCount++;\n\
    \                }\n                characterCountMap.put(charString, uniqueCharacterCount);\n\
    \            }\n        }\n\n        // find key with highest count (smallest\
    \ values)\n        Set<String> keySet = characterCountMap.entrySet();\n      \
    \  int maxCount = 0;\n        String maxKey = \"\";\n        for (String key:\
    \ keySet) {\n            int count = characterCountMap.get(key).get();\n     \
    \       if (count > maxCount) {\n                maxCount = count;\n         \
    \       maxKey = key;\n            }\n        }\n        return maxKey;\n}\n \
    \   public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpysoivxw2.java:28: error: incompatible types: int cannot be converted\
    \ to Long\n                characterCountMap.put(charString, uniqueCharacterCount);\n\
    \                                                  ^\n/tmp/tmpysoivxw2.java:33:\
    \ error: incompatible types: Set<Entry<String,Long>> cannot be converted to Set<String>\n\
    \        Set<String> keySet = characterCountMap.entrySet();\n                \
    \                                       ^\n/tmp/tmpysoivxw2.java:37: error: cannot\
    \ find symbol\n            int count = characterCountMap.get(key).get();\n   \
    \                                               ^\n  symbol:   method get()\n\
    \  location: class Long\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011714
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Your code here\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpa8x6w1la.java:18: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011714
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Collections.sort(words);\n        System.out.println(words);\n\
    \        int max=0;\n        String maxString = words.get(0);\n        for (String\
    \ string: words){\n            int count= Collections.frequency(words, string);\n\
    \            if(count>max)\n            {\n                max=count;\n      \
    \          maxString=string;\n            }\n        }\n        System.out.println(maxString);\n\
    \        return maxString;\n}\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpapdpai02.java:33)\n"
  stdout: '[name, of, string]

    name

    '
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // sort the list with lexicographical order\n        ArrayList<String>\
    \ sortedWords = words.stream().sorted(Comparator\n                .comparing(String::toLowerCase))\n\
    \                .collect(Collectors.toList());\n\n        // get word with maximum\
    \ number of characters\n        return sortedWords.get(sortedWords.size() - 1);\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpttqtso8q.java:20: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .collect(Collectors.toList());\n\
    \                        ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<String>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        ArrayList<String> temp = new ArrayList<>(words);\n       \
    \ Collections.sort(temp);\n        return temp.get(0);\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps3cs47p1.java:22)\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int maxUniqueChars = 0;\n        String maxString = \"\";\n\
    \n        for(String word : words) {\n            char[] chars = word.toCharArray();\n\
    \            int uniqueChars = 0;\n\n            for(int i = 0 ; i < chars.length\
    \ ; i++) {\n                if(chars.indexOf(chars[i]) >= 0) {\n             \
    \       uniqueChars++;\n                }\n            }\n\n            if(uniqueChars\
    \ > maxUniqueChars) {\n                maxUniqueChars = uniqueChars;\n       \
    \         maxString = word;\n            }\n        }\n\n        return maxString;\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeoa91u11.java:25: error: cannot find symbol\n                if(chars.indexOf(chars[i])\
    \ >= 0) {\n                        ^\n  symbol:   method indexOf(char)\n  location:\
    \ variable chars of type char[]\n1 error\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        ArrayList<Integer> count = new ArrayList<Integer>();\n   \
    \     words.add(\"\");\n        for (String s : words)\n            count.add(new\
    \ HashMap<Character, Integer>().entrySet().stream().map(i -> i.getValue()).collect(Collectors.toList()));\n\
    \        int max = 0;\n        String maxString = \"\";\n        for (Character\
    \ c : count.get(count.size() - 1).keySet()) {\n            int count = 0;\n  \
    \          for (String s : words)\n                if (s.contains(String.valueOf(c)))\n\
    \                    count += counts.get(counts.get(s.indexOf(c)).getValue());\n\
    \            if (count > max)\n                max = count;\n            maxString\
    \ = s;\n        }\n        return maxString;\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_grm5r8.java:20: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            count.add(new HashMap<Character, Integer>().entrySet().stream().map(i\
    \ -> i.getValue()).collect(Collectors.toList()));\n                 ^\n    equality\
    \ constraints: List<T#2>\n    lower bounds: Integer,Object\n  where R,A,T#1,T#2\
    \ are type-variables:\n    R extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    A extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    T#1 extends Object declared in interface Stream\n    T#2\
    \ extends Object declared in method <T#2>toList()\n/tmp/tmpd_grm5r8.java:23: error:\
    \ cannot find symbol\n        for (Character c : count.get(count.size() - 1).keySet())\
    \ {\n                                                      ^\n  symbol:   method\
    \ keySet()\n  location: class Integer\n/tmp/tmpd_grm5r8.java:24: error: variable\
    \ count is already defined in method findMax(ArrayList<String>)\n            int\
    \ count = 0;\n                ^\n/tmp/tmpd_grm5r8.java:27: error: cannot find\
    \ symbol\n                    count += counts.get(counts.get(s.indexOf(c)).getValue());\n\
    \                             ^\n  symbol:   variable counts\n  location: class\
    \ Problem\n/tmp/tmpd_grm5r8.java:27: error: cannot find symbol\n             \
    \       count += counts.get(counts.get(s.indexOf(c)).getValue());\n          \
    \                              ^\n  symbol:   variable counts\n  location: class\
    \ Problem\n/tmp/tmpd_grm5r8.java:30: error: cannot find symbol\n            maxString\
    \ = s;\n                        ^\n  symbol:   variable s\n  location: class Problem\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n6 errors\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String,Integer> map = new HashMap<>();\n        for(String\
    \ str:words)\n            if(map.containsKey(str))\n                map.put(str,\
    \ map.getString(str)+1);\n            else\n                map.put(str, 1);\n\
    \        \n        Set<String> keys = map.keySet();\n        for(String key:keys)\n\
    \            if(map.get(key)==map.getMax())\n                return key;\n   \
    \     return \"\";\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoeqrfm80.java:20: error: cannot find symbol\n                map.put(str,\
    \ map.getString(str)+1);\n                                ^\n  symbol:   method\
    \ getString(String)\n  location: variable map of type Map<String,Integer>\n/tmp/tmpoeqrfm80.java:26:\
    \ error: cannot find symbol\n            if(map.get(key)==map.getMax())\n    \
    \                            ^\n  symbol:   method getMax()\n  location: variable\
    \ map of type Map<String,Integer>\n2 errors\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        return words.get(Collections.max(Arrays.asList(words)));\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps9ykburm.java:17: error: no suitable method found for max(List<ArrayList<String>>)\n\
    \        return words.get(Collections.max(Arrays.asList(words)));\n          \
    \                          ^\n    method Collections.<T#1>max(Collection<? extends\
    \ T#1>) is not applicable\n      (inference variable T#2 has incompatible bounds\n\
    \        lower bounds: Comparable<? super T#1>,Object,T#1\n        lower bounds:\
    \ ArrayList<String>)\n    method Collections.<T#3>max(Collection<? extends T#3>,Comparator<?\
    \ super T#3>) is not applicable\n      (cannot infer type-variable(s) T#3\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2,T#3\
    \ are type-variables:\n    T#1 extends Object,Comparable<? super T#1> declared\
    \ in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends Object declared\
    \ in method <T#2>asList(T#2...)\n    T#3 extends Object declared in method <T#3>max(Collection<?\
    \ extends T#3>,Comparator<? super T#3>)\n1 error\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Set<String> uniqueChar = new HashSet<String>();\n        Map<String,\
    \ Integer> map = new HashMap<>();\n        boolean isInUniqueChar = false;\n \
    \       for (String str : words) {\n            isInUniqueChar = false;\n    \
    \        for (int i = 0; i < str.length(); i++) {\n                String str\
    \ = str.substring(0, i) + str.substring(i + 1);\n                if (map.get(str)\
    \ == null) {\n                    uniqueChar.add(str);\n                    map.put(str,\
    \ 1);\n                }\n                else {\n                    map.put(str,\
    \ map.get(str) + 1);\n                    if (map.get(str) == uniqueChar.size())\
    \ {\n                        isInUniqueChar = true;\n                    }\n \
    \               }\n            }\n            if (!isInUniqueChar) {\n       \
    \         return \"\";\n            }\n        }\n        Collections.sort(words,\
    \ (String a, String b) -> Integer.compare(map.get(a), map.get(b)));\n        return\
    \ words.get(0);\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_brocs7f.java:23: error: variable str is already defined in method\
    \ findMax(ArrayList<String>)\n                String str = str.substring(0, i)\
    \ + str.substring(i + 1);\n                       ^\n1 error\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String,Integer> map = words.stream().collect(Collectors.groupingBy(String::toLowerCase,\
    \ Collectors.counting()));\n        return map.entrySet().stream().filter(e ->\
    \ e.getValue() > 1).min(Map.Entry.comparingByValue()).get().getKey();\n}\n   \
    \ public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_5koomtr.java:17: error: incompatible types: inference variable\
    \ D has incompatible equality constraints Integer,Long\n        Map<String,Integer>\
    \ map = words.stream().collect(Collectors.groupingBy(String::toLowerCase, Collectors.counting()));\n\
    \                                                        ^\n  where D,T,K,A are\
    \ type-variables:\n    D extends Object declared in method <T,K,A,D>groupingBy(Function<?\
    \ super T,? extends K>,Collector<? super T,A,D>)\n    T extends Object declared\
    \ in method <T,K,A,D>groupingBy(Function<? super T,? extends K>,Collector<? super\
    \ T,A,D>)\n    K extends Object declared in method <T,K,A,D>groupingBy(Function<?\
    \ super T,? extends K>,Collector<? super T,A,D>)\n    A extends Object declared\
    \ in method <T,K,A,D>groupingBy(Function<? super T,? extends K>,Collector<? super\
    \ T,A,D>)\n1 error\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        if (words == null || words.isEmpty()) {\n            return\
    \ \"\";\n        }\n        Map<String, Integer> m = new TreeMap<>();\n      \
    \  for(String w : words) {\n            int v = m.get(w);\n            if (v !=\
    \ null && v < m.get(w)) {\n                m.put(w, v);\n            }\n     \
    \   }\n\n        return m.entrySet().stream().sorted(Map.Entry.comparingByValue(Collections.reverseOrder())).findFirst().map(Map.Entry::getKey).orElse(\"\
    \");\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpikkazx9k.java:23: error: bad operand types for binary operator\
    \ '!='\n            if (v != null && v < m.get(w)) {\n                  ^\n  first\
    \ type:  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        StringBuilder sb = new StringBuilder();\n        final int\
    \ maxCount = words.stream().flatMapToInt(String::chars).max().orElse(0);\n   \
    \     boolean hasMaxChar = false;\n        \n        for (String word : words)\
    \ {\n            for (int i = 0; i < word.length(); i++) {\n                if\
    \ (maxCount - word.charAt(i) > 0) {\n                    sb.append(word);\n  \
    \                  hasMaxChar = true;\n                    break;\n          \
    \      }\n            }\n            if (hasMaxChar) break;\n        }\n     \
    \   return hasMaxChar ? sb.toString() : \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp654n99y0.java:34)\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        List<String> uniqueWords = new ArrayList<String>();\n    \
    \    for(String word: words){\n            if(uniqueWords.contains(word)){\n \
    \               uniqueWords.remove(word);\n            }else{\n              \
    \  uniqueWords.add(word);\n            }\n        }\n        Collections.sort(uniqueWords);\n\
    \        String maxWord = uniqueWords.get(0);\n        for(int i = 1; i < uniqueWords.size();\
    \ i++){\n            if(uniqueWords.get(i).compareTo(maxWord) > 0){\n        \
    \        maxWord = uniqueWords.get(i);\n            }\n        }\n        return\
    \ maxWord;\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg6uawlmi.java:36)\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // write your code here\n        return \"\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2weyj94w.java:21)\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        ArrayList<Character> unique = new ArrayList<Character>();\n\
    \        for (String word : words) {\n            for (int i = 0; i < word.length();\
    \ i++) {\n                if (unique.contains(word.charAt(i))) {\n           \
    \         continue;\n                } else {\n                    unique.add(word.charAt(i));\n\
    \                }\n            }\n        }\n        Collections.sort(unique);\n\
    \        if (unique.size() > 0) {\n            return words.get(unique.size()\
    \ - 1);\n        } else {\n            return \"\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 10 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.findMax(tmppa2e3014.java:29)\n\tat Problem.main(tmppa2e3014.java:35)\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int maxIndex = 0;\n        String maxWord = \"\";\n      \
    \  for(int i = 0 ; i < words.size() ; i++) {\n            int wordLength = words.get(i).length();\n\
    \            int count = 0;\n            for(int j = 0; j < wordLength; j++) {\n\
    \                if(words.get(i).charAt(j) != words.get(j).charAt(j)) {\n    \
    \                count++;\n                }\n            }\n            if(count\
    \ > wordLength) {\n                maxIndex = i;\n                maxWord = words.get(i);\n\
    \            }\n        }\n        for(int i = maxIndex ; i < words.size() ; i++)\
    \ {\n            int wordLength = words.get(i).length();\n            int count\
    \ = 0;\n            for(int j = 0; j < wordLength; j++) {\n                if(words.get(i).charAt(j)\
    \ != words.get(j).charAt(j)) {\n                    count++;\n               \
    \ }\n            }\n            if(count > wordLength) {\n                maxIndex\
    \ = i;\n                maxWord = words.get(i);\n            }\n        }\n  \
    \      return maxWord;\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.findMax(tmp2cpt539h.java:23)\n\tat Problem.main(tmp2cpt539h.java:48)\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = 0;\n        String result = \"\";\n        for (String\
    \ string : words) {\n            int uniqueCount = string.length() - 1;\n    \
    \        int currentUniqueCount = string.lastIndexOf(\"\", uniqueCount - 1);\n\
    \            if (currentUniqueCount > uniqueCount) {\n                max = uniqueCount;\n\
    \                result = string;\n            } else if (currentUniqueCount ==\
    \ uniqueCount) {\n                max = currentUniqueCount;\n                result\
    \ = string;\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb_fexpju.java:33)\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        ArrayList<String> wordcount = new ArrayList<String>();\n \
    \       for (String word : words) {\n            int count = 0;\n            String\
    \ count = words.get(word);\n            for (String s : wordcount) {\n       \
    \         if (count.compareTo(s.substring(0, word.length())) > 0) {\n        \
    \            count++;\n                }\n            }\n            if (count\
    \ > wordcount.size()) {\n                wordcount.add(word);\n            } else\
    \ if (count < wordcount.size()) {\n                wordcount.set(wordcount.size()\
    \ - 1, count);\n            }\n        }\n        Collections.sort(wordcount,\
    \ Comparator.comparing(String::length));\n        long maxcount = wordcount.get((wordcount.size()\
    \ - 1));\n        for (String word : wordcount) {\n            if (maxcount.compareTo(word.length())\
    \ > 0) {\n                return word;\n            }\n        }\n        return\
    \ \"\";\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ztn7tfg.java:20: error: variable count is already defined in method\
    \ findMax(ArrayList<String>)\n            String count = words.get(word);\n  \
    \                 ^\n/tmp/tmp4ztn7tfg.java:20: error: incompatible types: String\
    \ cannot be converted to int\n            String count = words.get(word);\n  \
    \                                   ^\n/tmp/tmp4ztn7tfg.java:23: error: bad operand\
    \ type String for unary operator '++'\n                    count++;\n        \
    \                 ^\n/tmp/tmp4ztn7tfg.java:26: error: bad operand types for binary\
    \ operator '>'\n            if (count > wordcount.size()) {\n                \
    \      ^\n  first type:  String\n  second type: int\n/tmp/tmp4ztn7tfg.java:28:\
    \ error: bad operand types for binary operator '<'\n            } else if (count\
    \ < wordcount.size()) {\n                             ^\n  first type:  String\n\
    \  second type: int\n/tmp/tmp4ztn7tfg.java:33: error: incompatible types: String\
    \ cannot be converted to long\n        long maxcount = wordcount.get((wordcount.size()\
    \ - 1));\n                                     ^\n/tmp/tmp4ztn7tfg.java:35: error:\
    \ long cannot be dereferenced\n            if (maxcount.compareTo(word.length())\
    \ > 0) {\n                        ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n7 errors\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // O(n) time, O(1) space\n        int n = words.size();\n\
    \        String max = \"\";\n        for (int i = 0; i < n; i++) {\n         \
    \   int count = 0;\n            for (int j = 0; j < n; j++) {\n              \
    \  // only compare this element to itself\n                if (i != j)\n     \
    \               if (words.get(i).contains(words.get(j))) {\n                 \
    \       count++;\n                    }\n            }\n            if (count\
    \ == 0) {\n                // if we only have one unique character\n         \
    \       // then just return it\n                if (max.isEmpty())\n         \
    \           max = words.get(i);\n            }\n            else\n           \
    \     // if more than one unique character\n                // then return the\
    \ element that comes first in lexicographical order\n                if (words.get(i).compareTo(max)\
    \ > 0)\n                    max = words.get(i);\n        }\n        return max;\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72wq1asl.java:44)\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Write your code here\n        int max_char;\n        String\
    \ max_word = null;\n        for (String word : words) {\n            HashSet<String>\
    \ chars = new HashSet<String>();\n            for (int i = 0; i < word.length();\
    \ i++) {\n                String c = word.substring(i, i+1);\n               \
    \ chars.add(c);\n            }\n            if (chars.size() > max_char) {\n \
    \               max_char = chars.size();\n                max_word = word;\n \
    \           }\n        }\n        return max_word;\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgflog8bk.java:26: error: variable max_char might not have been\
    \ initialized\n            if (chars.size() > max_char) {\n                  \
    \             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = 0;\n        String temp = \"\";\n        for(String\
    \ word: words) {\n            int count = 0;\n            for(char c: word.toCharArray())\
    \ {\n                count++;\n            }\n            if (count > max) {\n\
    \                max = count;\n                temp = word;\n            }\n \
    \       }\n        if (max > 1) {\n            for (int i = 0; i < words.size();\
    \ i++) {\n                String word2 = words.get(i);\n                if (word2.compareTo(temp)\
    \ > 0) {\n                    temp = word2;\n                }\n            }\n\
    \        }\n        return temp;\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu6q7qqcf.java:41)\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<Integer, String> charMap = new HashMap<>();\n        words.add(\"\
    aaaaaaa\");\n        words.add(\"bb\");\n        words.add(\"cc\");\n        //\
    \ iterate through each element\n        for (String s: words) {\n            charMap.put(0,\
    \ s);\n            for (int i = 0; i < s.length(); i++) {\n                int\
    \ numOfChar = s.charAt(i) + 1;\n                if (charMap.containsKey(numOfChar))\
    \ {\n                    if (charMap.get(numOfChar) < s) {\n                 \
    \       charMap.put(numOfChar, s);\n                    }\n                } else\
    \ {\n                    charMap.put(numOfChar, s);\n                }\n     \
    \       }\n        }\n        String maxChar = charMap.keySet().stream().max((s1,\
    \ s2) -> s1.compareTo(s2)).orElse(\"\");\n        return charMap.get(maxChar);\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp62lx97qz.java:27: error: bad operand types for binary operator\
    \ '<'\n                    if (charMap.get(numOfChar) < s) {\n               \
    \                                ^\n  first type:  String\n  second type: String\n\
    /tmp/tmp62lx97qz.java:35: error: incompatible types: String cannot be converted\
    \ to Integer\n        String maxChar = charMap.keySet().stream().max((s1, s2)\
    \ -> s1.compareTo(s2)).orElse(\"\");\n                                       \
    \                                                     ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = 0;\n        for (String w : words) {\n         \
    \   String s = \"\";\n            int count = 0;\n            for (String s :\
    \ w) {\n                count++;\n            }\n            if (count > max)\
    \ {\n                max = count;\n            }\n        }\n        return words.get(0);\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfbdjqbx3.java:21: error: for-each not applicable to expression\
    \ type\n            for (String s : w) {\n                            ^\n  required:\
    \ array or java.lang.Iterable\n  found:    String\n/tmp/tmpfbdjqbx3.java:21: error:\
    \ variable s is already defined in method findMax(ArrayList<String>)\n       \
    \     for (String s : w) {\n                        ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        ArrayList<Integer> chars = new ArrayList<Integer>();\n   \
    \     for (int i = 0; i < words.size(); i++) {\n            chars.add(0);\n  \
    \      }\n        for (int i = 0; i < words.size(); i++) {\n            for (int\
    \ j = 0; j < words.get(i).length(); j++) {\n                chars.set(chars.get(i)\
    \ + 1, chars.get(i) + 1);\n            }\n        }\n        Arrays.sort(chars,\
    \ new Comparator<Integer>() {\n            public int compare(Integer o1, Integer\
    \ o2) {\n                return o1.compareTo(o2);\n            }\n        });\n\
    \        return chars.get(chars.size() - 1);\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd68stxgy.java:26: error: no suitable method found for sort(ArrayList<Integer>,<anonymous\
    \ Comparator<Integer>>)\n        Arrays.sort(chars, new Comparator<Integer>()\
    \ {\n              ^\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to T#1[]))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpd68stxgy.java:31: error: incompatible types: Integer cannot\
    \ be converted to String\n        return chars.get(chars.size() - 1);\n      \
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011716
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        if (words == null || words.isEmpty()) {\n            return\
    \ \"\";\n        }\n\n        ArrayList<String> wordsCopy = new ArrayList<>(words);\n\
    \        Collections.sort(wordsCopy);\n        int uniqueCharacters = 0;\n   \
    \     int positionOfMax = 0;\n        boolean isMax = false;\n        for (int\
    \ i = 0; i < wordsCopy.size(); i++) {\n            if (wordsCopy.get(i).length()\
    \ > uniqueCharacters) {\n                uniqueCharacters = wordsCopy.get(i).length();\n\
    \                positionOfMax = i;\n                isMax = true;\n         \
    \   } else if (wordsCopy.get(i).length() == uniqueCharacters) {\n            \
    \    wordsCopy.remove(i);\n                uniqueCharacters--;\n            }\n\
    \        }\n        if (!isMax) {\n            return \"\";\n        }\n     \
    \   if (wordsCopy.size() == 0) {\n            return wordsCopy.get(0);\n     \
    \   }\n        return wordsCopy.get(positionOfMax);\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz10y1pd3.java:51)\n"
  stdout: ''
  timestamp: 1660011716
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ str : words) {\n            map.putIfAbsent(str, 0);\n            map.put(str,\
    \ map.getOrDefault(str, 0)+1);\n        }\n        if (map.isEmpty())\n      \
    \      return \"\";\n        map.values().removeIf(i -> i < 1);\n        String\
    \ max = Collections.max(map.values());\n        ArrayList<String> res = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(res, (l1, l2) -> l2.compareTo(l1));\n        for (int\
    \ i = 0; i < res.size(); i++)\n            if (res.get(i).equals(max))\n     \
    \           return res.get(0);\n        return \"\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmq3c51fj.java:25: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        String max = Collections.max(map.values());\n\
    \                                    ^\n    lower bounds: String,Integer,Object,Comparable<?\
    \ super T>\n    lower bounds: Integer\n  where T is a type-variable:\n    T extends\
    \ Object,Comparable<? super T> declared in method <T>max(Collection<? extends\
    \ T>)\n1 error\n"
  stdout: ''
  timestamp: 1660011716
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        List<Character> chars = new ArrayList<>();\n        for (int\
    \ i = 0; i < words.size(); i++) {\n            chars.add(words.get(i).charAt(0));\n\
    \        }\n        int max = Collections.frequency(chars, Collections.max(chars));\n\
    \        String res = \"\";\n        boolean found = false;\n        for (String\
    \ word : words) {\n            chars = new ArrayList<>();\n            for (int\
    \ i = 0; i < word.length(); i++) {\n                chars.add(word.charAt(i));\n\
    \            }\n            if (Collections.frequency(chars, Collections.max(chars))\
    \ == max) {\n                found = true;\n                break;\n         \
    \   }\n        }\n        if (found) {\n            return res;\n        } else\
    \ {\n            return \"\";\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9u8qz49m.java:41)\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int maxCharacterCount = 0;\n        String result = \"\";\n\
    \        for (String word: words) {\n            int uniqueCharacterCount = 0;\n\
    \            for (char c: word.toCharArray()) {\n                if (Character.isLetter(c))\
    \ {\n                    uniqueCharacterCount++;\n                }\n        \
    \    }\n            if (uniqueCharacterCount > maxCharacterCount) {\n        \
    \        result = word;\n                maxCharacterCount = uniqueCharacterCount;\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbpqn4tmh.java:35)\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        \n        Map<String, Integer> wordCounts = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = wordCounts.get(word);\n\
    \            if(count == null) count = 1;\n            else count++;\n       \
    \     wordCounts.put(word, count);\n        }\n        \n        String wordWithMaxCount\
    \ = \"\";\n        int maxCount = -1;\n        for (Map.Entry<String, Integer>\
    \ entry : wordCounts.entrySet()) {\n            if(entry.getValue() > maxCount)\
    \ {\n                wordWithMaxCount = entry.getKey();\n                maxCount\
    \ = entry.getValue();\n            }\n        }\n        \n        String stringWithMaxCount\
    \ = wordWithMaxCount + \" \" + maxCount;\n        \n        return stringWithMaxCount.equals(\"\
    \") ? \"\" : stringWithMaxCount;\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7rxih9xx.java:21: error: bad operand types for binary operator\
    \ '=='\n            if(count == null) count = 1;\n                     ^\n  first\
    \ type:  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011716
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Write your code here\n        List<String> temp = words;\n\
    \        temp.remove(Collections.max(Collections.frequency(words, words)));\n\
    \        return Collections.max(Collections.frequency(temp, words.get(Collections.frequency(temp,\
    \ words)))).toString();\n}\n    public static void main(String[] args) {\n   \
    \ assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9urlpsx.java:19: error: no suitable method found for max(int)\n\
    \        temp.remove(Collections.max(Collections.frequency(words, words)));\n\
    \                               ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n\
    \        (argument mismatch; int cannot be converted to Collection<? extends T#1>))\n\
    \    method Collections.<T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object,Comparable<? super T#1> declared in method <T#1>max(Collection<?\
    \ extends T#1>)\n    T#2 extends Object declared in method <T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>)\n/tmp/tmpb9urlpsx.java:20: error: no suitable\
    \ method found for max(int)\n        return Collections.max(Collections.frequency(temp,\
    \ words.get(Collections.frequency(temp, words)))).toString();\n              \
    \            ^\n    method Collections.<T#1>max(Collection<? extends T#1>) is\
    \ not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; int cannot be converted to Collection<? extends T#1>))\n    method\
    \ Collections.<T#2>max(Collection<? extends T#2>,Comparator<? super T#2>) is not\
    \ applicable\n      (cannot infer type-variable(s) T#2\n        (actual and formal\
    \ argument lists differ in length))\n  where T#1,T#2 are type-variables:\n   \
    \ T#1 extends Object,Comparable<? super T#1> declared in method <T#1>max(Collection<?\
    \ extends T#1>)\n    T#2 extends Object declared in method <T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1660011716
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = 0;\n        for (String w : words) {\n         \
    \   int c = 0;\n            for (int i = 0; i < w.length(); i++)\n           \
    \     c += w.charAt(i) - 'a';\n            if (c > max) {\n                max\
    \ = c;\n            }\n        }\n        String ret = \"\";\n        if (max\
    \ > 0) return words.stream().filter(w -> w.length() == max).sorted((w1, w2) ->\
    \ Integer.compare(w1.length(), w2.length())).findFirst().get();\n        return\
    \ words.get(0);\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4xelmy8h.java:27: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n        if (max > 0) return words.stream().filter(w\
    \ -> w.length() == max).sorted((w1, w2) -> Integer.compare(w1.length(), w2.length())).findFirst().get();\n\
    \                                                                     ^\n1 error\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int len = words.size();\n        if(len < 1) return \"\";\n\
    \        int max = Integer.MIN_VALUE;\n        String firstWord = \"\";\n    \
    \    for(String word: words) {\n            String temp = word.replaceAll(\"[^A-Za-z]\"\
    , \"\");\n            int tempMax = temp.lenght();\n            if(tempMax > max)\
    \ {\n                max = tempMax;\n                firstWord = temp;\n     \
    \       }\n        }\n        return firstWord;\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcg55_yl_.java:23: error: cannot find symbol\n            int tempMax\
    \ = temp.lenght();\n                              ^\n  symbol:   method lenght()\n\
    \  location: variable temp of type String\n1 error\n"
  stdout: ''
  timestamp: 1660011716
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        return words.stream().distinct().count().max((a, b) -> (a.length()\
    \ - b.length())).orElse(\"\");\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxpf7haz_.java:17: error: long cannot be dereferenced\n        return\
    \ words.stream().distinct().count().max((a, b) -> (a.length() - b.length())).orElse(\"\
    \");\n                                                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011716
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        char[] chars = words.toArray(new char[words.size()]);\n  \
    \      int max = 0;\n        String maxStr = \"\";\n        for (int i = 0; i\
    \ < chars.length; i++) {\n            int count = 0;\n            char c = chars[i];\n\
    \            for (int j = 0; j < chars.length; j++) {\n                if (c ==\
    \ chars[j]) {\n                    count++;\n                }\n            }\n\
    \            if (count > max) {\n                max = count;\n              \
    \  maxStr = chars[i];\n            }\n        }\n        return maxStr;\n}\n \
    \   public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6vluw31k.java:17: error: no suitable method found for toArray(char[])\n\
    \        char[] chars = words.toArray(new char[words.size()]);\n             \
    \               ^\n    method Collection.<T#1>toArray(IntFunction<T#1[]>) is not\
    \ applicable\n      (cannot infer type-variable(s) T#1\n        (argument mismatch;\
    \ char[] cannot be converted to IntFunction<T#1[]>))\n    method ArrayList.<T#2>toArray(T#2[])\
    \ is not applicable\n      (inference variable T#2 has incompatible bounds\n \
    \       equality constraints: char\n        lower bounds: Object)\n  where T#1,T#2\
    \ are type-variables:\n    T#1 extends Object declared in method <T#1>toArray(IntFunction<T#1[]>)\n\
    \    T#2 extends Object declared in method <T#2>toArray(T#2[])\n/tmp/tmp6vluw31k.java:30:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    maxStr = chars[i];\n                              ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<Character, Integer> map = new HashMap<>();\n        for\
    \ (String word : words) {\n            for (char c : word.toCharArray()) {\n \
    \               Integer count = map.get(c);\n                if (count == null)\
    \ {\n                    map.put(c, 1);\n                } else {\n          \
    \          map.put(c, count + 1);\n                }\n            }\n        }\n\
    \        Integer max = Collections.max(map.values());\n        String result =\
    \ \"\";\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n\
    \            if (entry.getValue() == max) {\n                result = entry.getKey().toString();\n\
    \                break;\n            }\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsgax2u2e.java:39)\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Your code here\n        Map<String, Integer> map = new\
    \ HashMap<>();\n        for (String word : words) {\n            Integer count\
    \ = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        String[] keys = new String[map.size()];\n      \
    \  map.keySet().toArray(keys);\n\n        int maxCount = 0;\n        String maxValue\
    \ = \"\";\n        for (String key : keys) {\n            if (map.get(key) > maxCount)\
    \ {\n                maxCount = map.get(key);\n                maxValue = key;\n\
    \            }\n        }\n        return maxValue;\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe183s9m1.java:42)\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = 0;\n        String maxWord = \"\";\n        for\
    \ (String word : words) {\n            int charCount = getMaxCharCount(word);\n\
    \            if (charCount > max) {\n                max = charCount;\n      \
    \          maxWord = word;\n            } else if (charCount == max) {\n     \
    \           if (word.compareTo(maxWord) > 0) {\n                    maxWord =\
    \ word;\n                }\n            }\n        }\n        return maxWord;\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyxujdq.java:20: error: cannot find symbol\n            int charCount\
    \ = getMaxCharCount(word);\n                            ^\n  symbol:   method\
    \ getMaxCharCount(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        HashSet<Character> chars = new HashSet<Character>();\n   \
    \     int max = 0;\n        String maxStr = \"\";\n        for(int i=0;i<words.size();i++){\n\
    \            chars.clear();\n            String str = words.get(i);\n        \
    \    int length = 0;\n            for(int j=0;j<str.length();j++){\n         \
    \       char c = str.charAt(j);\n                if(!chars.contains(c)){\n   \
    \                 chars.add(c);\n                    length++;\n             \
    \   }\n            }\n            if(length>max){\n                max = length;\n\
    \                maxStr = str;\n            }\n        }\n        for(int i=0;i<words.size();i++){\n\
    \            String str = words.get(i);\n            if(str.compareTo(maxStr)>0){\n\
    \                String tmp = words.get(i);\n                words.set(i,maxStr);\n\
    \                words.set(i+1,tmp);\n                break;\n            }\n\
    \        }\n        return maxStr;\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6naq6io1.java:49)\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        ArrayList<Character> charList = new ArrayList<>();\n     \
    \   List<String> wordList = new ArrayList<>();\n\n        for (String word : words)\
    \ {\n            charList.clear();\n            wordList.add(word);\n        \
    \    for (char c : word.toCharArray()) {\n                if (!charList.contains(c))\
    \ {\n                    charList.add(c);\n                }\n            }\n\
    \        }\n\n        String res = \"\";\n        int count = -1;\n        for\
    \ (String word : wordList) {\n            count++;\n            if (charList.size()\
    \ > count) {\n                res = word;\n            }\n        }\n        if\
    \ (res == \"\") {\n            return \"\";\n        }\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdky13ztg.java:45)\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        List<String> sorted_list = words.stream()\n              \
    \  .sorted((w1, w2) -> w1.length() - w2.length())\n                .collect(Collectors.toList());\n\
    \        return sorted_list.get(sorted_list.size() - 1);\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0mk9v9ti.java:24)\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        List<String> list = new ArrayList<>();\n        words.forEach(word\
    \ -> {\n            list.add(word);\n        });\n        Collections.sort(list,\
    \ (s1, s2) -> {\n            int a1 = s1.length();\n            int a2 = s2.length();\n\
    \            if (a1 > a2) {\n                return -1;\n            } else if\
    \ (a1 < a2) {\n                return 1;\n            } else {\n             \
    \   int val = 0;\n                for (int i = 0; i < a1; ) {\n              \
    \      val += s1.charAt(i) - s2.charAt(i);\n                    i++;\n       \
    \         }\n                return val;\n            }\n        });\n\n     \
    \   if (list.size() > 0) {\n            return list.get(list.size() - 1);\n  \
    \      } else {\n            return \"\";\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgxoauyt7.java:45)\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int length = words.size();\n        if (length < 1)\n    \
    \        return \"\";\n        int counter = 0;\n        Map<Character, Integer>\
    \ map = new TreeMap<>();\n        for (String word: words) {\n            for\
    \ (char c: word.toCharArray()) {\n                if (!map.containsKey(c)) {\n\
    \                    counter = 1;\n                    map.put(c, counter);\n\
    \                }\n                else {\n                    Integer count\
    \ = map.get(c);\n                    if (counter == 0) {\n                   \
    \     counter = count;\n                    }\n                    else {\n  \
    \                      counter = count.intValue() + 1;\n                    }\n\
    \                }\n            }\n        }\n        Integer result = map.get(Character.MAX_VALUE);\n\
    \        if (result == null) {\n            return \"\";\n        }\n        if\
    \ (result.intValue() >= length) {\n            return \"\";\n        }\n     \
    \   return words.get(result.intValue());\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw7mmeyim.java:49)\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Set<String> unique = new HashSet<>();\n        String result\
    \ = \"\";\n\n        for (String word : words) {\n            if (unique.contains(word))\
    \ {\n                result = word;\n            } else {\n                int\
    \ length = word.length();\n                unique.add(word);\n\n             \
    \   if (length > result.length()) {\n                    result = word;\n    \
    \            }\n            }\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph2v19u9x.java:36)\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int maxCount = 0;\n        String maxWord = \"\";\n\n    \
    \    // Iterate through the array and keep track of the maximum count\n      \
    \  for (String word : words) {\n            int currentCount = 0;\n          \
    \  for (String word2 : words) {\n                currentCount += word2.length();\n\
    \            }\n            if (currentCount > maxCount) {\n                maxCount\
    \ = currentCount;\n                maxWord = word;\n            }\n        }\n\
    \        return maxWord;\n}\n    public static void main(String[] args) {\n  \
    \  assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp983uz5b9.java:34)\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        char[] charArray = words.toArray(new char[words.size()]);\n\
    \        int counter = 0;\n        for (int i = 0; i < charArray.length; i++)\
    \ {\n            if (charArray[i] != ' ') { // if current char is not space\n\
    \                char[] temp = new char[charArray.length];\n                for\
    \ (int j = 0; j < charArray.length; j++) {\n                    if (charArray[j]\
    \ != ' ' && charArray[j] != charArray[i]) {\n                        temp[j] =\
    \ charArray[j];\n                    }\n                }\n                int\
    \ uniqueChars = 1;\n                int index = 0;\n                while (index\
    \ < temp.length) {\n                    if (temp[index] == temp[index + 1]) {\n\
    \                        uniqueChars++;\n                        index++;\n  \
    \                  } else if (temp[index] == temp[index]) {\n                \
    \        uniqueChars--;\n                    } else {\n                      \
    \  break;\n                    }\n                }\n                if (uniqueChars\
    \ > counter) {\n                    counter = uniqueChars;\n                 \
    \   String result = new String(temp);\n                    int index = 0;\n  \
    \                  while (index < temp.length) {\n                        if (temp[index]\
    \ == temp[index + 1]) {\n                            result.replace(temp[index],\
    \ \"\");\n                        }\n                        index++;\n      \
    \              }\n                    result = result.replaceAll(\"\\\\s+\", \"\
    \");\n                    return result;\n                }\n            }\n \
    \       }\n        return \"\";\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplteqqih7.java:17: error: no suitable method found for toArray(char[])\n\
    \        char[] charArray = words.toArray(new char[words.size()]);\n         \
    \                       ^\n    method Collection.<T#1>toArray(IntFunction<T#1[]>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; char[] cannot be converted to IntFunction<T#1[]>))\n    method ArrayList.<T#2>toArray(T#2[])\
    \ is not applicable\n      (inference variable T#2 has incompatible bounds\n \
    \       equality constraints: char\n        lower bounds: Object)\n  where T#1,T#2\
    \ are type-variables:\n    T#1 extends Object declared in method <T#1>toArray(IntFunction<T#1[]>)\n\
    \    T#2 extends Object declared in method <T#2>toArray(T#2[])\n/tmp/tmplteqqih7.java:42:\
    \ error: variable index is already defined in method findMax(ArrayList<String>)\n\
    \                    int index = 0;\n                        ^\n/tmp/tmplteqqih7.java:45:\
    \ error: no suitable method found for replace(char,String)\n                 \
    \           result.replace(temp[index], \"\");\n                             \
    \     ^\n    method String.replace(char,char) is not applicable\n      (argument\
    \ mismatch; String cannot be converted to char)\n    method String.replace(CharSequence,CharSequence)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to CharSequence)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        if (words == null || words.size() < 1) return \"\";\n    \
    \    Map<String, Integer> counterMap = new HashMap<>();\n        for (String word\
    \ : words) {\n            Integer count = counterMap.get(word);\n            if\
    \ (count == null) {\n                counterMap.put(word, 1);\n            } else\
    \ {\n                counterMap.put(word, count + 1);\n            }\n       \
    \ }\n        String maxWord = counterMap.entrySet().stream()\n               \
    \ .max(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n\
    \                .orElse(\"\");\n        int maxCount = counterMap.get(maxWord);\n\
    \        if (maxCount > 1) {\n            maxWord = \"\";\n            for (String\
    \ word : words) {\n                Integer count = counterMap.get(word);\n   \
    \             if (count > maxCount && word.compareTo(maxWord) < 0) {\n       \
    \             maxWord = word;\n                    maxCount = count;\n       \
    \         }\n            }\n        }\n        return maxWord;\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzo7lwmbv.java:46)\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        return words.stream()\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()))\n            .entrySet()\n            .stream()\n  \
    \          .sorted(Map.Entry.<String, Long>comparingByValue().reversed())\n  \
    \          .map(Map.Entry::getKey)\n            .findFirst()\n            .orElse(\"\
    \");\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7tm7h226.java:18: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()))\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<Character, Integer> map = new TreeMap<>();\n        for\
    \ (String word : words) {\n            int count = 0;\n            for (int i\
    \ = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n \
    \               count = map.getOrDefault(c, 0) + 1;\n                map.put(c,\
    \ count);\n            }\n        }\n        for (Map.Entry<Character, Integer>\
    \ entry : map.entrySet()) {\n            if (entry.getValue().equals(words.size()))\
    \ {\n                return entry.getKey();\n            }\n        }\n      \
    \  return \"\";\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuojtpou4.java:28: error: incompatible types: Character cannot be\
    \ converted to String\n                return entry.getKey();\n              \
    \                     ^\n1 error\n"
  stdout: ''
  timestamp: 1660011718
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int maxCount = 0;\n        String maxWord = \"\";\n      \
    \  for (String word : words) {\n            int count = 0;\n            boolean\
    \ containsZero = false;\n            for (int i = 0; i < word.length(); i++) {\n\
    \                if (word.charAt(i) == '0') {\n                    containsZero\
    \ = true;\n                    break;\n                }\n                count++;\n\
    \            }\n            if (count == 0) {\n                count = 0;\n  \
    \          }\n            if (count == maxCount) {\n                maxWord =\
    \ word;\n            } else if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  if (maxCount == 0) {\n            return \"\";\n        }\n        return maxWord;\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgido5zaq.java:46)\n"
  stdout: ''
  timestamp: 1660011718
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int maxCnt = 0;\n        HashMap<Character, Integer> maxCountMap\
    \ = new HashMap<>();\n\n        for (String word : words) {\n            int count\
    \ = 0;\n            for(char c : word.toCharArray()) {\n                if (!maxCountMap.containsKey(c))\
    \ {\n                    maxCountMap.put(c, 1);\n                }\n         \
    \       else {\n                    count = maxCountMap.get(c) + 1;\n        \
    \            maxCountMap.put(c, count);\n                }\n            }\n\n\
    \            int max = Integer.MIN_VALUE;\n            for (Map.Entry<Character,\
    \ Integer> entry : maxCountMap.entrySet()) {\n                max = entry.getValue()\
    \ > max ? entry.getValue() : max;\n            }\n            maxCnt = max > maxCnt\
    \ ? max : maxCnt;\n        }\n\n        String maxWord = \"\";\n        for (Map.Entry<Character,\
    \ Integer> entry : maxCountMap.entrySet()) {\n            if (maxCnt == entry.getValue())\
    \ {\n                maxWord = entry.getKey();\n            }\n        }\n\n \
    \       return maxWord;\n}\n    public static void main(String[] args) {\n   \
    \ assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4s2kvbv.java:42: error: incompatible types: Character cannot be\
    \ converted to String\n                maxWord = entry.getKey();\n           \
    \                           ^\n1 error\n"
  stdout: ''
  timestamp: 1660011718
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<Integer, String> maxCount = new HashMap<>();\n       \
    \ for(String word : words){\n            for(char c : word.toCharArray()){\n \
    \               if(maxCount.getOrDefault(c, 0) == 0){\n                    maxCount.put(c,\
    \ word);\n                }\n            }\n        }\n        return maxCount.values().stream().reduce(new\
    \ StringBuilder(\"\"), \n                (s, word) -> s+word+\" \"+\"1\"+\" \"\
    +\"0\"+\" \"+\"0\"+\" \"+\"0\"+\" \"+\"0\"+\" \"+\"0\"+\"0\",\n              \
    \  (s1, s2) -> s1+s2+\" \"+\"1\"+\" \"+\"0\"+\" \"+\"0\"+\" \"+\"0\"+\" \"+\"\
    0\"+\" \"+\"0\"+\"0\").\n                substring(0,40).\n                collect(Collectors.toList())\n\
    \                .get(0).\n                substring(0,40);\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpde7tsxu8.java:20: error: incompatible types: int cannot be converted\
    \ to String\n                if(maxCount.getOrDefault(c, 0) == 0){\n         \
    \                                   ^\n/tmp/tmpde7tsxu8.java:21: error: incompatible\
    \ types: char cannot be converted to Integer\n                    maxCount.put(c,\
    \ word);\n                                 ^\n/tmp/tmpde7tsxu8.java:25: error:\
    \ incompatible types: cannot infer type-variable(s) U\n        return maxCount.values().stream().reduce(new\
    \ StringBuilder(\"\"), \n                                                ^\n \
    \   (argument mismatch; bad return type in lambda expression\n      String cannot\
    \ be converted to StringBuilder)\n  where U,T are type-variables:\n    U extends\
    \ Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011718
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<String, Integer>();\n\
    \        for (String word : words) {\n            map.put(word, map.get(word)\
    \ == null ? 1 : map.get(word) + 1);\n        }\n        \n        Integer count\
    \ = Collections.max(map.values());\n        if (count == map.values()) {\n   \
    \         return \"\";\n        }\n        \n        return Collections.max(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue)).getKey();\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbl1nstau.java:23: error: incomparable types: Integer and Collection<Integer>\n\
    \        if (count == map.values()) {\n                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011718
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Write code here\n        // find the word with the max\
    \ number of unique char\n        \n        \n        String maxWord = \"\";\n\
    \        \n        int maxNum = 0;\n        \n        for(int i = 0; i<words.size();\
    \ i++){\n            \n            int counter = 0;\n            \n          \
    \  for(int j=i+1; j<words.size(); j++){\n                \n                if(words.get(i).compareTo(words.get(j))\
    \ > 0){\n                    \n                    String temp = words.get(i);\n\
    \                    words.set(i,words.get(j));\n                    words.set(i,temp);\n\
    \                }\n                \n                \n                counter++;\n\
    \                \n            }\n            \n            \n            if(counter\
    \ > maxNum){\n                maxNum = counter;\n                maxWord = words.get(i);\n\
    \            }\n            \n        }\n        \n        return maxWord;\n}\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp070uod90.java:54)\n"
  stdout: ''
  timestamp: 1660011718
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        ArrayList<String> max = new ArrayList<String>();\n       \
    \ for (String word : words) {\n            int count = 1;\n            int maxCount\
    \ = 0;\n            for (String s : max) {\n                char c = s.charAt(0);\n\
    \                if (word.charAt(0) == c) {\n                    count++;\n  \
    \              }\n                if (count > maxCount) {\n                  \
    \  maxCount = count;\n                    max = new ArrayList<String>();\n   \
    \                 max.add(s);\n                } else if (count == maxCount) {\n\
    \                    max.add(s);\n                }\n            }\n         \
    \   if (maxCount == 0) {\n                max.add(word);\n            }\n    \
    \    }\n        Collections.sort(max, Collections.reverseOrder());\n        if\
    \ (max.size() > 0) {\n            return max.get(0);\n        } else {\n     \
    \       return \"\";\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn_taxaz0.java:46)\n"
  stdout: ''
  timestamp: 1660011718
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<Integer, String> map = words.stream().\n             \
    \   map(w -> w.chars().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.toMap(i->i,\
    \ i->i)))\n                .collect(Collectors.toMap(w -> 1, w -> w));\n     \
    \   return map.entrySet().stream().max(Map.Entry.comparingByValue())\n       \
    \         .get()\n                .getValue();\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmporz6k0df.java:19: error: incompatible types: inference variable\
    \ U has incompatible bounds\n                .collect(Collectors.toMap(w -> 1,\
    \ w -> w));\n                        ^\n    equality constraints: String\n   \
    \ lower bounds: Map<String,String>\n  where U,T,K are type-variables:\n    U extends\
    \ Object declared in method <T,K,U>toMap(Function<? super T,? extends K>,Function<?\
    \ super T,? extends U>)\n    T extends Object declared in method <T,K,U>toMap(Function<?\
    \ super T,? extends K>,Function<? super T,? extends U>)\n    K extends Object\
    \ declared in method <T,K,U>toMap(Function<? super T,? extends K>,Function<? super\
    \ T,? extends U>)\n1 error\n"
  stdout: ''
  timestamp: 1660011718
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        if (words.size() == 0) return \"\";\n        \n        HashMap<Character,\
    \ Integer> characterCount = new HashMap<>();\n        int maxCharactersCount =\
    \ 0;\n        int characterIndex = 0;\n        int wordIndex = 0;\n        for\
    \ (String word : words) {\n            for (char c : word.toCharArray()) {\n \
    \               Integer count = characterCount.get(c);\n                if (count\
    \ == null) count = 1;\n                characterCount.put(c, count + 1);\n   \
    \             if (count > maxCharactersCount) {\n                    maxCharactersCount\
    \ = count;\n                    characterIndex = characterCount.keySet().stream().max((a,\
    \ b) -> Integer.compare(a, b)).get();\n                }\n                \n \
    \               if (count == maxCharactersCount) {\n                    wordIndex\
    \ = wordIndex;\n                }\n            }\n        }\n        \n      \
    \  words.remove(wordIndex); // remove word with maximum number of characters\n\
    \        \n        // If the strings with maximum number of characters are \n\
    \        // lexicographically ordered, then return the first word\n        //\
    \ lexicographically\n        return words.isEmpty() ? \"\" : words.get(0);\n}\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy2o8jhxm.java:47)\n"
  stdout: ''
  timestamp: 1660011718
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<Character, Integer> counts = wordList.stream().collect(Collectors.groupingBy(s\
    \ -> s.charAt(0), Collectors.counting()));\n        int max = Integer.MIN_VALUE;\n\
    \        String wordWithMax = \"\";\n        \n        for (char c : counts.keySet())\
    \ {\n            if (counts.get(c) > max) {\n                wordWithMax = words.get(0);\n\
    \                max = counts.get(c);\n            } else if (counts.get(c) ==\
    \ max) {\n                wordWithMax = words.get(0).toString();\n           \
    \ }\n        }\n        \n        wordWithMax = words.get(0);\n        \n    \
    \    return wordWithMax;\n}\n    public static void main(String[] args) {\n  \
    \  assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2rno914y.java:17: error: cannot find symbol\n        Map<Character,\
    \ Integer> counts = wordList.stream().collect(Collectors.groupingBy(s -> s.charAt(0),\
    \ Collectors.counting()));\n                                         ^\n  symbol:\
    \   variable wordList\n  location: class Problem\n/tmp/tmp2rno914y.java:17: error:\
    \ cannot find symbol\n        Map<Character, Integer> counts = wordList.stream().collect(Collectors.groupingBy(s\
    \ -> s.charAt(0), Collectors.counting()));\n                                 \
    \                                                              ^\n  symbol:  \
    \ method charAt(int)\n  location: variable s of type Object\n2 errors\n"
  stdout: ''
  timestamp: 1660011718
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = 0;\n        String maxString = \"\";\n\n       \
    \ for (String str : words) {\n            int count = 0;\n\n            for (char\
    \ c : str.toCharArray()) {\n                count++;\n            }\n\n      \
    \      if (count > max) {\n                max = count;\n                maxString\
    \ = str;\n            }\n        }\n\n        return maxString;\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwpexg1km.java:37)\n"
  stdout: ''
  timestamp: 1660011718
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Long> charCount = new HashMap<>();\n\n       \
    \ for (String word : words) {\n            for (int i = 0; i < word.length();\
    \ i++) {\n                if (!charCount.containsKey(word.substring(i, i + 1)))\
    \ {\n                    charCount.put(word.substring(i, i + 1), Long.valueOf(0));\n\
    \                }\n                charCount.put(word.substring(i, i + 1), Long.valueOf(charCount.get(word.substring(i,\
    \ i + 1)).intValue() + 1));\n            }\n        }\n\n        Iterator<Map.Entry<String,\
    \ Long>> it = charCount.entrySet().iterator();\n        if (it.hasNext()) {\n\
    \            Map.Entry<String, Long> first = it.next();\n            long highestValue\
    \ = first.getValue();\n            while (it.hasNext()) {\n                Map.Entry<String,\
    \ Long> next = it.next();\n                if (next.getValue() > highestValue)\
    \ {\n                    highestValue = next.getValue();\n                }\n\
    \            }\n            return first.getKey();\n        } else {\n       \
    \     return \"\";\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdpebi7i2.java:44)\n"
  stdout: ''
  timestamp: 1660011719
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // TODO write your implementation here\n        String maxWord\
    \ = \"\";\n        HashSet<Character> set = new HashSet<>();\n        \n     \
    \   for (String s : words){\n            int i = 0;\n            while (i < s.length()){\n\
    \                set.add(s.charAt(i));\n                i++;\n            }\n\
    \            \n        }\n        \n        if(set.size() > maxWord.length())\n\
    \            maxWord = set.stream().mapToObj(String::valueOf).collect(Collectors.joining());\n\
    \        \n        return maxWord;\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkogd3553.java:31: error: cannot find symbol\n            maxWord\
    \ = set.stream().mapToObj(String::valueOf).collect(Collectors.joining());\n  \
    \                                ^\n  symbol:   method mapToObj(String::valueOf)\n\
    \  location: interface Stream<Character>\n1 error\n"
  stdout: ''
  timestamp: 1660011718
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        if (words.size() == 0)\n            return \"\";\n       \
    \ Map<Integer, List<String>> map = new TreeMap<>();\n        for (int i = 0; i\
    \ < words.size(); i++)\n            if (!map.containsKey(words.get(i).length()))\n\
    \                map.put(words.get(i).length(), new ArrayList<String>());\n  \
    \          map.get(words.get(i).length()).add(words.get(i));\n        List<String>\
    \ max = new ArrayList<>();\n        for (Integer i : map.keySet())\n         \
    \   if (map.get(i).size() > max.size() || max.size() == 0)\n                max\
    \ = map.get(i);\n        return max.get(0);\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp680py1ph.java:23: error: cannot find symbol\n            map.get(words.get(i).length()).add(words.get(i));\n\
    \                              ^\n  symbol:   variable i\n  location: class Problem\n\
    /tmp/tmp680py1ph.java:23: error: cannot find symbol\n            map.get(words.get(i).length()).add(words.get(i));\n\
    \                                                         ^\n  symbol:   variable\
    \ i\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011718
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        \n        \n        \n        int maxCharCount = Integer.MIN_VALUE;\n\
    \        \n        for (String word : words) {\n            \n            String\
    \ s = word;\n            \n            \n            for (int i = 0; i < word.length();\
    \ i++) {\n                \n                for (int j = 0; j < word.length();\
    \ j++) {\n                    \n                    if (maxCharCount > s.length())\
    \ {\n                        \n                        maxCharCount = s.length();\n\
    \                        \n                    }\n                    \n     \
    \               char c = s.charAt(i);\n                    \n                \
    \    char d2 = s.charAt(j);\n                    \n                    if (c ==\
    \ d2) {\n                        \n                        continue;\n       \
    \                 \n                    }\n                    \n            \
    \        if (s.charAt(i) != s.charAt(j)) {\n                        \n       \
    \                 maxCharCount = Character.getNumericValue(c) - Character.getNumericValue(d2);\n\
    \                        \n                    }\n                    \n     \
    \           }\n            }\n            \n        }\n        \n        int maxCount\
    \ = words.size();\n        \n        \n        if (maxCharCount > maxCount) {\n\
    \            \n            maxCount = maxCharCount;\n            \n        }\n\
    \        \n        \n        String maxWord = \"\";\n        \n        \n    \
    \    for (int i = 0; i < maxCount; i++) {\n            \n            if (maxCount\
    \ == 1) {\n                \n                maxWord = words.get(0);\n       \
    \         \n            }\n            \n            \n            if (maxCount\
    \ == words.size()) {\n                \n                return \"\";\n       \
    \         \n            }\n            \n            \n            for (int j\
    \ = 0; j < words.size(); j++) {\n                \n                \n        \
    \        String s = words.get(j);\n                \n                if (maxCharCount\
    \ > s.length()) {\n                    \n                    maxWord = s;\n  \
    \                  \n                    \n                }\n               \
    \ \n                \n                char c = s.charAt(i);\n                \n\
    \                char d2 = s.charAt(j);\n                \n                if\
    \ (c == d2) {\n                    \n                    continue;\n         \
    \           \n                }\n                \n                if (s.charAt(i)\
    \ != s.charAt(j)) {\n                    \n                    maxWord = words.get(j);\n\
    \                    \n                    \n                }\n             \
    \   \n                \n            }\n            \n        }\n        \n   \
    \     return maxWord;\n        \n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphhx29lbb.java:126)\n"
  stdout: ''
  timestamp: 1660011719
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Set<String> unique = new HashSet<String>();\n        for(String\
    \ w: words) {\n            unique.add(w);\n        }\n        String max = \"\"\
    ; // max string in lexicographical order\n        int count = 0; // number of\
    \ unique characters\n        for(String w: unique) {\n            int c = w.length();\n\
    \            if(c>count) {\n                max = w;\n                count =\
    \ c;\n            }\n        }\n        return max;\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1td6074d.java:34)\n"
  stdout: ''
  timestamp: 1660011719
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Solution 1\n        // return words.stream().reduce((a,b)->a+b.length).max().orElse(\"\
    \");\n        // Solution 2\n        Stream<Integer> lengths = words.stream().mapToInt(w\
    \ -> w.length()).sorted();\n        int max = lengths.reduce(0, Integer::max);\n\
    \        return words.stream().filter(w -> w.length() == max).findFirst().orElse(\"\
    \");\n\n        // Solution 3\n        // return IntStream.range(0, words.size()).mapToObj(i\
    \ -> words.get(i)).sorted().reduce(0, Integer::max)\n        //     .equals(words.stream().max(Integer::compare).get())\
    \ ? \"\" : words.stream().max(Integer::compare).get();\n\n        // Solution\
    \ 4\n        // return IntStream.range(0, words.size()).mapToObj(i -> words.get(i)).sorted().reduce(0,\
    \ Integer::max)\n        //     .equals(words.get(0)) ? \"\" : words.get(0).get();\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkhzulkc_.java:20: error: incompatible types: IntStream cannot be\
    \ converted to Stream<Integer>\n        Stream<Integer> lengths = words.stream().mapToInt(w\
    \ -> w.length()).sorted();\n                                                 \
    \                                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011719
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Write your code here\n        Map<Character, Integer> map\
    \ = new HashMap<>();\n        for (int i = 0; i < words.size(); ++i) {\n     \
    \       for (int j = 0; j < words.get(i).length(); ++j) {\n                Integer\
    \ count = map.get(words.get(i).charAt(j));\n                map.put(words.get(i).charAt(j),\
    \ count == null ? 1 : count + 1);\n            }\n        }\n        \n      \
    \  Iterator<Map.Entry<Character, Integer>> it = map.entrySet().iterator();\n \
    \       Map.Entry<Character, Integer> maxEntry = null;\n        int maxCount =\
    \ 0;\n        while (it.hasNext()) {\n            maxEntry = it.next();\n    \
    \        if (maxEntry.getValue() > maxCount) {\n                maxCount = maxEntry.getValue();\n\
    \            }\n        }\n        if (maxCount == 1) {\n            return maxEntry.getKey();\n\
    \        } else if (maxCount > 1) {\n            Set<Character> chars = new HashSet<>();\n\
    \            chars.add(maxEntry.getKey());\n            it.remove();\n       \
    \     while (it.hasNext()) {\n                maxEntry = it.next();\n        \
    \        if (!chars.contains(maxEntry.getKey())) {\n                    chars.add(maxEntry.getKey());\n\
    \                }\n            }\n            Iterator<Character> iter1 = chars.iterator();\n\
    \            Iterator<Map.Entry<Character, Integer>> iter2 = map.entrySet().iterator();\n\
    \            while (iter1.hasNext()) {\n                Map.Entry<Character, Integer>\
    \ entry = iter2.next();\n                if (iter1.next().equals(maxEntry.getKey()))\
    \ {\n                    iter2.remove();\n                    iter1.remove();\n\
    \                }\n            }\n            while (iter2.hasNext()) {\n   \
    \             Map.Entry<Character, Integer> entry = iter2.next();\n          \
    \      if (iter2.next().equals(maxEntry.getKey())) {\n                    iter2.remove();\n\
    \                }\n            }\n            \n            return maxEntry.getKey();\n\
    \        } else {\n            return \"\";\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcusebrrh.java:36: error: incompatible types: Character cannot be\
    \ converted to String\n            return maxEntry.getKey();\n               \
    \                   ^\n/tmp/tmpcusebrrh.java:63: error: incompatible types: Character\
    \ cannot be converted to String\n            return maxEntry.getKey();\n     \
    \                             ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011718
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int uniqueChars = words.size();\n        if (uniqueChars ==\
    \ 0) return \"\";\n        char ch;\n        String maxChar = words.get(0); //assuming\
    \ first character is max letter\n        Arrays.sort(words, new Comparator<String>()\
    \ {\n            public int compare(String o1, String o2) {\n                int\
    \ count1 = 0, count2 = 0;\n                for (int i = 0; i < words.size(); i++)\
    \ {\n                    ch = words.get(i).charAt(0);\n                    if\
    \ (o1.charAt(0) == ch) count1++;\n                    if (o2.charAt(0) == ch)\
    \ count2++;\n                    if (count1 > count2) return -1;\n           \
    \         if (count1 < count2) return 1;\n                }\n                return\
    \ 0;\n            }\n        });\n        int index = 0;\n        for (String\
    \ w : words) {\n            if (w.charAt(0) == maxChar.charAt(0)) index++;\n \
    \           if (index >= uniqueChars) return maxChar;\n        }\n        return\
    \ \"\";\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppair1rfb.java:21: error: no suitable method found for sort(ArrayList<String>,<anonymous\
    \ Comparator<String>>)\n        Arrays.sort(words, new Comparator<String>() {\n\
    \              ^\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is\
    \ not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<String> cannot be converted to T#1[]))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011719
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Write your code here\n        Map<String, Integer> charMap\
    \ = new HashMap<>();\n        for (String word : words) {\n            for (int\
    \ i = 0; i < word.length(); i++) {\n                charMap.put(word.substring(0,\
    \ i), charMap.getOrDefault(word.substring(0, i),0) + 1);\n            }\n    \
    \    }\n        String maxWord = null;\n        int maxCharCount = 0;\n      \
    \  for (String key : charMap.keySet()) {\n            if (charMap.get(key).equals(maxCharCount))\
    \ {\n                maxWord = key;\n            }\n            else if (charMap.get(key).equals(maxCharCount))\
    \ {\n                maxWord = key;\n            }\n        }\n        return\
    \ maxWord;\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.findMax(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmph7l4phy2.java:37)\n"
  stdout: ''
  timestamp: 1660011719
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        List<String> strings = new ArrayList<>(words);\n        \n\
    \        return strings.stream().collect(\n            Collectors.groupingBy(s\
    \ -> new String(new char[s].toArray()))\n        ).entrySet().stream()\n     \
    \       .sorted(Map.Entry.comparingByKey())\n            .filter(e -> e.getValue().size()\
    \ > 1)\n            .map(Map.Entry::getValue)\n            .map(String::toLowerCase)\n\
    \            .findFirst().get();\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy9srsle4.java:20: error: incompatible types: String cannot be converted\
    \ to int\n            Collectors.groupingBy(s -> new String(new char[s].toArray()))\n\
    \                                                           ^\n/tmp/tmpy9srsle4.java:20:\
    \ error: cannot find symbol\n            Collectors.groupingBy(s -> new String(new\
    \ char[s].toArray()))\n                                                      \
    \       ^\n  symbol:   method toArray()\n  location: class char[]\n/tmp/tmpy9srsle4.java:25:\
    \ error: incompatible types: cannot infer type-variable(s) R\n            .map(String::toLowerCase)\n\
    \                ^\n    (argument mismatch; invalid method reference\n      incompatible\
    \ types: List<String> cannot be converted to Locale)\n  where R,T are type-variables:\n\
    \    R extends Object declared in method <R>map(Function<? super T,? extends R>)\n\
    \    T extends Object declared in interface Stream\n3 errors\n"
  stdout: ''
  timestamp: 1660011719
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int counter = 0;\n        int maxChar = 0;\n        int indexOfMax\
    \ = 0;\n        String maxWord = \"\";\n        for (int i = 0; i < words.size();\
    \ i++) {\n            int currentCounter = 0;\n            String currentWord\
    \ = words.get(i);\n            for (int j = 0; j < currentWord.length(); j++)\
    \ {\n                currentCounter++;\n            }\n            if (currentCounter\
    \ > maxChar) {\n                maxChar = currentCounter;\n                indexOfMax\
    \ = i;\n            }\n        }\n        if (maxChar > 1) {\n            maxWord\
    \ = words.get(indexOfMax);\n        } else {\n            maxWord = words.get(0);\n\
    \        }\n        return maxWord;\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0f6t0vbg.java:41)\n"
  stdout: ''
  timestamp: 1660011719
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        String max = \"\";\n        int count = 0;\n        for (String\
    \ word : words) {\n            Set<Character> unique = new HashSet<Character>();\n\
    \            for (char c : word.toCharArray()) {\n                if (!unique.add(c))\
    \ {\n                    unique.clear();\n                    break;\n       \
    \         }\n            }\n            if (unique.size() > count) {\n       \
    \         max = word;\n                count = unique.size();\n            }\n\
    \        }\n        return max;\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp038zq16v.java:36)\n"
  stdout: ''
  timestamp: 1660011719
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            Integer num = map.get(word);\n            if (num\
    \ != null) {\n                map.put(word, num + 1);\n            } else {\n\
    \                map.put(word, 1);\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (String word : map.keySet()) {\n    \
    \        Integer count = map.get(word);\n            if (sb.length() == 0 || count\
    \ > sb.length())\n                sb.append(word);\n        }\n        return\
    \ sb.length() == 0 ? \"\" : sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpro3mdm3m.java:36)\n"
  stdout: ''
  timestamp: 1660011719
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        \n        // Write your code here\n        \n        // For\
    \ each word\n        for (String word : words) {\n            // Create a set\
    \ of unique characters\n            Set<Character> set = new HashSet<>();\n  \
    \          // Iterate over each letter in word\n            for (char letter :\
    \ word.toCharArray()) {\n                // Add character to set\n           \
    \     set.add(letter);\n            }\n            // Compare set\n          \
    \  if (set.size() >= words.size()) {\n                return word;\n         \
    \   }\n        }\n        // No unique characters were found\n        return \"\
    \";\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps9ehw6ef.java:38)\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Your code goes here\n        if(words.isEmpty())\n    \
    \    {\n            return \"\";\n        }\n        ArrayList<String> list =\
    \ new ArrayList<String>();\n        for(String word: words)\n        {\n     \
    \       int counter = 0;\n            for(char c: word.toCharArray())\n      \
    \      {\n                counter++;\n            }\n            list.add(new\
    \ StringBuilder().append(counter).append(word));\n        }\n        int max =\
    \ 0;\n        String maxString = \"\";\n        for(int i = 0; i < list.size();\
    \ i++)\n        {\n            String curString = list.get(i);\n            int\
    \ numOfUniqueCharacters = curString.length();\n            if(numOfUniqueCharacters\
    \ > max)\n            {\n                max = numOfUniqueCharacters;\n      \
    \          maxString = curString;\n            }\n        }\n        return maxString;\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnuo4_i9n.java:30: error: incompatible types: StringBuilder cannot\
    \ be converted to String\n            list.add(new StringBuilder().append(counter).append(word));\n\
    \                                                               ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011719
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        final int maxLength = Math.max(words.get(0).length(), words.get(1).length());\n\
    \        Map<String, Integer> map = new HashMap<>();\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int uniqueChar\
    \ = 0;\n            for (int i = 0; i < word.length(); i++) {\n              \
    \  if (!map.containsKey(word.substring(i, i + 1))) {\n                    uniqueChar++;\n\
    \                    map.put(word.substring(i, i + 1), uniqueChar);\n        \
    \        }\n            }\n            result.add(word.substring(0, maxLength));\n\
    \            if (uniqueChar == maxLength) {\n                break;\n        \
    \    }\n        }\n        if (result.isEmpty()) {\n            return \"\";\n\
    \        }\n        int minIndex = 0;\n        boolean minFound = false;\n   \
    \     for (int i = 0; i < result.size(); i++) {\n            int uniqueChar =\
    \ map.get(result.get(i));\n            if (uniqueChar == maxLength) {\n      \
    \          minFound = true;\n                break;\n            }\n         \
    \   if (uniqueChar < maxLength) {\n                if (minIndex == 0) {\n    \
    \                minIndex = i;\n                }\n                if (uniqueChar\
    \ < map.get(result.get(minIndex))) {\n                    minIndex = i;\n    \
    \            }\n            }\n        }\n        return minIndex < result.size()\
    \ ? result.get(minIndex) : \"\";\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.findMax(tmpcoz09092.java:39)\n\tat Problem.main(tmpcoz09092.java:56)\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Write your code here\n        \n        // Sort the list\
    \ lexicographically\n        Collections.sort(words);\n\n        // return the\
    \ first element of the sorted list\n        return words.get(0);\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpme2x__3a.java:26)\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Collections.sort(words);\n        int max = 0;\n        for\
    \ (int i = 0; i < words.size(); i++) {\n            int count = 0;\n         \
    \   for (String w : words) {\n                if (w.length() > count && w.substring(count).equals(words.get(i).substring(count)))\
    \ {\n                    count = w.length();\n                }\n            }\n\
    \            if (count > max) {\n                max = count;\n            }\n\
    \        }\n        return words.get(words.size() - 1);\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphfnxdm8a.java:34)\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Set<String> wordSet = new HashSet<>();\n        for(String\
    \ word : words) {\n            wordSet.add(word);\n        }\n        Collections.sort(wordSet);\n\
    \        int maxLength = wordSet.size();\n        String maxWord = \"\";\n   \
    \     for(String word : wordSet) {\n            if(word.length() > maxLength)\
    \ {\n                maxWord = word;\n                maxLength = word.length();\n\
    \            }\n        }\n        return maxWord;\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp6_gm65y.java:21: error: no suitable method found for sort(Set<String>)\n\
    \        Collections.sort(wordSet);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<String> cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String word : words) {\n            for (int i = 0; i < word.length(); i++)\
    \ {\n                String key = String.valueOf(word.charAt(i));\n          \
    \      if (!counts.containsKey(key)) {\n                    counts.put(key, 1);\n\
    \                } else {\n                    int count = counts.get(key);\n\
    \                    counts.put(key, count + 1);\n                }\n        \
    \    }\n        }\n\n        for (Map.Entry<String, Integer> entry : counts.entrySet())\
    \ {\n            if (entry.getValue() > words.size())\n                return\
    \ entry.getKey();\n        }\n\n        return \"\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7g2ibzla.java:38)\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Collections.sort(words);\n        String max = new String();\n\
    \        for(String word: words) {\n            if(word.length() > max.length())\
    \ {\n                max = word;\n            }\n        }\n        return max;\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpht18fyzr.java:34)\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = 0;\n        String word = null;\n        for (String\
    \ str: words) {\n            int count = count_unique(str);\n            if (count\
    \ > max) {\n                max = count;\n                word = str;\n      \
    \      }\n        }\n        return word;\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvswjivx4.java:20: error: cannot find symbol\n            int count\
    \ = count_unique(str);\n                        ^\n  symbol:   method count_unique(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        long maxCount = 0;\n        \n        // Create a map and\
    \ store word as key and number of occurance as value.\n        Map<String, Integer>\
    \ wordOccuranceMap = new HashMap<>();\n        for (String word : words) {\n \
    \           Integer count = wordOccuranceMap.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            wordOccuranceMap.put(word, count);\n\
    \        }\n\n        // Store the word with maximum count.\n        Integer maxValue\
    \ = Collections.max(wordOccuranceMap.values());\n        if (maxValue != null)\
    \ {\n            String maxWord = null;\n            for (Map.Entry<String, Integer>\
    \ entry : wordOccuranceMap.entrySet()) {\n                if (entry.getValue()\
    \ == maxValue) {\n                    maxWord = entry.getKey();\n            \
    \    }\n            }\n            return maxWord;\n        }\n        return\
    \ \"\";\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxmgy_b6q.java:45)\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Set<Character> uniqueCharacters = new HashSet<>();\n     \
    \   int max = 0;\n        String maxValue = \"\";\n        for (String word :\
    \ words) {\n            for (int i = 0; i < word.length(); i++) {\n          \
    \      if (!uniqueCharacters.contains(word.charAt(i))) {\n                   \
    \ uniqueCharacters.add(word.charAt(i));\n                }\n                if\
    \ (uniqueCharacters.size() >= max) {\n                    maxValue = word;\n \
    \                   max = uniqueCharacters.size();\n                }\n      \
    \      }\n        }\n        return maxValue;\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6pfdtsxv.java:35)\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // write your code\n        Map<String, Integer> map = new\
    \ HashMap<>();\n        for(String word: words) {\n            int c = word.length();\n\
    \            Integer n = map.get(word);\n            map.put(word, (c == n) ?\
    \ 1 : n + 1);\n        }\n        Collections.sort(words, (a, b) -> map.get(b).compareTo(map.get(a)));\n\
    \        return words.get(0);\n}\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because \"<local5>\" is null\n\tat Problem.findMax(tmpg7bmmuy9.java:22)\n\
    \tat Problem.main(tmpg7bmmuy9.java:28)\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // Write your code here\n        List<String> list = words;\n\
    \        int maxIndex = 0;\n        String max = null;\n        for(String s :\
    \ list){\n            int count = 0;\n            for(int i = 0; i < list.length;\
    \ i++){\n                if(list[i].contains(s)){\n                    count ++;\n\
    \                }\n            }\n            if(count > max){\n            \
    \    max = s;\n                maxIndex = i;\n            }\n        }\n     \
    \   return words.get(maxIndex);\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbeghmi_h.java:23: error: cannot find symbol\n            for(int\
    \ i = 0; i < list.length; i++){\n                                   ^\n  symbol:\
    \   variable length\n  location: variable list of type List<String>\n/tmp/tmpbeghmi_h.java:24:\
    \ error: array required, but List<String> found\n                if(list[i].contains(s)){\n\
    \                       ^\n/tmp/tmpbeghmi_h.java:28: error: bad operand types\
    \ for binary operator '>'\n            if(count > max){\n                    \
    \ ^\n  first type:  int\n  second type: String\n/tmp/tmpbeghmi_h.java:30: error:\
    \ cannot find symbol\n                maxIndex = i;\n                        \
    \   ^\n  symbol:   variable i\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ s : words) {\n            for (char c : s.toCharArray()) {\n               \
    \ if (!map.containsKey(c)) {\n                    map.put(c, 1);\n           \
    \     } else {\n                    map.put(c, map.get(c) + 1);\n            \
    \    }\n            }\n        }\n        Set<Character> keys = new HashSet<>(map.keySet());\n\
    \        Iterator it = keys.iterator();\n        while (it.hasNext()) {\n    \
    \        Character c = (Character) it.next();\n            if (map.get(c) == keys.size())\
    \ {\n                return s.substring(0,map.get(c));\n            }\n      \
    \  }\n        return \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgb7hctw8.java:21: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpgb7hctw8.java:23: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpgb7hctw8.java:27: error: incompatible types: cannot infer\
    \ type arguments for HashSet<>\n        Set<Character> keys = new HashSet<>(map.keySet());\n\
    \                                         ^\n    reason: inference variable E\
    \ has incompatible bounds\n      equality constraints: Character\n      lower\
    \ bounds: String\n  where E is a type-variable:\n    E extends Object declared\
    \ in class HashSet\n/tmp/tmpgb7hctw8.java:32: error: cannot find symbol\n    \
    \            return s.substring(0,map.get(c));\n                       ^\n  symbol:\
    \   variable s\n  location: class Problem\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        \n        //System.out.println(words);\n        \n       \
    \ \n        \n        \n        int maxCount = 0;\n        \n        Set<Character>\
    \ uniqueCharacters = new HashSet<Character>();\n        \n        for(String word\
    \ : words){\n            \n            int count = 1;\n            \n        \
    \    for(int i = 0; i<word.length(); i++){\n                \n               \
    \ if(uniqueCharacters.contains(word.charAt(i)))\n                    count++;\n\
    \                else\n                    uniqueCharacters.add(word.charAt(i));\n\
    \            }\n            if(count>maxCount){\n                maxCount = count;\n\
    \            }\n        }\n        \n        \n        \n        for(String word\
    \ : words){\n            \n            int count = 1;\n            \n        \
    \    for(int i = 0; i<word.length(); i++){\n                \n               \
    \ if(uniqueCharacters.contains(word.charAt(i)))\n                    count++;\n\
    \                else\n                    uniqueCharacters.add(word.charAt(i));\n\
    \            }\n            if(count==maxCount){\n                \n         \
    \       return word;\n            }\n        }\n        \n        return \"\"\
    ;\n}\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpul30pxcn.java:65)\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // write code here\n        HashMap<String,Integer> map =\
    \ new HashMap<String,Integer>();\n        for (String w : words) {\n         \
    \   int counter = 0;\n            int index = w.indexOf(\"a\");\n            while\
    \ (index >= 0) {\n                if (map.containsKey(w.substring(0,index))) {\n\
    \                    counter++;\n                }\n                index = w.indexOf(\"\
    a\", index + 1);\n            }\n            map.put(w, counter);\n        }\n\
    \        Set<String> set = new HashSet<String>(map.keySet());\n        set.addAll(map.keySet());\n\
    \        Collections.sort(set);\n        Integer maxCount = set.get(0);\n    \
    \    return set.isEmpty() ? \"\" : set.get(0);\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp80kbgwh2.java:32: error: no suitable method found for sort(Set<String>)\n\
    \        Collections.sort(set);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<String> cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmp80kbgwh2.java:33: error: cannot find symbol\n        Integer\
    \ maxCount = set.get(0);\n                              ^\n  symbol:   method\
    \ get(int)\n  location: variable set of type Set<String>\n/tmp/tmp80kbgwh2.java:34:\
    \ error: cannot find symbol\n        return set.isEmpty() ? \"\" : set.get(0);\n\
    \                                       ^\n  symbol:   method get(int)\n  location:\
    \ variable set of type Set<String>\n3 errors\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = 0;\n        for (String word : words) {\n      \
    \      if (word.length() > max) {\n                max = word.length();\n    \
    \        }\n        }\n        for (String word : words) {\n            if (word.length()\
    \ == max) {\n                word = word.substring(0, max);\n            }\n \
    \       }\n        if (words.size() > 0) {\n            Collections.sort(words);\n\
    \            return words.get(0);\n        }\n        return \"\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0tvisd0t.java:35)\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> counts = new HashMap<>();\n\n       \
    \ for (String word : words) {\n            if (counts.containsKey(word)) {\n \
    \               counts.put(word, counts.get(word) + 1);\n            } else {\n\
    \                counts.put(word, 1);\n            }\n        }\n\n        return\
    \ Collections.max(counts.keySet())\n                + (counts.containsKey(Collections.max(counts.keySet()))\
    \ ? \"\" :\n                        \" \" + findMax(words));\n}\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyr_3dwn6.java:33)\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        return words.stream().filter(\n            s -> s.chars().distinct().count()\
    \ > s.chars().distinct().max()).map(s -> s.substring(0, s.size() - 1)).findFirst().get();\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvvuybm_n.java:18: error: bad operand types for binary operator\
    \ '>'\n            s -> s.chars().distinct().count() > s.chars().distinct().max()).map(s\
    \ -> s.substring(0, s.size() - 1)).findFirst().get();\n                      \
    \                        ^\n  first type:  long\n  second type: OptionalInt\n\
    /tmp/tmpvvuybm_n.java:18: error: cannot find symbol\n            s -> s.chars().distinct().count()\
    \ > s.chars().distinct().max()).map(s -> s.substring(0, s.size() - 1)).findFirst().get();\n\
    \                                                                            \
    \                         ^\n  symbol:   method size()\n  location: variable s\
    \ of type String\n/tmp/tmpvvuybm_n.java:18: error: incompatible types: Object\
    \ cannot be converted to String\n            s -> s.chars().distinct().count()\
    \ > s.chars().distinct().max()).map(s -> s.substring(0, s.size() - 1)).findFirst().get();\n\
    \                                                                            \
    \                                                      ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        \n        ArrayList<String> words2 = new ArrayList<>();\n\
    \        \n        for (String s : words){\n            \n            words2.add(s);\n\
    \            \n        }\n        \n        Arrays.sort(words2);\n        \n \
    \       return words2.get(words2.size()-1);\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5p4zxbbc.java:26: error: no suitable method found for sort(ArrayList<String>)\n\
    \        Arrays.sort(words2);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        final String max = null;\n        for (String word : words)\
    \ {\n            final String uniqueCharacters = removeDuplicates(word);\n   \
    \         if (unique == null) {\n                max = uniqueCharacters;\n   \
    \         } else {\n                if (uniqueCharacters.compareTo(max) > 0) {\n\
    \                    max = uniqueCharacters;\n                }\n            }\n\
    \        }\n        return max;\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwmnwpmm.java:19: error: cannot find symbol\n            final\
    \ String uniqueCharacters = removeDuplicates(word);\n                        \
    \                    ^\n  symbol:   method removeDuplicates(String)\n  location:\
    \ class Problem\n/tmp/tmpdwmnwpmm.java:20: error: cannot find symbol\n       \
    \     if (unique == null) {\n                ^\n  symbol:   variable unique\n\
    \  location: class Problem\n/tmp/tmpdwmnwpmm.java:21: error: cannot assign a value\
    \ to final variable max\n                max = uniqueCharacters;\n           \
    \     ^\n/tmp/tmpdwmnwpmm.java:24: error: cannot assign a value to final variable\
    \ max\n                    max = uniqueCharacters;\n                    ^\n4 errors\n"
  stdout: ''
  timestamp: 1660011720
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Integer counts = words.stream()\n                .map(w ->\
    \ w.chars().distinct().count())\n                .max(Comparator.reverseOrder())\n\
    \                .orElse(0);\n        return words.stream()\n                .filter(w\
    \ -> w.chars().distinct().count() == counts)\n                .min(Comparator.naturalOrder())\n\
    \                .findFirst().get();\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6nfx7dlw.java:20: error: incompatible types: int cannot be converted\
    \ to Long\n                .orElse(0);\n                        ^\n/tmp/tmp6nfx7dlw.java:24:\
    \ error: cannot find symbol\n                .findFirst().get();\n           \
    \     ^\n  symbol:   method findFirst()\n  location: class Optional<String>\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011721
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        HashSet<Character> unique = new HashSet<>();\n        for\
    \ (String word : words) {\n            for (int i = 0; i < word.length(); ++i)\
    \ {\n                if (unique.add(word.charAt(i))) {\n                    unique.add(word.charAt(i));\n\
    \                }\n            }\n        }\n        if (unique.size() > words.size())\
    \ {\n            return \"\";\n        } else {\n            char[] chars = new\
    \ char[unique.size()];\n            for (int i = 0; i < chars.length; i++) {\n\
    \                chars[i] = unique.elementAt(i);\n            }\n            return\
    \ new String(chars);\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuydjxl5z.java:30: error: cannot find symbol\n                chars[i]\
    \ = unique.elementAt(i);\n                                 ^\n  symbol:   method\
    \ elementAt(int)\n  location: variable unique of type HashSet<Character>\n1 error\n"
  stdout: ''
  timestamp: 1660011721
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = 0;\n        String maxWord = \"\";\n\n        for\
    \ (String w : words) {\n            int currCharCount = 1;\n            int currentCount\
    \ = 1;\n            for (int i = 0; i < w.length(); i++) {\n                currCharCount\
    \ += w.charAt(i) == w.charAt(i);\n                currentCount += w.charAt(i);\n\
    \            }\n\n            if (currCharCount > maxCharCount) {\n          \
    \      maxCharCount = currCharCount;\n                maxWord = currentWord;\n\
    \            }\n\n        }\n        return maxWord;\n}\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdjaoqalk.java:24: error: bad operand types for binary operator\
    \ '+'\n                currCharCount += w.charAt(i) == w.charAt(i);\n        \
    \                      ^\n  first type:  int\n  second type: boolean\n/tmp/tmpdjaoqalk.java:28:\
    \ error: cannot find symbol\n            if (currCharCount > maxCharCount) {\n\
    \                                ^\n  symbol:   variable maxCharCount\n  location:\
    \ class Problem\n/tmp/tmpdjaoqalk.java:29: error: cannot find symbol\n       \
    \         maxCharCount = currCharCount;\n                ^\n  symbol:   variable\
    \ maxCharCount\n  location: class Problem\n/tmp/tmpdjaoqalk.java:30: error: cannot\
    \ find symbol\n                maxWord = currentWord;\n                      \
    \    ^\n  symbol:   variable currentWord\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011721
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        // O(n) time and O(n) space\n        HashMap<Integer, String>\
    \ occurrences = new HashMap<>();\n        for (String w : words) {\n         \
    \   int max = 0;\n            for (int i = 0; i < w.length(); ++i) {\n       \
    \         String s = w.substring(0, i);\n                Integer numOccurrences\
    \ = occurrences.getOrDefault(s, 0);\n                occurrences.put(s, numOccurrences\
    \ + 1);\n                if (numOccurrences > max) {\n                    max\
    \ = numOccurrences;\n                }\n            }\n            if (max > 0)\
    \ {\n                // found a word with max number of occurrences\n        \
    \        return w;\n            }\n        }\n        // no word with max number\
    \ of occurrences exists\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdoair15_.java:23: error: incompatible types: int cannot be converted\
    \ to String\n                Integer numOccurrences = occurrences.getOrDefault(s,\
    \ 0);\n                                                                     ^\n\
    /tmp/tmpdoair15_.java:24: error: incompatible types: String cannot be converted\
    \ to Integer\n                occurrences.put(s, numOccurrences + 1);\n      \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011721
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        char maxCount = 'a';\n        int maxLength = 0;\n       \
    \ for (String word : words) {\n            int count = 0;\n            for (int\
    \ i = 0; i < word.length(); i++) {\n                char ch = word.charAt(i);\n\
    \                if (ch != maxCount) {\n                    count = 1;\n     \
    \           } else {\n                    count++;\n                }\n      \
    \          if (count > maxCount) {\n                    maxCount = ch;\n     \
    \               maxLength = word.length();\n                }\n            }\n\
    \        }\n        for (String word : words) {\n            int count = 0;\n\
    \            for (int i = 0; i < word.length(); i++) {\n                char ch\
    \ = word.charAt(i);\n                if (ch != maxCount) {\n                 \
    \   count = 1;\n                } else {\n                    count++;\n     \
    \           }\n                if (count > maxCount) {\n                    maxCount\
    \ = ch;\n                    maxLength = word.length();\n                }\n \
    \           }\n        }\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgk64_l0n.java:52)\n"
  stdout: ''
  timestamp: 1660011721
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = 0;\n        int maxIndex = 0;\n        for(String\
    \ word : words) {\n            int count = word.length();\n            if(count\
    \ > max) {\n                max = count;\n                maxIndex = words.indexOf(word);\n\
    \            }\n        }\n        return words.get(maxIndex);\n}\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofwb9r4n.java:30)\n"
  stdout: ''
  timestamp: 1660011721
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Arrays.sort(words);\n\n        int max = 0;\n\n        for\
    \ (String word : words) {\n            if (word.length() > max)\n            \
    \    max = word.length();\n        }\n\n        StringBuilder builder = new StringBuilder();\n\
    \        for (String word : words) {\n            if (builder.length() > 0) {\n\
    \                builder.append(\" \");\n            }\n            builder.append(word);\n\
    \n            int count = 0;\n            for (int i = 0; i < word.length(); i++)\
    \ {\n                char c = word.charAt(i);\n                count += Character.getNumericValue(c);\n\
    \            }\n\n            if (count > max)\n                return builder.toString();\n\
    \        }\n\n        return \"\";\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpehvqv0ej.java:17: error: no suitable method found for sort(ArrayList<String>)\n\
    \        Arrays.sort(words);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011721
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<String, Integer>();\n\
    \n        // sort by number of unique characters\n        Map<String, Integer>\
    \ map2 = new HashMap<String, Integer>();\n        for (String word : words) {\n\
    \            Integer count = 1;\n            char[] chars = word.toCharArray();\n\
    \            for (char c : chars) {\n                if (!map.containsKey(c))\
    \ {\n                    map.put(c, count);\n                } else {\n      \
    \              map.put(c, map.get(c) + count);\n                }\n          \
    \      count++;\n            }\n        }\n\n        // find the strings with\
    \ maximum number of unique characters\n        String maxKey = Collections.max(map.keySet());\n\
    \n        // return the string with maximum number of unique characters\n    \
    \    String maxValue = Collections.max(map.get(maxKey).descendingIterator());\n\
    \        for (int i : map.get(maxKey).descendingIterator()) {\n            if\
    \ (map.get(maxKey).equals(maxValue)) {\n                return maxValue;\n   \
    \         }\n        }\n        return maxValue;\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpggpfysiv.java:26: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, count);\n                        \
    \    ^\n/tmp/tmpggpfysiv.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + count);\n           \
    \                 ^\n/tmp/tmpggpfysiv.java:38: error: cannot find symbol\n   \
    \     String maxValue = Collections.max(map.get(maxKey).descendingIterator());\n\
    \                                                         ^\n  symbol:   method\
    \ descendingIterator()\n  location: class Integer\n/tmp/tmpggpfysiv.java:39: error:\
    \ cannot find symbol\n        for (int i : map.get(maxKey).descendingIterator())\
    \ {\n                                    ^\n  symbol:   method descendingIterator()\n\
    \  location: class Integer\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011721
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        if (words.size() == 0)\n            return \"\";\n       \
    \ ArrayList<Character> chars = new ArrayList<>();\n        for (String s: words)\
    \ {\n            chars.add(s.toLowerCase().chars().mapToObj(i -> (char) i).distinct().count());\n\
    \        }\n        if (chars.size() == 0) {\n            return \"\";\n     \
    \   }\n        int maxIndex = 0;\n        int maxValue = Integer.MIN_VALUE;\n\
    \        for (Integer index: chars) {\n            if (index > maxValue) {\n \
    \               maxValue = index;\n                maxIndex = index.intValue();\n\
    \            }\n        }\n        words.remove(maxIndex);\n        String result\
    \ = \"\";\n        for (String s: words) {\n            if (s == null) {\n   \
    \             continue;\n            }\n            result += s;\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyr11_ki1.java:21: error: incompatible types: long cannot be converted\
    \ to Character\n            chars.add(s.toLowerCase().chars().mapToObj(i -> (char)\
    \ i).distinct().count());\n                                                  \
    \                                    ^\n/tmp/tmpyr11_ki1.java:28: error: incompatible\
    \ types: Character cannot be converted to Integer\n        for (Integer index:\
    \ chars) {\n                            ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011721
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Set<String> set = new HashSet<String>();\n        for (String\
    \ word : words) {\n            int len = word.length();\n            while (set.size()\
    \ <= len) {\n                set.add(word);\n            }\n        }\n\n    \
    \    return set.stream().filter(str -> str.length() == words.size()).findFirst().get();\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011726
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        return words.stream().sorted().distinct().findFirst().get();\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4l08rs1o.java:20)\n"
  stdout: ''
  timestamp: 1660011721
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int count[] = new int[26];\n        for (String word : words)\
    \ {\n            for (int i = 0; i < word.length(); i++) {\n                count[word.charAt(i)\
    \ - 'a']++;\n            }\n        }\n        Arrays.sort(count);\n        StringBuilder\
    \ result = new StringBuilder();\n        for (String word : words) {\n       \
    \     if (result[result.length() - 1].isEmpty())\n                result.append(word);\n\
    \            else {\n                if (count[word.charAt(0) - 'a'] != count[result.charAt(result.length()\
    \ - 1) - 'a'])\n                    result.append(word);\n            }\n    \
    \    }\n        String max = \"a\";\n        if (words.size() > 1)\n         \
    \   max = words.stream().min(Comparator.comparingInt(s -> count[s.charAt(0) -\
    \ 'a']))\n                    .orElse(words.get(0));\n        return result.toString().equals(max)\
    \ ? max : \"\";\n}\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbd5fara9.java:26: error: array required, but StringBuilder found\n\
    \            if (result[result.length() - 1].isEmpty())\n                    \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011721
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        int max = 0;\n        String maxValue = \"\";\n        for(int\
    \ i = 0; i< words.size(); i++){\n            String word = words.get(i);\n   \
    \         int count = Collections.frequency(words, word);\n            if(count\
    \ > max){\n                max = count;\n                maxValue = word;\n  \
    \          }\n        }\n        return maxValue;\n}\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphzytxybt.java:30)\n"
  stdout: ''
  timestamp: 1660011721
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        String temp = null;\n        int max = 0;\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                for (int j = 0; j < word.length(); j++)\
    \ {\n                    char a = word.charAt(i);\n                    char b\
    \ = word.charAt(j);\n                    int c = Math.abs(a - b);\n          \
    \          if (c > count) {\n                        count = c;\n            \
    \            temp = word;\n                    }\n                }\n        \
    \    }\n            if (count > max) {\n                max = count;\n       \
    \     }\n        }\n        if (temp == null) {\n            return \"\";\n  \
    \      }\n        return temp;\n}\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0dxuxvsi.java:43)\n"
  stdout: ''
  timestamp: 1660011721
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Collections.sort(words);\n        return words.stream().distinct().sorted().findFirst().get();\n\
    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbcciy9ua.java:21)\n"
  stdout: ''
  timestamp: 1660011721
