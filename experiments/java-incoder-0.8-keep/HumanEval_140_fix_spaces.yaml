completions:
- '        return text.replaceAll("\\s+", "_").replaceAll("  +", "-");'
- "        return text.trim()\n                .chars()\n                .map(c ->\
  \ SPACE_CHARS.getOrDefault(Character.toLowerCase(c), c))\n                .collect(Collectors.joining());"
- "        return text\n            .trim()\n            .split(\" \")\n         \
  \   .stream()\n            .map(String::trim)\n            .filter(s -> s.length()\
  \ > 2)\n            .map(s -> s.replaceAll(\" \", \"-\"))\n            .collect(Collectors.joining(\"\
  \"));"
- '        return text.replaceAll(" ", "_");'
- "        System.out.println(\"text = \" + text);\n        StringBuilder sb = new\
  \ StringBuilder(text);\n        sb.replaceAll(\" \", \"_\");\n        int maxCount\
  \ = 2;\n        List<Integer> spaceIndexes = new ArrayList<Integer>();\n       \
  \ for (int i = 0; i < sb.length(); i++) {\n            char c = sb.charAt(i);\n\
  \            if (c == ' ') {\n                if (spaceIndexes.size() <= maxCount)\
  \ {\n                    spaceIndexes.add(i);\n                }\n            }\n\
  \        }\n        sb.setLength(spaceIndexes.size());\n        sb.setCharAt(0,\
  \ Character.toLowerCase(sb.charAt(0)));\n        for (int i = 0; i < spaceIndexes.size();\
  \ i++) {\n            sb.insert(spaceIndexes.get(i), Character.toLowerCase(Character.toString(sb.charAt(spaceIndexes.get(i)))));\n\
  \        }\n        System.out.println(\"after = \" + sb);\n        return sb;"
- "        text = text.replaceAll(\"\\\\s+\", \"_\");\n        return text.replaceAll(\"\
  \\\\s+$\", \"_\");"
- '        return text.replaceAll(" +", " _").replaceAll("\\s{2,}", "-");'
- '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");'
- '        return text.replaceAll(" +", " _");'
- "        char[] chars = text.toCharArray();\n        StringBuilder sb = new StringBuilder();\n\
  \        boolean lastSpace = true;\n        for (char c : chars) {\n           \
  \ if (c == ' ') {\n                if (lastSpace) {\n                    lastSpace\
  \ = false;\n                } else {\n                    lastSpace = true;\n  \
  \                  sb.append('_');\n                }\n            } else {\n  \
  \              sb.append(c);\n                lastSpace = true;\n            }\n\
  \        }\n        return sb.toString();"
- "        Matcher matcher = Pattern.compile(\"\\\\s\").matcher(text);\n        StringBuffer\
  \ buf = new StringBuffer();\n        boolean found = false;\n        while (matcher.find())\
  \ {\n            found = true;\n            matcher.appendReplacement(buf, \" \"\
  );\n        }\n        matcher.appendTail(buf);\n        return buf.toString().trim();"
- "        text = text.replace(\"_\", \"_\");\n        text = text.replaceAll(\" +\"\
  , \" \");\n        return text;"
- "        boolean isSpace = ' ' == text.charAt(0);\n        String result = \"\"\
  ;\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
  \            if (c == ' ') {\n                if (i == text.length() - 1) {\n  \
  \                  result += c;\n                } else {\n                    result\
  \ += c;\n                }\n            }\n            else if (isSpace) {\n   \
  \             result += \"_\";\n                isSpace = false;\n            }\n\
  \            else {\n                result += c;\n            }\n        }\n  \
  \      return result;"
- "        text = text.replaceAll(\"\\\\s+\",\"-\");\n        return text;"
- "        //code here\n        \n        return text;"
- "        text = text.trim();\n        text = text.replaceAll(\"\\\\s+\", \"_\");\n\
  \        text = text.replaceAll(\"\\\\s{2,}\", \"-\");\n        return text;"
- '        return text.replace(" ", "_").replace(" +", "_");'
- "        if (text == null) return null;\n        return text\n            .replace(\"\
  \ \", \"_\")\n            .replace(\"  \", \"_\")\n            .replace(\" \", \"\
  _\");"
- "        if (text == null || text.isEmpty()) return text;\n\n        return text.replaceAll(\"\
  \\\\s+\", \"_\");"
- "        // Your code here\n        StringBuilder b = new StringBuilder(text.length());\n\
  \        for(int i = 0; i < text.length(); i++){\n            char c = text.charAt(i);\n\
  \            if(Character.isSpaceChar(c))\n                b.append(\" \");\n  \
  \          else if(i != text.length() - 1 && text.charAt(i + 1) == ' ')\n      \
  \          b.append('_');\n            else\n                b.append(c);\n    \
  \    }\n        return b.toString();"
- "        return text\n            .trim()\n            .replaceAll(\"\\\\s+\", \"\
  _\")\n            .replaceAll(\"  +\", \"_\")\n            .replaceAll(\"  +\",\
  \ \"-\");"
- "        if(text.length() <= 2) {\n            return text;\n        }\n       \
  \ String[] tokens = text.split(\" \");\n        StringBuilder result = new StringBuilder();\n\
  \        int spaces = 0;\n        for(int i=0;i<tokens.length;i++) {\n         \
  \   if(i+1 < tokens.length && i+1 >= spaces && tokens[i+1].equals(tokens[i])) {\n\
  \                spaces = i+1;\n                if(i+1 < tokens.length && tokens[i+1].equals(\"\
  ,\")) {\n                    spaces += 1;\n                }\n            } else\
  \ {\n                spaces = 0;\n            }\n            result.append(tokens[i]);\n\
  \            if(i < tokens.length - 1 && tokens[i+1].equals(\" \")) {\n        \
  \        result.append(\"_\");\n            }\n            if(i+1 < tokens.length\
  \ && tokens[i+1].equals(\" \")) {\n                spaces += 1;\n            }\n\
  \            if(spaces > 1) {\n                result.append(\"_\");\n         \
  \   }\n        }\n        return result.toString();"
- "        return text.replaceAll(\"\\\\s+\", \"_\")\n                   .replaceAll(\"\
  \\\\s+$\", \"_\")\n                   .replaceAll(\"(^\\\\s+)|(\\\\s+$)\", String::replaceAll);"
- "        if (text == null) return null;\n        String[] splitted = text.split(\"\
  \ \");\n        StringBuilder sb = new StringBuilder(splitted.length * 2);\n   \
  \     for (String s : splitted) {\n            if (s != null && !s.isEmpty()) {\n\
  \                for (int i = 0; i < s.length(); i++) {\n                    char\
  \ c = s.charAt(i);\n                    if (i == 0) {\n                        sb.append(c);\n\
  \                    } else if (i == s.length() - 1) {\n                       \
  \ sb.append(c);\n                    } else {\n                        char prev\
  \ = s.charAt(i - 1);\n                        char next = s.charAt(i + 1);\n   \
  \                     if (Character.isWhitespace(c)) {\n                       \
  \     sb.append(Character.toUpperCase(prev));\n                            sb.append(Character.toUpperCase(next));\n\
  \                        } else {\n                            sb.append(Character.toUpperCase(c));\n\
  \                        }\n                    }\n                }\n         \
  \   }\n        }\n        return sb.toString();"
- "        // Replace spaces with underscores\n        text = text.replaceAll(\"\\\
  \\s+\", \"_\");\n        // If string has more than 2 consecutive spaces, replace\
  \ \n        // consecutive spaces with -\n        text = text.replaceAll(\"\\\\\
  s{2,}\", \"-\");\n        return text;"
- '        return text.replace(" ", "_");'
- '        return text.replaceAll("\\s+", "_");'
- "        \n        return text.replaceAll(\"\\\\s+\", \"_\");"
- "        // Replace all spaces with underscores \n        text=text.replaceAll(\"\
  \\\\s+\", \"_\");\n        // Replace all spaces followed by a space with dashes\
  \ \n        text=text.replaceAll(\"\\\\s(\\\\s)\", \"_$1\");\n        // Replace\
  \ all spaces followed by a dash with dashes \n        text=text.replaceAll(\"\\\\\
  s(-)\", \"_$1\");\n        return text;"
- "        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
  \        boolean consecutive = false;\n        for (String word : words) {\n   \
  \         sb.append(word);\n            if (sb.charAt(sb.length() - 1) == ' ') {\n\
  \                consecutive = true;\n            } else {\n                consecutive\
  \ = false;\n            }\n            if (consecutive) {\n                sb.append(\"\
  \ \");\n            }\n        }\n        return sb.toString();"
- "        text = text.replaceAll(\"\\\\s+\", \"_\");\n        ArrayList<String> list\
  \ = new ArrayList<String>();\n        list.add(text);\n        list = list.stream()\n\
  \                .map((s) -> s.replaceAll(\" \", \"_\"))\n                .collect(Collectors.toList());\n\
  \        String temp=\"\";\n        for( String s : list )\n        {\n        \
  \    if(temp.length()!=s.length())\n            {\n                temp=temp+\"\
  _\";\n            }\n            else\n            {\n                temp=temp;\n\
  \            }\n            temp+=s;\n        }\n        return temp;"
- "        // Write your code here\n        String result = \"\";\n        char[]\
  \ chars = text.toCharArray();\n        Arrays.sort(chars);\n        for(int i =\
  \ 0; i < chars.length; i++){\n            if(chars[i] == ' '){\n               \
  \ result = result + \"_\";\n            }else if(chars[i] == ' '){\n           \
  \     result = result + \"-\";\n            }else{\n                result = result\
  \ + chars[i];\n            }\n        }\n        return result;"
- "        text = text.replaceAll(\" \", \"_\");\n        if (text.contains(\" \"\
  ) && text.substring(text.indexOf(\" \")).contains(\" \")) \n            text = text.replaceAll(\"\
  \ \", \"-\");\n        return text;"
- "        return text.replaceAll(\"\\\\s+\", \" \").trim()\n                    \
  \ .replaceAll(\"\\\\s+\", \" \");"
- "        String fixed_text = text;\n\n        fixed_text = fixed_text.replace(\"\
  \ \", \"_\");\n        fixed_text = fixed_text.replaceAll(\"\\\\s+\", \"-\");\n\n\
  \        return fixed_text;"
- "        // Replace all spaces with underscores \n        // String fixedText =\
  \ text.replaceAll(\"\\\\s\", \"_\");\n\n        // Replace multiple spaces with\
  \ a single dash \n        String fixedText = text.replaceAll(\"\\\\s+\", \" - \"\
  );\n        return fixedText;"
- "        String[] split = text.split(\"\\\\s+\");\n        StringBuilder sb = new\
  \ StringBuilder();\n        boolean lastSpace = true;\n        for (String s : split)\
  \ {\n            if (!lastSpace) {\n                sb.append('_');\n          \
  \  }\n            lastSpace = !lastSpace;\n            sb.append(s);\n        }\n\
  \        return sb.toString();"
- "        //\n        String fixed = text;\n        fixed = fixed.trim();\n     \
  \   int i = fixed.length() - 1;\n        while ((i >= 0) && (fixed.charAt(i) ==\
  \ ' ')) {\n            fixed = fixed.substring(0, i) + fixed.substring(i + 1);\n\
  \            i = i - 1;\n        }\n        if (fixed.length() > 2) {\n        \
  \    fixed = fixed.trim();\n            int j = fixed.length() - 2;\n          \
  \  while ((j >= 0) && (fixed.charAt(j) == ' ')) {\n                fixed = fixed.substring(0,\
  \ j) + '_' + fixed.substring(j + 1);\n                j = j - 1;\n            }\n\
  \        }\n        return fixed;"
- "        text.trim(); // remove trailing spaces\n        text = text.replaceAll(\"\
  \\\\s+\", \"_\"); // replace all consecutive spaces with \"_\"\n        return text.length()\
  \ > 2 ? \"_\" + text : text;"
- "        // Write your code here\n        StringBuilder sb = new StringBuilder(text);\n\
  \        for(int i = 0; i < sb.length(); i++) {\n            char c = sb.charAt(i);\n\
  \            if (c == ' ') {\n                for (int j = i+1; j < sb.length();\
  \ j++) {\n                    char next = sb.charAt(j);\n                    if\
  \ (c == '\\0' && next == '\\0' || c == '\\0' && next != ' ' || c == ' ' && next\
  \ == ' ') {\n                        sb.replace(i, i+1, c);\n                  \
  \      i = j;\n                        break;\n                    }\n         \
  \       }\n            }\n        }\n        return sb.toString();"
- "        // Write your code here\n        String[] s = text.split(\"\\\\s+\");\n\
  \        StringBuffer sb = new StringBuffer();\n        for (String ss : s) {\n\
  \            if (ss.length() > 2) {\n                for (int i = 0; i < ss.length();\
  \ i++) {\n                    if (ss.length() - i == 1) {\n                    \
  \    sb.append(ss.substring(i, i + 1));\n                        break;\n      \
  \              }\n                    sb.append(ss.substring(i, i + 1));\n     \
  \               sb.append(\"-\");\n                }\n            }\n          \
  \  else {\n                sb.append(ss);\n            }\n            sb.append(\"\
  _\");\n        }\n        return sb.toString();"
- "        text = text.replaceAll(\"\\\\s\", \"\");\n        text = text.replaceAll(\"\
  \  \", \"_\");\n        return text;"
- "        String[] words = text.split(\" \");\n        if (words.length > 2) {\n\
  \            int i = 0;\n            while (words[i].equals(\" \")) {\n        \
  \        words[i++] = \"_\";\n            }\n            while (words[i + 1].equals(\"\
  \ \")) {\n                words[i + 1] = \"-\";\n                i++;\n        \
  \    }\n        }\n        return String.join(\" \", words);"
- "        text = text.trim(); // remove leading & trailing whitespace\n        text\
  \ = text.replaceAll(\"\\\\s\",\"\"); // remove all whitespace\n        text = text.replaceAll(\"\
  \\\\s+\",\"-\"); // replace consecutive whitespace with -\n        return text;"
- "        if (text == null) return null;\n\n        char[] arr = text.toCharArray();\n\
  \        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == ' ')\
  \ {\n                if (i + 1 < arr.length && arr[i + 1] == ' ') arr[i] = '-';\n\
  \                else arr[i] = '_';\n            }\n        }\n        return String.valueOf(arr);"
- '        return text.replace(" ", "_");'
- "        String[] words = text.split(\"\\\\s+\");\n        StringBuilder fixed =\
  \ new StringBuilder();\n        int prev_i = 0;\n        for(String w : words) {\n\
  \            int i = w.indexOf( ' ');\n            if( i == -1) {\n            \
  \    fixed.append(w);\n                continue;\n            }\n            if(\
  \ prev_i == i) {\n                fixed.append(w);\n            } else {\n     \
  \           fixed.append(w.substring(0, i));\n                fixed.append( '-');\n\
  \                fixed.append(w.substring(i + 1));\n            }\n            prev_i\
  \ = i;\n        }\n        return fixed.toString();"
- "        if (text == null)\n            return \"\";\n\n        List<String> list\
  \ = new ArrayList<String>();\n        int index = 0;\n        while (index < text.length())\
  \ {\n            list.add(text.substring(index, index + 1));\n            index++;\n\
  \n            if (text.length() <= index\n                    || text.charAt(index)\
  \ != ' '\n                    || text.charAt(index) != ' ') {\n                if\
  \ (index > 0) {\n                    String element = list.get(list.size() - 1);\n\
  \                    if (!element.endsWith(\" \")\n                            &&\
  \ list.size() > 2) {\n                        list.set(0, list.get(0)\n        \
  \                        + element.substring(0, 1) + \"-\"\n                   \
  \             + element.substring(1));\n                    } else {\n         \
  \               list.set(0, list.get(0)\n                                + element.substring(0,\
  \ 1));\n                    }\n                }\n                index--;\n   \
  \         }\n        }\n        return list.get(0);"
- "        return text.replaceAll(\"\\\\s+\", \"_\")\n                .replaceAll(\"\
  \\\\s+$|(?<=\\\\S)\\\\S+(?=\\\\S)|(?<=\\\\S)\\\\S+$\", \"_\");"
- "        text = text.replaceAll(\"\\\\s+\", \"_\");\n        text = text.replaceAll(\"\
  ( )+\", \"_\");\n        return text;"
- "        StringBuilder sb = new StringBuilder(text);\n        boolean allSpace =\
  \ true;\n        for(int i = 0; i < sb.length(); i++) {\n            char c = sb.charAt(i);\n\
  \            if(Character.isSpaceChar(c)) {\n                allSpace = false;\n\
  \            } \n            if(allSpace) {\n                sb.setCharAt(i, Character.toLowerCase(c));\n\
  \            }\n        }\n        return sb.toString();"
- '        return text.replaceAll(" ", "_");'
- "        return text.replaceAll(\"\\\\s\", \"\")\n                .replaceAll(\"\
  \  +\", \"_\")\n                .replaceAll(\"  +\", \"_\");"
- "        return text\n                .replaceAll(\"\\\\s+\", \"_\")\n         \
  \       .replaceAll(\"[ ]{2,}\", \"-\");"
- "        text = text.replace(\"\\\\s\", \"_\");\n        text = text.replace(\"\
  \ \", \"_\");\n        text = text.replaceAll(\"_{2,}\", \"_\");\n        return\
  \ text;"
- "        StringBuilder sb = new StringBuilder(text);\n        sb.replace(\" \",\
  \ \"_\");\n        sb.replaceAll(\" \", \"-\");\n        String fixed = sb.toString();\n\
  \        if (fixed.length() > 2 && fixed.endsWith(\"-\"))\n            fixed = fixed.substring(0,\
  \ fixed.length() - 1);\n        return fixed;"
- "        return text\n            .replaceAll(\" \", \"_\")\n            .replaceAll(\"\
  \  +\", \"_\")\n            .replaceAll(\"  \", \"_\");"
- "        \n        String s = text;\n        int i = -1;\n        while (++i < s.length())\
  \ {\n            char c = s.charAt(i);\n            if (c == ' ') {\n          \
  \      s = s.substring(0, i) + \"_\" + s.substring(i + 1);\n            } else if\
  \ (c != ' ' && i > 0 && c != s.charAt(i - 1) && c != s.charAt(i + 1)) {\n      \
  \          s = s.substring(0, i) + \"-\" + s.substring(i + 1);\n            }\n\
  \        }\n        return s;"
- "        // Write your solution here\n        for(int i=0;i<text.length();i++){\n\
  \            if(text.charAt(i)==' '){\n                text=text.replaceAll(\" \"\
  ,\"_\");\n            }\n        }\n        for(int i=0;i<text.length();i++){\n\
  \            if(text.charAt(i)==' ' && text.charAt(i+1)==' '){\n               \
  \ text=text.replaceAll(\" \",\"_\");\n            }\n        }\n        for(int\
  \ i=0;i<text.length();i++){\n            if(text.charAt(i)==' ' && text.charAt(i+1)!='\
  \ '){\n                text=text.replaceAll(\" \",\"_\");\n            }\n     \
  \   }\n        return text;"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length();\
  \ i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n  \
  \              sb.append(\"_\");\n            } else if (Character.isWhitespace(c))\
  \ {\n                sb.append(c);\n            } else {\n                sb.append(c);\n\
  \            }\n        }\n        return sb.toString();"
- '        return text.replaceAll("\\s+", "_");'
- "        if(text == null || text.trim().length() == 0) {\n            return text;\n\
  \        }\n        StringBuilder result = new StringBuilder();\n        boolean\
  \ isConsecutive = false;\n        int i = 0;\n        int len = text.length();\n\
  \        while(i < len) {\n            char c = text.charAt(i);\n            if(c\
  \ == ' ') {\n                isConsecutive = false;\n                result.append('_');\n\
  \            }\n            else if(c != ' ' && isConsecutive) {\n             \
  \   result.append(\"-\");\n            }\n            else if(c == ' ' && isConsecutive)\
  \ {\n                result.append('-');\n                isConsecutive = false;\n\
  \            }\n            else if(c != ' ' && !isConsecutive) {\n            \
  \    result.append(c);\n                isConsecutive = true;\n            }\n \
  \           i++;\n        }\n        return result.toString();"
- "        //write your code here\n        char[] arr = text.toCharArray();\n    \
  \    for (int i = 0; i < arr.length; i++)\n        {\n            char c = arr[i];\n\
  \            if (c == ' ')\n            {\n                arr[i] = '_';\n     \
  \           i++;\n            }\n            else if (i > 2 && (arr[i + 1] == '\
  \ ' || arr[i + 1] == '\\n' || arr[i + 1] == '\\r'))\n            {\n           \
  \     arr[i] = '-';\n                i++;\n            }\n        }\n        return\
  \ new String(arr);"
- '        return text.replaceAll("\\s+", "_");'
- "        StringBuilder result = new StringBuilder();\n        int i = 0;\n     \
  \   while (i < text.length()) {\n            char c = text.charAt(i);\n        \
  \    if (c == ' ') {\n                result.append(c);\n                i++;\n\
  \            } else if (c == ' ' && text.charAt(i + 1) == ' ') {\n             \
  \   result.append(c).append('-');\n                i += 2;\n            } else {\n\
  \                result.append(c);\n                i++;\n            }\n      \
  \  }\n        return result.toString();"
- "        text = text.replaceAll(\"\\\\s+\", \"_\");\n        if (text.contains(\"\
  \  \"))\n            text = text.replaceAll(\"  \", \"_\");\n        return text;"
- "        //write your code here\n        String[] a = text.split(\" \");\n     \
  \   String output = \"\";\n        for( String s : a ){\n            output += s;\n\
  \            int count = 0;\n            for( int i = 0; i < s.length(); i++ ){\n\
  \                if ( s.charAt(i) == ' ' ){\n                    count++;\n    \
  \            }\n                else {\n                    if( count == 2 ){\n\
  \                        output += \"_\";\n                    }\n             \
  \       else{\n                        output += \"-\";\n                    }\n\
  \                    count = 0;\n                }\n            }\n        }\n \
  \       return output;"
- "        StringBuilder sb = new StringBuilder(text);\n        char c;\n        while\
  \ (sb.length() != text.length()) {\n            int spaceIndex = sb.lastIndexOf('\
  \ ');\n            if (spaceIndex > 0) {\n                c = sb.get(spaceIndex);\n\
  \                if (Character.isSpaceChar(c)) {\n                    sb.delete(spaceIndex,\
  \ spaceIndex + 2);\n                } else if (Character.isSpaceChar(c = sb.charAt(spaceIndex\
  \ - 1))) {\n                    sb.delete(spaceIndex, spaceIndex - 2);\n       \
  \         } else {\n                    sb.insert(spaceIndex, '_');\n          \
  \      }\n            } else {\n                c = sb.charAt(sb.length());\n  \
  \              if (Character.isSpaceChar(c)) {\n                    sb.append('_');\n\
  \                } else {\n                    sb.append(c);\n                }\n\
  \            }\n        }\n        return sb.toString();"
- '        return text.trim().replaceAll(" ", "_").replaceAll("\\s{2,}", "-");'
- "        StringBuilder sb = new StringBuilder(text);\n        List<String> list\
  \ = Arrays.asList(text.split(\"\\\\s+\"));\n        list.stream().filter(s -> !s.isEmpty()).forEach(s\
  \ -> {\n            if (!s.equals(\" \")){\n                sb.append(\" \").append(s);\n\
  \            }\n        });\n        if (list.size() > 2) {\n            list.stream().filter(s\
  \ -> s.equals(\" \")).forEach(s -> {\n                sb.append(\" \");\n      \
  \      });\n        }\n        return sb.toString();"
- "        return text.replaceAll(\"\\\\s+\", \"_\")\n            .replaceAll(\" \
  \ +\", \"_\")\n            .replaceAll(\" +\", \" \");"
- '        return text.replaceAll("\\s+", "_");'
- '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");'
- "        return text.replaceAll(\"\\\\s+\", \"_\")\n                   .replaceAll(\"\
  \\\\s+$\", \"_\");"
- '       return text.replaceAll("\\s+", " ").replaceAll("(^\\s+|\\s+$)", "-");'
- "        StringBuilder builder = new StringBuilder();\n        for(int i = 0; i\
  \ < text.length(); i++) {\n            char c = text.charAt(i);\n            if\
  \ (c == ' ') {\n                if (i == text.length() - 1) {\n                \
  \    // special case\n                    builder.append(c);\n                }\n\
  \                else if (text.charAt(i + 1) == ' ') {\n                    builder.append(c);\n\
  \                }\n                else {\n                    builder.append(c\
  \ + \"_\");\n                }\n            }\n            else {\n            \
  \    builder.append(c);\n            }\n        }\n        return builder.toString();"
- "        String fixed = text.replace(\" \", \"_\");\n        if (fixed.length()\
  \ > 2 && fixed.matches(\"\\\\s{2,}\"))\n            fixed = fixed.replaceAll(\"\\\
  \\s+\", \"-\");\n        return fixed; "
- '        return text.replaceAll("\\s+", "_");'
- '        return text.replaceAll("\\s+", "_");'
- "        // your code here\n        return text;"
- "        // return text with spaces replaced by underscores\n        return text.replaceAll(\"\
  \\\\s+\", \"_\");"
- "        StringBuilder result = new StringBuilder(text);\n        int lastSpace\
  \ = 0, consecutiveSpaces = 0;\n        while ((lastSpace = result.indexOf(\" \"\
  , lastSpace)) >= 0) {\n            result.replace(lastSpace, lastSpace + 1, \"\"\
  );\n            consecutiveSpaces = 0;\n            while (result.indexOf(\" \"\
  , lastSpace + 1) >= 0) {\n                result.replace(lastSpace + 1, lastSpace\
  \ + 1 + consecutiveSpaces, \"\");\n                consecutiveSpaces++;\n      \
  \      }\n            lastSpace = result.indexOf(\" \", lastSpace);\n        }\n\
  \        return result.toString();"
- "        return text.replaceAll(\"\\\\s+\", \"_\")\n                    .replaceAll(\"\
  \\\\s{2,}\", \"-\");"
- "        text = text.replace(\" \", \"_\");\n        if (text.contains(\" \")) {\n\
  \            String space = \" \";\n            text = text.replaceAll(space, \"\
  _\");\n        }\n        if (text.contains(\"  \")) {\n            String space2\
  \ = \"  \";\n            text = text.replaceAll(space2, \"_\");\n        }\n   \
  \     return text;"
- "        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
  \        for( int i=0; i< words.length; i++) {\n            sb.append(words[i]);\n\
  \            if(i < words.length - 1) {\n                sb.append(\" \");\n   \
  \         }\n        }\n        return sb.toString();"
- '        return text.replaceAll(" ", "_");'
- '        return text.replaceAll("\\s+", " _");'
- "        if (text == null)\n            return null;\n        return text.replaceAll(\"\
  \\\\s+\", \"_\");"
- '        return text.trim().replaceAll("\\s+", "_");'
- "        return text.replaceAll(\" \", \"_\")\n                    .replaceAll(\"\
  \\\\s+\", \"_\")\n                    .replaceAll(\"\\\\s+$\", \"_\")\n        \
  \            .replaceAll(\"^\\\\s+\", \"_\")\n                    .replaceAll(\"\
  \\\\s+\\\\s+\", \"_\");"
- '        return text.replaceAll("\\s+", "_").replaceAll("(^\\s+)|(  +)", "_");'
- "        StringBuilder sb = new StringBuilder(text);\n        sb.replace(\" \",\
  \ \"_\");\n        sb.replaceAll(\" +\", \" \");\n        return sb.toString();"
- "        String result = text;\n        int length = text.length();\n        StringBuilder\
  \ sb = new StringBuilder(length);\n        int spaces = 0;\n        for (int i =\
  \ 0; i < length; i++) {\n            char c = text.charAt(i);\n            if(c\
  \ == ' ') {\n                spaces++;\n                if((i+1) < length && text.charAt(i+1)\
  \ == ' ') {\n                    spaces++;\n                }\n            }\n \
  \           else {\n                spaces--;\n                if(spaces < 2) {\n\
  \                    sb.append('_');\n                }\n                else {\n\
  \                    sb.append('-');\n                }\n            }\n       \
  \ }\n        return result;"
- "        //TODO Implement\n        String fixedString = text;\n        if(text.contains(\"\
  \ \")){\n            String [] arrayOfSpaces = text.split(\" \");\n            String\
  \ [] arrayOfSpaces_1 = arrayOfSpaces[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_2 = arrayOfSpaces_1[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_3 = arrayOfSpaces_2[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_4 = arrayOfSpaces_3[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_5 = arrayOfSpaces_4[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_6 = arrayOfSpaces_5[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_7 = arrayOfSpaces_6[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_8 = arrayOfSpaces_7[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_9 = arrayOfSpaces_8[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_10 = arrayOfSpaces_9[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_11 = arrayOfSpaces_10[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_12 = arrayOfSpaces_11[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_13 = arrayOfSpaces_12[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_14 = arrayOfSpaces_13[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_15 = arrayOfSpaces_14[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_16 = arrayOfSpaces_15[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_17 = arrayOfSpaces_16[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_18 = arrayOfSpaces_17[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_19 = arrayOfSpaces_18[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_20 = arrayOfSpaces_19[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_21 = arrayOfSpaces_20[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_22 = arrayOfSpaces_21[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_23 = arrayOfSpaces_22[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_24 = arrayOfSpaces_23[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_25 = arrayOfSpaces_24[1].split(\"\\\\s\");\n            String []\
  \ arrayOfSpaces_26 = arrayOfSpaces_25[1].split(\"\\\\s\");\n            String [] "
- "        // Replace all spaces in the string with underscores\n        return text.replaceAll(\"\
  \\\\s+\", \"_\");"
- '        return text.replace(" ", "_").trim().replaceAll(" +", " ");'
- "        StringBuilder fixedText = new StringBuilder();\n        StringBuilder currentText\
  \ = new StringBuilder();\n        StringBuilder currentFixedText = new StringBuilder();\n\
  \        boolean spaceChange = false;\n        for (int i = 0; i < text.length();\
  \ i++) {\n            char currentChar = text.charAt(i);\n            if (currentChar\
  \ == ' ') {\n                if (spaceChange) {\n                    currentFixedText.append(\"\
  \ \");\n                    spaceChange = false;\n                }\n          \
  \      else {\n                    currentFixedText.append(\"_\");\n           \
  \         spaceChange = true;\n                }\n            }\n            else\
  \ {\n                currentFixedText.append(currentChar);\n            }\n    \
  \    }\n        fixedText.append(currentFixedText);\n        return fixedText.toString();"
- '        return text.replace(" ", "_").replaceAll("\\s{2,}", "-");'
- '        return text.trim().replaceAll(" ", "_");'
- "        int length = text.length();\n        StringBuilder sb = new StringBuilder();\n\
  \        int i = 0;\n        char currentChar = text.charAt(i);\n        while (i\
  \ < length) {\n            if (currentChar == ' ') {\n                if (i < length\
  \ - 1) {\n                    char nextChar = text.charAt(i + 1);\n            \
  \        if (nextChar == ' ') {\n                        sb.append('_');\n     \
  \                   i += 2;\n                    } else {\n                    \
  \    sb.append(nextChar);\n                        i++;\n                    }\n\
  \                } else {\n                    sb.append('_');\n               \
  \     i++;\n                }\n            } else {\n                sb.append(currentChar);\n\
  \                i++;\n            }\n            currentChar = text.charAt(i);\n\
  \        }\n        return sb.toString();"
- "        return text.replaceAll(\"\\\\s+\", \" \")\n                .replaceAll(\"\
  (^|\\\\s+)\\\\s+\", \"$1\")\n                .replaceAll(\"\\\\s+(\\\\s+|$)\", \"\
  _\");"
- "        // remove spaces at either end of the string\n        String s = text.replaceAll(\"\
  \ +\", \"\");\n        if (s.length() > 2) {\n            s = s.replaceAll(\" +\"\
  , \"-\");\n        }\n        return s;"
- "        \n        StringBuilder builder = new StringBuilder();\n\n        for(int\
  \ i = 0; i < text.length(); i++) {\n            if(Character.isSpace(text.charAt(i)))\
  \ {\n                builder.append(\" \");\n            } else {\n            \
  \    builder.append(text.charAt(i));\n            }\n        }\n\n        return\
  \ builder.toString();"
- "        if (text == null) return null;\n        text = text.replaceAll(\"\\\\s+\"\
  , \" \");\n        return text.replaceAll(\"\\\\s{2,}\", \"_\");"
- '        return text.replaceAll("\\s+", " ").trim().replaceAll("\\s{2,}", "-").toUpperCase();'
- "        return text\n            .replace(\"\\\\s+\", \"_\")\n            .replace(\"\
  \  +\", \"-\");"
- "        if(text == null || text.length() < 2) {\n            return text;\n   \
  \     }\n\n        // Replace all spaces in text with underscores\n        text\
  \ = text.replaceAll(\"\\\\s+\", \"_\");\n\n        // Remove all consecutive underscores\
  \ from text\n        text = text.replaceAll(\"_+\", \"_\");\n\n        return text;"
- '        return text.replaceAll("\\s+", "_");'
- "        StringBuilder fixed = new StringBuilder();\n        Matcher m = Pattern.compile(\"\
  \\\\s\").matcher(text);\n        while (m.find()) {\n            int count = 0;\n\
  \            while (m.find() && count < 2) {\n                m.appendReplacement(fixed,\
  \ \"\");\n                count++;\n            }\n            m.appendReplacement(fixed,\
  \ \"_\");\n        }\n        m.appendTail(fixed);\n        return fixed.toString();"
- "        return text.replaceAll(\"\\\\s+\", \" \")\n            .replaceAll(\"\\\
  \\s+(?=([^\\\\s]*)\\\\S*[^\\\\s]*$)\", \"_\")\n            .replaceAll(\"\\\\s+(?=(\\\
  \\S*)\\\\s+(?!\\\\S)|\\\\s+)\", \"_\");"
- "        StringBuilder sb = new StringBuilder(text);\n        String[] tokens =\
  \ text.split(\"\\\\s+\");\n\n        // for each token, replace the spaces with\
  \ underscores\n        for (String token : tokens) {\n            sb.replace(token.indexOf(\"\
  \ \"), token.indexOf(\" \") + 1, token.substring(token.indexOf(\" \") + 1));\n \
  \       }\n\n        if (sb.length() > 2) {\n            // if there are more than\
  \ two consecutive spaces\n            sb.replace(sb.indexOf(\" \"), sb.indexOf(\"\
  \ \") + 1, sb.substring(sb.indexOf(\" \") + 1));\n        }\n\n        return sb.toString();"
- "        String replaceAll = text.replaceAll(\"\\\\s+\", \"_\");\n        String\
  \ replaceAllSpace = replaceAll.replaceAll(\"\\\\s{2,}\", \"-\");\n        return\
  \ replaceAllSpace;"
- "        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
  \        for( int i=0; i<words.length; i++ ) {\n            String word = words[i];\n\
  \            if( word.equals(\"\") ) continue;\n            if( word.length() >\
  \ 1 ) sb.append(word.substring(0,1));\n            else sb.append(word);\n     \
  \       if( i+1 < words.length ) {\n                String nextWord = words[i+1];\n\
  \                if( nextWord.equals(\"\") ) continue;\n                if( nextWord.equals(\"\
  \ \") ) sb.append(nextWord);\n                else if( nextWord.equals(\" \") )\n\
  \                    sb.append(\"_\");\n                else sb.append(nextWord.substring(0,1));\n\
  \            }\n            if( i < words.length-1 ) {\n                String lastWord\
  \ = words[i-1];\n                if( lastWord.equals(\"\") ) continue;\n       \
  \         if( lastWord.equals(\" \") ) sb.append(lastWord);\n                else\
  \ if( lastWord.equals(\" \") )\n                    sb.append(\"_\");\n        \
  \        else sb.append(lastWord.substring(0,1));\n            }\n        }\n  \
  \      return sb.toString();"
- "        StringBuilder buf = new StringBuilder(text);\n        \n        while(buf.length()\
  \ > 2) {\n            int pos = buf.indexOf(\" \");\n            \n            int\
  \ nextSpace = buf.indexOf(' ', pos+1);\n            if(nextSpace == -1) {\n    \
  \            nextSpace = buf.length();\n            }\n            \n          \
  \  buf.replace(pos, nextSpace-1, \"_\");\n        }\n        \n        return buf.toString();"
- "        \n        String[] result = text.split(\" \");\n        \n        // Replacing\
  \ consecutive spaces with -\n        result = result.stream().map(str -> str.replaceAll(\"\
  \ \", \"_\")).collect(Collectors.toList());\n        \n        // Replacing any\
  \ remaining spaces with -\n        result = result.stream().map(str -> str.replaceAll(\"\
  \ +\", \"_\")).collect(Collectors.toList());\n        \n        // Replacing any\
  \ remaining spaces with - if more than 2 spaces\n        result = result.stream().map(str\
  \ -> str.replaceAll(\" +\", str.length() > 2 ? \"_\" : \"\")).collect(Collectors.toList());\n\
  \        \n        // Replacing spaces with _\n        result = result.stream().map(str\
  \ -> str.replaceAll(\" \", \"_\")).collect(Collectors.toList());\n        \n   \
  \     return StringUtils.join(result, \"\");"
- "        char[] chars = text.toCharArray();\n        StringBuilder sb = new StringBuilder();\n\
  \        char ch;\n        int i;\n\n        for (i = 0, ch = ' ', i < chars.length;\
  \ i++) {\n            if (ch == ' ') {\n                sb.append(ch);\n       \
  \         ch = ' ';\n            }\n            else {\n                ch = chars[i];\n\
  \            }\n        }\n        sb.append(ch);\n\n        int spaces = 0;\n \
  \       for (i = 0, ch = ' ', i < chars.length; i++) {\n            if (ch == '\
  \ ') {\n                spaces++;\n                ch = ' ';\n            }\n  \
  \          else {\n                spaces--;\n            }\n            sb.append(ch);\n\
  \        }\n\n        if (spaces > 1) {\n            int count = 0;\n          \
  \  for (i = 0; i < chars.length; i++) {\n                if (chars[i] == ' ') {\n\
  \                    count++;\n                    if (count > 1) {\n          \
  \              sb.append('-');\n                    }\n                }\n     \
  \       }\n        }\n\n        return sb.toString();"
- "        text = text.replace(\" \", \"-\");\n        if(text.trim().length() > 2){\n\
  \            text = text.replaceAll(\"\\\\s+\", \"-\");\n        }\n        return\
  \ text;"
- "        StringBuilder sb = new StringBuilder(text);\n        // replace all spaces\
  \ with underscores and replace all \n        // consecutive spaces with hyphen\n\
  \        return \n            sb.replace(\" \", \"_\")\n            .replace(\"\
  \ \", \"-\");"
- "        StringBuilder result = new StringBuilder();\n        String[] words = text.split(\"\
  \\\\s\");\n        for (String word : words) {\n            if (word != null &&\
  \ !word.isEmpty()) {\n                String s = String.valueOf(word);\n       \
  \         if (s.length() > 2) {\n                    s = s.replaceAll(\"\\\\s+\"\
  , \" \");\n                    s = s.replaceAll(\"\\\\s+\", \"-\");\n          \
  \      }\n                result.append(s);\n            }\n            result.append(\"\
  \\n\");\n        }\n        return result.toString();"
- '        return text.trim().replaceAll("\\s+", "_");'
- "        if (text == null || text.isEmpty())\n            return text;\n       \
  \ return text.replaceAll(\" +\", \"_\").replaceAll(\"  +\", \"_\");"
- "        // Create a string that we can replace spaces with underscores\n      \
  \  String fixed = text.replaceAll(\"\\\\s+\", \"_\");\n\n        // Check to see\
  \ if the number of consecutive spaces \n        // is more than 2. \n        int\
  \ spaces = fixed.length() - fixed.replaceAll(\"\\\\s+\", \"\").length();\n     \
  \   if (spaces > 2) {\n            // If so, trim off the spaces and replace with\
  \ - \n            fixed = fixed.substring(0, fixed.length() - spaces).replaceAll(\"\
  \\\\s+\", \"-\");\n        }\n\n        return fixed;"
- '        return text.replaceAll(" ", "_").replaceAll("\\s{2,}", "_");'
- '        return text.replaceAll(" +", "_").replaceAll("( +)(\\w)", "_$2").replaceAll("\\W+",
  "_");'
- '        return text.replaceAll("\\s+", "_");'
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length();\
  \ i++) {\n            char c = text.charAt(i);\n            if (c == ' ' || c ==\
  \ '\\t' || c == '\\n') {\n                sb.append('_');\n            } else {\n\
  \                sb.append(c);\n            }\n        }\n        return sb.toString();"
- "        String[] arr = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
  \        for(int i = 0; i < arr.length; i++) {\n            if (i < arr.length -\
  \ 1)\n                sb.append(arr[i]).append(\" \");\n            else\n     \
  \           sb.append(arr[i]).append(\" \");\n        }\n        return sb.toString();"
- "        // Replace all spaces with underscores\n        text = text.replaceAll(\"\
  \\\\s+\", \"_\");\n        // Add underscores if there are more than 2 consecutive\
  \ spaces\n        text = text.replaceAll(\"  +\", \"_\");\n        // Replace consecutive\
  \ underscores with dashes\n        text = text.replaceAll(\"_+\", \"-\");\n    \
  \    return text;"
- '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");'
- "        String newText = text;\n        StringBuilder sb = new StringBuilder();\n\
  \        for (char ch : text.toCharArray()) {\n            if (ch == ' ') {\n  \
  \              sb.append(\"_\");\n            } else {\n                sb.append(ch);\n\
  \            }\n        }\n        if (sb.length() > 2) {\n            int count\
  \ = 0;\n            for (char ch : sb.toCharArray()) {\n                if (ch ==\
  \ ' ') {\n                    count++;\n                } else {\n             \
  \       count = 0;\n                }\n                if (count == 2) {\n     \
  \               sb.setCharAt(sb.length() - 1, '-');\n                }\n       \
  \     }\n        }\n        newText = sb.toString();\n        return newText;"
- "        String[] splits = text.split(\" \");\n        StringBuilder sb = new StringBuilder(splits[0]);\n\
  \        for(int i = 1; i < splits.length; i++) {\n            if(splits[i].equals(\"\
  \")) {\n                sb.append(splits[i - 1]);\n                sb.append(\"\
  _\");\n            } else if(splits[i-1].equals(\"\")) {\n                sb.append(splits[i]);\n\
  \            } else {\n                sb.append(splits[i-1]).append(\"_\").append(splits[i]);\n\
  \            }\n        }\n        return sb.toString();"
- "        String[] words = text.split(\" \");\n        Arrays.sort(words);\n    \
  \    String newWords = words.toString();\n        newWords = newWords.replaceAll(\"\
  \  +\", \"_\");\n        newWords = newWords.replaceAll(\"  \", \"_\");\n      \
  \  return newWords;"
- "        String result = text;\n        String pattern = \" +\";\n        Pattern\
  \ r = Pattern.compile(pattern);\n        Matcher m = r.matcher(result);\n      \
  \  while (m.find()) {\n            result = result.replace(m.group(), m.group().replace(\"\
  \  \", \"_\"));\n        }\n        return result;"
- "        // Initialize count\n        int count = 0;\n        // Iterate over all\
  \ characters in text\n        for (int i = 0; i < text.length(); i++) {\n      \
  \      // If character is space and count is 0 \n            if (text.charAt(i)\
  \ == ' ' && count == 0) {\n                // Replace character with underscore\n\
  \                text = text.replace(\"_\", \"_\", i);\n                // Increment\
  \ count by 1\n                count++;\n            } else if (text.charAt(i) ==\
  \ ' ' && count > 0) {\n                // Replace character with hyphen\n      \
  \          text = text.replace(\"_\", \"-\", i);\n                // Decrement count\
  \ by 1\n                count--;\n            }\n        }\n        // Return text\n\
  \        return text;"
- "        String fixed = text.replaceAll(\"\\\\s+\", \"_\");\n        fixed = fixed.replaceAll(\"\
  \\\\s+\", \"-\");\n        return fixed;"
- "        if (text.length() == 0) {\n            return text;\n        }\n      \
  \  return text.replaceAll(\"\\\\s+\", \" \").trim()\n            .stream()\n   \
  \         .map(c -> c.equals(\" \")? \"_\" : c)\n            .collect(Collectors.joining());"
- "        String result = \"\";\n        if (text == null) {\n            return\
  \ \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for\
  \ (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ')\
  \ {\n                sb.append(Character.toUpperCase(text.charAt(i))); // Replace\
  \ spaces with upper case\n            } else {\n                sb.append(text.charAt(i));\n\
  \            }\n        }\n        result = sb.toString();\n        int spacesBetweenLetters\
  \ = 0;\n        for (int i = 0; i < result.length(); i++) {\n            if (result.charAt(i)\
  \ == ' ') {\n                spacesBetweenLetters++;\n            }\n        }\n\
  \        if (spacesBetweenLetters > 2) {\n            result = result.replaceAll(\"\
  \  +\", \"_-\");\n        }\n        return result;"
- '        return text.replace(" ", "_").replaceAll("\\s{2,}", "-");'
- '        return text.replaceAll("\\s+", " ");'
- "        String[] words = text.split(\"\\\\s+\");\n        List<String> result =\
  \ new ArrayList<>(words.length);\n        for (String word : words) {\n        \
  \    word = word.replaceAll(\"\\\\s+\", \"_\");\n            if (word.equals(\"\"\
  )) {\n                result.add(\"\");\n            } else {\n                result.add(word);\n\
  \            }\n        }\n        return String.join(\"_\", result);"
- "        return text.replaceAll(\"\\\\s+\", \" \")\n            .replaceAll(\"(\
  \  +)\", \"_\");"
- "        String fixed = text.replaceAll(\"\\\\s+\", \"_\");\n        fixed = fixed.trim();\n\
  \        if (fixed.length() > 2 && fixed.trim().substring(0, 1).equals(\"_\")) {\n\
  \            fixed = fixed.substring(0, 1) + \"-\" + fixed.substring(1, fixed.length());\n\
  \        }\n        return fixed;"
- "        boolean allConsecutive = false;\n        StringBuilder sb = new StringBuilder();\n\
  \n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)\
  \ == ' ') {\n                if (allConsecutive) {\n                    sb.append(\"\
  -\");\n                }\n                allConsecutive = false;\n            }\
  \ else {\n                allConsecutive = true;\n            }\n\n            sb.append(text.charAt(i));\n\
  \        }\n\n        return sb.replace(\" \", \"-\");"
- "        String[] words = text.split(\" \");\n        StringBuilder stringBuilder\
  \ = new StringBuilder();\n        \n        boolean isFirst = true;\n        for(String\
  \ word : words) {\n            if(isFirst) {\n                isFirst = false;\n\
  \                stringBuilder.append(word);\n            } else {\n           \
  \     if(word.equals(\"\")) {\n                    continue;\n                }\n\
  \                stringBuilder.append(\" \").append(word);\n            }\n    \
  \    }\n        \n        for(int i = 0; i < stringBuilder.length() - 1; i++) {\n\
  \            if(stringBuilder.charAt(i) == ' ') {\n                stringBuilder.deleteCharAt(i);\n\
  \            }\n        }\n        \n        for(int i = 0; i < stringBuilder.length()\
  \ - 1; i++) {\n            if(stringBuilder.charAt(i) == ' ') {\n              \
  \  stringBuilder.deleteCharAt(i);\n            }\n        }\n        \n        return\
  \ stringBuilder.toString();"
- "        // Write your code here.\n        if (text == null) {\n            throw\
  \ new NullPointerException(\"text is null\");\n        }\n\n        // Replace all\
  \ spaces with underscores.\n        text = text.replaceAll(\" \", \"_\");\n\n  \
  \      // Replace consecutive spaces with -.\n        String result = \"\";\n  \
  \      String[] words = text.split(\" \");\n        for (int i = 0; i < words.length;\
  \ i++) {\n            String word = words[i];\n            if (i == 0) {\n     \
  \           result += word;\n                continue;\n            }\n        \
  \    if (word.equals(\"\")) {\n                result += word;\n               \
  \ continue;\n            }\n            if (word.equals(words[i - 1])) {\n     \
  \           result += word;\n                continue;\n            }\n        \
  \    if (word.equals(words[i - 1] + \"_\")) {\n                result += \"-\";\n\
  \                continue;\n            }\n            result += word;\n       \
  \ }\n        return result;"
- "        StringBuilder sb = new StringBuilder(text);\n        sb.replaceAll(\"\\\
  \\s+\", \"_\");\n        String lastSeenSpace = \" \";\n        for(char c : text.toCharArray())\n\
  \            if(lastSeenSpace == \" \")\n                sb.setCharAt(sb.length()\
  \ - 1, c == '\\n' ? ' ' : '-');\n            lastSeenSpace = c;\n        return\
  \ sb.toString();"
- "        // Your code goes here\n        StringBuilder str = new StringBuilder();\n\
  \        for(int i = 0; i < text.length(); i++){\n            if(text.charAt(i)\
  \ == ' ' && i != text.length() - 1){\n                str.append(text.charAt(i));\n\
  \                str.append(\" \");\n            }\n            else{\n        \
  \        str.append(text.charAt(i));\n            }\n        }\n        return str.toString();"
- "        return text.\n            replaceAll(\" \", \"_\").\n            replaceAll(\"\
  \\\\s{2,}\", \"-\");"
- "        String fixSpace = text.replaceAll(\"\\\\s+\", \"_\");\n        List<String>\
  \ list = Arrays.asList(fixSpace.split(\"_\"));\n        if (list.size() > 2) {\n\
  \            list.stream().map(String::toLowerCase).forEach(\n                 \
  \   str -> list.remove(str));\n            list.add(list.get(0) + \"-\" + list.get(1));\n\
  \        }\n        return list.get(0) + \"_\" + list.get(1);"
- "        String result = text.replaceAll(\" \", \"_\");\n        String result2\
  \ = \"\";\n        int lastSpace = 0;\n        StringBuilder sb = new StringBuilder(result);\n\
  \        while (sb.length() > 2) {\n            sb.deleteCharAt(sb.length() - 1);\n\
  \            lastSpace = sb.lastIndexOf(\" \");\n            if (lastSpace == -1)\
  \ {\n                result2 += \"_\" + sb.toString();\n            } else {\n \
  \               result2 += \"_\" + sb.substring(lastSpace + 1) + \"-\" + sb.substring(lastSpace\
  \ + 2);\n            }\n            sb.delete(0, sb.length() - 1);\n        }\n\
  \        if (sb.length() == 0) {\n            return result;\n        } else {\n\
  \            return result2;\n        }"
- "        Matcher m = Pattern.compile(\" \").matcher(text);\n        if (m.find())\
  \ \n            text = text.replace(\" \",\"_\");\n        Matcher m2 = Pattern.compile(\"\
  \\\\s{2,}\").matcher(text);\n        if (m2.find()) {\n            text = text.replace(\"\
  \ \",\"-\");\n        }\n        return text;"
- "        return text\n            .chars()\n            .mapToObj(i -> (char) i)\n\
  \            .filter(Character::isWhitespace)\n            .map(Character::toUpperCase)\n\
  \            .mapToObj(String::valueOf)\n            .filter(s -> !s.equals(\"\"\
  ) && s.length() > 2)\n            .map(s -> s.replaceAll(\"\\\\s+\", \"-\"))\n \
  \           .collect(Collectors.joining());"
- "        // First replace all spaces with underscores\n        String fixedText\
  \ = text.replaceAll(\"\\\\s+\", \"_\");\n        // If there are more than two consecutive\
  \ spaces,\n        // then replace all consecutive spaces with -\n        if (fixedText.contains(\"\
  ____\")) {\n            // Split text on dashes and remove spaces on both sides\n\
  \            String[] split = fixedText.split(\"-\");\n            fixedText = \"\
  \";\n            for (String s : split) {\n                fixedText += s.replaceAll(\"\
  \\\\s+\", \"-\");\n            }\n        }\n        return fixedText;"
- '        return text.replaceAll("\\s+", "_");'
- "        // Write your code here\n        return text.replaceAll(\" \",\"_\");"
- "        String[] arr = text.split(\" \");\n        for(int i = 0; i<arr.length;\
  \ i++) {\n            arr[i] = arr[i].substring(0, arr[i].length()-1);\n       \
  \ }\n        StringBuilder builder = new StringBuilder();\n        for(int i = 0;\
  \ i < arr.length; i++) {\n            builder.append(arr[i]);\n            if(i<arr.length-1\
  \ && arr[i].equals(arr[i+1])) {\n                builder.append('-');\n        \
  \    }\n        }\n        return builder.toString();"
- '        return text.replaceAll("\\s+", "_").replaceAll("\\s+", "-");'
- "        // Create a Pattern object to find spaces in the text\n        Pattern\
  \ spaces = Pattern.compile(\" \");\n        // Create a Pattern object to find two\
  \ consecutive spaces\n        Pattern two_spaces = Pattern.compile(\"  \");\n\n\
  \        // Match the text against the pattern\n        Matcher m = spaces.matcher(text);\n\
  \        // Create StringBuilder object that will hold the fixed text\n        StringBuilder\
  \ b = new StringBuilder();\n\n        while (m.find()) {\n            // Append\
  \ a space if the match is found\n            b.append(\" \");\n        }\n\n   \
  \     Matcher m1 = two_spaces.matcher(text);\n        while (m1.find()) {\n    \
  \        String str = text.substring(m1.start() + 1, m1.end());\n            b.append(str.substring(0,1));\n\
  \            b.append(str.substring(1));\n        }\n        // Return the fixed\
  \ text\n        return b.toString();"
- "        StringBuilder sb = new StringBuilder(text);\n        for(int i = 0; i <\
  \ sb.length(); i++){\n            if(Character.isWhitespace(sb.charAt(i))){\n  \
  \              sb.insert(i, '_');\n            }\n            if(sb.length() > 2\
  \ && i == sb.length() - 2 && Character.isWhitespace(sb.charAt(sb.length() - 1))){\n\
  \                sb.replace(sb.length() - 1, sb.length(), \"\");\n            }\n\
  \        }\n        return sb.toString();"
- "        StringBuilder builder = new StringBuilder();\n        Matcher m = Pattern.compile(\"\
  \\\\s+\").matcher(text);\n        while (m.find()) {\n            builder.append(m.group(1)\
  \ + '_');\n        }\n        if (builder.length() > text.length())\n          \
  \  builder.delete(text.length(), builder.length());\n        return builder.toString();"
- "        if (text == null) {\n            return \"\";\n        }\n        String\
  \ result = text;\n        boolean more = true;\n        do {\n            result\
  \ = result.replaceAll(\"\\\\s+\", \" \");\n            more = false;\n        }\
  \ while (result.contains(\" \") && more);\n        return result;"
- "        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        return\
  \ fixedText.length() > 2 ? fixedText.replaceAll(\" +\", \"-\") : fixedText;"
- "        StringBuilder fixed = new StringBuilder();\n        boolean first = true;\n\
  \n        for(int i = 0; i < text.length(); ++i) {\n            char c = text.charAt(i);\n\
  \            if(Character.isSpaceChar(c)) {\n                if(first) {\n     \
  \               fixed.append('_');\n                    first = false;\n       \
  \         }\n                else {\n                    fixed.append('-');\n  \
  \              }\n            }\n            else {\n                fixed.append(c);\n\
  \            }\n        }\n        return fixed.toString();"
- "        String fixed_text = \"\";\n        int space_count = text.length();\n \
  \       for (int i = 0; i < space_count; i++) {\n            char c = text.charAt(i);\n\
  \            if (c == ' ') {\n                fixed_text += \"_\";\n           \
  \ } else {\n                fixed_text += c;\n            }\n        }\n       \
  \ return fixed_text;"
- "        String[] arr = text.split(\" \");\n        if (arr.length == 0)\n     \
  \       return \"\";\n        StringBuilder buf = new StringBuilder();\n       \
  \ boolean first = true;\n        for (String s : arr) {\n            if (s.length()\
  \ > 2)\n                buf.append(s.replaceAll(\" \", \"_\"));\n            else\
  \ {\n                if (!first)\n                    buf.append(\"_\");\n     \
  \           buf.append(s);\n            }\n            first = false;\n        }\n\
  \        if (buf.length() == 0)\n            return \"\";\n        return buf.toString();"
- "        String result = text;\n\n        List<String> words = Arrays.asList(result.split(\"\
  \ \"));\n\n        for (int i = 0; i < words.size(); i++) {\n            String\
  \ word = words.get(i);\n\n            while (word.equals(\" \")) {\n           \
  \     result = result.replaceFirst(\" \", \"_\");\n                result = result.replaceFirst(\"\
  \ \", \"_\");\n                word = words.get(i);\n                i++;\n    \
  \        }\n\n            if (word.equals(\" \")) {\n                result = result.replaceFirst(\"\
  \ \", \"_\");\n                word = words.get(i);\n                i++;\n    \
  \        }\n        }\n\n        return result;"
- "        String[] words = text.split(\" \");\n        StringBuilder result = new\
  \ StringBuilder();\n        Arrays.stream(words).forEach( w -> {\n            if\
  \ (w != null && !w.equals(\"\")) {\n                result.append(w);\n        \
  \        result.append('_');\n            }\n        });\n        if (text.length()\
  \ > 0) {\n            result.deleteCharAt(text.length() - 1);\n        }\n     \
  \   return result.toString();"
- "        String[] tokens = text.split(\" \");\n        StringBuilder builder = new\
  \ StringBuilder(\"\");\n        for(String token : tokens) {\n            builder.append(token.replaceAll(\"\
  \\\\s+\", \"-\"));\n            builder.append(\" \");\n        }\n        return\
  \ builder.toString();"
- "        boolean cont = false;\n        return text.replaceAll(\"\\\\s+\", s ->\
  \ {\n            if (!cont) {\n                cont = true;\n                return\
  \ \"_\";\n            }\n            return s;\n        });"
- '        return text.replaceAll("\\s+", "_").replaceAll("\\s+", "_");'
- "        if (text == null)\n            return null;\n        StringBuilder fixed\
  \ = new StringBuilder();\n        boolean wasSpace = false;\n        boolean wasConsecutiveSpace\
  \ = false;\n        for (int i = 0; i < text.length(); i++) {\n            char\
  \ c = text.charAt(i);\n            if (c == ' ') {\n                if (!wasSpace)\
  \ {\n                    fixed.append(c);\n                    wasSpace = true;\n\
  \                } else if (wasConsecutiveSpace) {\n                    fixed.append(c);\n\
  \                } else {\n                    fixed.append(Character.toUpperCase(c));\n\
  \                    wasConsecutiveSpace = true;\n                }\n          \
  \  } else if (!wasSpace && c != ' ') {\n                fixed.append(c);\n     \
  \           wasSpace = false;\n                wasConsecutiveSpace = false;\n  \
  \          }\n        }\n        if (wasSpace) {\n            fixed.append(c);\n\
  \        }\n        return fixed.toString();"
- "        String[] s = text.split(\" \");\n        List<String> list = new ArrayList<>();\n\
  \        for (int i = 0; i < s.length; i++) {\n            list.add(s[i]);\n   \
  \     }\n        StringBuilder result = new StringBuilder();\n        for (int i\
  \ = 0; i < list.size(); i++) {\n            if (i > 0 && i < list.size() - 1) {\n\
  \                result.append(list.get(i));\n                result.append(list.get(i\
  \ + 1));\n            } else if (i == list.size() - 1) {\n                result.append(list.get(i));\n\
  \            } else if (i == list.size() - 2) {\n                result.append(list.get(i));\n\
  \                result.append(\"_\");\n            } else {\n                result.append(list.get(i));\n\
  \                result.append(\"_\");\n            }\n        }\n        return\
  \ result.toString();"
- '        return text.replaceAll("\\s+", "_");'
- '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");'
- '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");'
- "        int i=0, j=0, k=0;\n        boolean isConsecutiveSpace=false;\n       \
  \ while (i < text.length()){\n            // Handle the whitespace at the beginning\n\
  \            if (text.charAt(i) == ' ') {\n                isConsecutiveSpace =\
  \ false;\n                i++;\n            }\n            else {\n            \
  \    isConsecutiveSpace = true;\n            }\n            // Handle all other\
  \ characters\n            while (j < text.length() && text.charAt(j) == ' '){\n\
  \                isConsecutiveSpace = true;\n                j++;\n            }\n\
  \n            if (isConsecutiveSpace){\n                text = \"_\" + text;\n \
  \               k++;\n                isConsecutiveSpace=false;\n            }\n\
  \            else {\n                text += \"_\";\n                k++;\n    \
  \        }\n            i++;\n            j=0;\n        }\n        return text;"
- "        String newText = text.replaceAll(\"\\\\s+\",\"_\");\n        int len =\
  \ newText.length();\n        if (newText.length() >= 2) {\n            newText =\
  \ newText.replaceAll(\"\\\\s+\",\"-\");\n        }\n        return newText;"
- "        // Write your code here.\n        return text.replaceAll(\"\\\\s+\", \"\
  _\");"
- "        StringBuffer sb = new StringBuffer();\n        String[] words = text.split(\"\
  \ \");\n        boolean replaced = false;\n        for (int i = 0; i < words.length;\
  \ i++) {\n            if (replaced || !words[i].isEmpty()) {\n                sb.append(words[i]);\n\
  \                replaced = false;\n            }\n            if (i == words.length\
  \ - 1 && i == words.length - 2 && words[i].isEmpty()) {\n                sb.append(words[i]);\n\
  \            }\n            if (words[i].equalsIgnoreCase(\"  \")) {\n         \
  \       sb.append(words[i]).append(\"_\");\n            }\n        }\n        return\
  \ sb.toString();"
- "        int spaceCount = 0;\n        int startPos = 0;\n        while ((startPos\
  \ = text.indexOf(\" \", startPos)) >= 0) {\n            spaceCount++;\n        \
  \    if (spaceCount > 1) {\n                text = text.substring(0, startPos) +\
  \ \"-\" + text.substring(startPos + 1);\n            }\n            startPos +=\
  \ 1;\n        }\n        return text;"
- "        text = text.replaceAll(\"\\\\s+\", \"_\");\n        int i = 0;\n      \
  \  while (i < text.length()) {\n            if (Character.isWhitespace(text.charAt(i)))\
  \ {\n                i += 2;\n            } else if (Character.isWhitespace(text.charAt(i)))\
  \ {\n                text = text.substring(0, i) + \"-\" + text.substring(i + 1);\n\
  \                i += 3;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return text;"
- '        return text.replace(" ", "_");'
- '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-").toLowerCase();'
- "        String[] words = text.split(\"\\\\s+\");\n        StringBuilder fixed =\
  \ new StringBuilder();\n        for(int i = 0; i<words.length; i++){\n         \
  \   if(!words[i].equals(\"\")) {\n                fixed.append(words[i].replaceAll(\"\
  \\\\s+\", \"_\"));\n            }\n            if(!(i+1)%2) {\n                fixed.append(\"\
  \ \");\n            }\n            else {\n                fixed.append(\" \");\n\
  \            }\n        }\n        return fixed.toString();"
- "        if (text == null) return \"\";\n        text = text.replaceAll(\"\\\\s+\"\
  , \"_\");\n        String[] tokens = text.split(\"\\\\s+\");\n        if (tokens.length\
  \ > 2) {\n            return text.replaceAll(\"\\\\s+\", \"-\");\n        }\n  \
  \      return text;"
- "        String result = \"\";\n        // Loop through the string and store all\
  \ spaces\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)\
  \ == ' ') {\n                result += text.substring(i, i + 1);\n            }\n\
  \        }\n        // If there are more than 2 spaces then replace all\n      \
  \  if (result.length() > 2) {\n            result = result.replace(' ', '-');\n\
  \        }\n        return result;"
- '        return text.replaceAll("\\s+", "_");'
- "        return text.replaceAll(\"\\\\s+\", \"_\")\n                   .replaceAll(\"\
  (^\\\\s+)|(\" + Pattern.quote(\" \") +\n                   Pattern.quote(\"$\")\
  \ + \"|\\\\s+(?=\\\\s|$)\", \"_\");"
- '        return text.replaceAll("\\s+","_").replaceAll("\\s{2,}","-");'
- '        return text.replaceAll("\\s+", "_");'
- "        if (text.length() <= 2)\n            return text;\n        String newText\
  \ = text.replaceAll(\" \", \"_\");\n        newText = newText.replaceAll(\"_ {2,}\"\
  , \"-\");\n        return newText;"
- "        StringBuilder result = new StringBuilder();\n        // Iterate over the\
  \ characters of the string.\n        for (char c : text.toCharArray()) {\n     \
  \       // If the character is a space, append an underscore.\n            if (c\
  \ == ' ') {\n                result.append(c);\n            } \n            // Otherwise,\
  \ if the character is a space, or if the current \n            // character is also\
  \ a space, append a single underscore.\n            else if (c == ' ' || c == text.charAt(result.length()\
  \ - 1)) {\n                result.append(c);\n            } \n            // Otherwise,\
  \ append the current character.\n            else {\n                result.append(c);\n\
  \            }\n        }\n        return result.toString();"
- "        if (text.trim().isEmpty()) {\n            return text;\n        }\n   \
  \     \n        String[] arr = text.trim().replaceAll(\"\\\\s+\", \"_\").split(\"\
  _\");\n        return arr[0] == null ? text : arr[0];"
- "        StringBuilder buffer = new StringBuilder();\n        for (int i = 0; i\
  \ < text.length(); i++) {\n            char c = text.charAt(i);\n            if\
  \ (c == ' ')\n                buffer.append('_');\n            else if (i > 0 &&\
  \ text.charAt(i - 1) == ' ' && c == ' ')\n                buffer.append(\"-\");\n\
  \            else\n                buffer.append(c);\n        }\n        return\
  \ buffer.toString();"
- "        if(text == null) return \"\";\n        int start = 0, end = 0, count =\
  \ 1;\n        while(end < text.length() && Character.isWhitespace(text.charAt(end)))\
  \ {\n            end++;\n            count++;\n        }\n        if(count == 1)\
  \ return text;\n        while(end < text.length()) {\n            if(Character.isWhitespace(text.charAt(end)))\
  \ {\n                while(end < text.length() && Character.isWhitespace(text.charAt(end)))\
  \ {\n                    end++;\n                }\n                end = end;\n\
  \                while(end < text.length() && Character.isWhitespace(text.charAt(end)))\
  \ {\n                    end++;\n                    count--;\n                }\n\
  \                text = text.substring(0, start) + text.substring(end);\n      \
  \      } else {\n                end++;\n                count--;\n            }\n\
  \        }\n        return text;"
- '        return text.replaceAll("\\ ", "_").replaceAll("(?<=\\ )(\\s)+", " - ");'
- "        final StringBuilder sb = new StringBuilder();\n        // TODO: For Java\
  \ 8 & newer use StringJoiner\n        for (int i = 0; i < text.length(); i++) {\n\
  \            if (text.charAt(i) == ' ') {\n                sb.append(\"_\");\n \
  \           } else {\n                sb.append(text.charAt(i));\n            }\n\
  \        }\n        return sb.reverse().toString();"
- '        return text.replaceAll(" +", "_").replaceAll("( ){2,}", "-");'
- "        String result = \"\";\n        char[] chArr = text.toCharArray();\n   \
  \     for(int i = 0; i < chArr.length; i++) {\n            if(chArr[i] == ' ') {\n\
  \                result += '_';\n            } else {\n                result +=\
  \ chArr[i];\n            }\n        }\n        return result;"
- "        return text\n                .replaceAll(\"\\\\s+\", \"_\");"
language: java
name: HumanEval_140_fix_spaces
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // fix_spaces(\"Example\") == \"Example\"\n\
  \    // fix_spaces(\"Example 1\") == \"Example_1\"\n    // fix_spaces(\" Example\
  \ 2\") == \"_Example_2\"\n    // fix_spaces(\" Example   3\") == \"_Example-3\"\n\
  \    public static String fixSpaces(String text) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(fixSpaces((\"\
  Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
  Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
  Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
  Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
  )));\n    }\n\n}\n"
